/*! For license information please see main.90740d502c9e11bef262.js.LICENSE.txt */
(()=>{var e,t,n={648:(e,t,n)=>{"use strict";var r=n(584),o=n(257),i=o(r("String.prototype.indexOf"));e.exports=function(e,t){var n=r(e,!!t);return"function"==typeof n&&i(e,".prototype.")>-1?o(n):n}},257:(e,t,n)=>{"use strict";var r=n(597),o=n(584),i=o("%Function.prototype.apply%"),a=o("%Function.prototype.call%"),l=o("%Reflect.apply%",!0)||r.call(a,i),u=o("%Object.getOwnPropertyDescriptor%",!0),s=o("%Object.defineProperty%",!0),c=o("%Math.max%");if(s)try{s({},"a",{value:1})}catch(e){s=null}e.exports=function(e){var t=l(r,a,arguments);return u&&s&&u(t,"length").configurable&&s(t,"length",{value:1+c(0,e.length-(arguments.length-1))}),t};var f=function(){return l(r,i,arguments)};s?s(e.exports,"apply",{value:f}):e.exports.apply=f},703:(e,t,n)=>{var r;function o(e){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o(e)}!function(){"use strict";var i={}.hasOwnProperty;function a(){for(var e=[],t=0;t<arguments.length;t++){var n=arguments[t];if(n){var r=o(n);if("string"===r||"number"===r)e.push(n);else if(Array.isArray(n)){if(n.length){var l=a.apply(null,n);l&&e.push(l)}}else if("object"===r){if(n.toString!==Object.prototype.toString&&!n.toString.toString().includes("[native code]")){e.push(n.toString());continue}for(var u in n)i.call(n,u)&&n[u]&&e.push(u)}}}return e.join(" ")}e.exports?(a.default=a,e.exports=a):"object"===o(n.amdO)&&n.amdO?void 0===(r=function(){return a}.apply(t,[]))||(e.exports=r):window.classNames=a}()},193:e=>{"use strict";var t="Function.prototype.bind called on incompatible ",n=Array.prototype.slice,r=Object.prototype.toString,o="[object Function]";e.exports=function(e){var i=this;if("function"!=typeof i||r.call(i)!==o)throw new TypeError(t+i);for(var a,l=n.call(arguments,1),u=Math.max(0,i.length-l.length),s=[],c=0;c<u;c++)s.push("$"+c);if(a=Function("binder","return function ("+s.join(",")+"){ return binder.apply(this,arguments); }")((function(){if(this instanceof a){var t=i.apply(this,l.concat(n.call(arguments)));return Object(t)===t?t:this}return i.apply(e,l.concat(n.call(arguments)))})),i.prototype){var f=function(){};f.prototype=i.prototype,a.prototype=new f,f.prototype=null}return a}},597:(e,t,n)=>{"use strict";var r=n(193);e.exports=Function.prototype.bind||r},584:(e,t,n)=>{"use strict";function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}var o,i=SyntaxError,a=Function,l=TypeError,u=function(e){try{return a('"use strict"; return ('+e+").constructor;")()}catch(e){}},s=Object.getOwnPropertyDescriptor;if(s)try{s({},"")}catch(e){s=null}var c=function(){throw new l},f=s?function(){try{return c}catch(e){try{return s(arguments,"callee").get}catch(e){return c}}}():c,d=n(563)(),p=Object.getPrototypeOf||function(e){return e.__proto__},h={},y="undefined"==typeof Uint8Array?o:p(Uint8Array),v={"%AggregateError%":"undefined"==typeof AggregateError?o:AggregateError,"%Array%":Array,"%ArrayBuffer%":"undefined"==typeof ArrayBuffer?o:ArrayBuffer,"%ArrayIteratorPrototype%":d?p([][Symbol.iterator]()):o,"%AsyncFromSyncIteratorPrototype%":o,"%AsyncFunction%":h,"%AsyncGenerator%":h,"%AsyncGeneratorFunction%":h,"%AsyncIteratorPrototype%":h,"%Atomics%":"undefined"==typeof Atomics?o:Atomics,"%BigInt%":"undefined"==typeof BigInt?o:BigInt,"%BigInt64Array%":"undefined"==typeof BigInt64Array?o:BigInt64Array,"%BigUint64Array%":"undefined"==typeof BigUint64Array?o:BigUint64Array,"%Boolean%":Boolean,"%DataView%":"undefined"==typeof DataView?o:DataView,"%Date%":Date,"%decodeURI%":decodeURI,"%decodeURIComponent%":decodeURIComponent,"%encodeURI%":encodeURI,"%encodeURIComponent%":encodeURIComponent,"%Error%":Error,"%eval%":eval,"%EvalError%":EvalError,"%Float32Array%":"undefined"==typeof Float32Array?o:Float32Array,"%Float64Array%":"undefined"==typeof Float64Array?o:Float64Array,"%FinalizationRegistry%":"undefined"==typeof FinalizationRegistry?o:FinalizationRegistry,"%Function%":a,"%GeneratorFunction%":h,"%Int8Array%":"undefined"==typeof Int8Array?o:Int8Array,"%Int16Array%":"undefined"==typeof Int16Array?o:Int16Array,"%Int32Array%":"undefined"==typeof Int32Array?o:Int32Array,"%isFinite%":isFinite,"%isNaN%":isNaN,"%IteratorPrototype%":d?p(p([][Symbol.iterator]())):o,"%JSON%":"object"===("undefined"==typeof JSON?"undefined":r(JSON))?JSON:o,"%Map%":"undefined"==typeof Map?o:Map,"%MapIteratorPrototype%":"undefined"!=typeof Map&&d?p((new Map)[Symbol.iterator]()):o,"%Math%":Math,"%Number%":Number,"%Object%":Object,"%parseFloat%":parseFloat,"%parseInt%":parseInt,"%Promise%":"undefined"==typeof Promise?o:Promise,"%Proxy%":"undefined"==typeof Proxy?o:Proxy,"%RangeError%":RangeError,"%ReferenceError%":ReferenceError,"%Reflect%":"undefined"==typeof Reflect?o:Reflect,"%RegExp%":RegExp,"%Set%":"undefined"==typeof Set?o:Set,"%SetIteratorPrototype%":"undefined"!=typeof Set&&d?p((new Set)[Symbol.iterator]()):o,"%SharedArrayBuffer%":"undefined"==typeof SharedArrayBuffer?o:SharedArrayBuffer,"%String%":String,"%StringIteratorPrototype%":d?p(""[Symbol.iterator]()):o,"%Symbol%":d?Symbol:o,"%SyntaxError%":i,"%ThrowTypeError%":f,"%TypedArray%":y,"%TypeError%":l,"%Uint8Array%":"undefined"==typeof Uint8Array?o:Uint8Array,"%Uint8ClampedArray%":"undefined"==typeof Uint8ClampedArray?o:Uint8ClampedArray,"%Uint16Array%":"undefined"==typeof Uint16Array?o:Uint16Array,"%Uint32Array%":"undefined"==typeof Uint32Array?o:Uint32Array,"%URIError%":URIError,"%WeakMap%":"undefined"==typeof WeakMap?o:WeakMap,"%WeakRef%":"undefined"==typeof WeakRef?o:WeakRef,"%WeakSet%":"undefined"==typeof WeakSet?o:WeakSet};try{null.error}catch(e){var m=p(p(e));v["%Error.prototype%"]=m}var g=function e(t){var n;if("%AsyncFunction%"===t)n=u("async function () {}");else if("%GeneratorFunction%"===t)n=u("function* () {}");else if("%AsyncGeneratorFunction%"===t)n=u("async function* () {}");else if("%AsyncGenerator%"===t){var r=e("%AsyncGeneratorFunction%");r&&(n=r.prototype)}else if("%AsyncIteratorPrototype%"===t){var o=e("%AsyncGenerator%");o&&(n=p(o.prototype))}return v[t]=n,n},b={"%ArrayBufferPrototype%":["ArrayBuffer","prototype"],"%ArrayPrototype%":["Array","prototype"],"%ArrayProto_entries%":["Array","prototype","entries"],"%ArrayProto_forEach%":["Array","prototype","forEach"],"%ArrayProto_keys%":["Array","prototype","keys"],"%ArrayProto_values%":["Array","prototype","values"],"%AsyncFunctionPrototype%":["AsyncFunction","prototype"],"%AsyncGenerator%":["AsyncGeneratorFunction","prototype"],"%AsyncGeneratorPrototype%":["AsyncGeneratorFunction","prototype","prototype"],"%BooleanPrototype%":["Boolean","prototype"],"%DataViewPrototype%":["DataView","prototype"],"%DatePrototype%":["Date","prototype"],"%ErrorPrototype%":["Error","prototype"],"%EvalErrorPrototype%":["EvalError","prototype"],"%Float32ArrayPrototype%":["Float32Array","prototype"],"%Float64ArrayPrototype%":["Float64Array","prototype"],"%FunctionPrototype%":["Function","prototype"],"%Generator%":["GeneratorFunction","prototype"],"%GeneratorPrototype%":["GeneratorFunction","prototype","prototype"],"%Int8ArrayPrototype%":["Int8Array","prototype"],"%Int16ArrayPrototype%":["Int16Array","prototype"],"%Int32ArrayPrototype%":["Int32Array","prototype"],"%JSONParse%":["JSON","parse"],"%JSONStringify%":["JSON","stringify"],"%MapPrototype%":["Map","prototype"],"%NumberPrototype%":["Number","prototype"],"%ObjectPrototype%":["Object","prototype"],"%ObjProto_toString%":["Object","prototype","toString"],"%ObjProto_valueOf%":["Object","prototype","valueOf"],"%PromisePrototype%":["Promise","prototype"],"%PromiseProto_then%":["Promise","prototype","then"],"%Promise_all%":["Promise","all"],"%Promise_reject%":["Promise","reject"],"%Promise_resolve%":["Promise","resolve"],"%RangeErrorPrototype%":["RangeError","prototype"],"%ReferenceErrorPrototype%":["ReferenceError","prototype"],"%RegExpPrototype%":["RegExp","prototype"],"%SetPrototype%":["Set","prototype"],"%SharedArrayBufferPrototype%":["SharedArrayBuffer","prototype"],"%StringPrototype%":["String","prototype"],"%SymbolPrototype%":["Symbol","prototype"],"%SyntaxErrorPrototype%":["SyntaxError","prototype"],"%TypedArrayPrototype%":["TypedArray","prototype"],"%TypeErrorPrototype%":["TypeError","prototype"],"%Uint8ArrayPrototype%":["Uint8Array","prototype"],"%Uint8ClampedArrayPrototype%":["Uint8ClampedArray","prototype"],"%Uint16ArrayPrototype%":["Uint16Array","prototype"],"%Uint32ArrayPrototype%":["Uint32Array","prototype"],"%URIErrorPrototype%":["URIError","prototype"],"%WeakMapPrototype%":["WeakMap","prototype"],"%WeakSetPrototype%":["WeakSet","prototype"]},_=n(597),w=n(380),S=_.call(Function.call,Array.prototype.concat),k=_.call(Function.apply,Array.prototype.splice),x=_.call(Function.call,String.prototype.replace),O=_.call(Function.call,String.prototype.slice),E=_.call(Function.call,RegExp.prototype.exec),P=/[^%.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|%$))/g,j=/\\(\\)?/g,C=function(e){var t=O(e,0,1),n=O(e,-1);if("%"===t&&"%"!==n)throw new i("invalid intrinsic syntax, expected closing `%`");if("%"===n&&"%"!==t)throw new i("invalid intrinsic syntax, expected opening `%`");var r=[];return x(e,P,(function(e,t,n,o){r[r.length]=n?x(o,j,"$1"):t||e})),r},A=function(e,t){var n,r=e;if(w(b,r)&&(r="%"+(n=b[r])[0]+"%"),w(v,r)){var o=v[r];if(o===h&&(o=g(r)),void 0===o&&!t)throw new l("intrinsic "+e+" exists, but is not available. Please file an issue!");return{alias:n,name:r,value:o}}throw new i("intrinsic "+e+" does not exist!")};e.exports=function(e,t){if("string"!=typeof e||0===e.length)throw new l("intrinsic name must be a non-empty string");if(arguments.length>1&&"boolean"!=typeof t)throw new l('"allowMissing" argument must be a boolean');if(null===E(/^%?[^%]*%?$/,e))throw new i("`%` may not be present anywhere but at the beginning and end of the intrinsic name");var n=C(e),r=n.length>0?n[0]:"",o=A("%"+r+"%",t),a=o.name,u=o.value,c=!1,f=o.alias;f&&(r=f[0],k(n,S([0,1],f)));for(var d=1,p=!0;d<n.length;d+=1){var h=n[d],y=O(h,0,1),m=O(h,-1);if(('"'===y||"'"===y||"`"===y||'"'===m||"'"===m||"`"===m)&&y!==m)throw new i("property names with quotes must have matching quotes");if("constructor"!==h&&p||(c=!0),w(v,a="%"+(r+="."+h)+"%"))u=v[a];else if(null!=u){if(!(h in u)){if(!t)throw new l("base intrinsic for "+e+" exists, but the property is not available.");return}if(s&&d+1>=n.length){var g=s(u,h);u=(p=!!g)&&"get"in g&&!("originalValue"in g.get)?g.get:u[h]}else p=w(u,h),u=u[h];p&&!c&&(v[a]=u)}}return u}},563:(e,t,n)=>{"use strict";function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}var o="undefined"!=typeof Symbol&&Symbol,i=n(956);e.exports=function(){return"function"==typeof o&&"function"==typeof Symbol&&"symbol"===r(o("foo"))&&"symbol"===r(Symbol("bar"))&&i()}},956:e=>{"use strict";function t(e){return t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},t(e)}e.exports=function(){if("function"!=typeof Symbol||"function"!=typeof Object.getOwnPropertySymbols)return!1;if("symbol"===t(Symbol.iterator))return!0;var e={},n=Symbol("test"),r=Object(n);if("string"==typeof n)return!1;if("[object Symbol]"!==Object.prototype.toString.call(n))return!1;if("[object Symbol]"!==Object.prototype.toString.call(r))return!1;for(n in e[n]=42,e)return!1;if("function"==typeof Object.keys&&0!==Object.keys(e).length)return!1;if("function"==typeof Object.getOwnPropertyNames&&0!==Object.getOwnPropertyNames(e).length)return!1;var o=Object.getOwnPropertySymbols(e);if(1!==o.length||o[0]!==n)return!1;if(!Object.prototype.propertyIsEnumerable.call(e,n))return!1;if("function"==typeof Object.getOwnPropertyDescriptor){var i=Object.getOwnPropertyDescriptor(e,n);if(42!==i.value||!0!==i.enumerable)return!1}return!0}},380:(e,t,n)=>{"use strict";var r=n(597);e.exports=r.call(Function.call,Object.prototype.hasOwnProperty)},291:(e,t,n)=>{function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}var o="function"==typeof Map&&Map.prototype,i=Object.getOwnPropertyDescriptor&&o?Object.getOwnPropertyDescriptor(Map.prototype,"size"):null,a=o&&i&&"function"==typeof i.get?i.get:null,l=o&&Map.prototype.forEach,u="function"==typeof Set&&Set.prototype,s=Object.getOwnPropertyDescriptor&&u?Object.getOwnPropertyDescriptor(Set.prototype,"size"):null,c=u&&s&&"function"==typeof s.get?s.get:null,f=u&&Set.prototype.forEach,d="function"==typeof WeakMap&&WeakMap.prototype?WeakMap.prototype.has:null,p="function"==typeof WeakSet&&WeakSet.prototype?WeakSet.prototype.has:null,h="function"==typeof WeakRef&&WeakRef.prototype?WeakRef.prototype.deref:null,y=Boolean.prototype.valueOf,v=Object.prototype.toString,m=Function.prototype.toString,g=String.prototype.match,b=String.prototype.slice,_=String.prototype.replace,w=String.prototype.toUpperCase,S=String.prototype.toLowerCase,k=RegExp.prototype.test,x=Array.prototype.concat,O=Array.prototype.join,E=Array.prototype.slice,P=Math.floor,j="function"==typeof BigInt?BigInt.prototype.valueOf:null,C=Object.getOwnPropertySymbols,A="function"==typeof Symbol&&"symbol"===r(Symbol.iterator)?Symbol.prototype.toString:null,T="function"==typeof Symbol&&"object"===r(Symbol.iterator),N="function"==typeof Symbol&&Symbol.toStringTag&&(r(Symbol.toStringTag),1)?Symbol.toStringTag:null,L=Object.prototype.propertyIsEnumerable,R=("function"==typeof Reflect?Reflect.getPrototypeOf:Object.getPrototypeOf)||([].__proto__===Array.prototype?function(e){return e.__proto__}:null);function D(e,t){if(e===1/0||e===-1/0||e!=e||e&&e>-1e3&&e<1e3||k.call(/e/,t))return t;var n=/[0-9](?=(?:[0-9]{3})+(?![0-9]))/g;if("number"==typeof e){var r=e<0?-P(-e):P(e);if(r!==e){var o=String(r),i=b.call(t,o.length+1);return _.call(o,n,"$&_")+"."+_.call(_.call(i,/([0-9]{3})/g,"$&_"),/_$/,"")}}return _.call(t,n,"$&_")}var I=n(654),M=I.custom,F=W(M)?M:null;function U(e,t,n){var r="double"===(n.quoteStyle||t)?'"':"'";return r+e+r}function z(e){return _.call(String(e),/"/g,"&quot;")}function B(e){return!("[object Array]"!==q(e)||N&&"object"===r(e)&&N in e)}function V(e){return!("[object RegExp]"!==q(e)||N&&"object"===r(e)&&N in e)}function W(e){if(T)return e&&"object"===r(e)&&e instanceof Symbol;if("symbol"===r(e))return!0;if(!e||"object"!==r(e)||!A)return!1;try{return A.call(e),!0}catch(e){}return!1}e.exports=function e(t,n,o,i){var u=n||{};if(H(u,"quoteStyle")&&"single"!==u.quoteStyle&&"double"!==u.quoteStyle)throw new TypeError('option "quoteStyle" must be "single" or "double"');if(H(u,"maxStringLength")&&("number"==typeof u.maxStringLength?u.maxStringLength<0&&u.maxStringLength!==1/0:null!==u.maxStringLength))throw new TypeError('option "maxStringLength", if provided, must be a positive integer, Infinity, or `null`');var s=!H(u,"customInspect")||u.customInspect;if("boolean"!=typeof s&&"symbol"!==s)throw new TypeError("option \"customInspect\", if provided, must be `true`, `false`, or `'symbol'`");if(H(u,"indent")&&null!==u.indent&&"\t"!==u.indent&&!(parseInt(u.indent,10)===u.indent&&u.indent>0))throw new TypeError('option "indent" must be "\\t", an integer > 0, or `null`');if(H(u,"numericSeparator")&&"boolean"!=typeof u.numericSeparator)throw new TypeError('option "numericSeparator", if provided, must be `true` or `false`');var v=u.numericSeparator;if(void 0===t)return"undefined";if(null===t)return"null";if("boolean"==typeof t)return t?"true":"false";if("string"==typeof t)return K(t,u);if("number"==typeof t){if(0===t)return 1/0/t>0?"0":"-0";var w=String(t);return v?D(t,w):w}if("bigint"==typeof t){var k=String(t)+"n";return v?D(t,k):k}var P=void 0===u.depth?5:u.depth;if(void 0===o&&(o=0),o>=P&&P>0&&"object"===r(t))return B(t)?"[Array]":"[Object]";var C,M=function(e,t){var n;if("\t"===e.indent)n="\t";else{if(!("number"==typeof e.indent&&e.indent>0))return null;n=O.call(Array(e.indent+1)," ")}return{base:n,prev:O.call(Array(t+1),n)}}(u,o);if(void 0===i)i=[];else if(G(i,t)>=0)return"[Circular]";function $(t,n,r){if(n&&(i=E.call(i)).push(n),r){var a={depth:u.depth};return H(u,"quoteStyle")&&(a.quoteStyle=u.quoteStyle),e(t,a,o+1,i)}return e(t,u,o+1,i)}if("function"==typeof t&&!V(t)){var Q=function(e){if(e.name)return e.name;var t=g.call(m.call(e),/^function\s*([\w$]+)/);return t?t[1]:null}(t),te=ee(t,$);return"[Function"+(Q?": "+Q:" (anonymous)")+"]"+(te.length>0?" { "+O.call(te,", ")+" }":"")}if(W(t)){var ne=T?_.call(String(t),/^(Symbol\(.*\))_[^)]*$/,"$1"):A.call(t);return"object"!==r(t)||T?ne:Y(ne)}if((C=t)&&"object"===r(C)&&("undefined"!=typeof HTMLElement&&C instanceof HTMLElement||"string"==typeof C.nodeName&&"function"==typeof C.getAttribute)){for(var re="<"+S.call(String(t.nodeName)),oe=t.attributes||[],ie=0;ie<oe.length;ie++)re+=" "+oe[ie].name+"="+U(z(oe[ie].value),"double",u);return re+=">",t.childNodes&&t.childNodes.length&&(re+="..."),re+"</"+S.call(String(t.nodeName))+">"}if(B(t)){if(0===t.length)return"[]";var ae=ee(t,$);return M&&!function(e){for(var t=0;t<e.length;t++)if(G(e[t],"\n")>=0)return!1;return!0}(ae)?"["+Z(ae,M)+"]":"[ "+O.call(ae,", ")+" ]"}if(function(e){return!("[object Error]"!==q(e)||N&&"object"===r(e)&&N in e)}(t)){var le=ee(t,$);return"cause"in Error.prototype||!("cause"in t)||L.call(t,"cause")?0===le.length?"["+String(t)+"]":"{ ["+String(t)+"] "+O.call(le,", ")+" }":"{ ["+String(t)+"] "+O.call(x.call("[cause]: "+$(t.cause),le),", ")+" }"}if("object"===r(t)&&s){if(F&&"function"==typeof t[F]&&I)return I(t,{depth:P-o});if("symbol"!==s&&"function"==typeof t.inspect)return t.inspect()}if(function(e){if(!a||!e||"object"!==r(e))return!1;try{a.call(e);try{c.call(e)}catch(e){return!0}return e instanceof Map}catch(e){}return!1}(t)){var ue=[];return l&&l.call(t,(function(e,n){ue.push($(n,t,!0)+" => "+$(e,t))})),X("Map",a.call(t),ue,M)}if(function(e){if(!c||!e||"object"!==r(e))return!1;try{c.call(e);try{a.call(e)}catch(e){return!0}return e instanceof Set}catch(e){}return!1}(t)){var se=[];return f&&f.call(t,(function(e){se.push($(e,t))})),X("Set",c.call(t),se,M)}if(function(e){if(!d||!e||"object"!==r(e))return!1;try{d.call(e,d);try{p.call(e,p)}catch(e){return!0}return e instanceof WeakMap}catch(e){}return!1}(t))return J("WeakMap");if(function(e){if(!p||!e||"object"!==r(e))return!1;try{p.call(e,p);try{d.call(e,d)}catch(e){return!0}return e instanceof WeakSet}catch(e){}return!1}(t))return J("WeakSet");if(function(e){if(!h||!e||"object"!==r(e))return!1;try{return h.call(e),!0}catch(e){}return!1}(t))return J("WeakRef");if(function(e){return!("[object Number]"!==q(e)||N&&"object"===r(e)&&N in e)}(t))return Y($(Number(t)));if(function(e){if(!e||"object"!==r(e)||!j)return!1;try{return j.call(e),!0}catch(e){}return!1}(t))return Y($(j.call(t)));if(function(e){return!("[object Boolean]"!==q(e)||N&&"object"===r(e)&&N in e)}(t))return Y(y.call(t));if(function(e){return!("[object String]"!==q(e)||N&&"object"===r(e)&&N in e)}(t))return Y($(String(t)));if(!function(e){return!("[object Date]"!==q(e)||N&&"object"===r(e)&&N in e)}(t)&&!V(t)){var ce=ee(t,$),fe=R?R(t)===Object.prototype:t instanceof Object||t.constructor===Object,de=t instanceof Object?"":"null prototype",pe=!fe&&N&&Object(t)===t&&N in t?b.call(q(t),8,-1):de?"Object":"",he=(fe||"function"!=typeof t.constructor?"":t.constructor.name?t.constructor.name+" ":"")+(pe||de?"["+O.call(x.call([],pe||[],de||[]),": ")+"] ":"");return 0===ce.length?he+"{}":M?he+"{"+Z(ce,M)+"}":he+"{ "+O.call(ce,", ")+" }"}return String(t)};var $=Object.prototype.hasOwnProperty||function(e){return e in this};function H(e,t){return $.call(e,t)}function q(e){return v.call(e)}function G(e,t){if(e.indexOf)return e.indexOf(t);for(var n=0,r=e.length;n<r;n++)if(e[n]===t)return n;return-1}function K(e,t){if(e.length>t.maxStringLength){var n=e.length-t.maxStringLength,r="... "+n+" more character"+(n>1?"s":"");return K(b.call(e,0,t.maxStringLength),t)+r}return U(_.call(_.call(e,/(['\\])/g,"\\$1"),/[\x00-\x1f]/g,Q),"single",t)}function Q(e){var t=e.charCodeAt(0),n={8:"b",9:"t",10:"n",12:"f",13:"r"}[t];return n?"\\"+n:"\\x"+(t<16?"0":"")+w.call(t.toString(16))}function Y(e){return"Object("+e+")"}function J(e){return e+" { ? }"}function X(e,t,n,r){return e+" ("+t+") {"+(r?Z(n,r):O.call(n,", "))+"}"}function Z(e,t){if(0===e.length)return"";var n="\n"+t.prev+t.base;return n+O.call(e,","+n)+"\n"+t.prev}function ee(e,t){var n=B(e),r=[];if(n){r.length=e.length;for(var o=0;o<e.length;o++)r[o]=H(e,o)?t(e[o],e):""}var i,a="function"==typeof C?C(e):[];if(T){i={};for(var l=0;l<a.length;l++)i["$"+a[l]]=a[l]}for(var u in e)H(e,u)&&(n&&String(Number(u))===u&&u<e.length||T&&i["$"+u]instanceof Symbol||(k.call(/[^\w$]/,u)?r.push(t(u,e)+": "+t(e[u],e)):r.push(u+": "+t(e[u],e))));if("function"==typeof C)for(var s=0;s<a.length;s++)L.call(e,a[s])&&r.push("["+t(a[s])+"]: "+t(e[a[s]],e));return r}},280:e=>{"use strict";var t=String.prototype.replace,n=/%20/g,r="RFC3986";e.exports={default:r,formatters:{RFC1738:function(e){return t.call(e,n,"+")},RFC3986:function(e){return String(e)}},RFC1738:"RFC1738",RFC3986:r}},520:(e,t,n)=>{"use strict";var r=n(535),o=n(503),i=n(280);e.exports={formats:i,parse:o,stringify:r}},503:(e,t,n)=>{"use strict";var r=n(706),o=Object.prototype.hasOwnProperty,i=Array.isArray,a={allowDots:!1,allowPrototypes:!1,allowSparse:!1,arrayLimit:20,charset:"utf-8",charsetSentinel:!1,comma:!1,decoder:r.decode,delimiter:"&",depth:5,ignoreQueryPrefix:!1,interpretNumericEntities:!1,parameterLimit:1e3,parseArrays:!0,plainObjects:!1,strictNullHandling:!1},l=function(e){return e.replace(/&#(\d+);/g,(function(e,t){return String.fromCharCode(parseInt(t,10))}))},u=function(e,t){return e&&"string"==typeof e&&t.comma&&e.indexOf(",")>-1?e.split(","):e},s=function(e,t,n,r){if(e){var i=n.allowDots?e.replace(/\.([^.[]+)/g,"[$1]"):e,a=/(\[[^[\]]*])/g,l=n.depth>0&&/(\[[^[\]]*])/.exec(i),s=l?i.slice(0,l.index):i,c=[];if(s){if(!n.plainObjects&&o.call(Object.prototype,s)&&!n.allowPrototypes)return;c.push(s)}for(var f=0;n.depth>0&&null!==(l=a.exec(i))&&f<n.depth;){if(f+=1,!n.plainObjects&&o.call(Object.prototype,l[1].slice(1,-1))&&!n.allowPrototypes)return;c.push(l[1])}return l&&c.push("["+i.slice(l.index)+"]"),function(e,t,n,r){for(var o=r?t:u(t,n),i=e.length-1;i>=0;--i){var a,l=e[i];if("[]"===l&&n.parseArrays)a=[].concat(o);else{a=n.plainObjects?Object.create(null):{};var s="["===l.charAt(0)&&"]"===l.charAt(l.length-1)?l.slice(1,-1):l,c=parseInt(s,10);n.parseArrays||""!==s?!isNaN(c)&&l!==s&&String(c)===s&&c>=0&&n.parseArrays&&c<=n.arrayLimit?(a=[])[c]=o:"__proto__"!==s&&(a[s]=o):a={0:o}}o=a}return o}(c,t,n,r)}};e.exports=function(e,t){var n=function(e){if(!e)return a;if(null!==e.decoder&&void 0!==e.decoder&&"function"!=typeof e.decoder)throw new TypeError("Decoder has to be a function.");if(void 0!==e.charset&&"utf-8"!==e.charset&&"iso-8859-1"!==e.charset)throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var t=void 0===e.charset?a.charset:e.charset;return{allowDots:void 0===e.allowDots?a.allowDots:!!e.allowDots,allowPrototypes:"boolean"==typeof e.allowPrototypes?e.allowPrototypes:a.allowPrototypes,allowSparse:"boolean"==typeof e.allowSparse?e.allowSparse:a.allowSparse,arrayLimit:"number"==typeof e.arrayLimit?e.arrayLimit:a.arrayLimit,charset:t,charsetSentinel:"boolean"==typeof e.charsetSentinel?e.charsetSentinel:a.charsetSentinel,comma:"boolean"==typeof e.comma?e.comma:a.comma,decoder:"function"==typeof e.decoder?e.decoder:a.decoder,delimiter:"string"==typeof e.delimiter||r.isRegExp(e.delimiter)?e.delimiter:a.delimiter,depth:"number"==typeof e.depth||!1===e.depth?+e.depth:a.depth,ignoreQueryPrefix:!0===e.ignoreQueryPrefix,interpretNumericEntities:"boolean"==typeof e.interpretNumericEntities?e.interpretNumericEntities:a.interpretNumericEntities,parameterLimit:"number"==typeof e.parameterLimit?e.parameterLimit:a.parameterLimit,parseArrays:!1!==e.parseArrays,plainObjects:"boolean"==typeof e.plainObjects?e.plainObjects:a.plainObjects,strictNullHandling:"boolean"==typeof e.strictNullHandling?e.strictNullHandling:a.strictNullHandling}}(t);if(""===e||null==e)return n.plainObjects?Object.create(null):{};for(var c="string"==typeof e?function(e,t){var n,s={},c=t.ignoreQueryPrefix?e.replace(/^\?/,""):e,f=t.parameterLimit===1/0?void 0:t.parameterLimit,d=c.split(t.delimiter,f),p=-1,h=t.charset;if(t.charsetSentinel)for(n=0;n<d.length;++n)0===d[n].indexOf("utf8=")&&("utf8=%E2%9C%93"===d[n]?h="utf-8":"utf8=%26%2310003%3B"===d[n]&&(h="iso-8859-1"),p=n,n=d.length);for(n=0;n<d.length;++n)if(n!==p){var y,v,m=d[n],g=m.indexOf("]="),b=-1===g?m.indexOf("="):g+1;-1===b?(y=t.decoder(m,a.decoder,h,"key"),v=t.strictNullHandling?null:""):(y=t.decoder(m.slice(0,b),a.decoder,h,"key"),v=r.maybeMap(u(m.slice(b+1),t),(function(e){return t.decoder(e,a.decoder,h,"value")}))),v&&t.interpretNumericEntities&&"iso-8859-1"===h&&(v=l(v)),m.indexOf("[]=")>-1&&(v=i(v)?[v]:v),o.call(s,y)?s[y]=r.combine(s[y],v):s[y]=v}return s}(e,n):e,f=n.plainObjects?Object.create(null):{},d=Object.keys(c),p=0;p<d.length;++p){var h=d[p],y=s(h,c[h],n,"string"==typeof e);f=r.merge(f,y,n)}return!0===n.allowSparse?f:r.compact(f)}},535:(e,t,n)=>{"use strict";function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}var o=n(705),i=n(706),a=n(280),l=Object.prototype.hasOwnProperty,u={brackets:function(e){return e+"[]"},comma:"comma",indices:function(e,t){return e+"["+t+"]"},repeat:function(e){return e}},s=Array.isArray,c=String.prototype.split,f=Array.prototype.push,d=function(e,t){f.apply(e,s(t)?t:[t])},p=Date.prototype.toISOString,h=a.default,y={addQueryPrefix:!1,allowDots:!1,charset:"utf-8",charsetSentinel:!1,delimiter:"&",encode:!0,encoder:i.encode,encodeValuesOnly:!1,format:h,formatter:a.formatters[h],indices:!1,serializeDate:function(e){return p.call(e)},skipNulls:!1,strictNullHandling:!1},v={},m=function e(t,n,a,l,u,f,p,h,m,g,b,_,w,S,k,x){for(var O,E=t,P=x,j=0,C=!1;void 0!==(P=P.get(v))&&!C;){var A=P.get(t);if(j+=1,void 0!==A){if(A===j)throw new RangeError("Cyclic object value");C=!0}void 0===P.get(v)&&(j=0)}if("function"==typeof h?E=h(n,E):E instanceof Date?E=b(E):"comma"===a&&s(E)&&(E=i.maybeMap(E,(function(e){return e instanceof Date?b(e):e}))),null===E){if(u)return p&&!S?p(n,y.encoder,k,"key",_):n;E=""}if("string"==typeof(O=E)||"number"==typeof O||"boolean"==typeof O||"symbol"===r(O)||"bigint"==typeof O||i.isBuffer(E)){if(p){var T=S?n:p(n,y.encoder,k,"key",_);if("comma"===a&&S){for(var N=c.call(String(E),","),L="",R=0;R<N.length;++R)L+=(0===R?"":",")+w(p(N[R],y.encoder,k,"value",_));return[w(T)+(l&&s(E)&&1===N.length?"[]":"")+"="+L]}return[w(T)+"="+w(p(E,y.encoder,k,"value",_))]}return[w(n)+"="+w(String(E))]}var D,I=[];if(void 0===E)return I;if("comma"===a&&s(E))D=[{value:E.length>0?E.join(",")||null:void 0}];else if(s(h))D=h;else{var M=Object.keys(E);D=m?M.sort(m):M}for(var F=l&&s(E)&&1===E.length?n+"[]":n,U=0;U<D.length;++U){var z=D[U],B="object"===r(z)&&void 0!==z.value?z.value:E[z];if(!f||null!==B){var V=s(E)?"function"==typeof a?a(F,z):F:F+(g?"."+z:"["+z+"]");x.set(t,j);var W=o();W.set(v,x),d(I,e(B,V,a,l,u,f,p,h,m,g,b,_,w,S,k,W))}}return I};e.exports=function(e,t){var n,i=e,c=function(e){if(!e)return y;if(null!==e.encoder&&void 0!==e.encoder&&"function"!=typeof e.encoder)throw new TypeError("Encoder has to be a function.");var t=e.charset||y.charset;if(void 0!==e.charset&&"utf-8"!==e.charset&&"iso-8859-1"!==e.charset)throw new TypeError("The charset option must be either utf-8, iso-8859-1, or undefined");var n=a.default;if(void 0!==e.format){if(!l.call(a.formatters,e.format))throw new TypeError("Unknown format option provided.");n=e.format}var r=a.formatters[n],o=y.filter;return("function"==typeof e.filter||s(e.filter))&&(o=e.filter),{addQueryPrefix:"boolean"==typeof e.addQueryPrefix?e.addQueryPrefix:y.addQueryPrefix,allowDots:void 0===e.allowDots?y.allowDots:!!e.allowDots,charset:t,charsetSentinel:"boolean"==typeof e.charsetSentinel?e.charsetSentinel:y.charsetSentinel,delimiter:void 0===e.delimiter?y.delimiter:e.delimiter,encode:"boolean"==typeof e.encode?e.encode:y.encode,encoder:"function"==typeof e.encoder?e.encoder:y.encoder,encodeValuesOnly:"boolean"==typeof e.encodeValuesOnly?e.encodeValuesOnly:y.encodeValuesOnly,filter:o,format:n,formatter:r,serializeDate:"function"==typeof e.serializeDate?e.serializeDate:y.serializeDate,skipNulls:"boolean"==typeof e.skipNulls?e.skipNulls:y.skipNulls,sort:"function"==typeof e.sort?e.sort:null,strictNullHandling:"boolean"==typeof e.strictNullHandling?e.strictNullHandling:y.strictNullHandling}}(t);"function"==typeof c.filter?i=(0,c.filter)("",i):s(c.filter)&&(n=c.filter);var f,p=[];if("object"!==r(i)||null===i)return"";f=t&&t.arrayFormat in u?t.arrayFormat:t&&"indices"in t?t.indices?"indices":"repeat":"indices";var h=u[f];if(t&&"commaRoundTrip"in t&&"boolean"!=typeof t.commaRoundTrip)throw new TypeError("`commaRoundTrip` must be a boolean, or absent");var v="comma"===h&&t&&t.commaRoundTrip;n||(n=Object.keys(i)),c.sort&&n.sort(c.sort);for(var g=o(),b=0;b<n.length;++b){var _=n[b];c.skipNulls&&null===i[_]||d(p,m(i[_],_,h,v,c.strictNullHandling,c.skipNulls,c.encode?c.encoder:null,c.filter,c.sort,c.allowDots,c.serializeDate,c.format,c.formatter,c.encodeValuesOnly,c.charset,g))}var w=p.join(c.delimiter),S=!0===c.addQueryPrefix?"?":"";return c.charsetSentinel&&("iso-8859-1"===c.charset?S+="utf8=%26%2310003%3B&":S+="utf8=%E2%9C%93&"),w.length>0?S+w:""}},706:(e,t,n)=>{"use strict";function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}var o=n(280),i=Object.prototype.hasOwnProperty,a=Array.isArray,l=function(){for(var e=[],t=0;t<256;++t)e.push("%"+((t<16?"0":"")+t.toString(16)).toUpperCase());return e}(),u=function(e,t){for(var n=t&&t.plainObjects?Object.create(null):{},r=0;r<e.length;++r)void 0!==e[r]&&(n[r]=e[r]);return n};e.exports={arrayToObject:u,assign:function(e,t){return Object.keys(t).reduce((function(e,n){return e[n]=t[n],e}),e)},combine:function(e,t){return[].concat(e,t)},compact:function(e){for(var t=[{obj:{o:e},prop:"o"}],n=[],o=0;o<t.length;++o)for(var i=t[o],l=i.obj[i.prop],u=Object.keys(l),s=0;s<u.length;++s){var c=u[s],f=l[c];"object"===r(f)&&null!==f&&-1===n.indexOf(f)&&(t.push({obj:l,prop:c}),n.push(f))}return function(e){for(;e.length>1;){var t=e.pop(),n=t.obj[t.prop];if(a(n)){for(var r=[],o=0;o<n.length;++o)void 0!==n[o]&&r.push(n[o]);t.obj[t.prop]=r}}}(t),e},decode:function(e,t,n){var r=e.replace(/\+/g," ");if("iso-8859-1"===n)return r.replace(/%[0-9a-f]{2}/gi,unescape);try{return decodeURIComponent(r)}catch(e){return r}},encode:function(e,t,n,i,a){if(0===e.length)return e;var u=e;if("symbol"===r(e)?u=Symbol.prototype.toString.call(e):"string"!=typeof e&&(u=String(e)),"iso-8859-1"===n)return escape(u).replace(/%u[0-9a-f]{4}/gi,(function(e){return"%26%23"+parseInt(e.slice(2),16)+"%3B"}));for(var s="",c=0;c<u.length;++c){var f=u.charCodeAt(c);45===f||46===f||95===f||126===f||f>=48&&f<=57||f>=65&&f<=90||f>=97&&f<=122||a===o.RFC1738&&(40===f||41===f)?s+=u.charAt(c):f<128?s+=l[f]:f<2048?s+=l[192|f>>6]+l[128|63&f]:f<55296||f>=57344?s+=l[224|f>>12]+l[128|f>>6&63]+l[128|63&f]:(c+=1,f=65536+((1023&f)<<10|1023&u.charCodeAt(c)),s+=l[240|f>>18]+l[128|f>>12&63]+l[128|f>>6&63]+l[128|63&f])}return s},isBuffer:function(e){return!(!e||"object"!==r(e)||!(e.constructor&&e.constructor.isBuffer&&e.constructor.isBuffer(e)))},isRegExp:function(e){return"[object RegExp]"===Object.prototype.toString.call(e)},maybeMap:function(e,t){if(a(e)){for(var n=[],r=0;r<e.length;r+=1)n.push(t(e[r]));return n}return t(e)},merge:function e(t,n,o){if(!n)return t;if("object"!==r(n)){if(a(t))t.push(n);else{if(!t||"object"!==r(t))return[t,n];(o&&(o.plainObjects||o.allowPrototypes)||!i.call(Object.prototype,n))&&(t[n]=!0)}return t}if(!t||"object"!==r(t))return[t].concat(n);var l=t;return a(t)&&!a(n)&&(l=u(t,o)),a(t)&&a(n)?(n.forEach((function(n,a){if(i.call(t,a)){var l=t[a];l&&"object"===r(l)&&n&&"object"===r(n)?t[a]=e(l,n,o):t.push(n)}else t[a]=n})),t):Object.keys(n).reduce((function(t,r){var a=n[r];return i.call(t,r)?t[r]=e(t[r],a,o):t[r]=a,t}),l)}}},748:(e,t,n)=>{"use strict";function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}var o=n(466),i=n(767);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var l=new Set,u={};function s(e,t){c(e,t),c(e+"Capture",t)}function c(e,t){for(u[e]=t,e=0;e<t.length;e++)l.add(t[e])}var f=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),d=Object.prototype.hasOwnProperty,p=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,h={},y={};function v(e,t,n,r,o,i,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=o,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=a}var m={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){m[e]=new v(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];m[t]=new v(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){m[e]=new v(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){m[e]=new v(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){m[e]=new v(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){m[e]=new v(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){m[e]=new v(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){m[e]=new v(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){m[e]=new v(e,5,!1,e.toLowerCase(),null,!1,!1)}));var g=/[\-:]([a-z])/g;function b(e){return e[1].toUpperCase()}function _(e,t,n,o){var i=m.hasOwnProperty(t)?m[t]:null;(null!==i?0!==i.type:o||!(2<t.length)||"o"!==t[0]&&"O"!==t[0]||"n"!==t[1]&&"N"!==t[1])&&(function(e,t,n,o){if(null==t||function(e,t,n,o){if(null!==n&&0===n.type)return!1;switch(r(t)){case"function":case"symbol":return!0;case"boolean":return!o&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,o))return!0;if(o)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,i,o)&&(n=null),o||null===i?function(e){return!!d.call(y,e)||!d.call(h,e)&&(p.test(e)?y[e]=!0:(h[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):i.mustUseProperty?e[i.propertyName]=null===n?3!==i.type&&"":n:(t=i.attributeName,o=i.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(i=i.type)||4===i&&!0===n?"":""+n,o?e.setAttributeNS(o,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(g,b);m[t]=new v(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(g,b);m[t]=new v(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(g,b);m[t]=new v(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){m[e]=new v(e,1,!1,e.toLowerCase(),null,!1,!1)})),m.xlinkHref=new v("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){m[e]=new v(e,1,!1,e.toLowerCase(),null,!0,!0)}));var w=o.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,S=Symbol.for("react.element"),k=Symbol.for("react.portal"),x=Symbol.for("react.fragment"),O=Symbol.for("react.strict_mode"),E=Symbol.for("react.profiler"),P=Symbol.for("react.provider"),j=Symbol.for("react.context"),C=Symbol.for("react.forward_ref"),A=Symbol.for("react.suspense"),T=Symbol.for("react.suspense_list"),N=Symbol.for("react.memo"),L=Symbol.for("react.lazy");Symbol.for("react.scope"),Symbol.for("react.debug_trace_mode");var R=Symbol.for("react.offscreen");Symbol.for("react.legacy_hidden"),Symbol.for("react.cache"),Symbol.for("react.tracing_marker");var D=Symbol.iterator;function I(e){return null===e||"object"!==r(e)?null:"function"==typeof(e=D&&e[D]||e["@@iterator"])?e:null}var M,F=Object.assign;function U(e){if(void 0===M)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);M=t&&t[1]||""}return"\n"+M+e}var z=!1;function B(e,t){if(!e||z)return"";z=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"===("undefined"==typeof Reflect?"undefined":r(Reflect))&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var o=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){o=e}e.call(t.prototype)}else{try{throw Error()}catch(e){o=e}e()}}catch(t){if(t&&o&&"string"==typeof t.stack){for(var i=t.stack.split("\n"),a=o.stack.split("\n"),l=i.length-1,u=a.length-1;1<=l&&0<=u&&i[l]!==a[u];)u--;for(;1<=l&&0<=u;l--,u--)if(i[l]!==a[u]){if(1!==l||1!==u)do{if(l--,0>--u||i[l]!==a[u]){var s="\n"+i[l].replace(" at new "," at ");return e.displayName&&s.includes("<anonymous>")&&(s=s.replace("<anonymous>",e.displayName)),s}}while(1<=l&&0<=u);break}}}finally{z=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?U(e):""}function V(e){switch(e.tag){case 5:return U(e.type);case 16:return U("Lazy");case 13:return U("Suspense");case 19:return U("SuspenseList");case 0:case 2:case 15:return B(e.type,!1);case 11:return B(e.type.render,!1);case 1:return B(e.type,!0);default:return""}}function W(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case x:return"Fragment";case k:return"Portal";case E:return"Profiler";case O:return"StrictMode";case A:return"Suspense";case T:return"SuspenseList"}if("object"===r(e))switch(e.$$typeof){case j:return(e.displayName||"Context")+".Consumer";case P:return(e._context.displayName||"Context")+".Provider";case C:var t=e.render;return(e=e.displayName)||(e=""!==(e=t.displayName||t.name||"")?"ForwardRef("+e+")":"ForwardRef"),e;case N:return null!==(t=e.displayName||null)?t:W(e.type)||"Memo";case L:t=e._payload,e=e._init;try{return W(e(t))}catch(e){}}return null}function $(e){var t=e.type;switch(e.tag){case 24:return"Cache";case 9:return(t.displayName||"Context")+".Consumer";case 10:return(t._context.displayName||"Context")+".Provider";case 18:return"DehydratedFragment";case 11:return e=(e=t.render).displayName||e.name||"",t.displayName||(""!==e?"ForwardRef("+e+")":"ForwardRef");case 7:return"Fragment";case 5:return t;case 4:return"Portal";case 3:return"Root";case 6:return"Text";case 16:return W(t);case 8:return t===O?"StrictMode":"Mode";case 22:return"Offscreen";case 12:return"Profiler";case 21:return"Scope";case 13:return"Suspense";case 19:return"SuspenseList";case 25:return"TracingMarker";case 1:case 0:case 17:case 2:case 14:case 15:if("function"==typeof t)return t.displayName||t.name||null;if("string"==typeof t)return t}return null}function H(e){switch(r(e)){case"boolean":case"number":case"string":case"undefined":case"object":return e;default:return""}}function q(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function G(e){e._valueTracker||(e._valueTracker=function(e){var t=q(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var o=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return o.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function K(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=q(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Q(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Y(e,t){var n=t.checked;return F({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function J(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=H(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function X(e,t){null!=(t=t.checked)&&_(e,"checked",t,!1)}function Z(e,t){X(e,t);var n=H(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?te(e,t.type,n):t.hasOwnProperty("defaultValue")&&te(e,t.type,H(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function ee(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function te(e,t,n){"number"===t&&Q(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}var ne=Array.isArray;function re(e,t,n,r){if(e=e.options,t){t={};for(var o=0;o<n.length;o++)t["$"+n[o]]=!0;for(n=0;n<e.length;n++)o=t.hasOwnProperty("$"+e[n].value),e[n].selected!==o&&(e[n].selected=o),o&&r&&(e[n].defaultSelected=!0)}else{for(n=""+H(n),t=null,o=0;o<e.length;o++){if(e[o].value===n)return e[o].selected=!0,void(r&&(e[o].defaultSelected=!0));null!==t||e[o].disabled||(t=e[o])}null!==t&&(t.selected=!0)}}function oe(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return F({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ie(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(ne(n)){if(1<n.length)throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:H(n)}}function ae(e,t){var n=H(t.value),r=H(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function le(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}function ue(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function se(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?ue(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ce,fe,de=(fe=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((ce=ce||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ce.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return fe(e,t)}))}:fe);function pe(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var he={animationIterationCount:!0,aspectRatio:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},ye=["Webkit","ms","Moz","O"];function ve(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||he.hasOwnProperty(e)&&he[e]?(""+t).trim():t+"px"}function me(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),o=ve(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,o):e[n]=o}}Object.keys(he).forEach((function(e){ye.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),he[t]=he[e]}))}));var ge=F({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function be(e,t){if(t){if(ge[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!==r(t.dangerouslySetInnerHTML)||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!==r(t.style))throw Error(a(62))}}function _e(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var we=null;function Se(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var ke=null,xe=null,Oe=null;function Ee(e){if(e=wo(e)){if("function"!=typeof ke)throw Error(a(280));var t=e.stateNode;t&&(t=ko(t),ke(e.stateNode,e.type,t))}}function Pe(e){xe?Oe?Oe.push(e):Oe=[e]:xe=e}function je(){if(xe){var e=xe,t=Oe;if(Oe=xe=null,Ee(e),t)for(e=0;e<t.length;e++)Ee(t[e])}}function Ce(e,t){return e(t)}function Ae(){}var Te=!1;function Ne(e,t,n){if(Te)return e(t,n);Te=!0;try{return Ce(e,t,n)}finally{Te=!1,(null!==xe||null!==Oe)&&(Ae(),je())}}function Le(e,t){var n=e.stateNode;if(null===n)return null;var o=ko(n);if(null===o)return null;n=o[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(o=!o.disabled)||(o=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!o;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,r(n)));return n}var Re=!1;if(f)try{var De={};Object.defineProperty(De,"passive",{get:function(){Re=!0}}),window.addEventListener("test",De,De),window.removeEventListener("test",De,De)}catch(fe){Re=!1}function Ie(e,t,n,r,o,i,a,l,u){var s=Array.prototype.slice.call(arguments,3);try{t.apply(n,s)}catch(e){this.onError(e)}}var Me=!1,Fe=null,Ue=!1,ze=null,Be={onError:function(e){Me=!0,Fe=e}};function Ve(e,t,n,r,o,i,a,l,u){Me=!1,Fe=null,Ie.apply(Be,arguments)}function We(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(4098&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function $e(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function He(e){if(We(e)!==e)throw Error(a(188))}function qe(e){return null!==(e=function(e){var t=e.alternate;if(!t){if(null===(t=We(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var o=n.return;if(null===o)break;var i=o.alternate;if(null===i){if(null!==(r=o.return)){n=r;continue}break}if(o.child===i.child){for(i=o.child;i;){if(i===n)return He(o),e;if(i===r)return He(o),t;i=i.sibling}throw Error(a(188))}if(n.return!==r.return)n=o,r=i;else{for(var l=!1,u=o.child;u;){if(u===n){l=!0,n=o,r=i;break}if(u===r){l=!0,r=o,n=i;break}u=u.sibling}if(!l){for(u=i.child;u;){if(u===n){l=!0,n=i,r=o;break}if(u===r){l=!0,r=i,n=o;break}u=u.sibling}if(!l)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e))?Ge(e):null}function Ge(e){if(5===e.tag||6===e.tag)return e;for(e=e.child;null!==e;){var t=Ge(e);if(null!==t)return t;e=e.sibling}return null}var Ke=i.unstable_scheduleCallback,Qe=i.unstable_cancelCallback,Ye=i.unstable_shouldYield,Je=i.unstable_requestPaint,Xe=i.unstable_now,Ze=i.unstable_getCurrentPriorityLevel,et=i.unstable_ImmediatePriority,tt=i.unstable_UserBlockingPriority,nt=i.unstable_NormalPriority,rt=i.unstable_LowPriority,ot=i.unstable_IdlePriority,it=null,at=null,lt=Math.clz32?Math.clz32:function(e){return 0===(e>>>=0)?32:31-(ut(e)/st|0)|0},ut=Math.log,st=Math.LN2,ct=64,ft=4194304;function dt(e){switch(e&-e){case 1:return 1;case 2:return 2;case 4:return 4;case 8:return 8;case 16:return 16;case 32:return 32;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return 4194240&e;case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:return 130023424&e;case 134217728:return 134217728;case 268435456:return 268435456;case 536870912:return 536870912;case 1073741824:return 1073741824;default:return e}}function pt(e,t){var n=e.pendingLanes;if(0===n)return 0;var r=0,o=e.suspendedLanes,i=e.pingedLanes,a=268435455&n;if(0!==a){var l=a&~o;0!==l?r=dt(l):0!=(i&=a)&&(r=dt(i))}else 0!=(a=n&~o)?r=dt(a):0!==i&&(r=dt(i));if(0===r)return 0;if(0!==t&&t!==r&&0==(t&o)&&((o=r&-r)>=(i=t&-t)||16===o&&0!=(4194240&i)))return t;if(0!=(4&r)&&(r|=16&n),0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)o=1<<(n=31-lt(t)),r|=e[n],t&=~o;return r}function ht(e,t){switch(e){case 1:case 2:case 4:return t+250;case 8:case 16:case 32:case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:return t+5e3;default:return-1}}function yt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function vt(){var e=ct;return 0==(4194240&(ct<<=1))&&(ct=64),e}function mt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function gt(e,t,n){e.pendingLanes|=t,536870912!==t&&(e.suspendedLanes=0,e.pingedLanes=0),(e=e.eventTimes)[t=31-lt(t)]=n}function bt(e,t){var n=e.entangledLanes|=t;for(e=e.entanglements;n;){var r=31-lt(n),o=1<<r;o&t|e[r]&t&&(e[r]|=t),n&=~o}}var _t=0;function wt(e){return 1<(e&=-e)?4<e?0!=(268435455&e)?16:536870912:4:1}var St,kt,xt,Ot,Et,Pt=!1,jt=[],Ct=null,At=null,Tt=null,Nt=new Map,Lt=new Map,Rt=[],Dt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function It(e,t){switch(e){case"focusin":case"focusout":Ct=null;break;case"dragenter":case"dragleave":At=null;break;case"mouseover":case"mouseout":Tt=null;break;case"pointerover":case"pointerout":Nt.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":Lt.delete(t.pointerId)}}function Mt(e,t,n,r,o,i){return null===e||e.nativeEvent!==i?(e={blockedOn:t,domEventName:n,eventSystemFlags:r,nativeEvent:i,targetContainers:[o]},null!==t&&null!==(t=wo(t))&&kt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==o&&-1===t.indexOf(o)&&t.push(o),e)}function Ft(e){var t=_o(e.target);if(null!==t){var n=We(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=$e(n)))return e.blockedOn=t,void Et(e.priority,(function(){xt(n)}))}else if(3===t&&n.stateNode.current.memoizedState.isDehydrated)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function Ut(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Yt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=wo(n))&&kt(t),e.blockedOn=n,!1;var r=new(n=e.nativeEvent).constructor(n.type,n);we=r,n.target.dispatchEvent(r),we=null,t.shift()}return!0}function zt(e,t,n){Ut(e)&&n.delete(t)}function Bt(){Pt=!1,null!==Ct&&Ut(Ct)&&(Ct=null),null!==At&&Ut(At)&&(At=null),null!==Tt&&Ut(Tt)&&(Tt=null),Nt.forEach(zt),Lt.forEach(zt)}function Vt(e,t){e.blockedOn===t&&(e.blockedOn=null,Pt||(Pt=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,Bt)))}function Wt(e){function t(t){return Vt(t,e)}if(0<jt.length){Vt(jt[0],e);for(var n=1;n<jt.length;n++){var r=jt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==Ct&&Vt(Ct,e),null!==At&&Vt(At,e),null!==Tt&&Vt(Tt,e),Nt.forEach(t),Lt.forEach(t),n=0;n<Rt.length;n++)(r=Rt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<Rt.length&&null===(n=Rt[0]).blockedOn;)Ft(n),null===n.blockedOn&&Rt.shift()}var $t=w.ReactCurrentBatchConfig,Ht=!0;function qt(e,t,n,r){var o=_t,i=$t.transition;$t.transition=null;try{_t=1,Kt(e,t,n,r)}finally{_t=o,$t.transition=i}}function Gt(e,t,n,r){var o=_t,i=$t.transition;$t.transition=null;try{_t=4,Kt(e,t,n,r)}finally{_t=o,$t.transition=i}}function Kt(e,t,n,r){if(Ht){var o=Yt(e,t,n,r);if(null===o)Hr(e,t,r,Qt,n),It(e,r);else if(function(e,t,n,r,o){switch(t){case"focusin":return Ct=Mt(Ct,e,t,n,r,o),!0;case"dragenter":return At=Mt(At,e,t,n,r,o),!0;case"mouseover":return Tt=Mt(Tt,e,t,n,r,o),!0;case"pointerover":var i=o.pointerId;return Nt.set(i,Mt(Nt.get(i)||null,e,t,n,r,o)),!0;case"gotpointercapture":return i=o.pointerId,Lt.set(i,Mt(Lt.get(i)||null,e,t,n,r,o)),!0}return!1}(o,e,t,n,r))r.stopPropagation();else if(It(e,r),4&t&&-1<Dt.indexOf(e)){for(;null!==o;){var i=wo(o);if(null!==i&&St(i),null===(i=Yt(e,t,n,r))&&Hr(e,t,r,Qt,n),i===o)break;o=i}null!==o&&r.stopPropagation()}else Hr(e,t,r,null,n)}}var Qt=null;function Yt(e,t,n,r){if(Qt=null,null!==(e=_o(e=Se(r))))if(null===(t=We(e)))e=null;else if(13===(n=t.tag)){if(null!==(e=$e(t)))return e;e=null}else if(3===n){if(t.stateNode.current.memoizedState.isDehydrated)return 3===t.tag?t.stateNode.containerInfo:null;e=null}else t!==e&&(e=null);return Qt=e,null}function Jt(e){switch(e){case"cancel":case"click":case"close":case"contextmenu":case"copy":case"cut":case"auxclick":case"dblclick":case"dragend":case"dragstart":case"drop":case"focusin":case"focusout":case"input":case"invalid":case"keydown":case"keypress":case"keyup":case"mousedown":case"mouseup":case"paste":case"pause":case"play":case"pointercancel":case"pointerdown":case"pointerup":case"ratechange":case"reset":case"resize":case"seeked":case"submit":case"touchcancel":case"touchend":case"touchstart":case"volumechange":case"change":case"selectionchange":case"textInput":case"compositionstart":case"compositionend":case"compositionupdate":case"beforeblur":case"afterblur":case"beforeinput":case"blur":case"fullscreenchange":case"focus":case"hashchange":case"popstate":case"select":case"selectstart":return 1;case"drag":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"mousemove":case"mouseout":case"mouseover":case"pointermove":case"pointerout":case"pointerover":case"scroll":case"toggle":case"touchmove":case"wheel":case"mouseenter":case"mouseleave":case"pointerenter":case"pointerleave":return 4;case"message":switch(Ze()){case et:return 1;case tt:return 4;case nt:case rt:return 16;case ot:return 536870912;default:return 16}default:return 16}}var Xt=null,Zt=null,en=null;function tn(){if(en)return en;var e,t,n=Zt,r=n.length,o="value"in Xt?Xt.value:Xt.textContent,i=o.length;for(e=0;e<r&&n[e]===o[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===o[i-t];t++);return en=o.slice(e,1<t?1-t:void 0)}function nn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function rn(){return!0}function on(){return!1}function an(e){function t(t,n,r,o,i){for(var a in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=o,this.target=i,this.currentTarget=null,e)e.hasOwnProperty(a)&&(t=e[a],this[a]=t?t(o):o[a]);return this.isDefaultPrevented=(null!=o.defaultPrevented?o.defaultPrevented:!1===o.returnValue)?rn:on,this.isPropagationStopped=on,this}return F(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=rn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=rn)},persist:function(){},isPersistent:rn}),t}var ln,un,sn,cn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},fn=an(cn),dn=F({},cn,{view:0,detail:0}),pn=an(dn),hn=F({},dn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:En,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==sn&&(sn&&"mousemove"===e.type?(ln=e.screenX-sn.screenX,un=e.screenY-sn.screenY):un=ln=0,sn=e),ln)},movementY:function(e){return"movementY"in e?e.movementY:un}}),yn=an(hn),vn=an(F({},hn,{dataTransfer:0})),mn=an(F({},dn,{relatedTarget:0})),gn=an(F({},cn,{animationName:0,elapsedTime:0,pseudoElement:0})),bn=F({},cn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),_n=an(bn),wn=an(F({},cn,{data:0})),Sn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},kn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},xn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function On(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=xn[e])&&!!t[e]}function En(){return On}var Pn=F({},dn,{key:function(e){if(e.key){var t=Sn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=nn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?kn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:En,charCode:function(e){return"keypress"===e.type?nn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?nn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),jn=an(Pn),Cn=an(F({},hn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),An=an(F({},dn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:En})),Tn=an(F({},cn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Nn=F({},hn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Ln=an(Nn),Rn=[9,13,27,32],Dn=f&&"CompositionEvent"in window,In=null;f&&"documentMode"in document&&(In=document.documentMode);var Mn=f&&"TextEvent"in window&&!In,Fn=f&&(!Dn||In&&8<In&&11>=In),Un=String.fromCharCode(32),zn=!1;function Bn(e,t){switch(e){case"keyup":return-1!==Rn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Vn(e){return"object"===r(e=e.detail)&&"data"in e?e.data:null}var Wn=!1,$n={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Hn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!$n[e.type]:"textarea"===t}function qn(e,t,n,r){Pe(r),0<(t=Gr(t,"onChange")).length&&(n=new fn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Gn=null,Kn=null;function Qn(e){Ur(e,0)}function Yn(e){if(K(So(e)))return e}function Jn(e,t){if("change"===e)return t}var Xn=!1;if(f){var Zn;if(f){var er="oninput"in document;if(!er){var tr=document.createElement("div");tr.setAttribute("oninput","return;"),er="function"==typeof tr.oninput}Zn=er}else Zn=!1;Xn=Zn&&(!document.documentMode||9<document.documentMode)}function nr(){Gn&&(Gn.detachEvent("onpropertychange",rr),Kn=Gn=null)}function rr(e){if("value"===e.propertyName&&Yn(Kn)){var t=[];qn(t,Kn,e,Se(e)),Ne(Qn,t)}}function or(e,t,n){"focusin"===e?(nr(),Kn=n,(Gn=t).attachEvent("onpropertychange",rr)):"focusout"===e&&nr()}function ir(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Yn(Kn)}function ar(e,t){if("click"===e)return Yn(t)}function lr(e,t){if("input"===e||"change"===e)return Yn(t)}var ur="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t};function sr(e,t){if(ur(e,t))return!0;if("object"!==r(e)||null===e||"object"!==r(t)||null===t)return!1;var n=Object.keys(e),o=Object.keys(t);if(n.length!==o.length)return!1;for(o=0;o<n.length;o++){var i=n[o];if(!d.call(t,i)||!ur(e[i],t[i]))return!1}return!0}function cr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function fr(e,t){var n,r=cr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=cr(r)}}function dr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?dr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function pr(){for(var e=window,t=Q();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=Q((e=t.contentWindow).document)}return t}function hr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}function yr(e){var t=pr(),n=e.focusedElem,r=e.selectionRange;if(t!==n&&n&&n.ownerDocument&&dr(n.ownerDocument.documentElement,n)){if(null!==r&&hr(n))if(t=r.start,void 0===(e=r.end)&&(e=t),"selectionStart"in n)n.selectionStart=t,n.selectionEnd=Math.min(e,n.value.length);else if((e=(t=n.ownerDocument||document)&&t.defaultView||window).getSelection){e=e.getSelection();var o=n.textContent.length,i=Math.min(r.start,o);r=void 0===r.end?i:Math.min(r.end,o),!e.extend&&i>r&&(o=r,r=i,i=o),o=fr(n,i);var a=fr(n,r);o&&a&&(1!==e.rangeCount||e.anchorNode!==o.node||e.anchorOffset!==o.offset||e.focusNode!==a.node||e.focusOffset!==a.offset)&&((t=t.createRange()).setStart(o.node,o.offset),e.removeAllRanges(),i>r?(e.addRange(t),e.extend(a.node,a.offset)):(t.setEnd(a.node,a.offset),e.addRange(t)))}for(t=[],e=n;e=e.parentNode;)1===e.nodeType&&t.push({element:e,left:e.scrollLeft,top:e.scrollTop});for("function"==typeof n.focus&&n.focus(),n=0;n<t.length;n++)(e=t[n]).element.scrollLeft=e.left,e.element.scrollTop=e.top}}var vr=f&&"documentMode"in document&&11>=document.documentMode,mr=null,gr=null,br=null,_r=!1;function wr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;_r||null==mr||mr!==Q(r)||(r="selectionStart"in(r=mr)&&hr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},br&&sr(br,r)||(br=r,0<(r=Gr(gr,"onSelect")).length&&(t=new fn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=mr)))}function Sr(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var kr={animationend:Sr("Animation","AnimationEnd"),animationiteration:Sr("Animation","AnimationIteration"),animationstart:Sr("Animation","AnimationStart"),transitionend:Sr("Transition","TransitionEnd")},xr={},Or={};function Er(e){if(xr[e])return xr[e];if(!kr[e])return e;var t,n=kr[e];for(t in n)if(n.hasOwnProperty(t)&&t in Or)return xr[e]=n[t];return e}f&&(Or=document.createElement("div").style,"AnimationEvent"in window||(delete kr.animationend.animation,delete kr.animationiteration.animation,delete kr.animationstart.animation),"TransitionEvent"in window||delete kr.transitionend.transition);var Pr=Er("animationend"),jr=Er("animationiteration"),Cr=Er("animationstart"),Ar=Er("transitionend"),Tr=new Map,Nr="abort auxClick cancel canPlay canPlayThrough click close contextMenu copy cut drag dragEnd dragEnter dragExit dragLeave dragOver dragStart drop durationChange emptied encrypted ended error gotPointerCapture input invalid keyDown keyPress keyUp load loadedData loadedMetadata loadStart lostPointerCapture mouseDown mouseMove mouseOut mouseOver mouseUp paste pause play playing pointerCancel pointerDown pointerMove pointerOut pointerOver pointerUp progress rateChange reset resize seeked seeking stalled submit suspend timeUpdate touchCancel touchEnd touchStart volumeChange scroll toggle touchMove waiting wheel".split(" ");function Lr(e,t){Tr.set(e,t),s(t,[e])}for(var Rr=0;Rr<Nr.length;Rr++){var Dr=Nr[Rr];Lr(Dr.toLowerCase(),"on"+(Dr[0].toUpperCase()+Dr.slice(1)))}Lr(Pr,"onAnimationEnd"),Lr(jr,"onAnimationIteration"),Lr(Cr,"onAnimationStart"),Lr("dblclick","onDoubleClick"),Lr("focusin","onFocus"),Lr("focusout","onBlur"),Lr(Ar,"onTransitionEnd"),c("onMouseEnter",["mouseout","mouseover"]),c("onMouseLeave",["mouseout","mouseover"]),c("onPointerEnter",["pointerout","pointerover"]),c("onPointerLeave",["pointerout","pointerover"]),s("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),s("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),s("onBeforeInput",["compositionend","keypress","textInput","paste"]),s("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),s("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Ir="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange resize seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Mr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Ir));function Fr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,o,i,l,u,s){if(Ve.apply(this,arguments),Me){if(!Me)throw Error(a(198));var c=Fe;Me=!1,Fe=null,Ue||(Ue=!0,ze=c)}}(r,t,void 0,e),e.currentTarget=null}function Ur(e,t){t=0!=(4&t);for(var n=0;n<e.length;n++){var r=e[n],o=r.event;r=r.listeners;e:{var i=void 0;if(t)for(var a=r.length-1;0<=a;a--){var l=r[a],u=l.instance,s=l.currentTarget;if(l=l.listener,u!==i&&o.isPropagationStopped())break e;Fr(o,l,s),i=u}else for(a=0;a<r.length;a++){if(u=(l=r[a]).instance,s=l.currentTarget,l=l.listener,u!==i&&o.isPropagationStopped())break e;Fr(o,l,s),i=u}}}if(Ue)throw e=ze,Ue=!1,ze=null,e}function zr(e,t){var n=t[mo];void 0===n&&(n=t[mo]=new Set);var r=e+"__bubble";n.has(r)||($r(t,e,2,!1),n.add(r))}function Br(e,t,n){var r=0;t&&(r|=4),$r(n,e,r,t)}var Vr="_reactListening"+Math.random().toString(36).slice(2);function Wr(e){if(!e[Vr]){e[Vr]=!0,l.forEach((function(t){"selectionchange"!==t&&(Mr.has(t)||Br(t,!1,e),Br(t,!0,e))}));var t=9===e.nodeType?e:e.ownerDocument;null===t||t[Vr]||(t[Vr]=!0,Br("selectionchange",!1,t))}}function $r(e,t,n,r){switch(Jt(t)){case 1:var o=qt;break;case 4:o=Gt;break;default:o=Kt}n=o.bind(null,t,n,e),o=void 0,!Re||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(o=!0),r?void 0!==o?e.addEventListener(t,n,{capture:!0,passive:o}):e.addEventListener(t,n,!0):void 0!==o?e.addEventListener(t,n,{passive:o}):e.addEventListener(t,n,!1)}function Hr(e,t,n,r,o){var i=r;if(0==(1&t)&&0==(2&t)&&null!==r)e:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var l=r.stateNode.containerInfo;if(l===o||8===l.nodeType&&l.parentNode===o)break;if(4===a)for(a=r.return;null!==a;){var u=a.tag;if((3===u||4===u)&&((u=a.stateNode.containerInfo)===o||8===u.nodeType&&u.parentNode===o))return;a=a.return}for(;null!==l;){if(null===(a=_o(l)))return;if(5===(u=a.tag)||6===u){r=i=a;continue e}l=l.parentNode}}r=r.return}Ne((function(){var r=i,o=Se(n),a=[];e:{var l=Tr.get(e);if(void 0!==l){var u=fn,s=e;switch(e){case"keypress":if(0===nn(n))break e;case"keydown":case"keyup":u=jn;break;case"focusin":s="focus",u=mn;break;case"focusout":s="blur",u=mn;break;case"beforeblur":case"afterblur":u=mn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=yn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=vn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=An;break;case Pr:case jr:case Cr:u=gn;break;case Ar:u=Tn;break;case"scroll":u=pn;break;case"wheel":u=Ln;break;case"copy":case"cut":case"paste":u=_n;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=Cn}var c=0!=(4&t),f=!c&&"scroll"===e,d=c?null!==l?l+"Capture":null:l;c=[];for(var p,h=r;null!==h;){var y=(p=h).stateNode;if(5===p.tag&&null!==y&&(p=y,null!==d&&null!=(y=Le(h,d))&&c.push(qr(h,y,p))),f)break;h=h.return}0<c.length&&(l=new u(l,s,null,n,o),a.push({event:l,listeners:c}))}}if(0==(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(l="mouseover"===e||"pointerover"===e)||n===we||!(s=n.relatedTarget||n.fromElement)||!_o(s)&&!s[vo])&&(u||l)&&(l=o.window===o?o:(l=o.ownerDocument)?l.defaultView||l.parentWindow:window,u?(u=r,null!==(s=(s=n.relatedTarget||n.toElement)?_o(s):null)&&(s!==(f=We(s))||5!==s.tag&&6!==s.tag)&&(s=null)):(u=null,s=r),u!==s)){if(c=yn,y="onMouseLeave",d="onMouseEnter",h="mouse","pointerout"!==e&&"pointerover"!==e||(c=Cn,y="onPointerLeave",d="onPointerEnter",h="pointer"),f=null==u?l:So(u),p=null==s?l:So(s),(l=new c(y,h+"leave",u,n,o)).target=f,l.relatedTarget=p,y=null,_o(o)===r&&((c=new c(d,h+"enter",s,n,o)).target=p,c.relatedTarget=f,y=c),f=y,u&&s)e:{for(d=s,h=0,p=c=u;p;p=Kr(p))h++;for(p=0,y=d;y;y=Kr(y))p++;for(;0<h-p;)c=Kr(c),h--;for(;0<p-h;)d=Kr(d),p--;for(;h--;){if(c===d||null!==d&&c===d.alternate)break e;c=Kr(c),d=Kr(d)}c=null}else c=null;null!==u&&Qr(a,l,u,c,!1),null!==s&&null!==f&&Qr(a,f,s,c,!0)}if("select"===(u=(l=r?So(r):window).nodeName&&l.nodeName.toLowerCase())||"input"===u&&"file"===l.type)var v=Jn;else if(Hn(l))if(Xn)v=lr;else{v=ir;var m=or}else(u=l.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===l.type||"radio"===l.type)&&(v=ar);switch(v&&(v=v(e,r))?qn(a,v,n,o):(m&&m(e,l,r),"focusout"===e&&(m=l._wrapperState)&&m.controlled&&"number"===l.type&&te(l,"number",l.value)),m=r?So(r):window,e){case"focusin":(Hn(m)||"true"===m.contentEditable)&&(mr=m,gr=r,br=null);break;case"focusout":br=gr=mr=null;break;case"mousedown":_r=!0;break;case"contextmenu":case"mouseup":case"dragend":_r=!1,wr(a,n,o);break;case"selectionchange":if(vr)break;case"keydown":case"keyup":wr(a,n,o)}var g;if(Dn)e:{switch(e){case"compositionstart":var b="onCompositionStart";break e;case"compositionend":b="onCompositionEnd";break e;case"compositionupdate":b="onCompositionUpdate";break e}b=void 0}else Wn?Bn(e,n)&&(b="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(b="onCompositionStart");b&&(Fn&&"ko"!==n.locale&&(Wn||"onCompositionStart"!==b?"onCompositionEnd"===b&&Wn&&(g=tn()):(Zt="value"in(Xt=o)?Xt.value:Xt.textContent,Wn=!0)),0<(m=Gr(r,b)).length&&(b=new wn(b,e,null,n,o),a.push({event:b,listeners:m}),(g||null!==(g=Vn(n)))&&(b.data=g))),(g=Mn?function(e,t){switch(e){case"compositionend":return Vn(t);case"keypress":return 32!==t.which?null:(zn=!0,Un);case"textInput":return(e=t.data)===Un&&zn?null:e;default:return null}}(e,n):function(e,t){if(Wn)return"compositionend"===e||!Dn&&Bn(e,t)?(e=tn(),en=Zt=Xt=null,Wn=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Fn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Gr(r,"onBeforeInput")).length&&(o=new wn("onBeforeInput","beforeinput",null,n,o),a.push({event:o,listeners:r}),o.data=g)}Ur(a,t)}))}function qr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Gr(e,t){for(var n=t+"Capture",r=[];null!==e;){var o=e,i=o.stateNode;5===o.tag&&null!==i&&(o=i,null!=(i=Le(e,n))&&r.unshift(qr(e,i,o)),null!=(i=Le(e,t))&&r.push(qr(e,i,o))),e=e.return}return r}function Kr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Qr(e,t,n,r,o){for(var i=t._reactName,a=[];null!==n&&n!==r;){var l=n,u=l.alternate,s=l.stateNode;if(null!==u&&u===r)break;5===l.tag&&null!==s&&(l=s,o?null!=(u=Le(n,i))&&a.unshift(qr(n,u,l)):o||null!=(u=Le(n,i))&&a.push(qr(n,u,l))),n=n.return}0!==a.length&&e.push({event:t,listeners:a})}var Yr=/\r\n?/g,Jr=/\u0000|\uFFFD/g;function Xr(e){return("string"==typeof e?e:""+e).replace(Yr,"\n").replace(Jr,"")}function Zr(e,t,n){if(t=Xr(t),Xr(e)!==t&&n)throw Error(a(425))}function eo(){}var to=null,no=null;function ro(e,t){return"textarea"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"===r(t.dangerouslySetInnerHTML)&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var oo="function"==typeof setTimeout?setTimeout:void 0,io="function"==typeof clearTimeout?clearTimeout:void 0,ao="function"==typeof Promise?Promise:void 0,lo="function"==typeof queueMicrotask?queueMicrotask:void 0!==ao?function(e){return ao.resolve(null).then(e).catch(uo)}:oo;function uo(e){setTimeout((function(){throw e}))}function so(e,t){var n=t,r=0;do{var o=n.nextSibling;if(e.removeChild(n),o&&8===o.nodeType)if("/$"===(n=o.data)){if(0===r)return e.removeChild(o),void Wt(t);r--}else"$"!==n&&"$?"!==n&&"$!"!==n||r++;n=o}while(n);Wt(t)}function co(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break;if(8===t){if("$"===(t=e.data)||"$!"===t||"$?"===t)break;if("/$"===t)return null}}return e}function fo(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var po=Math.random().toString(36).slice(2),ho="__reactFiber$"+po,yo="__reactProps$"+po,vo="__reactContainer$"+po,mo="__reactEvents$"+po,go="__reactListeners$"+po,bo="__reactHandles$"+po;function _o(e){var t=e[ho];if(t)return t;for(var n=e.parentNode;n;){if(t=n[vo]||n[ho]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=fo(e);null!==e;){if(n=e[ho])return n;e=fo(e)}return t}n=(e=n).parentNode}return null}function wo(e){return!(e=e[ho]||e[vo])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function So(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function ko(e){return e[yo]||null}var xo=[],Oo=-1;function Eo(e){return{current:e}}function Po(e){0>Oo||(e.current=xo[Oo],xo[Oo]=null,Oo--)}function jo(e,t){Oo++,xo[Oo]=e.current,e.current=t}var Co={},Ao=Eo(Co),To=Eo(!1),No=Co;function Lo(e,t){var n=e.type.contextTypes;if(!n)return Co;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var o,i={};for(o in n)i[o]=t[o];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function Ro(e){return null!=e.childContextTypes}function Do(){Po(To),Po(Ao)}function Io(e,t,n){if(Ao.current!==Co)throw Error(a(168));jo(Ao,t),jo(To,n)}function Mo(e,t,n){var r=e.stateNode;if(t=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in t))throw Error(a(108,$(e)||"Unknown",o));return F({},n,r)}function Fo(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||Co,No=Ao.current,jo(Ao,e),jo(To,To.current),!0}function Uo(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=Mo(e,t,No),r.__reactInternalMemoizedMergedChildContext=e,Po(To),Po(Ao),jo(Ao,e)):Po(To),jo(To,n)}var zo=null,Bo=!1,Vo=!1;function Wo(e){null===zo?zo=[e]:zo.push(e)}function $o(){if(!Vo&&null!==zo){Vo=!0;var e=0,t=_t;try{var n=zo;for(_t=1;e<n.length;e++){var r=n[e];do{r=r(!0)}while(null!==r)}zo=null,Bo=!1}catch(t){throw null!==zo&&(zo=zo.slice(e+1)),Ke(et,$o),t}finally{_t=t,Vo=!1}}return null}var Ho=[],qo=0,Go=null,Ko=0,Qo=[],Yo=0,Jo=null,Xo=1,Zo="";function ei(e,t){Ho[qo++]=Ko,Ho[qo++]=Go,Go=e,Ko=t}function ti(e,t,n){Qo[Yo++]=Xo,Qo[Yo++]=Zo,Qo[Yo++]=Jo,Jo=e;var r=Xo;e=Zo;var o=32-lt(r)-1;r&=~(1<<o),n+=1;var i=32-lt(t)+o;if(30<i){var a=o-o%5;i=(r&(1<<a)-1).toString(32),r>>=a,o-=a,Xo=1<<32-lt(t)+o|n<<o|r,Zo=i+e}else Xo=1<<i|n<<o|r,Zo=e}function ni(e){null!==e.return&&(ei(e,1),ti(e,1,0))}function ri(e){for(;e===Go;)Go=Ho[--qo],Ho[qo]=null,Ko=Ho[--qo],Ho[qo]=null;for(;e===Jo;)Jo=Qo[--Yo],Qo[Yo]=null,Zo=Qo[--Yo],Qo[Yo]=null,Xo=Qo[--Yo],Qo[Yo]=null}var oi=null,ii=null,ai=!1,li=null;function ui(e,t){var n=Ls(5,null,null,0);n.elementType="DELETED",n.stateNode=t,n.return=e,null===(t=e.deletions)?(e.deletions=[n],e.flags|=16):t.push(n)}function si(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,oi=e,ii=co(t.firstChild),!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,oi=e,ii=null,!0);case 13:return null!==(t=8!==t.nodeType?null:t)&&(n=null!==Jo?{id:Xo,overflow:Zo}:null,e.memoizedState={dehydrated:t,treeContext:n,retryLane:1073741824},(n=Ls(18,null,null,0)).stateNode=t,n.return=e,e.child=n,oi=e,ii=null,!0);default:return!1}}function ci(e){return 0!=(1&e.mode)&&0==(128&e.flags)}function fi(e){if(ai){var t=ii;if(t){var n=t;if(!si(e,t)){if(ci(e))throw Error(a(418));t=co(n.nextSibling);var r=oi;t&&si(e,t)?ui(r,n):(e.flags=-4097&e.flags|2,ai=!1,oi=e)}}else{if(ci(e))throw Error(a(418));e.flags=-4097&e.flags|2,ai=!1,oi=e}}}function di(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;oi=e}function pi(e){if(e!==oi)return!1;if(!ai)return di(e),ai=!0,!1;var t;if((t=3!==e.tag)&&!(t=5!==e.tag)&&(t="head"!==(t=e.type)&&"body"!==t&&!ro(e.type,e.memoizedProps)),t&&(t=ii)){if(ci(e))throw hi(),Error(a(418));for(;t;)ui(e,t),t=co(t.nextSibling)}if(di(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){ii=co(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}ii=null}}else ii=oi?co(e.stateNode.nextSibling):null;return!0}function hi(){for(var e=ii;e;)e=co(e.nextSibling)}function yi(){ii=oi=null,ai=!1}function vi(e){null===li?li=[e]:li.push(e)}var mi=w.ReactCurrentBatchConfig;function gi(e,t){if(e&&e.defaultProps){for(var n in t=F({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var bi=Eo(null),_i=null,wi=null,Si=null;function ki(){Si=wi=_i=null}function xi(e){var t=bi.current;Po(bi),e._currentValue=t}function Oi(e,t,n){for(;null!==e;){var r=e.alternate;if((e.childLanes&t)!==t?(e.childLanes|=t,null!==r&&(r.childLanes|=t)):null!==r&&(r.childLanes&t)!==t&&(r.childLanes|=t),e===n)break;e=e.return}}function Ei(e,t){_i=e,Si=wi=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(0!=(e.lanes&t)&&(wl=!0),e.firstContext=null)}function Pi(e){var t=e._currentValue;if(Si!==e)if(e={context:e,memoizedValue:t,next:null},null===wi){if(null===_i)throw Error(a(308));wi=e,_i.dependencies={lanes:0,firstContext:e}}else wi=wi.next=e;return t}var ji=null;function Ci(e){null===ji?ji=[e]:ji.push(e)}function Ai(e,t,n,r){var o=t.interleaved;return null===o?(n.next=n,Ci(t)):(n.next=o.next,o.next=n),t.interleaved=n,Ti(e,r)}function Ti(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}var Ni=!1;function Li(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null,interleaved:null,lanes:0},effects:null}}function Ri(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function Di(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function Ii(e,t,n){var r=e.updateQueue;if(null===r)return null;if(r=r.shared,0!=(2&Au)){var o=r.pending;return null===o?t.next=t:(t.next=o.next,o.next=t),r.pending=t,Ti(e,n)}return null===(o=r.interleaved)?(t.next=t,Ci(r)):(t.next=o.next,o.next=t),r.interleaved=t,Ti(e,n)}function Mi(e,t,n){if(null!==(t=t.updateQueue)&&(t=t.shared,0!=(4194240&n))){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,bt(e,n)}}function Fi(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var o=null,i=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===i?o=i=a:i=i.next=a,n=n.next}while(null!==n);null===i?o=i=t:i=i.next=t}else o=i=t;return n={baseState:r.baseState,firstBaseUpdate:o,lastBaseUpdate:i,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function Ui(e,t,n,r){var o=e.updateQueue;Ni=!1;var i=o.firstBaseUpdate,a=o.lastBaseUpdate,l=o.shared.pending;if(null!==l){o.shared.pending=null;var u=l,s=u.next;u.next=null,null===a?i=s:a.next=s,a=u;var c=e.alternate;null!==c&&(l=(c=c.updateQueue).lastBaseUpdate)!==a&&(null===l?c.firstBaseUpdate=s:l.next=s,c.lastBaseUpdate=u)}if(null!==i){var f=o.baseState;for(a=0,c=s=u=null,l=i;;){var d=l.lane,p=l.eventTime;if((r&d)===d){null!==c&&(c=c.next={eventTime:p,lane:0,tag:l.tag,payload:l.payload,callback:l.callback,next:null});e:{var h=e,y=l;switch(d=t,p=n,y.tag){case 1:if("function"==typeof(h=y.payload)){f=h.call(p,f,d);break e}f=h;break e;case 3:h.flags=-65537&h.flags|128;case 0:if(null==(d="function"==typeof(h=y.payload)?h.call(p,f,d):h))break e;f=F({},f,d);break e;case 2:Ni=!0}}null!==l.callback&&0!==l.lane&&(e.flags|=64,null===(d=o.effects)?o.effects=[l]:d.push(l))}else p={eventTime:p,lane:d,tag:l.tag,payload:l.payload,callback:l.callback,next:null},null===c?(s=c=p,u=f):c=c.next=p,a|=d;if(null===(l=l.next)){if(null===(l=o.shared.pending))break;l=(d=l).next,d.next=null,o.lastBaseUpdate=d,o.shared.pending=null}}if(null===c&&(u=f),o.baseState=u,o.firstBaseUpdate=s,o.lastBaseUpdate=c,null!==(t=o.shared.interleaved)){o=t;do{a|=o.lane,o=o.next}while(o!==t)}else null===i&&(o.shared.lanes=0);Fu|=a,e.lanes=a,e.memoizedState=f}}function zi(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],o=r.callback;if(null!==o){if(r.callback=null,r=n,"function"!=typeof o)throw Error(a(191,o));o.call(r)}}}var Bi=(new o.Component).refs;function Vi(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:F({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var Wi={isMounted:function(e){return!!(e=e._reactInternals)&&We(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=ns(),o=rs(e),i=Di(r,o);i.payload=t,null!=n&&(i.callback=n),null!==(t=Ii(e,i,o))&&(os(t,e,o,r),Mi(t,e,o))},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=ns(),o=rs(e),i=Di(r,o);i.tag=1,i.payload=t,null!=n&&(i.callback=n),null!==(t=Ii(e,i,o))&&(os(t,e,o,r),Mi(t,e,o))},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=ns(),r=rs(e),o=Di(n,r);o.tag=2,null!=t&&(o.callback=t),null!==(t=Ii(e,o,r))&&(os(t,e,r,n),Mi(t,e,r))}};function $i(e,t,n,r,o,i,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,a):!(t.prototype&&t.prototype.isPureReactComponent&&sr(n,r)&&sr(o,i))}function Hi(e,t,n){var o=!1,i=Co,a=t.contextType;return"object"===r(a)&&null!==a?a=Pi(a):(i=Ro(t)?No:Ao.current,a=(o=null!=(o=t.contextTypes))?Lo(e,i):Co),t=new t(n,a),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=Wi,e.stateNode=t,t._reactInternals=e,o&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=a),t}function qi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&Wi.enqueueReplaceState(t,t.state,null)}function Gi(e,t,n,o){var i=e.stateNode;i.props=n,i.state=e.memoizedState,i.refs=Bi,Li(e);var a=t.contextType;"object"===r(a)&&null!==a?i.context=Pi(a):(a=Ro(t)?No:Ao.current,i.context=Lo(e,a)),i.state=e.memoizedState,"function"==typeof(a=t.getDerivedStateFromProps)&&(Vi(e,t,a,n),i.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(t=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),t!==i.state&&Wi.enqueueReplaceState(i,i.state,null),Ui(e,n,i,o),i.state=e.memoizedState),"function"==typeof i.componentDidMount&&(e.flags|=4194308)}function Ki(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!==r(e)){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var o=n.stateNode}if(!o)throw Error(a(147,e));var i=o,l=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===l?t.ref:(t=function(e){var t=i.refs;t===Bi&&(t=i.refs={}),null===e?delete t[l]:t[l]=e},t._stringRef=l,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function Qi(e,t){throw e=Object.prototype.toString.call(t),Error(a(31,"[object Object]"===e?"object with keys {"+Object.keys(t).join(", ")+"}":e))}function Yi(e){return(0,e._init)(e._payload)}function Ji(e){function t(t,n){if(e){var r=t.deletions;null===r?(t.deletions=[n],t.flags|=16):r.push(n)}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function o(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function i(e,t){return(e=Ds(e,t)).index=0,e.sibling=null,e}function l(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags|=2,n):r:(t.flags|=2,n):(t.flags|=1048576,n)}function u(t){return e&&null===t.alternate&&(t.flags|=2),t}function s(e,t,n,r){return null===t||6!==t.tag?((t=Us(n,e.mode,r)).return=e,t):((t=i(t,n)).return=e,t)}function c(e,t,n,o){var a=n.type;return a===x?d(e,t,n.props.children,o,n.key):null!==t&&(t.elementType===a||"object"===r(a)&&null!==a&&a.$$typeof===L&&Yi(a)===t.type)?((o=i(t,n.props)).ref=Ki(e,t,n),o.return=e,o):((o=Is(n.type,n.key,n.props,null,e.mode,o)).ref=Ki(e,t,n),o.return=e,o)}function f(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=zs(n,e.mode,r)).return=e,t):((t=i(t,n.children||[])).return=e,t)}function d(e,t,n,r,o){return null===t||7!==t.tag?((t=Ms(n,e.mode,r,o)).return=e,t):((t=i(t,n)).return=e,t)}function p(e,t,n){if("string"==typeof t&&""!==t||"number"==typeof t)return(t=Us(""+t,e.mode,n)).return=e,t;if("object"===r(t)&&null!==t){switch(t.$$typeof){case S:return(n=Is(t.type,t.key,t.props,null,e.mode,n)).ref=Ki(e,null,t),n.return=e,n;case k:return(t=zs(t,e.mode,n)).return=e,t;case L:return p(e,(0,t._init)(t._payload),n)}if(ne(t)||I(t))return(t=Ms(t,e.mode,n,null)).return=e,t;Qi(e,t)}return null}function h(e,t,n,o){var i=null!==t?t.key:null;if("string"==typeof n&&""!==n||"number"==typeof n)return null!==i?null:s(e,t,""+n,o);if("object"===r(n)&&null!==n){switch(n.$$typeof){case S:return n.key===i?c(e,t,n,o):null;case k:return n.key===i?f(e,t,n,o):null;case L:return h(e,t,(i=n._init)(n._payload),o)}if(ne(n)||I(n))return null!==i?null:d(e,t,n,o,null);Qi(e,n)}return null}function y(e,t,n,o,i){if("string"==typeof o&&""!==o||"number"==typeof o)return s(t,e=e.get(n)||null,""+o,i);if("object"===r(o)&&null!==o){switch(o.$$typeof){case S:return c(t,e=e.get(null===o.key?n:o.key)||null,o,i);case k:return f(t,e=e.get(null===o.key?n:o.key)||null,o,i);case L:return y(e,t,n,(0,o._init)(o._payload),i)}if(ne(o)||I(o))return d(t,e=e.get(n)||null,o,i,null);Qi(t,o)}return null}function v(r,i,a,u){for(var s=null,c=null,f=i,d=i=0,v=null;null!==f&&d<a.length;d++){f.index>d?(v=f,f=null):v=f.sibling;var m=h(r,f,a[d],u);if(null===m){null===f&&(f=v);break}e&&f&&null===m.alternate&&t(r,f),i=l(m,i,d),null===c?s=m:c.sibling=m,c=m,f=v}if(d===a.length)return n(r,f),ai&&ei(r,d),s;if(null===f){for(;d<a.length;d++)null!==(f=p(r,a[d],u))&&(i=l(f,i,d),null===c?s=f:c.sibling=f,c=f);return ai&&ei(r,d),s}for(f=o(r,f);d<a.length;d++)null!==(v=y(f,r,d,a[d],u))&&(e&&null!==v.alternate&&f.delete(null===v.key?d:v.key),i=l(v,i,d),null===c?s=v:c.sibling=v,c=v);return e&&f.forEach((function(e){return t(r,e)})),ai&&ei(r,d),s}function m(r,i,u,s){var c=I(u);if("function"!=typeof c)throw Error(a(150));if(null==(u=c.call(u)))throw Error(a(151));for(var f=c=null,d=i,v=i=0,m=null,g=u.next();null!==d&&!g.done;v++,g=u.next()){d.index>v?(m=d,d=null):m=d.sibling;var b=h(r,d,g.value,s);if(null===b){null===d&&(d=m);break}e&&d&&null===b.alternate&&t(r,d),i=l(b,i,v),null===f?c=b:f.sibling=b,f=b,d=m}if(g.done)return n(r,d),ai&&ei(r,v),c;if(null===d){for(;!g.done;v++,g=u.next())null!==(g=p(r,g.value,s))&&(i=l(g,i,v),null===f?c=g:f.sibling=g,f=g);return ai&&ei(r,v),c}for(d=o(r,d);!g.done;v++,g=u.next())null!==(g=y(d,r,v,g.value,s))&&(e&&null!==g.alternate&&d.delete(null===g.key?v:g.key),i=l(g,i,v),null===f?c=g:f.sibling=g,f=g);return e&&d.forEach((function(e){return t(r,e)})),ai&&ei(r,v),c}return function e(o,a,l,s){if("object"===r(l)&&null!==l&&l.type===x&&null===l.key&&(l=l.props.children),"object"===r(l)&&null!==l){switch(l.$$typeof){case S:e:{for(var c=l.key,f=a;null!==f;){if(f.key===c){if((c=l.type)===x){if(7===f.tag){n(o,f.sibling),(a=i(f,l.props.children)).return=o,o=a;break e}}else if(f.elementType===c||"object"===r(c)&&null!==c&&c.$$typeof===L&&Yi(c)===f.type){n(o,f.sibling),(a=i(f,l.props)).ref=Ki(o,f,l),a.return=o,o=a;break e}n(o,f);break}t(o,f),f=f.sibling}l.type===x?((a=Ms(l.props.children,o.mode,s,l.key)).return=o,o=a):((s=Is(l.type,l.key,l.props,null,o.mode,s)).ref=Ki(o,a,l),s.return=o,o=s)}return u(o);case k:e:{for(f=l.key;null!==a;){if(a.key===f){if(4===a.tag&&a.stateNode.containerInfo===l.containerInfo&&a.stateNode.implementation===l.implementation){n(o,a.sibling),(a=i(a,l.children||[])).return=o,o=a;break e}n(o,a);break}t(o,a),a=a.sibling}(a=zs(l,o.mode,s)).return=o,o=a}return u(o);case L:return e(o,a,(f=l._init)(l._payload),s)}if(ne(l))return v(o,a,l,s);if(I(l))return m(o,a,l,s);Qi(o,l)}return"string"==typeof l&&""!==l||"number"==typeof l?(l=""+l,null!==a&&6===a.tag?(n(o,a.sibling),(a=i(a,l)).return=o,o=a):(n(o,a),(a=Us(l,o.mode,s)).return=o,o=a),u(o)):n(o,a)}}var Xi=Ji(!0),Zi=Ji(!1),ea={},ta=Eo(ea),na=Eo(ea),ra=Eo(ea);function oa(e){if(e===ea)throw Error(a(174));return e}function ia(e,t){switch(jo(ra,t),jo(na,e),jo(ta,ea),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:se(null,"");break;default:t=se(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}Po(ta),jo(ta,t)}function aa(){Po(ta),Po(na),Po(ra)}function la(e){oa(ra.current);var t=oa(ta.current),n=se(t,e.type);t!==n&&(jo(na,e),jo(ta,n))}function ua(e){na.current===e&&(Po(ta),Po(na))}var sa=Eo(0);function ca(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(128&t.flags))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var fa=[];function da(){for(var e=0;e<fa.length;e++)fa[e]._workInProgressVersionPrimary=null;fa.length=0}var pa=w.ReactCurrentDispatcher,ha=w.ReactCurrentBatchConfig,ya=0,va=null,ma=null,ga=null,ba=!1,_a=!1,wa=0,Sa=0;function ka(){throw Error(a(321))}function xa(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ur(e[n],t[n]))return!1;return!0}function Oa(e,t,n,r,o,i){if(ya=i,va=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,pa.current=null===e||null===e.memoizedState?ul:sl,e=n(r,o),_a){i=0;do{if(_a=!1,wa=0,25<=i)throw Error(a(301));i+=1,ga=ma=null,t.updateQueue=null,pa.current=cl,e=n(r,o)}while(_a)}if(pa.current=ll,t=null!==ma&&null!==ma.next,ya=0,ga=ma=va=null,ba=!1,t)throw Error(a(300));return e}function Ea(){var e=0!==wa;return wa=0,e}function Pa(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ga?va.memoizedState=ga=e:ga=ga.next=e,ga}function ja(){if(null===ma){var e=va.alternate;e=null!==e?e.memoizedState:null}else e=ma.next;var t=null===ga?va.memoizedState:ga.next;if(null!==t)ga=t,ma=e;else{if(null===e)throw Error(a(310));e={memoizedState:(ma=e).memoizedState,baseState:ma.baseState,baseQueue:ma.baseQueue,queue:ma.queue,next:null},null===ga?va.memoizedState=ga=e:ga=ga.next=e}return ga}function Ca(e,t){return"function"==typeof t?t(e):t}function Aa(e){var t=ja(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=ma,o=r.baseQueue,i=n.pending;if(null!==i){if(null!==o){var l=o.next;o.next=i.next,i.next=l}r.baseQueue=o=i,n.pending=null}if(null!==o){i=o.next,r=r.baseState;var u=l=null,s=null,c=i;do{var f=c.lane;if((ya&f)===f)null!==s&&(s=s.next={lane:0,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null}),r=c.hasEagerState?c.eagerState:e(r,c.action);else{var d={lane:f,action:c.action,hasEagerState:c.hasEagerState,eagerState:c.eagerState,next:null};null===s?(u=s=d,l=r):s=s.next=d,va.lanes|=f,Fu|=f}c=c.next}while(null!==c&&c!==i);null===s?l=r:s.next=u,ur(r,t.memoizedState)||(wl=!0),t.memoizedState=r,t.baseState=l,t.baseQueue=s,n.lastRenderedState=r}if(null!==(e=n.interleaved)){o=e;do{i=o.lane,va.lanes|=i,Fu|=i,o=o.next}while(o!==e)}else null===o&&(n.lanes=0);return[t.memoizedState,n.dispatch]}function Ta(e){var t=ja(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,o=n.pending,i=t.memoizedState;if(null!==o){n.pending=null;var l=o=o.next;do{i=e(i,l.action),l=l.next}while(l!==o);ur(i,t.memoizedState)||(wl=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function Na(){}function La(e,t){var n=va,r=ja(),o=t(),i=!ur(r.memoizedState,o);if(i&&(r.memoizedState=o,wl=!0),r=r.queue,Ha(Ia.bind(null,n,r,e),[e]),r.getSnapshot!==t||i||null!==ga&&1&ga.memoizedState.tag){if(n.flags|=2048,za(9,Da.bind(null,n,r,o,t),void 0,null),null===Tu)throw Error(a(349));0!=(30&ya)||Ra(n,t,o)}return o}function Ra(e,t,n){e.flags|=16384,e={getSnapshot:t,value:n},null===(t=va.updateQueue)?(t={lastEffect:null,stores:null},va.updateQueue=t,t.stores=[e]):null===(n=t.stores)?t.stores=[e]:n.push(e)}function Da(e,t,n,r){t.value=n,t.getSnapshot=r,Ma(t)&&Fa(e)}function Ia(e,t,n){return n((function(){Ma(t)&&Fa(e)}))}function Ma(e){var t=e.getSnapshot;e=e.value;try{var n=t();return!ur(e,n)}catch(e){return!0}}function Fa(e){var t=Ti(e,1);null!==t&&os(t,e,1,-1)}function Ua(e){var t=Pa();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:Ca,lastRenderedState:e},t.queue=e,e=e.dispatch=rl.bind(null,va,e),[t.memoizedState,e]}function za(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=va.updateQueue)?(t={lastEffect:null,stores:null},va.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function Ba(){return ja().memoizedState}function Va(e,t,n,r){var o=Pa();va.flags|=e,o.memoizedState=za(1|t,n,void 0,void 0===r?null:r)}function Wa(e,t,n,r){var o=ja();r=void 0===r?null:r;var i=void 0;if(null!==ma){var a=ma.memoizedState;if(i=a.destroy,null!==r&&xa(r,a.deps))return void(o.memoizedState=za(t,n,i,r))}va.flags|=e,o.memoizedState=za(1|t,n,i,r)}function $a(e,t){return Va(8390656,8,e,t)}function Ha(e,t){return Wa(2048,8,e,t)}function qa(e,t){return Wa(4,2,e,t)}function Ga(e,t){return Wa(4,4,e,t)}function Ka(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Qa(e,t,n){return n=null!=n?n.concat([e]):null,Wa(4,4,Ka.bind(null,t,e),n)}function Ya(){}function Ja(e,t){var n=ja();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&xa(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Xa(e,t){var n=ja();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&xa(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Za(e,t,n){return 0==(21&ya)?(e.baseState&&(e.baseState=!1,wl=!0),e.memoizedState=n):(ur(n,t)||(n=vt(),va.lanes|=n,Fu|=n,e.baseState=!0),t)}function el(e,t){var n=_t;_t=0!==n&&4>n?n:4,e(!0);var r=ha.transition;ha.transition={};try{e(!1),t()}finally{_t=n,ha.transition=r}}function tl(){return ja().memoizedState}function nl(e,t,n){var r=rs(e);n={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null},ol(e)?il(t,n):null!==(n=Ai(e,t,n,r))&&(os(n,e,r,ns()),al(n,t,r))}function rl(e,t,n){var r=rs(e),o={lane:r,action:n,hasEagerState:!1,eagerState:null,next:null};if(ol(e))il(t,o);else{var i=e.alternate;if(0===e.lanes&&(null===i||0===i.lanes)&&null!==(i=t.lastRenderedReducer))try{var a=t.lastRenderedState,l=i(a,n);if(o.hasEagerState=!0,o.eagerState=l,ur(l,a)){var u=t.interleaved;return null===u?(o.next=o,Ci(t)):(o.next=u.next,u.next=o),void(t.interleaved=o)}}catch(e){}null!==(n=Ai(e,t,o,r))&&(os(n,e,r,o=ns()),al(n,t,r))}}function ol(e){var t=e.alternate;return e===va||null!==t&&t===va}function il(e,t){_a=ba=!0;var n=e.pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}function al(e,t,n){if(0!=(4194240&n)){var r=t.lanes;n|=r&=e.pendingLanes,t.lanes=n,bt(e,n)}}var ll={readContext:Pi,useCallback:ka,useContext:ka,useEffect:ka,useImperativeHandle:ka,useInsertionEffect:ka,useLayoutEffect:ka,useMemo:ka,useReducer:ka,useRef:ka,useState:ka,useDebugValue:ka,useDeferredValue:ka,useTransition:ka,useMutableSource:ka,useSyncExternalStore:ka,useId:ka,unstable_isNewReconciler:!1},ul={readContext:Pi,useCallback:function(e,t){return Pa().memoizedState=[e,void 0===t?null:t],e},useContext:Pi,useEffect:$a,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,Va(4194308,4,Ka.bind(null,t,e),n)},useLayoutEffect:function(e,t){return Va(4194308,4,e,t)},useInsertionEffect:function(e,t){return Va(4,2,e,t)},useMemo:function(e,t){var n=Pa();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Pa();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e={pending:null,interleaved:null,lanes:0,dispatch:null,lastRenderedReducer:e,lastRenderedState:t},r.queue=e,e=e.dispatch=nl.bind(null,va,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Pa().memoizedState=e},useState:Ua,useDebugValue:Ya,useDeferredValue:function(e){return Pa().memoizedState=e},useTransition:function(){var e=Ua(!1),t=e[0];return e=el.bind(null,e[1]),Pa().memoizedState=e,[t,e]},useMutableSource:function(){},useSyncExternalStore:function(e,t,n){var r=va,o=Pa();if(ai){if(void 0===n)throw Error(a(407));n=n()}else{if(n=t(),null===Tu)throw Error(a(349));0!=(30&ya)||Ra(r,t,n)}o.memoizedState=n;var i={value:n,getSnapshot:t};return o.queue=i,$a(Ia.bind(null,r,i,e),[e]),r.flags|=2048,za(9,Da.bind(null,r,i,n,t),void 0,null),n},useId:function(){var e=Pa(),t=Tu.identifierPrefix;if(ai){var n=Zo;t=":"+t+"R"+(n=(Xo&~(1<<32-lt(Xo)-1)).toString(32)+n),0<(n=wa++)&&(t+="H"+n.toString(32)),t+=":"}else t=":"+t+"r"+(n=Sa++).toString(32)+":";return e.memoizedState=t},unstable_isNewReconciler:!1},sl={readContext:Pi,useCallback:Ja,useContext:Pi,useEffect:Ha,useImperativeHandle:Qa,useInsertionEffect:qa,useLayoutEffect:Ga,useMemo:Xa,useReducer:Aa,useRef:Ba,useState:function(){return Aa(Ca)},useDebugValue:Ya,useDeferredValue:function(e){return Za(ja(),ma.memoizedState,e)},useTransition:function(){return[Aa(Ca)[0],ja().memoizedState]},useMutableSource:Na,useSyncExternalStore:La,useId:tl,unstable_isNewReconciler:!1},cl={readContext:Pi,useCallback:Ja,useContext:Pi,useEffect:Ha,useImperativeHandle:Qa,useInsertionEffect:qa,useLayoutEffect:Ga,useMemo:Xa,useReducer:Ta,useRef:Ba,useState:function(){return Ta(Ca)},useDebugValue:Ya,useDeferredValue:function(e){var t=ja();return null===ma?t.memoizedState=e:Za(t,ma.memoizedState,e)},useTransition:function(){return[Ta(Ca)[0],ja().memoizedState]},useMutableSource:Na,useSyncExternalStore:La,useId:tl,unstable_isNewReconciler:!1};function fl(e,t){try{var n="",r=t;do{n+=V(r),r=r.return}while(r);var o=n}catch(e){o="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:o,digest:null}}function dl(e,t,n){return{value:e,source:null,stack:null!=n?n:null,digest:null!=t?t:null}}function pl(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}var hl="function"==typeof WeakMap?WeakMap:Map;function yl(e,t,n){(n=Di(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){qu||(qu=!0,Gu=r),pl(0,t)},n}function vl(e,t,n){(n=Di(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var o=t.value;n.payload=function(){return r(o)},n.callback=function(){pl(0,t)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){pl(0,t),"function"!=typeof r&&(null===Ku?Ku=new Set([this]):Ku.add(this));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}function ml(e,t,n){var r=e.pingCache;if(null===r){r=e.pingCache=new hl;var o=new Set;r.set(t,o)}else void 0===(o=r.get(t))&&(o=new Set,r.set(t,o));o.has(n)||(o.add(n),e=Ps.bind(null,e,t,n),t.then(e,e))}function gl(e){do{var t;if((t=13===e.tag)&&(t=null===(t=e.memoizedState)||null!==t.dehydrated),t)return e;e=e.return}while(null!==e);return null}function bl(e,t,n,r,o){return 0==(1&e.mode)?(e===t?e.flags|=65536:(e.flags|=128,n.flags|=131072,n.flags&=-52805,1===n.tag&&(null===n.alternate?n.tag=17:((t=Di(-1,1)).tag=2,Ii(n,t,1))),n.lanes|=1),e):(e.flags|=65536,e.lanes=o,e)}var _l=w.ReactCurrentOwner,wl=!1;function Sl(e,t,n,r){t.child=null===e?Zi(t,null,n,r):Xi(t,e.child,n,r)}function kl(e,t,n,r,o){n=n.render;var i=t.ref;return Ei(t,o),r=Oa(e,t,n,r,i,o),n=Ea(),null===e||wl?(ai&&n&&ni(t),t.flags|=1,Sl(e,t,r,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,ql(e,t,o))}function xl(e,t,n,r,o){if(null===e){var i=n.type;return"function"!=typeof i||Rs(i)||void 0!==i.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Is(n.type,null,r,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=i,Ol(e,t,i,r,o))}if(i=e.child,0==(e.lanes&o)){var a=i.memoizedProps;if((n=null!==(n=n.compare)?n:sr)(a,r)&&e.ref===t.ref)return ql(e,t,o)}return t.flags|=1,(e=Ds(i,r)).ref=t.ref,e.return=t,t.child=e}function Ol(e,t,n,r,o){if(null!==e){var i=e.memoizedProps;if(sr(i,r)&&e.ref===t.ref){if(wl=!1,t.pendingProps=r=i,0==(e.lanes&o))return t.lanes=e.lanes,ql(e,t,o);0!=(131072&e.flags)&&(wl=!0)}}return jl(e,t,n,r,o)}function El(e,t,n){var r=t.pendingProps,o=r.children,i=null!==e?e.memoizedState:null;if("hidden"===r.mode)if(0==(1&t.mode))t.memoizedState={baseLanes:0,cachePool:null,transitions:null},jo(Du,Ru),Ru|=n;else{if(0==(1073741824&n))return e=null!==i?i.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e,cachePool:null,transitions:null},t.updateQueue=null,jo(Du,Ru),Ru|=e,null;t.memoizedState={baseLanes:0,cachePool:null,transitions:null},r=null!==i?i.baseLanes:n,jo(Du,Ru),Ru|=r}else null!==i?(r=i.baseLanes|n,t.memoizedState=null):r=n,jo(Du,Ru),Ru|=r;return Sl(e,t,o,n),t.child}function Pl(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=512,t.flags|=2097152)}function jl(e,t,n,r,o){var i=Ro(n)?No:Ao.current;return i=Lo(t,i),Ei(t,o),n=Oa(e,t,n,r,i,o),r=Ea(),null===e||wl?(ai&&r&&ni(t),t.flags|=1,Sl(e,t,n,o),t.child):(t.updateQueue=e.updateQueue,t.flags&=-2053,e.lanes&=~o,ql(e,t,o))}function Cl(e,t,n,o,i){if(Ro(n)){var a=!0;Fo(t)}else a=!1;if(Ei(t,i),null===t.stateNode)Hl(e,t),Hi(t,n,o),Gi(t,n,o,i),o=!0;else if(null===e){var l=t.stateNode,u=t.memoizedProps;l.props=u;var s=l.context,c=n.contextType;c="object"===r(c)&&null!==c?Pi(c):Lo(t,c=Ro(n)?No:Ao.current);var f=n.getDerivedStateFromProps,d="function"==typeof f||"function"==typeof l.getSnapshotBeforeUpdate;d||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(u!==o||s!==c)&&qi(t,l,o,c),Ni=!1;var p=t.memoizedState;l.state=p,Ui(t,o,l,i),s=t.memoizedState,u!==o||p!==s||To.current||Ni?("function"==typeof f&&(Vi(t,n,f,o),s=t.memoizedState),(u=Ni||$i(t,n,u,o,p,s,c))?(d||"function"!=typeof l.UNSAFE_componentWillMount&&"function"!=typeof l.componentWillMount||("function"==typeof l.componentWillMount&&l.componentWillMount(),"function"==typeof l.UNSAFE_componentWillMount&&l.UNSAFE_componentWillMount()),"function"==typeof l.componentDidMount&&(t.flags|=4194308)):("function"==typeof l.componentDidMount&&(t.flags|=4194308),t.memoizedProps=o,t.memoizedState=s),l.props=o,l.state=s,l.context=c,o=u):("function"==typeof l.componentDidMount&&(t.flags|=4194308),o=!1)}else{l=t.stateNode,Ri(e,t),u=t.memoizedProps,c=t.type===t.elementType?u:gi(t.type,u),l.props=c,d=t.pendingProps,p=l.context,s="object"===r(s=n.contextType)&&null!==s?Pi(s):Lo(t,s=Ro(n)?No:Ao.current);var h=n.getDerivedStateFromProps;(f="function"==typeof h||"function"==typeof l.getSnapshotBeforeUpdate)||"function"!=typeof l.UNSAFE_componentWillReceiveProps&&"function"!=typeof l.componentWillReceiveProps||(u!==d||p!==s)&&qi(t,l,o,s),Ni=!1,p=t.memoizedState,l.state=p,Ui(t,o,l,i);var y=t.memoizedState;u!==d||p!==y||To.current||Ni?("function"==typeof h&&(Vi(t,n,h,o),y=t.memoizedState),(c=Ni||$i(t,n,c,o,p,y,s)||!1)?(f||"function"!=typeof l.UNSAFE_componentWillUpdate&&"function"!=typeof l.componentWillUpdate||("function"==typeof l.componentWillUpdate&&l.componentWillUpdate(o,y,s),"function"==typeof l.UNSAFE_componentWillUpdate&&l.UNSAFE_componentWillUpdate(o,y,s)),"function"==typeof l.componentDidUpdate&&(t.flags|=4),"function"==typeof l.getSnapshotBeforeUpdate&&(t.flags|=1024)):("function"!=typeof l.componentDidUpdate||u===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),"function"!=typeof l.getSnapshotBeforeUpdate||u===e.memoizedProps&&p===e.memoizedState||(t.flags|=1024),t.memoizedProps=o,t.memoizedState=y),l.props=o,l.state=y,l.context=s,o=c):("function"!=typeof l.componentDidUpdate||u===e.memoizedProps&&p===e.memoizedState||(t.flags|=4),"function"!=typeof l.getSnapshotBeforeUpdate||u===e.memoizedProps&&p===e.memoizedState||(t.flags|=1024),o=!1)}return Al(e,t,n,o,a,i)}function Al(e,t,n,r,o,i){Pl(e,t);var a=0!=(128&t.flags);if(!r&&!a)return o&&Uo(t,n,!1),ql(e,t,i);r=t.stateNode,_l.current=t;var l=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&a?(t.child=Xi(t,e.child,null,i),t.child=Xi(t,null,l,i)):Sl(e,t,l,i),t.memoizedState=r.state,o&&Uo(t,n,!0),t.child}function Tl(e){var t=e.stateNode;t.pendingContext?Io(0,t.pendingContext,t.pendingContext!==t.context):t.context&&Io(0,t.context,!1),ia(e,t.containerInfo)}function Nl(e,t,n,r,o){return yi(),vi(o),t.flags|=256,Sl(e,t,n,r),t.child}var Ll,Rl,Dl,Il,Ml={dehydrated:null,treeContext:null,retryLane:0};function Fl(e){return{baseLanes:e,cachePool:null,transitions:null}}function Ul(e,t,n){var r,o=t.pendingProps,i=sa.current,l=!1,u=0!=(128&t.flags);if((r=u)||(r=(null===e||null!==e.memoizedState)&&0!=(2&i)),r?(l=!0,t.flags&=-129):null!==e&&null===e.memoizedState||(i|=1),jo(sa,1&i),null===e)return fi(t),null!==(e=t.memoizedState)&&null!==(e=e.dehydrated)?(0==(1&t.mode)?t.lanes=1:"$!"===e.data?t.lanes=8:t.lanes=1073741824,null):(u=o.children,e=o.fallback,l?(o=t.mode,l=t.child,u={mode:"hidden",children:u},0==(1&o)&&null!==l?(l.childLanes=0,l.pendingProps=u):l=Fs(u,o,0,null),e=Ms(e,o,n,null),l.return=t,e.return=t,l.sibling=e,t.child=l,t.child.memoizedState=Fl(n),t.memoizedState=Ml,e):zl(t,u));if(null!==(i=e.memoizedState)&&null!==(r=i.dehydrated))return function(e,t,n,r,o,i,l){if(n)return 256&t.flags?(t.flags&=-257,Bl(e,t,l,r=dl(Error(a(422))))):null!==t.memoizedState?(t.child=e.child,t.flags|=128,null):(i=r.fallback,o=t.mode,r=Fs({mode:"visible",children:r.children},o,0,null),(i=Ms(i,o,l,null)).flags|=2,r.return=t,i.return=t,r.sibling=i,t.child=r,0!=(1&t.mode)&&Xi(t,e.child,null,l),t.child.memoizedState=Fl(l),t.memoizedState=Ml,i);if(0==(1&t.mode))return Bl(e,t,l,null);if("$!"===o.data){if(r=o.nextSibling&&o.nextSibling.dataset)var u=r.dgst;return r=u,Bl(e,t,l,r=dl(i=Error(a(419)),r,void 0))}if(u=0!=(l&e.childLanes),wl||u){if(null!==(r=Tu)){switch(l&-l){case 4:o=2;break;case 16:o=8;break;case 64:case 128:case 256:case 512:case 1024:case 2048:case 4096:case 8192:case 16384:case 32768:case 65536:case 131072:case 262144:case 524288:case 1048576:case 2097152:case 4194304:case 8388608:case 16777216:case 33554432:case 67108864:o=32;break;case 536870912:o=268435456;break;default:o=0}0!==(o=0!=(o&(r.suspendedLanes|l))?0:o)&&o!==i.retryLane&&(i.retryLane=o,Ti(e,o),os(r,e,o,-1))}return ms(),Bl(e,t,l,r=dl(Error(a(421))))}return"$?"===o.data?(t.flags|=128,t.child=e.child,t=Cs.bind(null,e),o._reactRetry=t,null):(e=i.treeContext,ii=co(o.nextSibling),oi=t,ai=!0,li=null,null!==e&&(Qo[Yo++]=Xo,Qo[Yo++]=Zo,Qo[Yo++]=Jo,Xo=e.id,Zo=e.overflow,Jo=t),(t=zl(t,r.children)).flags|=4096,t)}(e,t,u,o,r,i,n);if(l){l=o.fallback,u=t.mode,r=(i=e.child).sibling;var s={mode:"hidden",children:o.children};return 0==(1&u)&&t.child!==i?((o=t.child).childLanes=0,o.pendingProps=s,t.deletions=null):(o=Ds(i,s)).subtreeFlags=14680064&i.subtreeFlags,null!==r?l=Ds(r,l):(l=Ms(l,u,n,null)).flags|=2,l.return=t,o.return=t,o.sibling=l,t.child=o,o=l,l=t.child,u=null===(u=e.child.memoizedState)?Fl(n):{baseLanes:u.baseLanes|n,cachePool:null,transitions:u.transitions},l.memoizedState=u,l.childLanes=e.childLanes&~n,t.memoizedState=Ml,o}return e=(l=e.child).sibling,o=Ds(l,{mode:"visible",children:o.children}),0==(1&t.mode)&&(o.lanes=n),o.return=t,o.sibling=null,null!==e&&(null===(n=t.deletions)?(t.deletions=[e],t.flags|=16):n.push(e)),t.child=o,t.memoizedState=null,o}function zl(e,t){return(t=Fs({mode:"visible",children:t},e.mode,0,null)).return=e,e.child=t}function Bl(e,t,n,r){return null!==r&&vi(r),Xi(t,e.child,null,n),(e=zl(t,t.pendingProps.children)).flags|=2,t.memoizedState=null,e}function Vl(e,t,n){e.lanes|=t;var r=e.alternate;null!==r&&(r.lanes|=t),Oi(e.return,t,n)}function Wl(e,t,n,r,o){var i=e.memoizedState;null===i?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:o}:(i.isBackwards=t,i.rendering=null,i.renderingStartTime=0,i.last=r,i.tail=n,i.tailMode=o)}function $l(e,t,n){var r=t.pendingProps,o=r.revealOrder,i=r.tail;if(Sl(e,t,r.children,n),0!=(2&(r=sa.current)))r=1&r|2,t.flags|=128;else{if(null!==e&&0!=(128&e.flags))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Vl(e,n,t);else if(19===e.tag)Vl(e,n,t);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(jo(sa,r),0==(1&t.mode))t.memoizedState=null;else switch(o){case"forwards":for(n=t.child,o=null;null!==n;)null!==(e=n.alternate)&&null===ca(e)&&(o=n),n=n.sibling;null===(n=o)?(o=t.child,t.child=null):(o=n.sibling,n.sibling=null),Wl(t,!1,o,n,i);break;case"backwards":for(n=null,o=t.child,t.child=null;null!==o;){if(null!==(e=o.alternate)&&null===ca(e)){t.child=o;break}e=o.sibling,o.sibling=n,n=o,o=e}Wl(t,!0,n,null,i);break;case"together":Wl(t,!1,null,null,void 0);break;default:t.memoizedState=null}return t.child}function Hl(e,t){0==(1&t.mode)&&null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2)}function ql(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Fu|=t.lanes,0==(n&t.childLanes))return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Ds(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Ds(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Gl(e,t){if(!ai)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Kl(e){var t=null!==e.alternate&&e.alternate.child===e.child,n=0,r=0;if(t)for(var o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=14680064&o.subtreeFlags,r|=14680064&o.flags,o.return=e,o=o.sibling;else for(o=e.child;null!==o;)n|=o.lanes|o.childLanes,r|=o.subtreeFlags,r|=o.flags,o.return=e,o=o.sibling;return e.subtreeFlags|=r,e.childLanes=n,t}function Ql(e,t,n){var r=t.pendingProps;switch(ri(t),t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return Kl(t),null;case 1:case 17:return Ro(t.type)&&Do(),Kl(t),null;case 3:return r=t.stateNode,aa(),Po(To),Po(Ao),da(),r.pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(pi(t)?t.flags|=4:null===e||e.memoizedState.isDehydrated&&0==(256&t.flags)||(t.flags|=1024,null!==li&&(us(li),li=null))),Rl(e,t),Kl(t),null;case 5:ua(t);var o=oa(ra.current);if(n=t.type,null!==e&&null!=t.stateNode)Dl(e,t,n,r,o),e.ref!==t.ref&&(t.flags|=512,t.flags|=2097152);else{if(!r){if(null===t.stateNode)throw Error(a(166));return Kl(t),null}if(e=oa(ta.current),pi(t)){r=t.stateNode,n=t.type;var i=t.memoizedProps;switch(r[ho]=t,r[yo]=i,e=0!=(1&t.mode),n){case"dialog":zr("cancel",r),zr("close",r);break;case"iframe":case"object":case"embed":zr("load",r);break;case"video":case"audio":for(o=0;o<Ir.length;o++)zr(Ir[o],r);break;case"source":zr("error",r);break;case"img":case"image":case"link":zr("error",r),zr("load",r);break;case"details":zr("toggle",r);break;case"input":J(r,i),zr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!i.multiple},zr("invalid",r);break;case"textarea":ie(r,i),zr("invalid",r)}for(var l in be(n,i),o=null,i)if(i.hasOwnProperty(l)){var s=i[l];"children"===l?"string"==typeof s?r.textContent!==s&&(!0!==i.suppressHydrationWarning&&Zr(r.textContent,s,e),o=["children",s]):"number"==typeof s&&r.textContent!==""+s&&(!0!==i.suppressHydrationWarning&&Zr(r.textContent,s,e),o=["children",""+s]):u.hasOwnProperty(l)&&null!=s&&"onScroll"===l&&zr("scroll",r)}switch(n){case"input":G(r),ee(r,i,!0);break;case"textarea":G(r),le(r);break;case"select":case"option":break;default:"function"==typeof i.onClick&&(r.onclick=eo)}r=o,t.updateQueue=r,null!==r&&(t.flags|=4)}else{l=9===o.nodeType?o:o.ownerDocument,"http://www.w3.org/1999/xhtml"===e&&(e=ue(n)),"http://www.w3.org/1999/xhtml"===e?"script"===n?((e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=l.createElement(n,{is:r.is}):(e=l.createElement(n),"select"===n&&(l=e,r.multiple?l.multiple=!0:r.size&&(l.size=r.size))):e=l.createElementNS(e,n),e[ho]=t,e[yo]=r,Ll(e,t,!1,!1),t.stateNode=e;e:{switch(l=_e(n,r),n){case"dialog":zr("cancel",e),zr("close",e),o=r;break;case"iframe":case"object":case"embed":zr("load",e),o=r;break;case"video":case"audio":for(o=0;o<Ir.length;o++)zr(Ir[o],e);o=r;break;case"source":zr("error",e),o=r;break;case"img":case"image":case"link":zr("error",e),zr("load",e),o=r;break;case"details":zr("toggle",e),o=r;break;case"input":J(e,r),o=Y(e,r),zr("invalid",e);break;case"option":default:o=r;break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=F({},r,{value:void 0}),zr("invalid",e);break;case"textarea":ie(e,r),o=oe(e,r),zr("invalid",e)}for(i in be(n,o),s=o)if(s.hasOwnProperty(i)){var c=s[i];"style"===i?me(e,c):"dangerouslySetInnerHTML"===i?null!=(c=c?c.__html:void 0)&&de(e,c):"children"===i?"string"==typeof c?("textarea"!==n||""!==c)&&pe(e,c):"number"==typeof c&&pe(e,""+c):"suppressContentEditableWarning"!==i&&"suppressHydrationWarning"!==i&&"autoFocus"!==i&&(u.hasOwnProperty(i)?null!=c&&"onScroll"===i&&zr("scroll",e):null!=c&&_(e,i,c,l))}switch(n){case"input":G(e),ee(e,r,!1);break;case"textarea":G(e),le(e);break;case"option":null!=r.value&&e.setAttribute("value",""+H(r.value));break;case"select":e.multiple=!!r.multiple,null!=(i=r.value)?re(e,!!r.multiple,i,!1):null!=r.defaultValue&&re(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof o.onClick&&(e.onclick=eo)}switch(n){case"button":case"input":case"select":case"textarea":r=!!r.autoFocus;break e;case"img":r=!0;break e;default:r=!1}}r&&(t.flags|=4)}null!==t.ref&&(t.flags|=512,t.flags|=2097152)}return Kl(t),null;case 6:if(e&&null!=t.stateNode)Il(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));if(n=oa(ra.current),oa(ta.current),pi(t)){if(r=t.stateNode,n=t.memoizedProps,r[ho]=t,(i=r.nodeValue!==n)&&null!==(e=oi))switch(e.tag){case 3:Zr(r.nodeValue,n,0!=(1&e.mode));break;case 5:!0!==e.memoizedProps.suppressHydrationWarning&&Zr(r.nodeValue,n,0!=(1&e.mode))}i&&(t.flags|=4)}else(r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[ho]=t,t.stateNode=r}return Kl(t),null;case 13:if(Po(sa),r=t.memoizedState,null===e||null!==e.memoizedState&&null!==e.memoizedState.dehydrated){if(ai&&null!==ii&&0!=(1&t.mode)&&0==(128&t.flags))hi(),yi(),t.flags|=98560,i=!1;else if(i=pi(t),null!==r&&null!==r.dehydrated){if(null===e){if(!i)throw Error(a(318));if(!(i=null!==(i=t.memoizedState)?i.dehydrated:null))throw Error(a(317));i[ho]=t}else yi(),0==(128&t.flags)&&(t.memoizedState=null),t.flags|=4;Kl(t),i=!1}else null!==li&&(us(li),li=null),i=!0;if(!i)return 65536&t.flags?t:null}return 0!=(128&t.flags)?(t.lanes=n,t):((r=null!==r)!=(null!==e&&null!==e.memoizedState)&&r&&(t.child.flags|=8192,0!=(1&t.mode)&&(null===e||0!=(1&sa.current)?0===Iu&&(Iu=3):ms())),null!==t.updateQueue&&(t.flags|=4),Kl(t),null);case 4:return aa(),Rl(e,t),null===e&&Wr(t.stateNode.containerInfo),Kl(t),null;case 10:return xi(t.type._context),Kl(t),null;case 19:if(Po(sa),null===(i=t.memoizedState))return Kl(t),null;if(r=0!=(128&t.flags),null===(l=i.rendering))if(r)Gl(i,!1);else{if(0!==Iu||null!==e&&0!=(128&e.flags))for(e=t.child;null!==e;){if(null!==(l=ca(e))){for(t.flags|=128,Gl(i,!1),null!==(r=l.updateQueue)&&(t.updateQueue=r,t.flags|=4),t.subtreeFlags=0,r=n,n=t.child;null!==n;)e=r,(i=n).flags&=14680066,null===(l=i.alternate)?(i.childLanes=0,i.lanes=e,i.child=null,i.subtreeFlags=0,i.memoizedProps=null,i.memoizedState=null,i.updateQueue=null,i.dependencies=null,i.stateNode=null):(i.childLanes=l.childLanes,i.lanes=l.lanes,i.child=l.child,i.subtreeFlags=0,i.deletions=null,i.memoizedProps=l.memoizedProps,i.memoizedState=l.memoizedState,i.updateQueue=l.updateQueue,i.type=l.type,e=l.dependencies,i.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return jo(sa,1&sa.current|2),t.child}e=e.sibling}null!==i.tail&&Xe()>$u&&(t.flags|=128,r=!0,Gl(i,!1),t.lanes=4194304)}else{if(!r)if(null!==(e=ca(l))){if(t.flags|=128,r=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),Gl(i,!0),null===i.tail&&"hidden"===i.tailMode&&!l.alternate&&!ai)return Kl(t),null}else 2*Xe()-i.renderingStartTime>$u&&1073741824!==n&&(t.flags|=128,r=!0,Gl(i,!1),t.lanes=4194304);i.isBackwards?(l.sibling=t.child,t.child=l):(null!==(n=i.last)?n.sibling=l:t.child=l,i.last=l)}return null!==i.tail?(t=i.tail,i.rendering=t,i.tail=t.sibling,i.renderingStartTime=Xe(),t.sibling=null,n=sa.current,jo(sa,r?1&n|2:1&n),t):(Kl(t),null);case 22:case 23:return ps(),r=null!==t.memoizedState,null!==e&&null!==e.memoizedState!==r&&(t.flags|=8192),r&&0!=(1&t.mode)?0!=(1073741824&Ru)&&(Kl(t),6&t.subtreeFlags&&(t.flags|=8192)):Kl(t),null;case 24:case 25:return null}throw Error(a(156,t.tag))}function Yl(e,t){switch(ri(t),t.tag){case 1:return Ro(t.type)&&Do(),65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 3:return aa(),Po(To),Po(Ao),da(),0!=(65536&(e=t.flags))&&0==(128&e)?(t.flags=-65537&e|128,t):null;case 5:return ua(t),null;case 13:if(Po(sa),null!==(e=t.memoizedState)&&null!==e.dehydrated){if(null===t.alternate)throw Error(a(340));yi()}return 65536&(e=t.flags)?(t.flags=-65537&e|128,t):null;case 19:return Po(sa),null;case 4:return aa(),null;case 10:return xi(t.type._context),null;case 22:case 23:return ps(),null;default:return null}}Ll=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Rl=function(){},Dl=function(e,t,n,r){var o=e.memoizedProps;if(o!==r){e=t.stateNode,oa(ta.current);var i,a=null;switch(n){case"input":o=Y(e,o),r=Y(e,r),a=[];break;case"select":o=F({},o,{value:void 0}),r=F({},r,{value:void 0}),a=[];break;case"textarea":o=oe(e,o),r=oe(e,r),a=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(e.onclick=eo)}for(c in be(n,r),n=null,o)if(!r.hasOwnProperty(c)&&o.hasOwnProperty(c)&&null!=o[c])if("style"===c){var l=o[c];for(i in l)l.hasOwnProperty(i)&&(n||(n={}),n[i]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(u.hasOwnProperty(c)?a||(a=[]):(a=a||[]).push(c,null));for(c in r){var s=r[c];if(l=null!=o?o[c]:void 0,r.hasOwnProperty(c)&&s!==l&&(null!=s||null!=l))if("style"===c)if(l){for(i in l)!l.hasOwnProperty(i)||s&&s.hasOwnProperty(i)||(n||(n={}),n[i]="");for(i in s)s.hasOwnProperty(i)&&l[i]!==s[i]&&(n||(n={}),n[i]=s[i])}else n||(a||(a=[]),a.push(c,n)),n=s;else"dangerouslySetInnerHTML"===c?(s=s?s.__html:void 0,l=l?l.__html:void 0,null!=s&&l!==s&&(a=a||[]).push(c,s)):"children"===c?"string"!=typeof s&&"number"!=typeof s||(a=a||[]).push(c,""+s):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(u.hasOwnProperty(c)?(null!=s&&"onScroll"===c&&zr("scroll",e),a||l===s||(a=[])):(a=a||[]).push(c,s))}n&&(a=a||[]).push("style",n);var c=a;(t.updateQueue=c)&&(t.flags|=4)}},Il=function(e,t,n,r){n!==r&&(t.flags|=4)};var Jl=!1,Xl=!1,Zl="function"==typeof WeakSet?WeakSet:Set,eu=null;function tu(e,t){var n=e.ref;if(null!==n)if("function"==typeof n)try{n(null)}catch(n){Es(e,t,n)}else n.current=null}function nu(e,t,n){try{n()}catch(n){Es(e,t,n)}}var ru=!1;function ou(e,t,n){var r=t.updateQueue;if(null!==(r=null!==r?r.lastEffect:null)){var o=r=r.next;do{if((o.tag&e)===e){var i=o.destroy;o.destroy=void 0,void 0!==i&&nu(t,n,i)}o=o.next}while(o!==r)}}function iu(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function au(e){var t=e.ref;if(null!==t){var n=e.stateNode;e.tag,e=n,"function"==typeof t?t(e):t.current=e}}function lu(e){var t=e.alternate;null!==t&&(e.alternate=null,lu(t)),e.child=null,e.deletions=null,e.sibling=null,5===e.tag&&null!==(t=e.stateNode)&&(delete t[ho],delete t[yo],delete t[mo],delete t[go],delete t[bo]),e.stateNode=null,e.return=null,e.dependencies=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.stateNode=null,e.updateQueue=null}function uu(e){return 5===e.tag||3===e.tag||4===e.tag}function su(e){e:for(;;){for(;null===e.sibling;){if(null===e.return||uu(e.return))return null;e=e.return}for(e.sibling.return=e.return,e=e.sibling;5!==e.tag&&6!==e.tag&&18!==e.tag;){if(2&e.flags)continue e;if(null===e.child||4===e.tag)continue e;e.child.return=e,e=e.child}if(!(2&e.flags))return e.stateNode}}function cu(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=eo));else if(4!==r&&null!==(e=e.child))for(cu(e,t,n),e=e.sibling;null!==e;)cu(e,t,n),e=e.sibling}function fu(e,t,n){var r=e.tag;if(5===r||6===r)e=e.stateNode,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(fu(e,t,n),e=e.sibling;null!==e;)fu(e,t,n),e=e.sibling}var du=null,pu=!1;function hu(e,t,n){for(n=n.child;null!==n;)yu(e,t,n),n=n.sibling}function yu(e,t,n){if(at&&"function"==typeof at.onCommitFiberUnmount)try{at.onCommitFiberUnmount(it,n)}catch(e){}switch(n.tag){case 5:Xl||tu(n,t);case 6:var r=du,o=pu;du=null,hu(e,t,n),pu=o,null!==(du=r)&&(pu?(e=du,n=n.stateNode,8===e.nodeType?e.parentNode.removeChild(n):e.removeChild(n)):du.removeChild(n.stateNode));break;case 18:null!==du&&(pu?(e=du,n=n.stateNode,8===e.nodeType?so(e.parentNode,n):1===e.nodeType&&so(e,n),Wt(e)):so(du,n.stateNode));break;case 4:r=du,o=pu,du=n.stateNode.containerInfo,pu=!0,hu(e,t,n),du=r,pu=o;break;case 0:case 11:case 14:case 15:if(!Xl&&null!==(r=n.updateQueue)&&null!==(r=r.lastEffect)){o=r=r.next;do{var i=o,a=i.destroy;i=i.tag,void 0!==a&&(0!=(2&i)||0!=(4&i))&&nu(n,t,a),o=o.next}while(o!==r)}hu(e,t,n);break;case 1:if(!Xl&&(tu(n,t),"function"==typeof(r=n.stateNode).componentWillUnmount))try{r.props=n.memoizedProps,r.state=n.memoizedState,r.componentWillUnmount()}catch(e){Es(n,t,e)}hu(e,t,n);break;case 21:hu(e,t,n);break;case 22:1&n.mode?(Xl=(r=Xl)||null!==n.memoizedState,hu(e,t,n),Xl=r):hu(e,t,n);break;default:hu(e,t,n)}}function vu(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Zl),t.forEach((function(t){var r=As.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function mu(e,t){var n=t.deletions;if(null!==n)for(var r=0;r<n.length;r++){var o=n[r];try{var i=e,l=t,u=l;e:for(;null!==u;){switch(u.tag){case 5:du=u.stateNode,pu=!1;break e;case 3:case 4:du=u.stateNode.containerInfo,pu=!0;break e}u=u.return}if(null===du)throw Error(a(160));yu(i,l,o),du=null,pu=!1;var s=o.alternate;null!==s&&(s.return=null),o.return=null}catch(e){Es(o,t,e)}}if(12854&t.subtreeFlags)for(t=t.child;null!==t;)gu(t,e),t=t.sibling}function gu(e,t){var n=e.alternate,r=e.flags;switch(e.tag){case 0:case 11:case 14:case 15:if(mu(t,e),bu(e),4&r){try{ou(3,e,e.return),iu(3,e)}catch(t){Es(e,e.return,t)}try{ou(5,e,e.return)}catch(t){Es(e,e.return,t)}}break;case 1:mu(t,e),bu(e),512&r&&null!==n&&tu(n,n.return);break;case 5:if(mu(t,e),bu(e),512&r&&null!==n&&tu(n,n.return),32&e.flags){var o=e.stateNode;try{pe(o,"")}catch(t){Es(e,e.return,t)}}if(4&r&&null!=(o=e.stateNode)){var i=e.memoizedProps,l=null!==n?n.memoizedProps:i,u=e.type,s=e.updateQueue;if(e.updateQueue=null,null!==s)try{"input"===u&&"radio"===i.type&&null!=i.name&&X(o,i),_e(u,l);var c=_e(u,i);for(l=0;l<s.length;l+=2){var f=s[l],d=s[l+1];"style"===f?me(o,d):"dangerouslySetInnerHTML"===f?de(o,d):"children"===f?pe(o,d):_(o,f,d,c)}switch(u){case"input":Z(o,i);break;case"textarea":ae(o,i);break;case"select":var p=o._wrapperState.wasMultiple;o._wrapperState.wasMultiple=!!i.multiple;var h=i.value;null!=h?re(o,!!i.multiple,h,!1):p!==!!i.multiple&&(null!=i.defaultValue?re(o,!!i.multiple,i.defaultValue,!0):re(o,!!i.multiple,i.multiple?[]:"",!1))}o[yo]=i}catch(t){Es(e,e.return,t)}}break;case 6:if(mu(t,e),bu(e),4&r){if(null===e.stateNode)throw Error(a(162));o=e.stateNode,i=e.memoizedProps;try{o.nodeValue=i}catch(t){Es(e,e.return,t)}}break;case 3:if(mu(t,e),bu(e),4&r&&null!==n&&n.memoizedState.isDehydrated)try{Wt(t.containerInfo)}catch(t){Es(e,e.return,t)}break;case 4:default:mu(t,e),bu(e);break;case 13:mu(t,e),bu(e),8192&(o=e.child).flags&&(i=null!==o.memoizedState,o.stateNode.isHidden=i,!i||null!==o.alternate&&null!==o.alternate.memoizedState||(Wu=Xe())),4&r&&vu(e);break;case 22:if(f=null!==n&&null!==n.memoizedState,1&e.mode?(Xl=(c=Xl)||f,mu(t,e),Xl=c):mu(t,e),bu(e),8192&r){if(c=null!==e.memoizedState,(e.stateNode.isHidden=c)&&!f&&0!=(1&e.mode))for(eu=e,f=e.child;null!==f;){for(d=eu=f;null!==eu;){switch(h=(p=eu).child,p.tag){case 0:case 11:case 14:case 15:ou(4,p,p.return);break;case 1:tu(p,p.return);var y=p.stateNode;if("function"==typeof y.componentWillUnmount){r=p,n=p.return;try{t=r,y.props=t.memoizedProps,y.state=t.memoizedState,y.componentWillUnmount()}catch(e){Es(r,n,e)}}break;case 5:tu(p,p.return);break;case 22:if(null!==p.memoizedState){ku(d);continue}}null!==h?(h.return=p,eu=h):ku(d)}f=f.sibling}e:for(f=null,d=e;;){if(5===d.tag){if(null===f){f=d;try{o=d.stateNode,c?"function"==typeof(i=o.style).setProperty?i.setProperty("display","none","important"):i.display="none":(u=d.stateNode,l=null!=(s=d.memoizedProps.style)&&s.hasOwnProperty("display")?s.display:null,u.style.display=ve("display",l))}catch(t){Es(e,e.return,t)}}}else if(6===d.tag){if(null===f)try{d.stateNode.nodeValue=c?"":d.memoizedProps}catch(t){Es(e,e.return,t)}}else if((22!==d.tag&&23!==d.tag||null===d.memoizedState||d===e)&&null!==d.child){d.child.return=d,d=d.child;continue}if(d===e)break e;for(;null===d.sibling;){if(null===d.return||d.return===e)break e;f===d&&(f=null),d=d.return}f===d&&(f=null),d.sibling.return=d.return,d=d.sibling}}break;case 19:mu(t,e),bu(e),4&r&&vu(e);case 21:}}function bu(e){var t=e.flags;if(2&t){try{e:{for(var n=e.return;null!==n;){if(uu(n)){var r=n;break e}n=n.return}throw Error(a(160))}switch(r.tag){case 5:var o=r.stateNode;32&r.flags&&(pe(o,""),r.flags&=-33),fu(e,su(e),o);break;case 3:case 4:var i=r.stateNode.containerInfo;cu(e,su(e),i);break;default:throw Error(a(161))}}catch(t){Es(e,e.return,t)}e.flags&=-3}4096&t&&(e.flags&=-4097)}function _u(e,t,n){eu=e,wu(e,t,n)}function wu(e,t,n){for(var r=0!=(1&e.mode);null!==eu;){var o=eu,i=o.child;if(22===o.tag&&r){var a=null!==o.memoizedState||Jl;if(!a){var l=o.alternate,u=null!==l&&null!==l.memoizedState||Xl;l=Jl;var s=Xl;if(Jl=a,(Xl=u)&&!s)for(eu=o;null!==eu;)u=(a=eu).child,22===a.tag&&null!==a.memoizedState?xu(o):null!==u?(u.return=a,eu=u):xu(o);for(;null!==i;)eu=i,wu(i,t,n),i=i.sibling;eu=o,Jl=l,Xl=s}Su(e)}else 0!=(8772&o.subtreeFlags)&&null!==i?(i.return=o,eu=i):Su(e)}}function Su(e){for(;null!==eu;){var t=eu;if(0!=(8772&t.flags)){var n=t.alternate;try{if(0!=(8772&t.flags))switch(t.tag){case 0:case 11:case 15:Xl||iu(5,t);break;case 1:var r=t.stateNode;if(4&t.flags&&!Xl)if(null===n)r.componentDidMount();else{var o=t.elementType===t.type?n.memoizedProps:gi(t.type,n.memoizedProps);r.componentDidUpdate(o,n.memoizedState,r.__reactInternalSnapshotBeforeUpdate)}var i=t.updateQueue;null!==i&&zi(t,i,r);break;case 3:var l=t.updateQueue;if(null!==l){if(n=null,null!==t.child)switch(t.child.tag){case 5:case 1:n=t.child.stateNode}zi(t,l,n)}break;case 5:var u=t.stateNode;if(null===n&&4&t.flags){n=u;var s=t.memoizedProps;switch(t.type){case"button":case"input":case"select":case"textarea":s.autoFocus&&n.focus();break;case"img":s.src&&(n.src=s.src)}}break;case 6:case 4:case 12:case 19:case 17:case 21:case 22:case 23:case 25:break;case 13:if(null===t.memoizedState){var c=t.alternate;if(null!==c){var f=c.memoizedState;if(null!==f){var d=f.dehydrated;null!==d&&Wt(d)}}}break;default:throw Error(a(163))}Xl||512&t.flags&&au(t)}catch(e){Es(t,t.return,e)}}if(t===e){eu=null;break}if(null!==(n=t.sibling)){n.return=t.return,eu=n;break}eu=t.return}}function ku(e){for(;null!==eu;){var t=eu;if(t===e){eu=null;break}var n=t.sibling;if(null!==n){n.return=t.return,eu=n;break}eu=t.return}}function xu(e){for(;null!==eu;){var t=eu;try{switch(t.tag){case 0:case 11:case 15:var n=t.return;try{iu(4,t)}catch(e){Es(t,n,e)}break;case 1:var r=t.stateNode;if("function"==typeof r.componentDidMount){var o=t.return;try{r.componentDidMount()}catch(e){Es(t,o,e)}}var i=t.return;try{au(t)}catch(e){Es(t,i,e)}break;case 5:var a=t.return;try{au(t)}catch(e){Es(t,a,e)}}}catch(e){Es(t,t.return,e)}if(t===e){eu=null;break}var l=t.sibling;if(null!==l){l.return=t.return,eu=l;break}eu=t.return}}var Ou,Eu=Math.ceil,Pu=w.ReactCurrentDispatcher,ju=w.ReactCurrentOwner,Cu=w.ReactCurrentBatchConfig,Au=0,Tu=null,Nu=null,Lu=0,Ru=0,Du=Eo(0),Iu=0,Mu=null,Fu=0,Uu=0,zu=0,Bu=null,Vu=null,Wu=0,$u=1/0,Hu=null,qu=!1,Gu=null,Ku=null,Qu=!1,Yu=null,Ju=0,Xu=0,Zu=null,es=-1,ts=0;function ns(){return 0!=(6&Au)?Xe():-1!==es?es:es=Xe()}function rs(e){return 0==(1&e.mode)?1:0!=(2&Au)&&0!==Lu?Lu&-Lu:null!==mi.transition?(0===ts&&(ts=vt()),ts):0!==(e=_t)?e:e=void 0===(e=window.event)?16:Jt(e.type)}function os(e,t,n,r){if(50<Xu)throw Xu=0,Zu=null,Error(a(185));gt(e,n,r),0!=(2&Au)&&e===Tu||(e===Tu&&(0==(2&Au)&&(Uu|=n),4===Iu&&ss(e,Lu)),is(e,r),1===n&&0===Au&&0==(1&t.mode)&&($u=Xe()+500,Bo&&$o()))}function is(e,t){var n=e.callbackNode;!function(e,t){for(var n=e.suspendedLanes,r=e.pingedLanes,o=e.expirationTimes,i=e.pendingLanes;0<i;){var a=31-lt(i),l=1<<a,u=o[a];-1===u?0!=(l&n)&&0==(l&r)||(o[a]=ht(l,t)):u<=t&&(e.expiredLanes|=l),i&=~l}}(e,t);var r=pt(e,e===Tu?Lu:0);if(0===r)null!==n&&Qe(n),e.callbackNode=null,e.callbackPriority=0;else if(t=r&-r,e.callbackPriority!==t){if(null!=n&&Qe(n),1===t)0===e.tag?function(e){Bo=!0,Wo(e)}(cs.bind(null,e)):Wo(cs.bind(null,e)),lo((function(){0==(6&Au)&&$o()})),n=null;else{switch(wt(r)){case 1:n=et;break;case 4:n=tt;break;case 16:default:n=nt;break;case 536870912:n=ot}n=Ts(n,as.bind(null,e))}e.callbackPriority=t,e.callbackNode=n}}function as(e,t){if(es=-1,ts=0,0!=(6&Au))throw Error(a(327));var n=e.callbackNode;if(xs()&&e.callbackNode!==n)return null;var r=pt(e,e===Tu?Lu:0);if(0===r)return null;if(0!=(30&r)||0!=(r&e.expiredLanes)||t)t=gs(e,r);else{t=r;var o=Au;Au|=2;var i=vs();for(Tu===e&&Lu===t||(Hu=null,$u=Xe()+500,hs(e,t));;)try{_s();break}catch(t){ys(e,t)}ki(),Pu.current=i,Au=o,null!==Nu?t=0:(Tu=null,Lu=0,t=Iu)}if(0!==t){if(2===t&&0!==(o=yt(e))&&(r=o,t=ls(e,o)),1===t)throw n=Mu,hs(e,0),ss(e,r),is(e,Xe()),n;if(6===t)ss(e,r);else{if(o=e.current.alternate,0==(30&r)&&!function(e){for(var t=e;;){if(16384&t.flags){var n=t.updateQueue;if(null!==n&&null!==(n=n.stores))for(var r=0;r<n.length;r++){var o=n[r],i=o.getSnapshot;o=o.value;try{if(!ur(i(),o))return!1}catch(e){return!1}}}if(n=t.child,16384&t.subtreeFlags&&null!==n)n.return=t,t=n;else{if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return!0;t=t.return}t.sibling.return=t.return,t=t.sibling}}return!0}(o)&&(2===(t=gs(e,r))&&0!==(i=yt(e))&&(r=i,t=ls(e,i)),1===t))throw n=Mu,hs(e,0),ss(e,r),is(e,Xe()),n;switch(e.finishedWork=o,e.finishedLanes=r,t){case 0:case 1:throw Error(a(345));case 2:case 5:ks(e,Vu,Hu);break;case 3:if(ss(e,r),(130023424&r)===r&&10<(t=Wu+500-Xe())){if(0!==pt(e,0))break;if(((o=e.suspendedLanes)&r)!==r){ns(),e.pingedLanes|=e.suspendedLanes&o;break}e.timeoutHandle=oo(ks.bind(null,e,Vu,Hu),t);break}ks(e,Vu,Hu);break;case 4:if(ss(e,r),(4194240&r)===r)break;for(t=e.eventTimes,o=-1;0<r;){var l=31-lt(r);i=1<<l,(l=t[l])>o&&(o=l),r&=~i}if(r=o,10<(r=(120>(r=Xe()-r)?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*Eu(r/1960))-r)){e.timeoutHandle=oo(ks.bind(null,e,Vu,Hu),r);break}ks(e,Vu,Hu);break;default:throw Error(a(329))}}}return is(e,Xe()),e.callbackNode===n?as.bind(null,e):null}function ls(e,t){var n=Bu;return e.current.memoizedState.isDehydrated&&(hs(e,t).flags|=256),2!==(e=gs(e,t))&&(t=Vu,Vu=n,null!==t&&us(t)),e}function us(e){null===Vu?Vu=e:Vu.push.apply(Vu,e)}function ss(e,t){for(t&=~zu,t&=~Uu,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-lt(t),r=1<<n;e[n]=-1,t&=~r}}function cs(e){if(0!=(6&Au))throw Error(a(327));xs();var t=pt(e,0);if(0==(1&t))return is(e,Xe()),null;var n=gs(e,t);if(0!==e.tag&&2===n){var r=yt(e);0!==r&&(t=r,n=ls(e,r))}if(1===n)throw n=Mu,hs(e,0),ss(e,t),is(e,Xe()),n;if(6===n)throw Error(a(345));return e.finishedWork=e.current.alternate,e.finishedLanes=t,ks(e,Vu,Hu),is(e,Xe()),null}function fs(e,t){var n=Au;Au|=1;try{return e(t)}finally{0===(Au=n)&&($u=Xe()+500,Bo&&$o())}}function ds(e){null!==Yu&&0===Yu.tag&&0==(6&Au)&&xs();var t=Au;Au|=1;var n=Cu.transition,r=_t;try{if(Cu.transition=null,_t=1,e)return e()}finally{_t=r,Cu.transition=n,0==(6&(Au=t))&&$o()}}function ps(){Ru=Du.current,Po(Du)}function hs(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,io(n)),null!==Nu)for(n=Nu.return;null!==n;){var r=n;switch(ri(r),r.tag){case 1:null!=(r=r.type.childContextTypes)&&Do();break;case 3:aa(),Po(To),Po(Ao),da();break;case 5:ua(r);break;case 4:aa();break;case 13:case 19:Po(sa);break;case 10:xi(r.type._context);break;case 22:case 23:ps()}n=n.return}if(Tu=e,Nu=e=Ds(e.current,null),Lu=Ru=t,Iu=0,Mu=null,zu=Uu=Fu=0,Vu=Bu=null,null!==ji){for(t=0;t<ji.length;t++)if(null!==(r=(n=ji[t]).interleaved)){n.interleaved=null;var o=r.next,i=n.pending;if(null!==i){var a=i.next;i.next=o,r.next=a}n.pending=r}ji=null}return e}function ys(e,t){for(;;){var n=Nu;try{if(ki(),pa.current=ll,ba){for(var o=va.memoizedState;null!==o;){var i=o.queue;null!==i&&(i.pending=null),o=o.next}ba=!1}if(ya=0,ga=ma=va=null,_a=!1,wa=0,ju.current=null,null===n||null===n.return){Iu=1,Mu=t,Nu=null;break}e:{var l=e,u=n.return,s=n,c=t;if(t=Lu,s.flags|=32768,null!==c&&"object"===r(c)&&"function"==typeof c.then){var f=c,d=s,p=d.tag;if(0==(1&d.mode)&&(0===p||11===p||15===p)){var h=d.alternate;h?(d.updateQueue=h.updateQueue,d.memoizedState=h.memoizedState,d.lanes=h.lanes):(d.updateQueue=null,d.memoizedState=null)}var y=gl(u);if(null!==y){y.flags&=-257,bl(y,u,s,0,t),1&y.mode&&ml(l,f,t),c=f;var v=(t=y).updateQueue;if(null===v){var m=new Set;m.add(c),t.updateQueue=m}else v.add(c);break e}if(0==(1&t)){ml(l,f,t),ms();break e}c=Error(a(426))}else if(ai&&1&s.mode){var g=gl(u);if(null!==g){0==(65536&g.flags)&&(g.flags|=256),bl(g,u,s,0,t),vi(fl(c,s));break e}}l=c=fl(c,s),4!==Iu&&(Iu=2),null===Bu?Bu=[l]:Bu.push(l),l=u;do{switch(l.tag){case 3:l.flags|=65536,t&=-t,l.lanes|=t,Fi(l,yl(0,c,t));break e;case 1:s=c;var b=l.type,_=l.stateNode;if(0==(128&l.flags)&&("function"==typeof b.getDerivedStateFromError||null!==_&&"function"==typeof _.componentDidCatch&&(null===Ku||!Ku.has(_)))){l.flags|=65536,t&=-t,l.lanes|=t,Fi(l,vl(l,s,t));break e}}l=l.return}while(null!==l)}Ss(n)}catch(e){t=e,Nu===n&&null!==n&&(Nu=n=n.return);continue}break}}function vs(){var e=Pu.current;return Pu.current=ll,null===e?ll:e}function ms(){0!==Iu&&3!==Iu&&2!==Iu||(Iu=4),null===Tu||0==(268435455&Fu)&&0==(268435455&Uu)||ss(Tu,Lu)}function gs(e,t){var n=Au;Au|=2;var r=vs();for(Tu===e&&Lu===t||(Hu=null,hs(e,t));;)try{bs();break}catch(t){ys(e,t)}if(ki(),Au=n,Pu.current=r,null!==Nu)throw Error(a(261));return Tu=null,Lu=0,Iu}function bs(){for(;null!==Nu;)ws(Nu)}function _s(){for(;null!==Nu&&!Ye();)ws(Nu)}function ws(e){var t=Ou(e.alternate,e,Ru);e.memoizedProps=e.pendingProps,null===t?Ss(e):Nu=t,ju.current=null}function Ss(e){var t=e;do{var n=t.alternate;if(e=t.return,0==(32768&t.flags)){if(null!==(n=Ql(n,t,Ru)))return void(Nu=n)}else{if(null!==(n=Yl(n,t)))return n.flags&=32767,void(Nu=n);if(null===e)return Iu=6,void(Nu=null);e.flags|=32768,e.subtreeFlags=0,e.deletions=null}if(null!==(t=t.sibling))return void(Nu=t);Nu=t=e}while(null!==t);0===Iu&&(Iu=5)}function ks(e,t,n){var r=_t,o=Cu.transition;try{Cu.transition=null,_t=1,function(e,t,n,r){do{xs()}while(null!==Yu);if(0!=(6&Au))throw Error(a(327));n=e.finishedWork;var o=e.finishedLanes;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(a(177));e.callbackNode=null,e.callbackPriority=0;var i=n.lanes|n.childLanes;if(function(e,t){var n=e.pendingLanes&~t;e.pendingLanes=t,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=t,e.mutableReadLanes&=t,e.entangledLanes&=t,t=e.entanglements;var r=e.eventTimes;for(e=e.expirationTimes;0<n;){var o=31-lt(n),i=1<<o;t[o]=0,r[o]=-1,e[o]=-1,n&=~i}}(e,i),e===Tu&&(Nu=Tu=null,Lu=0),0==(2064&n.subtreeFlags)&&0==(2064&n.flags)||Qu||(Qu=!0,Ts(nt,(function(){return xs(),null}))),i=0!=(15990&n.flags),0!=(15990&n.subtreeFlags)||i){i=Cu.transition,Cu.transition=null;var l=_t;_t=1;var u=Au;Au|=4,ju.current=null,function(e,t){if(to=Ht,hr(e=pr())){if("selectionStart"in e)var n={start:e.selectionStart,end:e.selectionEnd};else e:{var r=(n=(n=e.ownerDocument)&&n.defaultView||window).getSelection&&n.getSelection();if(r&&0!==r.rangeCount){n=r.anchorNode;var o=r.anchorOffset,i=r.focusNode;r=r.focusOffset;try{n.nodeType,i.nodeType}catch(e){n=null;break e}var l=0,u=-1,s=-1,c=0,f=0,d=e,p=null;t:for(;;){for(var h;d!==n||0!==o&&3!==d.nodeType||(u=l+o),d!==i||0!==r&&3!==d.nodeType||(s=l+r),3===d.nodeType&&(l+=d.nodeValue.length),null!==(h=d.firstChild);)p=d,d=h;for(;;){if(d===e)break t;if(p===n&&++c===o&&(u=l),p===i&&++f===r&&(s=l),null!==(h=d.nextSibling))break;p=(d=p).parentNode}d=h}n=-1===u||-1===s?null:{start:u,end:s}}else n=null}n=n||{start:0,end:0}}else n=null;for(no={focusedElem:e,selectionRange:n},Ht=!1,eu=t;null!==eu;)if(e=(t=eu).child,0!=(1028&t.subtreeFlags)&&null!==e)e.return=t,eu=e;else for(;null!==eu;){t=eu;try{var y=t.alternate;if(0!=(1024&t.flags))switch(t.tag){case 0:case 11:case 15:case 5:case 6:case 4:case 17:break;case 1:if(null!==y){var v=y.memoizedProps,m=y.memoizedState,g=t.stateNode,b=g.getSnapshotBeforeUpdate(t.elementType===t.type?v:gi(t.type,v),m);g.__reactInternalSnapshotBeforeUpdate=b}break;case 3:var _=t.stateNode.containerInfo;1===_.nodeType?_.textContent="":9===_.nodeType&&_.documentElement&&_.removeChild(_.documentElement);break;default:throw Error(a(163))}}catch(e){Es(t,t.return,e)}if(null!==(e=t.sibling)){e.return=t.return,eu=e;break}eu=t.return}y=ru,ru=!1}(e,n),gu(n,e),yr(no),Ht=!!to,no=to=null,e.current=n,_u(n,e,o),Je(),Au=u,_t=l,Cu.transition=i}else e.current=n;if(Qu&&(Qu=!1,Yu=e,Ju=o),0===(i=e.pendingLanes)&&(Ku=null),function(e){if(at&&"function"==typeof at.onCommitFiberRoot)try{at.onCommitFiberRoot(it,e,void 0,128==(128&e.current.flags))}catch(e){}}(n.stateNode),is(e,Xe()),null!==t)for(r=e.onRecoverableError,n=0;n<t.length;n++)r((o=t[n]).value,{componentStack:o.stack,digest:o.digest});if(qu)throw qu=!1,e=Gu,Gu=null,e;0!=(1&Ju)&&0!==e.tag&&xs(),0!=(1&(i=e.pendingLanes))?e===Zu?Xu++:(Xu=0,Zu=e):Xu=0,$o()}(e,t,n,r)}finally{Cu.transition=o,_t=r}return null}function xs(){if(null!==Yu){var e=wt(Ju),t=Cu.transition,n=_t;try{if(Cu.transition=null,_t=16>e?16:e,null===Yu)var r=!1;else{if(e=Yu,Yu=null,Ju=0,0!=(6&Au))throw Error(a(331));var o=Au;for(Au|=4,eu=e.current;null!==eu;){var i=eu,l=i.child;if(0!=(16&eu.flags)){var u=i.deletions;if(null!==u){for(var s=0;s<u.length;s++){var c=u[s];for(eu=c;null!==eu;){var f=eu;switch(f.tag){case 0:case 11:case 15:ou(8,f,i)}var d=f.child;if(null!==d)d.return=f,eu=d;else for(;null!==eu;){var p=(f=eu).sibling,h=f.return;if(lu(f),f===c){eu=null;break}if(null!==p){p.return=h,eu=p;break}eu=h}}}var y=i.alternate;if(null!==y){var v=y.child;if(null!==v){y.child=null;do{var m=v.sibling;v.sibling=null,v=m}while(null!==v)}}eu=i}}if(0!=(2064&i.subtreeFlags)&&null!==l)l.return=i,eu=l;else e:for(;null!==eu;){if(0!=(2048&(i=eu).flags))switch(i.tag){case 0:case 11:case 15:ou(9,i,i.return)}var g=i.sibling;if(null!==g){g.return=i.return,eu=g;break e}eu=i.return}}var b=e.current;for(eu=b;null!==eu;){var _=(l=eu).child;if(0!=(2064&l.subtreeFlags)&&null!==_)_.return=l,eu=_;else e:for(l=b;null!==eu;){if(0!=(2048&(u=eu).flags))try{switch(u.tag){case 0:case 11:case 15:iu(9,u)}}catch(e){Es(u,u.return,e)}if(u===l){eu=null;break e}var w=u.sibling;if(null!==w){w.return=u.return,eu=w;break e}eu=u.return}}if(Au=o,$o(),at&&"function"==typeof at.onPostCommitFiberRoot)try{at.onPostCommitFiberRoot(it,e)}catch(e){}r=!0}return r}finally{_t=n,Cu.transition=t}}return!1}function Os(e,t,n){e=Ii(e,t=yl(0,t=fl(n,t),1),1),t=ns(),null!==e&&(gt(e,1,t),is(e,t))}function Es(e,t,n){if(3===e.tag)Os(e,e,n);else for(;null!==t;){if(3===t.tag){Os(t,e,n);break}if(1===t.tag){var r=t.stateNode;if("function"==typeof t.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Ku||!Ku.has(r))){t=Ii(t,e=vl(t,e=fl(n,e),1),1),e=ns(),null!==t&&(gt(t,1,e),is(t,e));break}}t=t.return}}function Ps(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=ns(),e.pingedLanes|=e.suspendedLanes&n,Tu===e&&(Lu&n)===n&&(4===Iu||3===Iu&&(130023424&Lu)===Lu&&500>Xe()-Wu?hs(e,0):zu|=n),is(e,t)}function js(e,t){0===t&&(0==(1&e.mode)?t=1:(t=ft,0==(130023424&(ft<<=1))&&(ft=4194304)));var n=ns();null!==(e=Ti(e,t))&&(gt(e,t,n),is(e,n))}function Cs(e){var t=e.memoizedState,n=0;null!==t&&(n=t.retryLane),js(e,n)}function As(e,t){var n=0;switch(e.tag){case 13:var r=e.stateNode,o=e.memoizedState;null!==o&&(n=o.retryLane);break;case 19:r=e.stateNode;break;default:throw Error(a(314))}null!==r&&r.delete(t),js(e,n)}function Ts(e,t){return Ke(e,t)}function Ns(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.subtreeFlags=this.flags=0,this.deletions=null,this.childLanes=this.lanes=0,this.alternate=null}function Ls(e,t,n,r){return new Ns(e,t,n,r)}function Rs(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Ds(e,t){var n=e.alternate;return null===n?((n=Ls(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.subtreeFlags=0,n.deletions=null),n.flags=14680064&e.flags,n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Is(e,t,n,o,i,l){var u=2;if(o=e,"function"==typeof e)Rs(e)&&(u=1);else if("string"==typeof e)u=5;else e:switch(e){case x:return Ms(n.children,i,l,t);case O:u=8,i|=8;break;case E:return(e=Ls(12,n,t,2|i)).elementType=E,e.lanes=l,e;case A:return(e=Ls(13,n,t,i)).elementType=A,e.lanes=l,e;case T:return(e=Ls(19,n,t,i)).elementType=T,e.lanes=l,e;case R:return Fs(n,i,l,t);default:if("object"===r(e)&&null!==e)switch(e.$$typeof){case P:u=10;break e;case j:u=9;break e;case C:u=11;break e;case N:u=14;break e;case L:u=16,o=null;break e}throw Error(a(130,null==e?e:r(e),""))}return(t=Ls(u,n,t,i)).elementType=e,t.type=o,t.lanes=l,t}function Ms(e,t,n,r){return(e=Ls(7,e,r,t)).lanes=n,e}function Fs(e,t,n,r){return(e=Ls(22,e,r,t)).elementType=R,e.lanes=n,e.stateNode={isHidden:!1},e}function Us(e,t,n){return(e=Ls(6,e,null,t)).lanes=n,e}function zs(e,t,n){return(t=Ls(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Bs(e,t,n,r,o){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.callbackNode=this.pendingContext=this.context=null,this.callbackPriority=0,this.eventTimes=mt(0),this.expirationTimes=mt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=mt(0),this.identifierPrefix=r,this.onRecoverableError=o,this.mutableSourceEagerHydrationData=null}function Vs(e,t,n,r,o,i,a,l,u){return e=new Bs(e,t,n,l,u),1===t?(t=1,!0===i&&(t|=8)):t=0,i=Ls(3,null,null,t),e.current=i,i.stateNode=e,i.memoizedState={element:r,isDehydrated:n,cache:null,transitions:null,pendingSuspenseBoundaries:null},Li(i),e}function Ws(e){if(!e)return Co;e:{if(We(e=e._reactInternals)!==e||1!==e.tag)throw Error(a(170));var t=e;do{switch(t.tag){case 3:t=t.stateNode.context;break e;case 1:if(Ro(t.type)){t=t.stateNode.__reactInternalMemoizedMergedChildContext;break e}}t=t.return}while(null!==t);throw Error(a(171))}if(1===e.tag){var n=e.type;if(Ro(n))return Mo(e,n,t)}return t}function $s(e,t,n,r,o,i,a,l,u){return(e=Vs(n,r,!0,e,0,i,0,l,u)).context=Ws(null),n=e.current,(i=Di(r=ns(),o=rs(n))).callback=null!=t?t:null,Ii(n,i,o),e.current.lanes=o,gt(e,o,r),is(e,r),e}function Hs(e,t,n,r){var o=t.current,i=ns(),a=rs(o);return n=Ws(n),null===t.context?t.context=n:t.pendingContext=n,(t=Di(i,a)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),null!==(e=Ii(o,t,a))&&(os(e,o,a,i),Mi(e,o,a)),a}function qs(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Gs(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Ks(e,t){Gs(e,t),(e=e.alternate)&&Gs(e,t)}Ou=function(e,t,n){if(null!==e)if(e.memoizedProps!==t.pendingProps||To.current)wl=!0;else{if(0==(e.lanes&n)&&0==(128&t.flags))return wl=!1,function(e,t,n){switch(t.tag){case 3:Tl(t),yi();break;case 5:la(t);break;case 1:Ro(t.type)&&Fo(t);break;case 4:ia(t,t.stateNode.containerInfo);break;case 10:var r=t.type._context,o=t.memoizedProps.value;jo(bi,r._currentValue),r._currentValue=o;break;case 13:if(null!==(r=t.memoizedState))return null!==r.dehydrated?(jo(sa,1&sa.current),t.flags|=128,null):0!=(n&t.child.childLanes)?Ul(e,t,n):(jo(sa,1&sa.current),null!==(e=ql(e,t,n))?e.sibling:null);jo(sa,1&sa.current);break;case 19:if(r=0!=(n&t.childLanes),0!=(128&e.flags)){if(r)return $l(e,t,n);t.flags|=128}if(null!==(o=t.memoizedState)&&(o.rendering=null,o.tail=null,o.lastEffect=null),jo(sa,sa.current),r)break;return null;case 22:case 23:return t.lanes=0,El(e,t,n)}return ql(e,t,n)}(e,t,n);wl=0!=(131072&e.flags)}else wl=!1,ai&&0!=(1048576&t.flags)&&ti(t,Ko,t.index);switch(t.lanes=0,t.tag){case 2:var o=t.type;Hl(e,t),e=t.pendingProps;var i=Lo(t,Ao.current);Ei(t,n),i=Oa(null,t,o,e,i,n);var l=Ea();return t.flags|=1,"object"===r(i)&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof?(t.tag=1,t.memoizedState=null,t.updateQueue=null,Ro(o)?(l=!0,Fo(t)):l=!1,t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null,Li(t),i.updater=Wi,t.stateNode=i,i._reactInternals=t,Gi(t,o,e,n),t=Al(null,t,o,!0,l,n)):(t.tag=0,ai&&l&&ni(t),Sl(null,t,i,n),t=t.child),t;case 16:o=t.elementType;e:{switch(Hl(e,t),e=t.pendingProps,o=(i=o._init)(o._payload),t.type=o,i=t.tag=function(e){if("function"==typeof e)return Rs(e)?1:0;if(null!=e){if((e=e.$$typeof)===C)return 11;if(e===N)return 14}return 2}(o),e=gi(o,e),i){case 0:t=jl(null,t,o,e,n);break e;case 1:t=Cl(null,t,o,e,n);break e;case 11:t=kl(null,t,o,e,n);break e;case 14:t=xl(null,t,o,gi(o.type,e),n);break e}throw Error(a(306,o,""))}return t;case 0:return o=t.type,i=t.pendingProps,jl(e,t,o,i=t.elementType===o?i:gi(o,i),n);case 1:return o=t.type,i=t.pendingProps,Cl(e,t,o,i=t.elementType===o?i:gi(o,i),n);case 3:e:{if(Tl(t),null===e)throw Error(a(387));o=t.pendingProps,i=(l=t.memoizedState).element,Ri(e,t),Ui(t,o,null,n);var u=t.memoizedState;if(o=u.element,l.isDehydrated){if(l={element:o,isDehydrated:!1,cache:u.cache,pendingSuspenseBoundaries:u.pendingSuspenseBoundaries,transitions:u.transitions},t.updateQueue.baseState=l,t.memoizedState=l,256&t.flags){t=Nl(e,t,o,n,i=fl(Error(a(423)),t));break e}if(o!==i){t=Nl(e,t,o,n,i=fl(Error(a(424)),t));break e}for(ii=co(t.stateNode.containerInfo.firstChild),oi=t,ai=!0,li=null,n=Zi(t,null,o,n),t.child=n;n;)n.flags=-3&n.flags|4096,n=n.sibling}else{if(yi(),o===i){t=ql(e,t,n);break e}Sl(e,t,o,n)}t=t.child}return t;case 5:return la(t),null===e&&fi(t),o=t.type,i=t.pendingProps,l=null!==e?e.memoizedProps:null,u=i.children,ro(o,i)?u=null:null!==l&&ro(o,l)&&(t.flags|=32),Pl(e,t),Sl(e,t,u,n),t.child;case 6:return null===e&&fi(t),null;case 13:return Ul(e,t,n);case 4:return ia(t,t.stateNode.containerInfo),o=t.pendingProps,null===e?t.child=Xi(t,null,o,n):Sl(e,t,o,n),t.child;case 11:return o=t.type,i=t.pendingProps,kl(e,t,o,i=t.elementType===o?i:gi(o,i),n);case 7:return Sl(e,t,t.pendingProps,n),t.child;case 8:case 12:return Sl(e,t,t.pendingProps.children,n),t.child;case 10:e:{if(o=t.type._context,i=t.pendingProps,l=t.memoizedProps,u=i.value,jo(bi,o._currentValue),o._currentValue=u,null!==l)if(ur(l.value,u)){if(l.children===i.children&&!To.current){t=ql(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var s=l.dependencies;if(null!==s){u=l.child;for(var c=s.firstContext;null!==c;){if(c.context===o){if(1===l.tag){(c=Di(-1,n&-n)).tag=2;var f=l.updateQueue;if(null!==f){var d=(f=f.shared).pending;null===d?c.next=c:(c.next=d.next,d.next=c),f.pending=c}}l.lanes|=n,null!==(c=l.alternate)&&(c.lanes|=n),Oi(l.return,n,t),s.lanes|=n;break}c=c.next}}else if(10===l.tag)u=l.type===t.type?null:l.child;else if(18===l.tag){if(null===(u=l.return))throw Error(a(341));u.lanes|=n,null!==(s=u.alternate)&&(s.lanes|=n),Oi(u,n,t),u=l.sibling}else u=l.child;if(null!==u)u.return=l;else for(u=l;null!==u;){if(u===t){u=null;break}if(null!==(l=u.sibling)){l.return=u.return,u=l;break}u=u.return}l=u}Sl(e,t,i.children,n),t=t.child}return t;case 9:return i=t.type,o=t.pendingProps.children,Ei(t,n),o=o(i=Pi(i)),t.flags|=1,Sl(e,t,o,n),t.child;case 14:return i=gi(o=t.type,t.pendingProps),xl(e,t,o,i=gi(o.type,i),n);case 15:return Ol(e,t,t.type,t.pendingProps,n);case 17:return o=t.type,i=t.pendingProps,i=t.elementType===o?i:gi(o,i),Hl(e,t),t.tag=1,Ro(o)?(e=!0,Fo(t)):e=!1,Ei(t,n),Hi(t,o,i),Gi(t,o,i,n),Al(null,t,o,!0,e,n);case 19:return $l(e,t,n);case 22:return El(e,t,n)}throw Error(a(156,t.tag))};var Qs="function"==typeof reportError?reportError:function(e){console.error(e)};function Ys(e){this._internalRoot=e}function Js(e){this._internalRoot=e}function Xs(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType)}function Zs(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function ec(){}function tc(e,t,n,r,o){var i=n._reactRootContainer;if(i){var a=i;if("function"==typeof o){var l=o;o=function(){var e=qs(a);l.call(e)}}Hs(t,a,e,o)}else a=function(e,t,n,r,o){if(o){if("function"==typeof r){var i=r;r=function(){var e=qs(a);i.call(e)}}var a=$s(t,r,e,0,null,!1,0,"",ec);return e._reactRootContainer=a,e[vo]=a.current,Wr(8===e.nodeType?e.parentNode:e),ds(),a}for(;o=e.lastChild;)e.removeChild(o);if("function"==typeof r){var l=r;r=function(){var e=qs(u);l.call(e)}}var u=Vs(e,0,!1,null,0,!1,0,"",ec);return e._reactRootContainer=u,e[vo]=u.current,Wr(8===e.nodeType?e.parentNode:e),ds((function(){Hs(t,u,n,r)})),u}(n,t,e,o,r);return qs(a)}Js.prototype.render=Ys.prototype.render=function(e){var t=this._internalRoot;if(null===t)throw Error(a(409));Hs(e,t,null,null)},Js.prototype.unmount=Ys.prototype.unmount=function(){var e=this._internalRoot;if(null!==e){this._internalRoot=null;var t=e.containerInfo;ds((function(){Hs(null,e,null,null)})),t[vo]=null}},Js.prototype.unstable_scheduleHydration=function(e){if(e){var t=Ot();e={blockedOn:null,target:e,priority:t};for(var n=0;n<Rt.length&&0!==t&&t<Rt[n].priority;n++);Rt.splice(n,0,e),0===n&&Ft(e)}},St=function(e){switch(e.tag){case 3:var t=e.stateNode;if(t.current.memoizedState.isDehydrated){var n=dt(t.pendingLanes);0!==n&&(bt(t,1|n),is(t,Xe()),0==(6&Au)&&($u=Xe()+500,$o()))}break;case 13:ds((function(){var t=Ti(e,1);if(null!==t){var n=ns();os(t,e,1,n)}})),Ks(e,1)}},kt=function(e){if(13===e.tag){var t=Ti(e,134217728);null!==t&&os(t,e,134217728,ns()),Ks(e,134217728)}},xt=function(e){if(13===e.tag){var t=rs(e),n=Ti(e,t);null!==n&&os(n,e,t,ns()),Ks(e,t)}},Ot=function(){return _t},Et=function(e,t){var n=_t;try{return _t=e,t()}finally{_t=n}},ke=function(e,t,n){switch(t){case"input":if(Z(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var o=ko(r);if(!o)throw Error(a(90));K(r),Z(r,o)}}}break;case"textarea":ae(e,n);break;case"select":null!=(t=n.value)&&re(e,!!n.multiple,t,!1)}},Ce=fs,Ae=ds;var nc={usingClientEntryPoint:!1,Events:[wo,So,ko,Pe,je,fs]},rc={findFiberByHostInstance:_o,bundleType:0,version:"18.2.0",rendererPackageName:"react-dom"},oc={bundleType:rc.bundleType,version:rc.version,rendererPackageName:rc.rendererPackageName,rendererConfig:rc.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setErrorHandler:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=qe(e))?null:e.stateNode},findFiberByHostInstance:rc.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null,reconcilerVersion:"18.2.0-next-9e3b772b8-20220608"};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var ic=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!ic.isDisabled&&ic.supportsFiber)try{it=ic.inject(oc),at=ic}catch(fe){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=nc,t.createPortal=function(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!Xs(t))throw Error(a(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:k,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)},t.createRoot=function(e,t){if(!Xs(e))throw Error(a(299));var n=!1,r="",o=Qs;return null!=t&&(!0===t.unstable_strictMode&&(n=!0),void 0!==t.identifierPrefix&&(r=t.identifierPrefix),void 0!==t.onRecoverableError&&(o=t.onRecoverableError)),t=Vs(e,1,!1,null,0,n,0,r,o),e[vo]=t.current,Wr(8===e.nodeType?e.parentNode:e),new Ys(t)},t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw e=Object.keys(e).join(","),Error(a(268,e))}return null===(e=qe(t))?null:e.stateNode},t.flushSync=function(e){return ds(e)},t.hydrate=function(e,t,n){if(!Zs(t))throw Error(a(200));return tc(null,e,t,!0,n)},t.hydrateRoot=function(e,t,n){if(!Xs(e))throw Error(a(405));var r=null!=n&&n.hydratedSources||null,o=!1,i="",l=Qs;if(null!=n&&(!0===n.unstable_strictMode&&(o=!0),void 0!==n.identifierPrefix&&(i=n.identifierPrefix),void 0!==n.onRecoverableError&&(l=n.onRecoverableError)),t=$s(t,null,e,1,null!=n?n:null,o,0,i,l),e[vo]=t.current,Wr(e),r)for(e=0;e<r.length;e++)o=(o=(n=r[e])._getVersion)(n._source),null==t.mutableSourceEagerHydrationData?t.mutableSourceEagerHydrationData=[n,o]:t.mutableSourceEagerHydrationData.push(n,o);return new Js(t)},t.render=function(e,t,n){if(!Zs(t))throw Error(a(200));return tc(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!Zs(e))throw Error(a(40));return!!e._reactRootContainer&&(ds((function(){tc(null,null,e,!1,(function(){e._reactRootContainer=null,e[vo]=null}))})),!0)},t.unstable_batchedUpdates=fs,t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!Zs(n))throw Error(a(200));if(null==e||void 0===e._reactInternals)throw Error(a(38));return tc(e,t,n,!1,r)},t.version="18.2.0-next-9e3b772b8-20220608"},897:(e,t,n)=>{"use strict";var r=n(116);t.createRoot=r.createRoot,t.hydrateRoot=r.hydrateRoot},116:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(748)},43:(e,t,n)=>{"use strict";var r=n(466),o=Symbol.for("react.element"),i=Symbol.for("react.fragment"),a=Object.prototype.hasOwnProperty,l=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,u={key:!0,ref:!0,__self:!0,__source:!0};function s(e,t,n){var r,i={},s=null,c=null;for(r in void 0!==n&&(s=""+n),void 0!==t.key&&(s=""+t.key),void 0!==t.ref&&(c=t.ref),t)a.call(t,r)&&!u.hasOwnProperty(r)&&(i[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===i[r]&&(i[r]=t[r]);return{$$typeof:o,type:e,key:s,ref:c,props:i,_owner:l.current}}t.Fragment=i,t.jsx=s,t.jsxs=s},751:(e,t)=>{"use strict";function n(e){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(e)}var r=Symbol.for("react.element"),o=Symbol.for("react.portal"),i=Symbol.for("react.fragment"),a=Symbol.for("react.strict_mode"),l=Symbol.for("react.profiler"),u=Symbol.for("react.provider"),s=Symbol.for("react.context"),c=Symbol.for("react.forward_ref"),f=Symbol.for("react.suspense"),d=Symbol.for("react.memo"),p=Symbol.for("react.lazy"),h=Symbol.iterator,y={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},v=Object.assign,m={};function g(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||y}function b(){}function _(e,t,n){this.props=e,this.context=t,this.refs=m,this.updater=n||y}g.prototype.isReactComponent={},g.prototype.setState=function(e,t){if("object"!==n(e)&&"function"!=typeof e&&null!=e)throw Error("setState(...): takes an object of state variables to update or a function which returns an object of state variables.");this.updater.enqueueSetState(this,e,t,"setState")},g.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},b.prototype=g.prototype;var w=_.prototype=new b;w.constructor=_,v(w,g.prototype),w.isPureReactComponent=!0;var S=Array.isArray,k=Object.prototype.hasOwnProperty,x={current:null},O={key:!0,ref:!0,__self:!0,__source:!0};function E(e,t,n){var o,i={},a=null,l=null;if(null!=t)for(o in void 0!==t.ref&&(l=t.ref),void 0!==t.key&&(a=""+t.key),t)k.call(t,o)&&!O.hasOwnProperty(o)&&(i[o]=t[o]);var u=arguments.length-2;if(1===u)i.children=n;else if(1<u){for(var s=Array(u),c=0;c<u;c++)s[c]=arguments[c+2];i.children=s}if(e&&e.defaultProps)for(o in u=e.defaultProps)void 0===i[o]&&(i[o]=u[o]);return{$$typeof:r,type:e,key:a,ref:l,props:i,_owner:x.current}}function P(e){return"object"===n(e)&&null!==e&&e.$$typeof===r}var j=/\/+/g;function C(e,t){return"object"===n(e)&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function A(e,t,i,a,l){var u=n(e);"undefined"!==u&&"boolean"!==u||(e=null);var s=!1;if(null===e)s=!0;else switch(u){case"string":case"number":s=!0;break;case"object":switch(e.$$typeof){case r:case o:s=!0}}if(s)return l=l(s=e),e=""===a?"."+C(s,0):a,S(l)?(i="",null!=e&&(i=e.replace(j,"$&/")+"/"),A(l,t,i,"",(function(e){return e}))):null!=l&&(P(l)&&(l=function(e,t){return{$$typeof:r,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(l,i+(!l.key||s&&s.key===l.key?"":(""+l.key).replace(j,"$&/")+"/")+e)),t.push(l)),1;if(s=0,a=""===a?".":a+":",S(e))for(var c=0;c<e.length;c++){var f=a+C(u=e[c],c);s+=A(u,t,i,f,l)}else if(f=function(e){return null===e||"object"!==n(e)?null:"function"==typeof(e=h&&e[h]||e["@@iterator"])?e:null}(e),"function"==typeof f)for(e=f.call(e),c=0;!(u=e.next()).done;)s+=A(u=u.value,t,i,f=a+C(u,c++),l);else if("object"===u)throw t=String(e),Error("Objects are not valid as a React child (found: "+("[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t)+"). If you meant to render a collection of children, use an array instead.");return s}function T(e,t,n){if(null==e)return e;var r=[],o=0;return A(e,r,"","",(function(e){return t.call(n,e,o++)})),r}function N(e){if(-1===e._status){var t=e._result;(t=t()).then((function(t){0!==e._status&&-1!==e._status||(e._status=1,e._result=t)}),(function(t){0!==e._status&&-1!==e._status||(e._status=2,e._result=t)})),-1===e._status&&(e._status=0,e._result=t)}if(1===e._status)return e._result.default;throw e._result}var L={current:null},R={transition:null},D={ReactCurrentDispatcher:L,ReactCurrentBatchConfig:R,ReactCurrentOwner:x};t.Children={map:T,forEach:function(e,t,n){T(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return T(e,(function(){t++})),t},toArray:function(e){return T(e,(function(e){return e}))||[]},only:function(e){if(!P(e))throw Error("React.Children.only expected to receive a single React element child.");return e}},t.Component=g,t.Fragment=i,t.Profiler=l,t.PureComponent=_,t.StrictMode=a,t.Suspense=f,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=D,t.cloneElement=function(e,t,n){if(null==e)throw Error("React.cloneElement(...): The argument must be a React element, but you passed "+e+".");var o=v({},e.props),i=e.key,a=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(a=t.ref,l=x.current),void 0!==t.key&&(i=""+t.key),e.type&&e.type.defaultProps)var u=e.type.defaultProps;for(s in t)k.call(t,s)&&!O.hasOwnProperty(s)&&(o[s]=void 0===t[s]&&void 0!==u?u[s]:t[s])}var s=arguments.length-2;if(1===s)o.children=n;else if(1<s){u=Array(s);for(var c=0;c<s;c++)u[c]=arguments[c+2];o.children=u}return{$$typeof:r,type:e.type,key:i,ref:a,props:o,_owner:l}},t.createContext=function(e){return(e={$$typeof:s,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null,_defaultValue:null,_globalName:null}).Provider={$$typeof:u,_context:e},e.Consumer=e},t.createElement=E,t.createFactory=function(e){var t=E.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:c,render:e}},t.isValidElement=P,t.lazy=function(e){return{$$typeof:p,_payload:{_status:-1,_result:e},_init:N}},t.memo=function(e,t){return{$$typeof:d,type:e,compare:void 0===t?null:t}},t.startTransition=function(e){var t=R.transition;R.transition={};try{e()}finally{R.transition=t}},t.unstable_act=function(){throw Error("act(...) is not supported in production builds of React.")},t.useCallback=function(e,t){return L.current.useCallback(e,t)},t.useContext=function(e){return L.current.useContext(e)},t.useDebugValue=function(){},t.useDeferredValue=function(e){return L.current.useDeferredValue(e)},t.useEffect=function(e,t){return L.current.useEffect(e,t)},t.useId=function(){return L.current.useId()},t.useImperativeHandle=function(e,t,n){return L.current.useImperativeHandle(e,t,n)},t.useInsertionEffect=function(e,t){return L.current.useInsertionEffect(e,t)},t.useLayoutEffect=function(e,t){return L.current.useLayoutEffect(e,t)},t.useMemo=function(e,t){return L.current.useMemo(e,t)},t.useReducer=function(e,t,n){return L.current.useReducer(e,t,n)},t.useRef=function(e){return L.current.useRef(e)},t.useState=function(e){return L.current.useState(e)},t.useSyncExternalStore=function(e,t,n){return L.current.useSyncExternalStore(e,t,n)},t.useTransition=function(){return L.current.useTransition()},t.version="18.2.0"},466:(e,t,n)=>{"use strict";e.exports=n(751)},823:(e,t,n)=>{"use strict";e.exports=n(43)},588:(e,t,n)=>{function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}var o=function(e){"use strict";var t,n=Object.prototype,o=n.hasOwnProperty,i=Object.defineProperty||function(e,t,n){e[t]=n.value},a="function"==typeof Symbol?Symbol:{},l=a.iterator||"@@iterator",u=a.asyncIterator||"@@asyncIterator",s=a.toStringTag||"@@toStringTag";function c(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{c({},"")}catch(e){c=function(e,t,n){return e[t]=n}}function f(e,t,n,r){var o=t&&t.prototype instanceof g?t:g,a=Object.create(o.prototype),l=new T(r||[]);return i(a,"_invoke",{value:P(e,n,l)}),a}function d(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=f;var p="suspendedStart",h="suspendedYield",y="executing",v="completed",m={};function g(){}function b(){}function _(){}var w={};c(w,l,(function(){return this}));var S=Object.getPrototypeOf,k=S&&S(S(N([])));k&&k!==n&&o.call(k,l)&&(w=k);var x=_.prototype=g.prototype=Object.create(w);function O(e){["next","throw","return"].forEach((function(t){c(e,t,(function(e){return this._invoke(t,e)}))}))}function E(e,t){function n(i,a,l,u){var s=d(e[i],e,a);if("throw"!==s.type){var c=s.arg,f=c.value;return f&&"object"===r(f)&&o.call(f,"__await")?t.resolve(f.__await).then((function(e){n("next",e,l,u)}),(function(e){n("throw",e,l,u)})):t.resolve(f).then((function(e){c.value=e,l(c)}),(function(e){return n("throw",e,l,u)}))}u(s.arg)}var a;i(this,"_invoke",{value:function(e,r){function o(){return new t((function(t,o){n(e,r,t,o)}))}return a=a?a.then(o,o):o()}})}function P(e,t,n){var r=p;return function(o,i){if(r===y)throw new Error("Generator is already running");if(r===v){if("throw"===o)throw i;return L()}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var l=j(a,n);if(l){if(l===m)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if(r===p)throw r=v,n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r=y;var u=d(e,t,n);if("normal"===u.type){if(r=n.done?v:h,u.arg===m)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r=v,n.method="throw",n.arg=u.arg)}}}function j(e,n){var r=n.method,o=e.iterator[r];if(o===t)return n.delegate=null,"throw"===r&&e.iterator.return&&(n.method="return",n.arg=t,j(e,n),"throw"===n.method)||"return"!==r&&(n.method="throw",n.arg=new TypeError("The iterator does not provide a '"+r+"' method")),m;var i=d(o,e.iterator,n.arg);if("throw"===i.type)return n.method="throw",n.arg=i.arg,n.delegate=null,m;var a=i.arg;return a?a.done?(n[e.resultName]=a.value,n.next=e.nextLoc,"return"!==n.method&&(n.method="next",n.arg=t),n.delegate=null,m):a:(n.method="throw",n.arg=new TypeError("iterator result is not an object"),n.delegate=null,m)}function C(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function A(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function T(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(C,this),this.reset(!0)}function N(e){if(e){var n=e[l];if(n)return n.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,i=function n(){for(;++r<e.length;)if(o.call(e,r))return n.value=e[r],n.done=!1,n;return n.value=t,n.done=!0,n};return i.next=i}}return{next:L}}function L(){return{value:t,done:!0}}return b.prototype=_,i(x,"constructor",{value:_,configurable:!0}),i(_,"constructor",{value:b,configurable:!0}),b.displayName=c(_,s,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===b||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,_):(e.__proto__=_,c(e,s,"GeneratorFunction")),e.prototype=Object.create(x),e},e.awrap=function(e){return{__await:e}},O(E.prototype),c(E.prototype,u,(function(){return this})),e.AsyncIterator=E,e.async=function(t,n,r,o,i){void 0===i&&(i=Promise);var a=new E(f(t,n,r,o),i);return e.isGeneratorFunction(n)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},O(x),c(x,s,"Generator"),c(x,l,(function(){return this})),c(x,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=N,T.prototype={constructor:T,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=t,this.done=!1,this.delegate=null,this.method="next",this.arg=t,this.tryEntries.forEach(A),!e)for(var n in this)"t"===n.charAt(0)&&o.call(this,n)&&!isNaN(+n.slice(1))&&(this[n]=t)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var n=this;function r(r,o){return l.type="throw",l.arg=e,n.next=r,o&&(n.method="next",n.arg=t),!!o}for(var i=this.tryEntries.length-1;i>=0;--i){var a=this.tryEntries[i],l=a.completion;if("root"===a.tryLoc)return r("end");if(a.tryLoc<=this.prev){var u=o.call(a,"catchLoc"),s=o.call(a,"finallyLoc");if(u&&s){if(this.prev<a.catchLoc)return r(a.catchLoc,!0);if(this.prev<a.finallyLoc)return r(a.finallyLoc)}else if(u){if(this.prev<a.catchLoc)return r(a.catchLoc,!0)}else{if(!s)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return r(a.finallyLoc)}}}},abrupt:function(e,t){for(var n=this.tryEntries.length-1;n>=0;--n){var r=this.tryEntries[n];if(r.tryLoc<=this.prev&&o.call(r,"finallyLoc")&&this.prev<r.finallyLoc){var i=r;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,m):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),m},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),A(n),m}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;A(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,n,r){return this.delegate={iterator:N(e),resultName:n,nextLoc:r},"next"===this.method&&(this.arg=t),m}},e}("object"===r(e=n.nmd(e))?e.exports:{});try{regeneratorRuntime=o}catch(e){"object"===("undefined"==typeof globalThis?"undefined":r(globalThis))?globalThis.regeneratorRuntime=o:Function("r","regeneratorRuntime = r")(o)}},794:(e,t)=>{"use strict";function n(e){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},n(e)}function r(e,t){var n=e.length;e.push(t);e:for(;0<n;){var r=n-1>>>1,o=e[r];if(!(0<a(o,t)))break e;e[r]=t,e[n]=o,n=r}}function o(e){return 0===e.length?null:e[0]}function i(e){if(0===e.length)return null;var t=e[0],n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,o=e.length,i=o>>>1;r<i;){var l=2*(r+1)-1,u=e[l],s=l+1,c=e[s];if(0>a(u,n))s<o&&0>a(c,u)?(e[r]=c,e[s]=n,r=s):(e[r]=u,e[l]=n,r=l);else{if(!(s<o&&0>a(c,n)))break e;e[r]=c,e[s]=n,r=s}}}return t}function a(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}if("object"===("undefined"==typeof performance?"undefined":n(performance))&&"function"==typeof performance.now){var l=performance;t.unstable_now=function(){return l.now()}}else{var u=Date,s=u.now();t.unstable_now=function(){return u.now()-s}}var c=[],f=[],d=1,p=null,h=3,y=!1,v=!1,m=!1,g="function"==typeof setTimeout?setTimeout:null,b="function"==typeof clearTimeout?clearTimeout:null,_="undefined"!=typeof setImmediate?setImmediate:null;function w(e){for(var t=o(f);null!==t;){if(null===t.callback)i(f);else{if(!(t.startTime<=e))break;i(f),t.sortIndex=t.expirationTime,r(c,t)}t=o(f)}}function S(e){if(m=!1,w(e),!v)if(null!==o(c))v=!0,R(k);else{var t=o(f);null!==t&&D(S,t.startTime-e)}}function k(e,n){v=!1,m&&(m=!1,b(P),P=-1),y=!0;var r=h;try{for(w(n),p=o(c);null!==p&&(!(p.expirationTime>n)||e&&!A());){var a=p.callback;if("function"==typeof a){p.callback=null,h=p.priorityLevel;var l=a(p.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?p.callback=l:p===o(c)&&i(c),w(n)}else i(c);p=o(c)}if(null!==p)var u=!0;else{var s=o(f);null!==s&&D(S,s.startTime-n),u=!1}return u}finally{p=null,h=r,y=!1}}"undefined"!=typeof navigator&&void 0!==navigator.scheduling&&void 0!==navigator.scheduling.isInputPending&&navigator.scheduling.isInputPending.bind(navigator.scheduling);var x,O=!1,E=null,P=-1,j=5,C=-1;function A(){return!(t.unstable_now()-C<j)}function T(){if(null!==E){var e=t.unstable_now();C=e;var n=!0;try{n=E(!0,e)}finally{n?x():(O=!1,E=null)}}else O=!1}if("function"==typeof _)x=function(){_(T)};else if("undefined"!=typeof MessageChannel){var N=new MessageChannel,L=N.port2;N.port1.onmessage=T,x=function(){L.postMessage(null)}}else x=function(){g(T,0)};function R(e){E=e,O||(O=!0,x())}function D(e,n){P=g((function(){e(t.unstable_now())}),n)}t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){v||y||(v=!0,R(k))},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):j=0<e?Math.floor(1e3/e):5},t.unstable_getCurrentPriorityLevel=function(){return h},t.unstable_getFirstCallbackNode=function(){return o(c)},t.unstable_next=function(e){switch(h){case 1:case 2:case 3:var t=3;break;default:t=h}var n=h;h=t;try{return e()}finally{h=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=function(){},t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=h;h=e;try{return t()}finally{h=n}},t.unstable_scheduleCallback=function(e,i,a){var l=t.unstable_now();switch(a="object"===n(a)&&null!==a&&"number"==typeof(a=a.delay)&&0<a?l+a:l,e){case 1:var u=-1;break;case 2:u=250;break;case 5:u=1073741823;break;case 4:u=1e4;break;default:u=5e3}return e={id:d++,callback:i,priorityLevel:e,startTime:a,expirationTime:u=a+u,sortIndex:-1},a>l?(e.sortIndex=a,r(f,e),null===o(c)&&e===o(f)&&(m?(b(P),P=-1):m=!0,D(S,a-l))):(e.sortIndex=u,r(c,e),v||y||(v=!0,R(k))),e},t.unstable_shouldYield=A,t.unstable_wrapCallback=function(e){var t=h;return function(){var n=h;h=t;try{return e.apply(this,arguments)}finally{h=n}}}},767:(e,t,n)=>{"use strict";e.exports=n(794)},705:(e,t,n)=>{"use strict";function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}var o=n(584),i=n(648),a=n(291),l=o("%TypeError%"),u=o("%WeakMap%",!0),s=o("%Map%",!0),c=i("WeakMap.prototype.get",!0),f=i("WeakMap.prototype.set",!0),d=i("WeakMap.prototype.has",!0),p=i("Map.prototype.get",!0),h=i("Map.prototype.set",!0),y=i("Map.prototype.has",!0),v=function(e,t){for(var n,r=e;null!==(n=r.next);r=n)if(n.key===t)return r.next=n.next,n.next=e.next,e.next=n,n};e.exports=function(){var e,t,n,o={assert:function(e){if(!o.has(e))throw new l("Side channel does not contain "+a(e))},get:function(o){if(u&&o&&("object"===r(o)||"function"==typeof o)){if(e)return c(e,o)}else if(s){if(t)return p(t,o)}else if(n)return function(e,t){var n=v(e,t);return n&&n.value}(n,o)},has:function(o){if(u&&o&&("object"===r(o)||"function"==typeof o)){if(e)return d(e,o)}else if(s){if(t)return y(t,o)}else if(n)return function(e,t){return!!v(e,t)}(n,o);return!1},set:function(o,i){u&&o&&("object"===r(o)||"function"==typeof o)?(e||(e=new u),f(e,o,i)):s?(t||(t=new s),h(t,o,i)):(n||(n={key:{},next:null}),function(e,t,n){var r=v(e,t);r?r.value=n:e.next={key:t,next:e.next,value:n}}(n,o,i))}};return o}},654:()=>{}},r={};function o(e){var t=r[e];if(void 0!==t)return t.exports;var i=r[e]={id:e,loaded:!1,exports:{}};return n[e](i,i.exports,o),i.loaded=!0,i.exports}o.amdO={},o.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return o.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,o.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var i=Object.create(null);o.r(i);var a={};e=e||[null,t({}),t([]),t(t)];for(var l=2&r&&n;"object"==typeof l&&!~e.indexOf(l);l=t(l))Object.getOwnPropertyNames(l).forEach((e=>a[e]=()=>n[e]));return a.default=()=>n,o.d(i,a),i},o.d=(e,t)=>{for(var n in t)o.o(t,n)&&!o.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},o.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),o.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),o.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},o.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{var e;o.g.importScripts&&(e=o.g.location+"");var t=o.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var n=t.getElementsByTagName("script");n.length&&(e=n[n.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),o.p=e})(),(()=>{"use strict";var e,t=o(466),n=o.t(t,2),r=o(897);function i(e){return"function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i(e)}function a(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(r.key,void 0,function(e,t){if("object"!==i(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==i(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(o),"symbol"===i(a)?a:String(a)),r)}var o,a}function l(e){var t="function"==typeof Map?new Map:void 0;return function(e){if(null===e||(e,-1===Function.toString.call(n).indexOf("[native code]")))return e;var n;if("function"!=typeof e)throw new TypeError("Super expression must either be null or a function");if(void 0!==t){if(t.has(e))return t.get(e);t.set(e,r)}function r(){return u(e,arguments,f(this).constructor)}return r.prototype=Object.create(e.prototype,{constructor:{value:r,enumerable:!1,writable:!0,configurable:!0}}),c(r,e)},l(e)}function u(e,t,n){return s()?Reflect.construct.bind():function(e,t,n){var r=[null];r.push.apply(r,t);var o=new(Function.bind.apply(e,r));return n&&c(o,n.prototype),o},u.apply(null,arguments)}function s(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function c(e,t){return Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},c(e,t)}function f(e){return Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},f(e)}function d(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}function p(e){if(Array.isArray(e))return e}function h(e){return function(e){if(Array.isArray(e))return m(e)}(e)||v(e)||y(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function y(e,t){if(e){if("string"==typeof e)return m(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?m(e,t):void 0}}function v(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}function m(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function g(){return g=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},g.apply(this,arguments)}o(588),function(e){e.Pop="POP",e.Push="PUSH",e.Replace="REPLACE"}(e||(e={}));var b,_="popstate";function w(e,t){if(!1===e||null==e)throw new Error(t)}function S(e,t){return{usr:e.state,key:e.key,idx:t}}function k(e,t,n,r){return void 0===n&&(n=null),g({pathname:"string"==typeof e?e:e.pathname,search:"",hash:""},"string"==typeof t?O(t):t,{state:n,key:t&&t.key||r||Math.random().toString(36).substr(2,8)})}function x(e){var t=e.pathname,n=void 0===t?"/":t,r=e.search,o=void 0===r?"":r,i=e.hash,a=void 0===i?"":i;return o&&"?"!==o&&(n+="?"===o.charAt(0)?o:"?"+o),a&&"#"!==a&&(n+="#"===a.charAt(0)?a:"#"+a),n}function O(e){var t={};if(e){var n=e.indexOf("#");n>=0&&(t.hash=e.substr(n),e=e.substr(0,n));var r=e.indexOf("?");r>=0&&(t.search=e.substr(r),e=e.substr(0,r)),e&&(t.pathname=e)}return t}function E(e,t,n){void 0===n&&(n="/");var r=z(("string"==typeof t?O(t):t).pathname||"/",n);if(null==r)return null;var o=P(e);!function(e){e.sort((function(e,t){return e.score!==t.score?t.score-e.score:function(e,t){var n=e.length===t.length&&e.slice(0,-1).every((function(e,n){return e===t[n]}));return n?e[e.length-1]-t[t.length-1]:0}(e.routesMeta.map((function(e){return e.childrenIndex})),t.routesMeta.map((function(e){return e.childrenIndex})))}))}(o);for(var i=null,a=0;null==i&&a<o.length;++a)i=M(o[a],U(r));return i}function P(e,t,n,r){void 0===t&&(t=[]),void 0===n&&(n=[]),void 0===r&&(r="");var o=function(e,o,i){var a={relativePath:void 0===i?e.path||"":i,caseSensitive:!0===e.caseSensitive,childrenIndex:o,route:e};a.relativePath.startsWith("/")&&(w(a.relativePath.startsWith(r),'Absolute route path "'+a.relativePath+'" nested under path "'+r+'" is not valid. An absolute child route path must start with the combined path of all its parent routes.'),a.relativePath=a.relativePath.slice(r.length));var l=H([r,a.relativePath]),u=n.concat(a);e.children&&e.children.length>0&&(w(!0!==e.index,'Index routes must not have child routes. Please remove all child routes from route path "'+l+'".'),P(e.children,t,u,l)),(null!=e.path||e.index)&&t.push({path:l,score:I(l,e.index),routesMeta:u})};return e.forEach((function(e,t){var n;if(""!==e.path&&null!=(n=e.path)&&n.includes("?")){var r,i=function(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=y(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){l=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(l)throw i}}}}(j(e.path));try{for(i.s();!(r=i.n()).done;){var a=r.value;o(e,t,a)}}catch(e){i.e(e)}finally{i.f()}}else o(e,t)})),t}function j(e){var t=e.split("/");if(0===t.length)return[];var n,r=p(n=t)||v(n)||y(n)||d(),o=r[0],i=r.slice(1),a=o.endsWith("?"),l=o.replace(/\?$/,"");if(0===i.length)return a?[l,""]:[l];var u=j(i.join("/")),s=[];return s.push.apply(s,h(u.map((function(e){return""===e?l:[l,e].join("/")})))),a&&s.push.apply(s,h(u)),s.map((function(t){return e.startsWith("/")&&""===t?"/":t}))}!function(e){e.data="data",e.deferred="deferred",e.redirect="redirect",e.error="error"}(b||(b={}));var C=/^:\w+$/,A=3,T=2,N=1,L=10,R=-2,D=function(e){return"*"===e};function I(e,t){var n=e.split("/"),r=n.length;return n.some(D)&&(r+=R),t&&(r+=T),n.filter((function(e){return!D(e)})).reduce((function(e,t){return e+(C.test(t)?A:""===t?N:L)}),r)}function M(e,t){for(var n=e.routesMeta,r={},o="/",i=[],a=0;a<n.length;++a){var l=n[a],u=a===n.length-1,s="/"===o?t:t.slice(o.length)||"/",c=F({path:l.relativePath,caseSensitive:l.caseSensitive,end:u},s);if(!c)return null;Object.assign(r,c.params);var f=l.route;i.push({params:r,pathname:H([o,c.pathname]),pathnameBase:q(H([o,c.pathnameBase])),route:f}),"/"!==c.pathnameBase&&(o=H([o,c.pathnameBase]))}return i}function F(e,t){"string"==typeof e&&(e={path:e,caseSensitive:!1,end:!0});var n,r,o=function(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!0),B("*"===e||!e.endsWith("*")||e.endsWith("/*"),'Route path "'+e+'" will be treated as if it were "'+e.replace(/\*$/,"/*")+'" because the `*` character must always follow a `/` in the pattern. To get rid of this warning, please change the route path to "'+e.replace(/\*$/,"/*")+'".');var r=[],o="^"+e.replace(/\/*\*?$/,"").replace(/^\/*/,"/").replace(/[\\.*+^$?{}|()[\]]/g,"\\$&").replace(/\/:(\w+)/g,(function(e,t){return r.push(t),"/([^\\/]+)"}));return e.endsWith("*")?(r.push("*"),o+="*"===e||"/*"===e?"(.*)$":"(?:\\/(.+)|\\/*)$"):n?o+="\\/*$":""!==e&&"/"!==e&&(o+="(?:(?=\\/|$))"),[new RegExp(o,t?void 0:"i"),r]}(e.path,e.caseSensitive,e.end),i=(r=2,p(n=o)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,l=[],u=!0,s=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=i.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){s=!0,o=e}finally{try{if(!u&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(s)throw o}}return l}}(n,r)||y(n,r)||d()),a=i[0],l=i[1],u=t.match(a);if(!u)return null;var s=u[0],c=s.replace(/(.)\/+$/,"$1"),f=u.slice(1);return{params:l.reduce((function(e,t,n){if("*"===t){var r=f[n]||"";c=s.slice(0,s.length-r.length).replace(/(.)\/+$/,"$1")}return e[t]=function(e,t){try{return decodeURIComponent(e)}catch(n){return B(!1,'The value for the URL param "'+t+'" will not be decoded because the string "'+e+'" is a malformed URL segment. This is probably due to a bad percent encoding ('+n+")."),e}}(f[n]||"",t),e}),{}),pathname:s,pathnameBase:c,pattern:e}}function U(e){try{return decodeURI(e)}catch(t){return B(!1,'The URL path "'+e+'" could not be decoded because it is is a malformed URL segment. This is probably due to a bad percent encoding ('+t+")."),e}}function z(e,t){if("/"===t)return e;if(!e.toLowerCase().startsWith(t.toLowerCase()))return null;var n=t.endsWith("/")?t.length-1:t.length,r=e.charAt(n);return r&&"/"!==r?null:e.slice(n)||"/"}function B(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}function V(e,t,n,r){return"Cannot include a '"+e+"' character in a manually specified `to."+t+"` field ["+JSON.stringify(r)+"].  Please separate it out to the `to."+n+'` field. Alternatively you may provide the full path as a string in <Link to="..."> and the router will parse it for you.'}function W(e){return e.filter((function(e,t){return 0===t||e.route.path&&e.route.path.length>0}))}function $(e,t,n,r){var o;void 0===r&&(r=!1),"string"==typeof e?o=O(e):(w(!(o=g({},e)).pathname||!o.pathname.includes("?"),V("?","pathname","search",o)),w(!o.pathname||!o.pathname.includes("#"),V("#","pathname","hash",o)),w(!o.search||!o.search.includes("#"),V("#","search","hash",o)));var i,a=""===e||""===o.pathname,l=a?"/":o.pathname;if(r||null==l)i=n;else{var u=t.length-1;if(l.startsWith("..")){for(var s=l.split("/");".."===s[0];)s.shift(),u-=1;o.pathname=s.join("/")}i=u>=0?t[u]:"/"}var c=function(e,t){void 0===t&&(t="/");var n="string"==typeof e?O(e):e,r=n.pathname,o=n.search,i=void 0===o?"":o,a=n.hash,l=void 0===a?"":a,u=r?r.startsWith("/")?r:function(e,t){var n=t.replace(/\/+$/,"").split("/");return e.split("/").forEach((function(e){".."===e?n.length>1&&n.pop():"."!==e&&n.push(e)})),n.length>1?n.join("/"):"/"}(r,t):t;return{pathname:u,search:G(i),hash:K(l)}}(o,i),f=l&&"/"!==l&&l.endsWith("/"),d=(a||"."===l)&&n.endsWith("/");return c.pathname.endsWith("/")||!f&&!d||(c.pathname+="/"),c}var H=function(e){return e.join("/").replace(/\/\/+/g,"/")},q=function(e){return e.replace(/\/+$/,"").replace(/^\/*/,"/")},G=function(e){return e&&"?"!==e?e.startsWith("?")?e:"?"+e:""},K=function(e){return e&&"#"!==e?e.startsWith("#")?e:"#"+e:""};Error;var Q=["post","put","patch","delete"],Y=(new Set(Q),["get"].concat(Q));function J(e){return J="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},J(e)}function X(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(void 0,o=function(e,t){if("object"!==J(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==J(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r.key),"symbol"===J(o)?o:String(o)),r)}var o}function Z(e,t){return Z=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Z(e,t)}function ee(e){return ee=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},ee(e)}function te(e,t){if(e){if("string"==typeof e)return ne(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ne(e,t):void 0}}function ne(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function re(){return re=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},re.apply(this,arguments)}new Set(Y),new Set([301,302,303,307,308]),new Set([307,308]),"undefined"!=typeof window&&void 0!==window.document&&window.document.createElement,Symbol("deferred");"function"==typeof Object.is&&Object.is,t.useState,t.useEffect,t.useLayoutEffect,t.useDebugValue;"undefined"==typeof window||void 0===window.document||window.document.createElement,n.useSyncExternalStore;var oe=t.createContext(null),ie=t.createContext(null),ae=t.createContext(null),le=t.createContext(null),ue=t.createContext({outlet:null,matches:[]}),se=t.createContext(null);function ce(){return null!=t.useContext(le)}function fe(){return ce()||w(!1),t.useContext(le).location}function de(){ce()||w(!1);var e=t.useContext(ae),n=e.basename,r=e.navigator,o=t.useContext(ue).matches,i=fe().pathname,a=JSON.stringify(W(o).map((function(e){return e.pathnameBase}))),l=t.useRef(!1);return t.useEffect((function(){l.current=!0})),t.useCallback((function(e,t){if(void 0===t&&(t={}),l.current)if("number"!=typeof e){var o=$(e,JSON.parse(a),i,"path"===t.relative);"/"!==n&&(o.pathname="/"===o.pathname?n:H([n,o.pathname])),(t.replace?r.replace:r.push)(o,t.state,t)}else r.go(e)}),[n,r,a,i])}function pe(e,n){var r=(void 0===n?{}:n).relative,o=t.useContext(ue).matches,i=fe().pathname,a=JSON.stringify(W(o).map((function(e){return e.pathnameBase})));return t.useMemo((function(){return $(e,JSON.parse(a),i,"path"===r)}),[e,a,i,r])}function he(){var e=function(){var e,n,r,o=t.useContext(se),i=function(e){var n=t.useContext(ie);return n||w(!1),n}(ve.UseRouteError),a=(ve.UseRouteError,n=function(e){var n=t.useContext(ue);return n||w(!1),n}(),(r=n.matches[n.matches.length-1]).route.id||w(!1),r.route.id);return o||(null==(e=i.errors)?void 0:e[a])}(),n=function(e){return null!=e&&"number"==typeof e.status&&"string"==typeof e.statusText&&"boolean"==typeof e.internal&&"data"in e}(e)?e.status+" "+e.statusText:e instanceof Error?e.message:JSON.stringify(e),r=e instanceof Error?e.stack:null,o={padding:"0.5rem",backgroundColor:"rgba(200,200,200, 0.5)"};return t.createElement(t.Fragment,null,t.createElement("h2",null,"Unexpected Application Error!"),t.createElement("h3",{style:{fontStyle:"italic"}},n),r?t.createElement("pre",{style:o},r):null,null)}var ye,ve,me,ge=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&Z(e,t)}(u,e);var n,r,o,i,a,l=(n=u,r=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=ee(n);if(r){var o=ee(this).constructor;e=Reflect.construct(t,arguments,o)}else e=t.apply(this,arguments);return function(e,t){if(t&&("object"===J(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}(this,e)});function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=l.call(this,e)).state={location:e.location,error:e.error},t}return o=u,a=[{key:"getDerivedStateFromError",value:function(e){return{error:e}}},{key:"getDerivedStateFromProps",value:function(e,t){return t.location!==e.location?{error:e.error,location:e.location}:{error:e.error||t.error,location:t.location}}}],(i=[{key:"componentDidCatch",value:function(e,t){console.error("React Router caught the following error during render",e,t)}},{key:"render",value:function(){return this.state.error?t.createElement(ue.Provider,{value:this.props.routeContext},t.createElement(se.Provider,{value:this.state.error,children:this.props.component})):this.props.children}}])&&X(o.prototype,i),a&&X(o,a),Object.defineProperty(o,"prototype",{writable:!1}),u}(t.Component);function be(e){var n=e.routeContext,r=e.match,o=e.children,i=t.useContext(oe);return i&&i.static&&i.staticContext&&r.route.errorElement&&(i.staticContext._deepestRenderedBoundaryId=r.route.id),t.createElement(ue.Provider,{value:n},o)}function _e(e){var n=e.to,r=e.replace,o=e.state,i=e.relative;ce()||w(!1);var a=t.useContext(ie),l=de();return t.useEffect((function(){a&&"idle"!==a.navigation.state||l(n,{replace:r,state:o,relative:i})})),null}function we(e){w(!1)}function Se(n){var r=n.basename,o=void 0===r?"/":r,i=n.children,a=void 0===i?null:i,l=n.location,u=n.navigationType,s=void 0===u?e.Pop:u,c=n.navigator,f=n.static,d=void 0!==f&&f;ce()&&w(!1);var p=o.replace(/^\/*/,"/"),h=t.useMemo((function(){return{basename:p,navigator:c,static:d}}),[p,c,d]);"string"==typeof l&&(l=O(l));var y=l,v=y.pathname,m=void 0===v?"/":v,g=y.search,b=void 0===g?"":g,_=y.hash,S=void 0===_?"":_,k=y.state,x=void 0===k?null:k,E=y.key,P=void 0===E?"default":E,j=t.useMemo((function(){var e=z(m,p);return null==e?null:{pathname:e,search:b,hash:S,state:x,key:P}}),[p,m,b,S,x,P]);return null==j?null:t.createElement(ae.Provider,{value:h},t.createElement(le.Provider,{children:a,value:{location:j,navigationType:s}}))}function ke(n){var r=n.children,o=n.location,i=t.useContext(oe);return function(n,r){ce()||w(!1);var o,i=t.useContext(ae).navigator,a=t.useContext(ie),l=t.useContext(ue).matches,u=l[l.length-1],s=u?u.params:{},c=(u&&u.pathname,u?u.pathnameBase:"/"),f=(u&&u.route,fe());if(r){var d,p="string"==typeof r?O(r):r;"/"===c||(null==(d=p.pathname)?void 0:d.startsWith(c))||w(!1),o=p}else o=f;var h=o.pathname||"/",y=E(n,{pathname:"/"===c?h:h.slice(c.length)||"/"}),v=function(e,n,r){if(void 0===n&&(n=[]),null==e){if(null==r||!r.errors)return null;e=r.matches}var o=e,i=null==r?void 0:r.errors;if(null!=i){var a=o.findIndex((function(e){return e.route.id&&(null==i?void 0:i[e.route.id])}));a>=0||w(!1),o=o.slice(0,Math.min(o.length,a+1))}return o.reduceRight((function(e,a,l){var u=a.route.id?null==i?void 0:i[a.route.id]:null,s=r?a.route.errorElement||t.createElement(he,null):null,c=n.concat(o.slice(0,l+1)),f=function(){return t.createElement(be,{match:a,routeContext:{outlet:e,matches:c}},u?s:void 0!==a.route.element?a.route.element:e)};return r&&(a.route.errorElement||0===l)?t.createElement(ge,{location:r.location,component:s,error:u,children:f(),routeContext:{outlet:null,matches:c}}):f()}),null)}(y&&y.map((function(e){return Object.assign({},e,{params:Object.assign({},s,e.params),pathname:H([c,i.encodeLocation?i.encodeLocation(e.pathname).pathname:e.pathname]),pathnameBase:"/"===e.pathnameBase?c:H([c,i.encodeLocation?i.encodeLocation(e.pathnameBase).pathname:e.pathnameBase])})})),l,a||void 0);return r&&v?t.createElement(le.Provider,{value:{location:re({pathname:"/",search:"",hash:"",state:null,key:"default"},o),navigationType:e.Pop}},v):v}(i&&!r?i.router.routes:xe(r),o)}!function(e){e.UseBlocker="useBlocker",e.UseRevalidator="useRevalidator"}(ye||(ye={})),function(e){e.UseLoaderData="useLoaderData",e.UseActionData="useActionData",e.UseRouteError="useRouteError",e.UseNavigation="useNavigation",e.UseRouteLoaderData="useRouteLoaderData",e.UseMatches="useMatches",e.UseRevalidator="useRevalidator"}(ve||(ve={})),function(e){e[e.pending=0]="pending",e[e.success=1]="success",e[e.error=2]="error"}(me||(me={}));new Promise((function(){}));function xe(e,n){void 0===n&&(n=[]);var r=[];return t.Children.forEach(e,(function(e,o){if(t.isValidElement(e))if(e.type!==t.Fragment){e.type!==we&&w(!1),e.props.index&&e.props.children&&w(!1);var i=[].concat(function(e){if(Array.isArray(e))return ne(e)}(l=n)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(l)||te(l)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}(),[o]),a={id:e.props.id||i.join("-"),caseSensitive:e.props.caseSensitive,element:e.props.element,index:e.props.index,path:e.props.path,loader:e.props.loader,action:e.props.action,errorElement:e.props.errorElement,hasErrorBoundary:null!=e.props.errorElement,shouldRevalidate:e.props.shouldRevalidate,handle:e.props.handle};e.props.children&&(a.children=xe(e.props.children,i)),r.push(a)}else r.push.apply(r,xe(e.props.children,n));var l})),r}function Oe(e,t){if(e){if("string"==typeof e)return Ee(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Ee(e,t):void 0}}function Ee(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Pe(){return Pe=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Pe.apply(this,arguments)}function je(e){return void 0===e&&(e=""),new URLSearchParams("string"==typeof e||Array.isArray(e)||e instanceof URLSearchParams?e:Object.keys(e).reduce((function(t,n){var r=e[n];return t.concat(Array.isArray(r)?r.map((function(e){return[n,e]})):[[n,r]])}),[]))}t.Component;var Ce=["onClick","relative","reloadDocument","replace","state","target","to","preventScrollReset"];function Ae(n){var r,o=n.basename,i=n.children,a=n.window,l=t.useRef();null==l.current&&(l.current=(void 0===(r={window:a,v5Compat:!0})&&(r={}),function(t,n,r,o){void 0===o&&(o={});var i=o,a=i.window,l=void 0===a?document.defaultView:a,u=i.v5Compat,s=void 0!==u&&u,c=l.history,f=e.Pop,d=null,p=h();function h(){return(c.state||{idx:null}).idx}function y(){f=e.Pop;var t=h(),n=null==t?null:t-p;p=t,d&&d({action:f,location:m.location,delta:n})}function v(e){var t="null"!==l.location.origin?l.location.origin:l.location.href,n="string"==typeof e?e:x(e);return w(t,"No window.location.(origin|href) available to create URL for href: "+n),new URL(n,t)}null==p&&(p=0,c.replaceState(g({},c.state,{idx:p}),""));var m={get action(){return f},get location(){return t(l,c)},listen:function(e){if(d)throw new Error("A history only accepts one active listener");return l.addEventListener(_,y),d=e,function(){l.removeEventListener(_,y),d=null}},createHref:function(e){return n(l,e)},createURL:v,encodeLocation:function(e){var t=v(e);return{pathname:t.pathname,search:t.search,hash:t.hash}},push:function(t,n){f=e.Push;var o=k(m.location,t,n);r&&r(o,t);var i=S(o,p=h()+1),a=m.createHref(o);try{c.pushState(i,"",a)}catch(e){l.location.assign(a)}s&&d&&d({action:f,location:m.location,delta:1})},replace:function(t,n){f=e.Replace;var o=k(m.location,t,n);r&&r(o,t);var i=S(o,p=h()),a=m.createHref(o);c.replaceState(i,"",a),s&&d&&d({action:f,location:m.location,delta:0})},go:function(e){return c.go(e)}};return m}((function(e,t){var n=O(e.location.hash.substr(1)),r=n.pathname,o=void 0===r?"/":r,i=n.search,a=void 0===i?"":i,l=n.hash;return k("",{pathname:o,search:a,hash:void 0===l?"":l},t.state&&t.state.usr||null,t.state&&t.state.key||"default")}),(function(e,t){var n=e.document.querySelector("base"),r="";if(n&&n.getAttribute("href")){var o=e.location.href,i=o.indexOf("#");r=-1===i?o:o.slice(0,i)}return r+"#"+("string"==typeof t?t:x(t))}),(function(e,t){!function(e,t){if(!e){"undefined"!=typeof console&&console.warn(t);try{throw new Error(t)}catch(e){}}}("/"===e.pathname.charAt(0),"relative pathnames are not supported in hash history.push("+JSON.stringify(t)+")")}),r)));var u,s,c=l.current,f=(u=t.useState({action:c.action,location:c.location}),s=2,function(e){if(Array.isArray(e))return e}(u)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,l=[],u=!0,s=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=i.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){s=!0,o=e}finally{try{if(!u&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(s)throw o}}return l}}(u,s)||Oe(u,s)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),d=f[0],p=f[1];return t.useLayoutEffect((function(){return c.listen(p)}),[c]),t.createElement(Se,{basename:o,children:i,location:d.location,navigationType:d.action,navigator:c})}var Te,Ne,Le="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement,Re=t.forwardRef((function(e,n){var r,o=e.onClick,i=e.relative,a=e.reloadDocument,l=e.replace,u=e.state,s=e.target,c=e.to,f=e.preventScrollReset,d=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,Ce),p=!1;if(Le&&"string"==typeof c&&/^(?:[a-z][a-z0-9+.-]*:|\/\/)/i.test(c)){r=c;var h=new URL(window.location.href),y=c.startsWith("//")?new URL(h.protocol+c):new URL(c);y.origin===h.origin?c=y.pathname+y.search+y.hash:p=!0}var v=function(e,n){var r=(void 0===n?{}:n).relative;ce()||w(!1);var o=t.useContext(ae),i=o.basename,a=o.navigator,l=pe(e,{relative:r}),u=l.hash,s=l.pathname,c=l.search,f=s;return"/"!==i&&(f="/"===s?i:H([i,s])),a.createHref({pathname:f,search:c,hash:u})}(c,{relative:i}),m=function(e,n){var r=void 0===n?{}:n,o=r.target,i=r.replace,a=r.state,l=r.preventScrollReset,u=r.relative,s=de(),c=fe(),f=pe(e,{relative:u});return t.useCallback((function(t){if(function(e,t){return!(0!==e.button||t&&"_self"!==t||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e))}(t,o)){t.preventDefault();var n=void 0!==i?i:x(c)===x(f);s(e,{replace:n,state:a,preventScrollReset:l,relative:u})}}),[c,s,f,i,a,o,e,l,u])}(c,{replace:l,state:u,target:s,preventScrollReset:f,relative:i});return t.createElement("a",Pe({},d,{href:r||v,onClick:p||a?o:function(e){o&&o(e),e.defaultPrevented||m(e)},ref:n,target:s}))}));function De(e){var n=t.useRef(je(e)),r=t.useRef(!1),o=fe(),i=t.useMemo((function(){return function(e,t){var n=je(e);if(t){var r,o=function(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(!n){if(Array.isArray(e)||(n=Oe(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0,o=function(){};return{s:o,n:function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}},e:function(e){throw e},f:o}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var i,a=!0,l=!1;return{s:function(){n=n.call(e)},n:function(){var e=n.next();return a=e.done,e},e:function(e){l=!0,i=e},f:function(){try{a||null==n.return||n.return()}finally{if(l)throw i}}}}(t.keys());try{var i=function(){var e=r.value;n.has(e)||t.getAll(e).forEach((function(t){n.append(e,t)}))};for(o.s();!(r=o.n()).done;)i()}catch(e){o.e(e)}finally{o.f()}}return n}(o.search,r.current?null:n.current)}),[o.search]),a=de(),l=t.useCallback((function(e,t){var n=je("function"==typeof e?e(i):e);r.current=!0,a("?"+n,t)}),[a,i]);return[i,l]}(function(e){e.UseScrollRestoration="useScrollRestoration",e.UseSubmitImpl="useSubmitImpl",e.UseFetcher="useFetcher"})(Te||(Te={})),function(e){e.UseFetchers="useFetchers",e.UseScrollRestoration="useScrollRestoration"}(Ne||(Ne={}));var Ie=o(703),Me=o.n(Ie);const Fe=o.p+"b2087dcee91b1f5fd59e33929038c07f.svg",Ue=o.p+"b3af5656682cc08bb03a30b35965fc87.svg",ze=o.p+"4e5c843d21d7895dbb3a2bd69b91665f.svg";var Be,Ve=o(823);function We(e){return We="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},We(e)}function $e(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==We(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==We(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===We(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}!function(e){e.s="s",e.m="m",e.l="l"}(Be||(Be={}));var He=function(e){var t,n=e.loading,r=void 0===n||n,o=e.size,i=void 0===o?Be.m:o,a=e.className,l=($e(t={},Be.s,ze),$e(t,Be.m,Ue),$e(t,Be.l,Fe),t);return(0,Ve.jsx)(Ve.Fragment,{children:r&&i&&(0,Ve.jsx)("img",{className:Me()("src-components-Loader-Loader-module__Loader",a),src:l[i],alt:"loader"})})};function qe(e){return qe="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},qe(e)}var Ge=["className","children","loading","disabled"];function Ke(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Qe(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Ke(Object(n),!0).forEach((function(t){Ye(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Ke(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Ye(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==qe(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==qe(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===qe(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Je=(0,t.memo)((function(e){var t=e.className,n=e.children,r=e.loading,o=e.disabled,i=function(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(e,Ge);return(0,Ve.jsx)("button",Qe(Qe({className:Me()(t,"src-components-Button-Button-module__button",r&&"src-components-Button-Button-module__loading",o&&"src-components-Button-Button-module__button_disabled"),disabled:r||o},i),{},{children:r?(0,Ve.jsxs)("div",{className:"src-components-Button-Button-module__children",children:[(0,Ve.jsx)("div",{children:(0,Ve.jsx)(He,{size:Be.s})}),(0,Ve.jsx)("div",{children:n})]}):n}))}));const Xe=o.p+"a01ff1b60d6c9efb16f7c77f056219a7.svg";var Ze="cart";function et(e){return et="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},et(e)}function tt(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];throw new Error("number"==typeof e?"[MobX] minified error nr: "+e+(n.length?" "+n.map(String).join(","):"")+". Find the full error at: https://github.com/mobxjs/mobx/blob/main/packages/mobx/src/errors.ts":"[MobX] "+e)}var nt={};function rt(){return"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==o.g?o.g:"undefined"!=typeof self?self:nt}var ot=Object.assign,it=Object.getOwnPropertyDescriptor,at=Object.defineProperty,lt=Object.prototype,ut=[];Object.freeze(ut);var st={};Object.freeze(st);var ct="undefined"!=typeof Proxy,ft=Object.toString();function dt(){ct||tt("Proxy not available")}function pt(e){var t=!1;return function(){if(!t)return t=!0,e.apply(this,arguments)}}var ht=function(){};function yt(e){return"function"==typeof e}function vt(e){switch(et(e)){case"string":case"symbol":case"number":return!0}return!1}function mt(e){return null!==e&&"object"===et(e)}function gt(e){if(!mt(e))return!1;var t=Object.getPrototypeOf(e);if(null==t)return!0;var n=Object.hasOwnProperty.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n.toString()===ft}function bt(e){var t=null==e?void 0:e.constructor;return!!t&&("GeneratorFunction"===t.name||"GeneratorFunction"===t.displayName)}function _t(e,t,n){at(e,t,{enumerable:!1,writable:!0,configurable:!0,value:n})}function wt(e,t,n){at(e,t,{enumerable:!1,writable:!1,configurable:!0,value:n})}function St(e,t){var n="isMobX"+e;return t.prototype[n]=!0,function(e){return mt(e)&&!0===e[n]}}function kt(e){return e instanceof Map}function xt(e){return e instanceof Set}var Ot=void 0!==Object.getOwnPropertySymbols,Et="undefined"!=typeof Reflect&&Reflect.ownKeys?Reflect.ownKeys:Ot?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:Object.getOwnPropertyNames;function Pt(e){return null===e?null:"object"===et(e)?""+e:e}function jt(e,t){return lt.hasOwnProperty.call(e,t)}var Ct=Object.getOwnPropertyDescriptors||function(e){var t={};return Et(e).forEach((function(n){t[n]=it(e,n)})),t};function At(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(void 0,o=function(e,t){if("object"!==et(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==et(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r.key),"symbol"===et(o)?o:String(o)),r)}var o}function Tt(e,t,n){return t&&At(e.prototype,t),n&&At(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function Nt(){return Nt=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},Nt.apply(this,arguments)}function Lt(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,Rt(e,t)}function Rt(e,t){return Rt=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},Rt(e,t)}function Dt(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function It(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Mt(e,t){var n="undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(n)return(n=n.call(e)).next.bind(n);if(Array.isArray(e)||(n=function(e,t){if(e){if("string"==typeof e)return It(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?It(e,t):void 0}}(e))||t&&e&&"number"==typeof e.length){n&&(e=n);var r=0;return function(){return r>=e.length?{done:!0}:{done:!1,value:e[r++]}}}throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}var Ft=Symbol("mobx-stored-annotations");function Ut(e){return Object.assign((function(t,n){zt(t,n,e)}),e)}function zt(e,t,n){jt(e,Ft)||_t(e,Ft,Nt({},e[Ft])),function(e){return e.annotationType_===Kt}(n)||(e[Ft][t]=n)}var Bt=Symbol("mobx administration"),Vt=function(){function e(e){void 0===e&&(e="Atom"),this.name_=void 0,this.isPendingUnobservation_=!1,this.isBeingObserved_=!1,this.observers_=new Set,this.diffValue_=0,this.lastAccessedBy_=0,this.lowestObserverState_=Wn.NOT_TRACKING_,this.onBOL=void 0,this.onBUOL=void 0,this.name_=e}var t=e.prototype;return t.onBO=function(){this.onBOL&&this.onBOL.forEach((function(e){return e()}))},t.onBUO=function(){this.onBUOL&&this.onBUOL.forEach((function(e){return e()}))},t.reportObserved=function(){return dr(this)},t.reportChanged=function(){cr(),pr(this),fr()},t.toString=function(){return this.name_},e}(),Wt=St("Atom",Vt);function $t(e,t,n){void 0===t&&(t=ht),void 0===n&&(n=ht);var r=new Vt(e);return t!==ht&&Mr(Rr,r,t,undefined),n!==ht&&Ir(r,n),r}var Ht={identity:function(e,t){return e===t},structural:function(e,t){return ei(e,t)},default:function(e,t){return Object.is?Object.is(e,t):e===t?0!==e||1/e==1/t:e!=e&&t!=t},shallow:function(e,t){return ei(e,t,1)}};function qt(e,t,n){return Yr(e)?e:Array.isArray(e)?En.array(e,{name:n}):gt(e)?En.object(e,void 0,{name:n}):kt(e)?En.map(e,{name:n}):xt(e)?En.set(e,{name:n}):"function"!=typeof e||Tr(e)||Qr(e)?e:bt(e)?Gr(e):Cr(n,e)}function Gt(e){return e}var Kt="override";function Qt(e,t){return{annotationType_:e,options_:t,make_:Yt,extend_:Jt}}function Yt(e,t,n,r){var o;if(null!=(o=this.options_)&&o.bound)return null===this.extend_(e,t,n,!1)?0:1;if(r===e.target_)return null===this.extend_(e,t,n,!1)?0:2;if(Tr(n.value))return 1;var i=Xt(e,this,t,n,!1);return at(r,t,i),2}function Jt(e,t,n,r){var o=Xt(e,this,t,n);return e.defineProperty_(t,o,r)}function Xt(e,t,n,r,o){var i,a,l,u,s,c,f,d;void 0===o&&(o=lr.safeDescriptors),d=r,t.annotationType_,d.value;var p,h=r.value;return null!=(i=t.options_)&&i.bound&&(h=h.bind(null!=(p=e.proxy_)?p:e.target_)),{value:In(null!=(a=null==(l=t.options_)?void 0:l.name)?a:n.toString(),h,null!=(u=null==(s=t.options_)?void 0:s.autoAction)&&u,null!=(c=t.options_)&&c.bound?null!=(f=e.proxy_)?f:e.target_:void 0),configurable:!o||e.isPlainObject_,enumerable:!1,writable:!o}}function Zt(e,t){return{annotationType_:e,options_:t,make_:en,extend_:tn}}function en(e,t,n,r){var o;if(r===e.target_)return null===this.extend_(e,t,n,!1)?0:2;if(null!=(o=this.options_)&&o.bound&&(!jt(e.target_,t)||!Qr(e.target_[t]))&&null===this.extend_(e,t,n,!1))return 0;if(Qr(n.value))return 1;var i=nn(e,this,0,n,!1,!1);return at(r,t,i),2}function tn(e,t,n,r){var o,i=nn(e,this,0,n,null==(o=this.options_)?void 0:o.bound);return e.defineProperty_(t,i,r)}function nn(e,t,n,r,o,i){var a;void 0===i&&(i=lr.safeDescriptors),a=r,t.annotationType_,a.value;var l,u=r.value;return Qr(u)||(u=Gr(u)),o&&((u=u.bind(null!=(l=e.proxy_)?l:e.target_)).isMobXFlow=!0),{value:u,configurable:!i||e.isPlainObject_,enumerable:!1,writable:!i}}function rn(e,t){return{annotationType_:e,options_:t,make_:on,extend_:an}}function on(e,t,n){return null===this.extend_(e,t,n,!1)?0:1}function an(e,t,n,r){return o=n,this.annotationType_,o.get,e.defineComputedProperty_(t,Nt({},this.options_,{get:n.get,set:n.set}),r);var o}function ln(e,t){return{annotationType_:e,options_:t,make_:un,extend_:sn}}function un(e,t,n){return null===this.extend_(e,t,n,!1)?0:1}function sn(e,t,n,r){var o,i;return this.annotationType_,e.defineObservableProperty_(t,n.value,null!=(o=null==(i=this.options_)?void 0:i.enhancer)?o:qt,r)}var cn="true",fn=dn();function dn(e){return{annotationType_:cn,options_:e,make_:pn,extend_:hn}}function pn(e,t,n,r){var o,i,a,l;if(n.get)return An.make_(e,t,n,r);if(n.set){var u=In(t.toString(),n.set);return r===e.target_?null===e.defineProperty_(t,{configurable:!lr.safeDescriptors||e.isPlainObject_,set:u})?0:2:(at(r,t,{configurable:!0,set:u}),2)}if(r!==e.target_&&"function"==typeof n.value)return bt(n.value)?(null!=(l=this.options_)&&l.autoBind?Gr.bound:Gr).make_(e,t,n,r):(null!=(a=this.options_)&&a.autoBind?Cr.bound:Cr).make_(e,t,n,r);var s,c=!1===(null==(o=this.options_)?void 0:o.deep)?En.ref:En;return"function"==typeof n.value&&null!=(i=this.options_)&&i.autoBind&&(n.value=n.value.bind(null!=(s=e.proxy_)?s:e.target_)),c.make_(e,t,n,r)}function hn(e,t,n,r){var o,i,a;return n.get?An.extend_(e,t,n,r):n.set?e.defineProperty_(t,{configurable:!lr.safeDescriptors||e.isPlainObject_,set:In(t.toString(),n.set)},r):("function"==typeof n.value&&null!=(o=this.options_)&&o.autoBind&&(n.value=n.value.bind(null!=(a=e.proxy_)?a:e.target_)),(!1===(null==(i=this.options_)?void 0:i.deep)?En.ref:En).extend_(e,t,n,r))}var yn={deep:!0,name:void 0,defaultDecorator:void 0,proxy:!0};function vn(e){return e||yn}Object.freeze(yn);var mn=ln("observable"),gn=ln("observable.ref",{enhancer:Gt}),bn=ln("observable.shallow",{enhancer:function(e,t,n){return null==e||Fo(e)||wo(e)||jo(e)||To(e)?e:Array.isArray(e)?En.array(e,{name:n,deep:!1}):gt(e)?En.object(e,void 0,{name:n,deep:!1}):kt(e)?En.map(e,{name:n,deep:!1}):xt(e)?En.set(e,{name:n,deep:!1}):void 0}}),_n=ln("observable.struct",{enhancer:function(e,t){return ei(e,t)?t:e}}),wn=Ut(mn);function Sn(e){return!0===e.deep?qt:!1===e.deep?Gt:(t=e.defaultDecorator)&&null!=(n=null==(r=t.options_)?void 0:r.enhancer)?n:qt;var t,n,r}function kn(e,t,n){if(!vt(t))return Yr(e)?e:gt(e)?En.object(e,t,n):Array.isArray(e)?En.array(e,t):kt(e)?En.map(e,t):xt(e)?En.set(e,t):"object"===et(e)&&null!==e?e:En.box(e,t);zt(e,t,mn)}ot(kn,wn);var xn,On,En=ot(kn,{box:function(e,t){var n=vn(t);return new Vn(e,Sn(n),n.name,!0,n.equals)},array:function(e,t){var n=vn(t);return(!1===lr.useProxies||!1===n.proxy?Qo:fo)(e,Sn(n),n.name)},map:function(e,t){var n=vn(t);return new Po(e,Sn(n),n.name)},set:function(e,t){var n=vn(t);return new Ao(e,Sn(n),n.name)},object:function(e,t,n){return function(e,t,n,r){var o=Ct(t),i=Do(e,r)[Bt];cr();try{Et(o).forEach((function(e){i.extend_(e,o[e],!n||!(e in n)||n[e])}))}finally{fr()}return e}(!1===lr.useProxies||!1===(null==n?void 0:n.proxy)?Do({},n):function(e,t){var n,r;return dt(),null!=(r=(n=(e=Do(e,t))[Bt]).proxy_)?r:n.proxy_=new Proxy(e,Zr)}({},n),e,t)},ref:Ut(gn),shallow:Ut(bn),deep:wn,struct:Ut(_n)}),Pn="computed",jn=rn(Pn),Cn=rn("computed.struct",{equals:Ht.structural}),An=function(e,t){if(vt(t))return zt(e,t,jn);if(gt(e))return Ut(rn(Pn,e));var n=gt(t)?t:{};return n.get=e,n.name||(n.name=e.name||""),new Hn(n)};Object.assign(An,jn),An.struct=Ut(Cn);var Tn,Nn=0,Ln=1,Rn=null!=(xn=null==(On=it((function(){}),"name"))?void 0:On.configurable)&&xn,Dn={value:"action",configurable:!0,writable:!1,enumerable:!1};function In(e,t,n,r){function o(){return Mn(0,n,t,r||this,arguments)}return void 0===n&&(n=!1),o.isMobxAction=!0,Rn&&(Dn.value=e,at(o,"name",Dn)),o}function Mn(e,t,n,r,o){var i=function(e,t,n,r){var o=lr.trackingDerivation,i=!t||!o;cr();var a=lr.allowStateChanges;i&&(Zn(),a=Un(!0));var l={runAsAction_:i,prevDerivation_:o,prevAllowStateChanges_:a,prevAllowStateReads_:tr(!0),notifySpy_:!1,startTime_:0,actionId_:Ln++,parentActionId_:Nn};return Nn=l.actionId_,l}(0,t);try{return n.apply(r,o)}catch(e){throw i.error_=e,e}finally{!function(e){Nn!==e.actionId_&&tt(30),Nn=e.parentActionId_,void 0!==e.error_&&(lr.suppressReactionErrors=!0),zn(e.prevAllowStateChanges_),nr(e.prevAllowStateReads_),fr(),e.runAsAction_&&er(e.prevDerivation_),lr.suppressReactionErrors=!1}(i)}}function Fn(e,t){var n=Un(e);try{return t()}finally{zn(n)}}function Un(e){var t=lr.allowStateChanges;return lr.allowStateChanges=e,t}function zn(e){lr.allowStateChanges=e}Tn=Symbol.toPrimitive;var Bn,Vn=function(e){function t(t,n,r,o,i){var a;return void 0===r&&(r="ObservableValue"),void 0===o&&(o=!0),void 0===i&&(i=Ht.default),(a=e.call(this,r)||this).enhancer=void 0,a.name_=void 0,a.equals=void 0,a.hasUnreportedChange_=!1,a.interceptors_=void 0,a.changeListeners_=void 0,a.value_=void 0,a.dehancer=void 0,a.enhancer=n,a.name_=r,a.equals=i,a.value_=n(t,void 0,r),a}Lt(t,e);var n=t.prototype;return n.dehanceValue=function(e){return void 0!==this.dehancer?this.dehancer(e):e},n.set=function(e){this.value_,(e=this.prepareNewValue_(e))!==lr.UNCHANGED&&this.setNewValue_(e)},n.prepareNewValue_=function(e){if(eo(this)){var t=no(this,{object:this,type:uo,newValue:e});if(!t)return lr.UNCHANGED;e=t.newValue}return e=this.enhancer(e,this.value_,this.name_),this.equals(this.value_,e)?lr.UNCHANGED:e},n.setNewValue_=function(e){var t=this.value_;this.value_=e,this.reportChanged(),ro(this)&&io(this,{type:uo,object:this,newValue:e,oldValue:t})},n.get=function(){return this.reportObserved(),this.dehanceValue(this.value_)},n.intercept_=function(e){return to(this,e)},n.observe_=function(e,t){return t&&e({observableKind:"value",debugObjectName:this.name_,object:this,type:uo,newValue:this.value_,oldValue:void 0}),oo(this,e)},n.raw=function(){return this.value_},n.toJSON=function(){return this.get()},n.toString=function(){return this.name_+"["+this.value_+"]"},n.valueOf=function(){return Pt(this.get())},n[Tn]=function(){return this.valueOf()},t}(Vt);Bn=Symbol.toPrimitive;var Wn,$n,Hn=function(){function e(e){this.dependenciesState_=Wn.NOT_TRACKING_,this.observing_=[],this.newObserving_=null,this.isBeingObserved_=!1,this.isPendingUnobservation_=!1,this.observers_=new Set,this.diffValue_=0,this.runId_=0,this.lastAccessedBy_=0,this.lowestObserverState_=Wn.UP_TO_DATE_,this.unboundDepsCount_=0,this.value_=new Gn(null),this.name_=void 0,this.triggeredBy_=void 0,this.isComputing_=!1,this.isRunningSetter_=!1,this.derivation=void 0,this.setter_=void 0,this.isTracing_=$n.NONE,this.scope_=void 0,this.equals_=void 0,this.requiresReaction_=void 0,this.keepAlive_=void 0,this.onBOL=void 0,this.onBUOL=void 0,e.get||tt(31),this.derivation=e.get,this.name_=e.name||"ComputedValue",e.set&&(this.setter_=In("ComputedValue-setter",e.set)),this.equals_=e.equals||(e.compareStructural||e.struct?Ht.structural:Ht.default),this.scope_=e.context,this.requiresReaction_=e.requiresReaction,this.keepAlive_=!!e.keepAlive}var t=e.prototype;return t.onBecomeStale_=function(){var e;(e=this).lowestObserverState_===Wn.UP_TO_DATE_&&(e.lowestObserverState_=Wn.POSSIBLY_STALE_,e.observers_.forEach((function(e){e.dependenciesState_===Wn.UP_TO_DATE_&&(e.dependenciesState_=Wn.POSSIBLY_STALE_,e.onBecomeStale_())})))},t.onBO=function(){this.onBOL&&this.onBOL.forEach((function(e){return e()}))},t.onBUO=function(){this.onBUOL&&this.onBUOL.forEach((function(e){return e()}))},t.get=function(){if(this.isComputing_&&tt(32,this.name_,this.derivation),0!==lr.inBatch||0!==this.observers_.size||this.keepAlive_){if(dr(this),Qn(this)){var e=lr.trackingContext;this.keepAlive_&&!e&&(lr.trackingContext=this),this.trackAndCompute()&&((t=this).lowestObserverState_!==Wn.STALE_&&(t.lowestObserverState_=Wn.STALE_,t.observers_.forEach((function(e){e.dependenciesState_===Wn.POSSIBLY_STALE_?e.dependenciesState_=Wn.STALE_:e.dependenciesState_===Wn.UP_TO_DATE_&&(t.lowestObserverState_=Wn.UP_TO_DATE_)})))),lr.trackingContext=e}}else Qn(this)&&(this.warnAboutUntrackedRead_(),cr(),this.value_=this.computeValue_(!1),fr());var t,n=this.value_;if(Kn(n))throw n.cause;return n},t.set=function(e){if(this.setter_){this.isRunningSetter_&&tt(33,this.name_),this.isRunningSetter_=!0;try{this.setter_.call(this.scope_,e)}finally{this.isRunningSetter_=!1}}else tt(34,this.name_)},t.trackAndCompute=function(){var e=this.value_,t=this.dependenciesState_===Wn.NOT_TRACKING_,n=this.computeValue_(!0),r=t||Kn(e)||Kn(n)||!this.equals_(e,n);return r&&(this.value_=n),r},t.computeValue_=function(e){this.isComputing_=!0;var t,n=Un(!1);if(e)t=Yn(this,this.derivation,this.scope_);else if(!0===lr.disableErrorBoundaries)t=this.derivation.call(this.scope_);else try{t=this.derivation.call(this.scope_)}catch(e){t=new Gn(e)}return zn(n),this.isComputing_=!1,t},t.suspend_=function(){this.keepAlive_||(Jn(this),this.value_=void 0)},t.observe_=function(e,t){var n=this,r=!0,o=void 0;return function(e,t){var n,r;void 0===t&&(t=st);var o,i=null!=(n=null==(r=t)?void 0:r.name)?n:"Autorun";if(t.scheduler||t.delay){var a=Lr(t),l=!1;o=new hr(i,(function(){l||(l=!0,a((function(){l=!1,o.isDisposed_||o.track(u)})))}),t.onError,t.requiresObservable)}else o=new hr(i,(function(){this.track(u)}),t.onError,t.requiresObservable);function u(){e(o)}return o.schedule_(),o.getDisposer_()}((function(){var i=n.get();if(!r||t){var a=Zn();e({observableKind:"computed",debugObjectName:n.name_,type:uo,object:n,newValue:i,oldValue:o}),er(a)}r=!1,o=i}))},t.warnAboutUntrackedRead_=function(){},t.toString=function(){return this.name_+"["+this.derivation.toString()+"]"},t.valueOf=function(){return Pt(this.get())},t[Bn]=function(){return this.valueOf()},e}(),qn=St("ComputedValue",Hn);!function(e){e[e.NOT_TRACKING_=-1]="NOT_TRACKING_",e[e.UP_TO_DATE_=0]="UP_TO_DATE_",e[e.POSSIBLY_STALE_=1]="POSSIBLY_STALE_",e[e.STALE_=2]="STALE_"}(Wn||(Wn={})),function(e){e[e.NONE=0]="NONE",e[e.LOG=1]="LOG",e[e.BREAK=2]="BREAK"}($n||($n={}));var Gn=function(e){this.cause=void 0,this.cause=e};function Kn(e){return e instanceof Gn}function Qn(e){switch(e.dependenciesState_){case Wn.UP_TO_DATE_:return!1;case Wn.NOT_TRACKING_:case Wn.STALE_:return!0;case Wn.POSSIBLY_STALE_:for(var t=tr(!0),n=Zn(),r=e.observing_,o=r.length,i=0;i<o;i++){var a=r[i];if(qn(a)){if(lr.disableErrorBoundaries)a.get();else try{a.get()}catch(e){return er(n),nr(t),!0}if(e.dependenciesState_===Wn.STALE_)return er(n),nr(t),!0}}return rr(e),er(n),nr(t),!1}}function Yn(e,t,n){var r=tr(!0);rr(e),e.newObserving_=new Array(e.observing_.length+100),e.unboundDepsCount_=0,e.runId_=++lr.runId;var o,i=lr.trackingDerivation;if(lr.trackingDerivation=e,lr.inBatch++,!0===lr.disableErrorBoundaries)o=t.call(n);else try{o=t.call(n)}catch(e){o=new Gn(e)}return lr.inBatch--,lr.trackingDerivation=i,function(e){for(var t=e.observing_,n=e.observing_=e.newObserving_,r=Wn.UP_TO_DATE_,o=0,i=e.unboundDepsCount_,a=0;a<i;a++){var l=n[a];0===l.diffValue_&&(l.diffValue_=1,o!==a&&(n[o]=l),o++),l.dependenciesState_>r&&(r=l.dependenciesState_)}for(n.length=o,e.newObserving_=null,i=t.length;i--;){var u=t[i];0===u.diffValue_&&ur(u,e),u.diffValue_=0}for(;o--;){var s=n[o];1===s.diffValue_&&(s.diffValue_=0,f=e,(c=s).observers_.add(f),c.lowestObserverState_>f.dependenciesState_&&(c.lowestObserverState_=f.dependenciesState_))}var c,f;r!==Wn.UP_TO_DATE_&&(e.dependenciesState_=r,e.onBecomeStale_())}(e),nr(r),o}function Jn(e){var t=e.observing_;e.observing_=[];for(var n=t.length;n--;)ur(t[n],e);e.dependenciesState_=Wn.NOT_TRACKING_}function Xn(e){var t=Zn();try{return e()}finally{er(t)}}function Zn(){var e=lr.trackingDerivation;return lr.trackingDerivation=null,e}function er(e){lr.trackingDerivation=e}function tr(e){var t=lr.allowStateReads;return lr.allowStateReads=e,t}function nr(e){lr.allowStateReads=e}function rr(e){if(e.dependenciesState_!==Wn.UP_TO_DATE_){e.dependenciesState_=Wn.UP_TO_DATE_;for(var t=e.observing_,n=t.length;n--;)t[n].lowestObserverState_=Wn.UP_TO_DATE_}}var or=function(){this.version=6,this.UNCHANGED={},this.trackingDerivation=null,this.trackingContext=null,this.runId=0,this.mobxGuid=0,this.inBatch=0,this.pendingUnobservations=[],this.pendingReactions=[],this.isRunningReactions=!1,this.allowStateChanges=!1,this.allowStateReads=!0,this.enforceActions=!0,this.spyListeners=[],this.globalReactionErrorHandlers=[],this.computedRequiresReaction=!1,this.reactionRequiresObservable=!1,this.observableRequiresReaction=!1,this.disableErrorBoundaries=!1,this.suppressReactionErrors=!1,this.useProxies=!0,this.verifyProxies=!1,this.safeDescriptors=!0},ir=!0,ar=!1,lr=function(){var e=rt();return e.__mobxInstanceCount>0&&!e.__mobxGlobals&&(ir=!1),e.__mobxGlobals&&e.__mobxGlobals.version!==(new or).version&&(ir=!1),ir?e.__mobxGlobals?(e.__mobxInstanceCount+=1,e.__mobxGlobals.UNCHANGED||(e.__mobxGlobals.UNCHANGED={}),e.__mobxGlobals):(e.__mobxInstanceCount=1,e.__mobxGlobals=new or):(setTimeout((function(){ar||tt(35)}),1),new or)}();function ur(e,t){e.observers_.delete(t),0===e.observers_.size&&sr(e)}function sr(e){!1===e.isPendingUnobservation_&&(e.isPendingUnobservation_=!0,lr.pendingUnobservations.push(e))}function cr(){lr.inBatch++}function fr(){if(0==--lr.inBatch){mr();for(var e=lr.pendingUnobservations,t=0;t<e.length;t++){var n=e[t];n.isPendingUnobservation_=!1,0===n.observers_.size&&(n.isBeingObserved_&&(n.isBeingObserved_=!1,n.onBUO()),n instanceof Hn&&n.suspend_())}lr.pendingUnobservations=[]}}function dr(e){var t=lr.trackingDerivation;return null!==t?(t.runId_!==e.lastAccessedBy_&&(e.lastAccessedBy_=t.runId_,t.newObserving_[t.unboundDepsCount_++]=e,!e.isBeingObserved_&&lr.trackingContext&&(e.isBeingObserved_=!0,e.onBO())),e.isBeingObserved_):(0===e.observers_.size&&lr.inBatch>0&&sr(e),!1)}function pr(e){e.lowestObserverState_!==Wn.STALE_&&(e.lowestObserverState_=Wn.STALE_,e.observers_.forEach((function(e){e.dependenciesState_===Wn.UP_TO_DATE_&&e.onBecomeStale_(),e.dependenciesState_=Wn.STALE_})))}var hr=function(){function e(e,t,n,r){void 0===e&&(e="Reaction"),this.name_=void 0,this.onInvalidate_=void 0,this.errorHandler_=void 0,this.requiresObservable_=void 0,this.observing_=[],this.newObserving_=[],this.dependenciesState_=Wn.NOT_TRACKING_,this.diffValue_=0,this.runId_=0,this.unboundDepsCount_=0,this.isDisposed_=!1,this.isScheduled_=!1,this.isTrackPending_=!1,this.isRunning_=!1,this.isTracing_=$n.NONE,this.name_=e,this.onInvalidate_=t,this.errorHandler_=n,this.requiresObservable_=r}var t=e.prototype;return t.onBecomeStale_=function(){this.schedule_()},t.schedule_=function(){this.isScheduled_||(this.isScheduled_=!0,lr.pendingReactions.push(this),mr())},t.isScheduled=function(){return this.isScheduled_},t.runReaction_=function(){if(!this.isDisposed_){cr(),this.isScheduled_=!1;var e=lr.trackingContext;if(lr.trackingContext=this,Qn(this)){this.isTrackPending_=!0;try{this.onInvalidate_()}catch(e){this.reportExceptionInDerivation_(e)}}lr.trackingContext=e,fr()}},t.track=function(e){if(!this.isDisposed_){cr(),this.isRunning_=!0;var t=lr.trackingContext;lr.trackingContext=this;var n=Yn(this,e,void 0);lr.trackingContext=t,this.isRunning_=!1,this.isTrackPending_=!1,this.isDisposed_&&Jn(this),Kn(n)&&this.reportExceptionInDerivation_(n.cause),fr()}},t.reportExceptionInDerivation_=function(e){var t=this;if(this.errorHandler_)this.errorHandler_(e,this);else{if(lr.disableErrorBoundaries)throw e;var n="[mobx] uncaught error in '"+this+"'";lr.suppressReactionErrors||console.error(n,e),lr.globalReactionErrorHandlers.forEach((function(n){return n(e,t)}))}},t.dispose=function(){this.isDisposed_||(this.isDisposed_=!0,this.isRunning_||(cr(),Jn(this),fr()))},t.getDisposer_=function(){var e=this.dispose.bind(this);return e[Bt]=this,e},t.toString=function(){return"Reaction["+this.name_+"]"},t.trace=function(e){void 0===e&&(e=!1),function(){tt("trace() is not available in production builds");for(var e=!1,t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];"boolean"==typeof n[n.length-1]&&(e=n.pop());var o=function(e){switch(e.length){case 0:return lr.trackingDerivation;case 1:return Yo(e[0]);case 2:return Yo(e[0],e[1])}}(n);if(!o)return tt("'trace(break?)' can only be used inside a tracked computed value or a Reaction. Consider passing in the computed value or reaction explicitly");o.isTracing_===$n.NONE&&console.log("[mobx.trace] '"+o.name_+"' tracing enabled"),o.isTracing_=e?$n.BREAK:$n.LOG}(this,e)},e}(),yr=100,vr=function(e){return e()};function mr(){lr.inBatch>0||lr.isRunningReactions||vr(gr)}function gr(){lr.isRunningReactions=!0;for(var e=lr.pendingReactions,t=0;e.length>0;){++t===yr&&(console.error("[mobx] cycle in reaction: "+e[0]),e.splice(0));for(var n=e.splice(0),r=0,o=n.length;r<o;r++)n[r].runReaction_()}lr.isRunningReactions=!1}var br=St("Reaction",hr),_r="action",wr="autoAction",Sr="<unnamed action>",kr=Qt(_r),xr=Qt("action.bound",{bound:!0}),Or=Qt(wr,{autoAction:!0}),Er=Qt("autoAction.bound",{autoAction:!0,bound:!0});function Pr(e){return function(t,n){return yt(t)?In(t.name||Sr,t,e):yt(n)?In(t,n,e):vt(n)?zt(t,n,e?Or:kr):vt(t)?Ut(Qt(e?wr:_r,{name:t,autoAction:e})):void 0}}var jr=Pr(!1);Object.assign(jr,kr);var Cr=Pr(!0);function Ar(e){return Mn(e.name,!1,e,this,void 0)}function Tr(e){return yt(e)&&!0===e.isMobxAction}Object.assign(Cr,Or),jr.bound=Ut(xr),Cr.bound=Ut(Er);var Nr=function(e){return e()};function Lr(e){return e.scheduler?e.scheduler:e.delay?function(t){return setTimeout(t,e.delay)}:Nr}var Rr="onBO",Dr="onBUO";function Ir(e,t,n){return Mr(Dr,e,t,n)}function Mr(e,t,n,r){var o="function"==typeof r?Yo(t,n):Yo(t),i=yt(r)?r:n,a=e+"L";return o[a]?o[a].add(i):o[a]=new Set([i]),function(){var e=o[a];e&&(e.delete(i),0===e.size&&delete o[a])}}var Fr="never",Ur="always",zr="observed";function Br(e){!0===e.isolateGlobalState&&function(){if((lr.pendingReactions.length||lr.inBatch||lr.isRunningReactions)&&tt(36),ar=!0,ir){var e=rt();0==--e.__mobxInstanceCount&&(e.__mobxGlobals=void 0),lr=new or}}();var t,n,r=e.useProxies,o=e.enforceActions;if(void 0!==r&&(lr.useProxies=r===Ur||r!==Fr&&"undefined"!=typeof Proxy),"ifavailable"===r&&(lr.verifyProxies=!0),void 0!==o){var i=o===Ur?Ur:o===zr;lr.enforceActions=i,lr.allowStateChanges=!0!==i&&i!==Ur}["computedRequiresReaction","reactionRequiresObservable","observableRequiresReaction","disableErrorBoundaries","safeDescriptors"].forEach((function(t){t in e&&(lr[t]=!!e[t])})),lr.allowStateReads=!lr.observableRequiresReaction,e.reactionScheduler&&(t=e.reactionScheduler,n=vr,vr=function(e){return t((function(){return n(e)}))})}function Vr(e){var t,n={name:e.name_};return e.observing_&&e.observing_.length>0&&(n.dependencies=(t=e.observing_,Array.from(new Set(t))).map(Vr)),n}var Wr=0;function $r(){this.message="FLOW_CANCELLED"}$r.prototype=Object.create(Error.prototype);var Hr=Zt("flow"),qr=Zt("flow.bound",{bound:!0}),Gr=Object.assign((function(e,t){if(vt(t))return zt(e,t,Hr);var n=e,r=n.name||"<unnamed flow>",o=function(){var e,t=arguments,o=++Wr,i=jr(r+" - runid: "+o+" - init",n).apply(this,t),a=void 0,l=new Promise((function(t,n){var l=0;function u(e){var t;a=void 0;try{t=jr(r+" - runid: "+o+" - yield "+l++,i.next).call(i,e)}catch(e){return n(e)}c(t)}function s(e){var t;a=void 0;try{t=jr(r+" - runid: "+o+" - yield "+l++,i.throw).call(i,e)}catch(e){return n(e)}c(t)}function c(e){if(!yt(null==e?void 0:e.then))return e.done?t(e.value):(a=Promise.resolve(e.value)).then(u,s);e.then(c,n)}e=n,u(void 0)}));return l.cancel=jr(r+" - runid: "+o+" - cancel",(function(){try{a&&Kr(a);var t=i.return(void 0),n=Promise.resolve(t.value);n.then(ht,ht),Kr(n),e(new $r)}catch(t){e(t)}})),l};return o.isMobXFlow=!0,o}),Hr);function Kr(e){yt(e.cancel)&&e.cancel()}function Qr(e){return!0===(null==e?void 0:e.isMobXFlow)}function Yr(e){return function(e,t){return!!e&&(void 0!==t?!!Fo(e)&&e[Bt].values_.has(t):Fo(e)||!!e[Bt]||Wt(e)||br(e)||qn(e))}(e)}function Jr(e,t){void 0===t&&(t=void 0),cr();try{return e.apply(t)}finally{fr()}}function Xr(e){return e[Bt]}Gr.bound=Ut(qr);var Zr={has:function(e,t){return Xr(e).has_(t)},get:function(e,t){return Xr(e).get_(t)},set:function(e,t,n){var r;return!!vt(t)&&(null==(r=Xr(e).set_(t,n,!0))||r)},deleteProperty:function(e,t){var n;return!!vt(t)&&(null==(n=Xr(e).delete_(t,!0))||n)},defineProperty:function(e,t,n){var r;return null==(r=Xr(e).defineProperty_(t,n))||r},ownKeys:function(e){return Xr(e).ownKeys_()},preventExtensions:function(e){tt(13)}};function eo(e){return void 0!==e.interceptors_&&e.interceptors_.length>0}function to(e,t){var n=e.interceptors_||(e.interceptors_=[]);return n.push(t),pt((function(){var e=n.indexOf(t);-1!==e&&n.splice(e,1)}))}function no(e,t){var n=Zn();try{for(var r=[].concat(e.interceptors_||[]),o=0,i=r.length;o<i&&((t=r[o](t))&&!t.type&&tt(14),t);o++);return t}finally{er(n)}}function ro(e){return void 0!==e.changeListeners_&&e.changeListeners_.length>0}function oo(e,t){var n=e.changeListeners_||(e.changeListeners_=[]);return n.push(t),pt((function(){var e=n.indexOf(t);-1!==e&&n.splice(e,1)}))}function io(e,t){var n=Zn(),r=e.changeListeners_;if(r){for(var o=0,i=(r=r.slice()).length;o<i;o++)r[o](t);er(n)}}function ao(e,t,n){var r=Do(e,n)[Bt];cr();try{null!=t||(t=function(e){return jt(e,Ft)||_t(e,Ft,Nt({},e[Ft])),e[Ft]}(e)),Et(t).forEach((function(e){return r.make_(e,t[e])}))}finally{fr()}return e}var lo="splice",uo="update",so={get:function(e,t){var n=e[Bt];return t===Bt?n:"length"===t?n.getArrayLength_():"string"!=typeof t||isNaN(t)?jt(po,t)?po[t]:e[t]:n.get_(parseInt(t))},set:function(e,t,n){var r=e[Bt];return"length"===t&&r.setArrayLength_(n),"symbol"===et(t)||isNaN(t)?e[t]=n:r.set_(parseInt(t),n),!0},preventExtensions:function(){tt(15)}},co=function(){function e(e,t,n,r){void 0===e&&(e="ObservableArray"),this.owned_=void 0,this.legacyMode_=void 0,this.atom_=void 0,this.values_=[],this.interceptors_=void 0,this.changeListeners_=void 0,this.enhancer_=void 0,this.dehancer=void 0,this.proxy_=void 0,this.lastKnownLength_=0,this.owned_=n,this.legacyMode_=r,this.atom_=new Vt(e),this.enhancer_=function(e,n){return t(e,n,"ObservableArray[..]")}}var t=e.prototype;return t.dehanceValue_=function(e){return void 0!==this.dehancer?this.dehancer(e):e},t.dehanceValues_=function(e){return void 0!==this.dehancer&&e.length>0?e.map(this.dehancer):e},t.intercept_=function(e){return to(this,e)},t.observe_=function(e,t){return void 0===t&&(t=!1),t&&e({observableKind:"array",object:this.proxy_,debugObjectName:this.atom_.name_,type:"splice",index:0,added:this.values_.slice(),addedCount:this.values_.length,removed:[],removedCount:0}),oo(this,e)},t.getArrayLength_=function(){return this.atom_.reportObserved(),this.values_.length},t.setArrayLength_=function(e){("number"!=typeof e||isNaN(e)||e<0)&&tt("Out of range: "+e);var t=this.values_.length;if(e!==t)if(e>t){for(var n=new Array(e-t),r=0;r<e-t;r++)n[r]=void 0;this.spliceWithArray_(t,0,n)}else this.spliceWithArray_(e,t-e)},t.updateArrayLength_=function(e,t){e!==this.lastKnownLength_&&tt(16),this.lastKnownLength_+=t,this.legacyMode_&&t>0&&Ko(e+t+1)},t.spliceWithArray_=function(e,t,n){var r=this;this.atom_;var o=this.values_.length;if(void 0===e?e=0:e>o?e=o:e<0&&(e=Math.max(0,o+e)),t=1===arguments.length?o-e:null==t?0:Math.max(0,Math.min(t,o-e)),void 0===n&&(n=ut),eo(this)){var i=no(this,{object:this.proxy_,type:lo,index:e,removedCount:t,added:n});if(!i)return ut;t=i.removedCount,n=i.added}if(n=0===n.length?n:n.map((function(e){return r.enhancer_(e,void 0)})),this.legacyMode_){var a=n.length-t;this.updateArrayLength_(o,a)}var l=this.spliceItemsIntoValues_(e,t,n);return 0===t&&0===n.length||this.notifyArraySplice_(e,n,l),this.dehanceValues_(l)},t.spliceItemsIntoValues_=function(e,t,n){var r;if(n.length<1e4)return(r=this.values_).splice.apply(r,[e,t].concat(n));var o=this.values_.slice(e,e+t),i=this.values_.slice(e+t);this.values_.length+=n.length-t;for(var a=0;a<n.length;a++)this.values_[e+a]=n[a];for(var l=0;l<i.length;l++)this.values_[e+n.length+l]=i[l];return o},t.notifyArrayChildUpdate_=function(e,t,n){var r=!this.owned_&&!1,o=ro(this),i=o||r?{observableKind:"array",object:this.proxy_,type:uo,debugObjectName:this.atom_.name_,index:e,newValue:t,oldValue:n}:null;this.atom_.reportChanged(),o&&io(this,i)},t.notifyArraySplice_=function(e,t,n){var r=!this.owned_&&!1,o=ro(this),i=o||r?{observableKind:"array",object:this.proxy_,debugObjectName:this.atom_.name_,type:lo,index:e,removed:n,added:t,removedCount:n.length,addedCount:t.length}:null;this.atom_.reportChanged(),o&&io(this,i)},t.get_=function(e){if(!(this.legacyMode_&&e>=this.values_.length))return this.atom_.reportObserved(),this.dehanceValue_(this.values_[e]);console.warn("[mobx] Out of bounds read: "+e)},t.set_=function(e,t){var n=this.values_;if(this.legacyMode_&&e>n.length&&tt(17,e,n.length),e<n.length){this.atom_;var r=n[e];if(eo(this)){var o=no(this,{type:uo,object:this.proxy_,index:e,newValue:t});if(!o)return;t=o.newValue}(t=this.enhancer_(t,r))!==r&&(n[e]=t,this.notifyArrayChildUpdate_(e,t,r))}else{for(var i=new Array(e+1-n.length),a=0;a<i.length-1;a++)i[a]=void 0;i[i.length-1]=t,this.spliceWithArray_(n.length,0,i)}},e}();function fo(e,t,n,r){void 0===n&&(n="ObservableArray"),void 0===r&&(r=!1),dt();var o=new co(n,t,r,!1);wt(o.values_,Bt,o);var i=new Proxy(o.values_,so);if(o.proxy_=i,e&&e.length){var a=Un(!0);o.spliceWithArray_(0,0,e),zn(a)}return i}var po={clear:function(){return this.splice(0)},replace:function(e){var t=this[Bt];return t.spliceWithArray_(0,t.values_.length,e)},toJSON:function(){return this.slice()},splice:function(e,t){for(var n=arguments.length,r=new Array(n>2?n-2:0),o=2;o<n;o++)r[o-2]=arguments[o];var i=this[Bt];switch(arguments.length){case 0:return[];case 1:return i.spliceWithArray_(e);case 2:return i.spliceWithArray_(e,t)}return i.spliceWithArray_(e,t,r)},spliceWithArray:function(e,t,n){return this[Bt].spliceWithArray_(e,t,n)},push:function(){for(var e=this[Bt],t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return e.spliceWithArray_(e.values_.length,0,n),e.values_.length},pop:function(){return this.splice(Math.max(this[Bt].values_.length-1,0),1)[0]},shift:function(){return this.splice(0,1)[0]},unshift:function(){for(var e=this[Bt],t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return e.spliceWithArray_(0,0,n),e.values_.length},reverse:function(){return lr.trackingDerivation&&tt(37,"reverse"),this.replace(this.slice().reverse()),this},sort:function(){lr.trackingDerivation&&tt(37,"sort");var e=this.slice();return e.sort.apply(e,arguments),this.replace(e),this},remove:function(e){var t=this[Bt],n=t.dehanceValues_(t.values_).indexOf(e);return n>-1&&(this.splice(n,1),!0)}};function ho(e,t){"function"==typeof Array.prototype[e]&&(po[e]=t(e))}function yo(e){return function(){var t=this[Bt];t.atom_.reportObserved();var n=t.dehanceValues_(t.values_);return n[e].apply(n,arguments)}}function vo(e){return function(t,n){var r=this,o=this[Bt];return o.atom_.reportObserved(),o.dehanceValues_(o.values_)[e]((function(e,o){return t.call(n,e,o,r)}))}}function mo(e){return function(){var t=this,n=this[Bt];n.atom_.reportObserved();var r=n.dehanceValues_(n.values_),o=arguments[0];return arguments[0]=function(e,n,r){return o(e,n,r,t)},r[e].apply(r,arguments)}}ho("concat",yo),ho("flat",yo),ho("includes",yo),ho("indexOf",yo),ho("join",yo),ho("lastIndexOf",yo),ho("slice",yo),ho("toString",yo),ho("toLocaleString",yo),ho("every",vo),ho("filter",vo),ho("find",vo),ho("findIndex",vo),ho("flatMap",vo),ho("forEach",vo),ho("map",vo),ho("some",vo),ho("reduce",mo),ho("reduceRight",mo);var go,bo,_o=St("ObservableArrayAdministration",co);function wo(e){return mt(e)&&_o(e[Bt])}var So={},ko="add",xo="delete";go=Symbol.iterator,bo=Symbol.toStringTag;var Oo,Eo,Po=function(){function e(e,t,n){var r=this;void 0===t&&(t=qt),void 0===n&&(n="ObservableMap"),this.enhancer_=void 0,this.name_=void 0,this[Bt]=So,this.data_=void 0,this.hasMap_=void 0,this.keysAtom_=void 0,this.interceptors_=void 0,this.changeListeners_=void 0,this.dehancer=void 0,this.enhancer_=t,this.name_=n,yt(Map)||tt(18),this.keysAtom_=$t("ObservableMap.keys()"),this.data_=new Map,this.hasMap_=new Map,Fn(!0,(function(){r.merge(e)}))}var t=e.prototype;return t.has_=function(e){return this.data_.has(e)},t.has=function(e){var t=this;if(!lr.trackingDerivation)return this.has_(e);var n=this.hasMap_.get(e);if(!n){var r=n=new Vn(this.has_(e),Gt,"ObservableMap.key?",!1);this.hasMap_.set(e,r),Ir(r,(function(){return t.hasMap_.delete(e)}))}return n.get()},t.set=function(e,t){var n=this.has_(e);if(eo(this)){var r=no(this,{type:n?uo:ko,object:this,newValue:t,name:e});if(!r)return this;t=r.newValue}return n?this.updateValue_(e,t):this.addValue_(e,t),this},t.delete=function(e){var t=this;if(this.keysAtom_,eo(this)&&!no(this,{type:xo,object:this,name:e}))return!1;if(this.has_(e)){var n=ro(this),r=n?{observableKind:"map",debugObjectName:this.name_,type:xo,object:this,oldValue:this.data_.get(e).value_,name:e}:null;return Jr((function(){var n;t.keysAtom_.reportChanged(),null==(n=t.hasMap_.get(e))||n.setNewValue_(!1),t.data_.get(e).setNewValue_(void 0),t.data_.delete(e)})),n&&io(this,r),!0}return!1},t.updateValue_=function(e,t){var n=this.data_.get(e);if((t=n.prepareNewValue_(t))!==lr.UNCHANGED){var r=ro(this),o=r?{observableKind:"map",debugObjectName:this.name_,type:uo,object:this,oldValue:n.value_,name:e,newValue:t}:null;n.setNewValue_(t),r&&io(this,o)}},t.addValue_=function(e,t){var n=this;this.keysAtom_,Jr((function(){var r,o=new Vn(t,n.enhancer_,"ObservableMap.key",!1);n.data_.set(e,o),t=o.value_,null==(r=n.hasMap_.get(e))||r.setNewValue_(!0),n.keysAtom_.reportChanged()}));var r=ro(this),o=r?{observableKind:"map",debugObjectName:this.name_,type:ko,object:this,name:e,newValue:t}:null;r&&io(this,o)},t.get=function(e){return this.has(e)?this.dehanceValue_(this.data_.get(e).get()):this.dehanceValue_(void 0)},t.dehanceValue_=function(e){return void 0!==this.dehancer?this.dehancer(e):e},t.keys=function(){return this.keysAtom_.reportObserved(),this.data_.keys()},t.values=function(){var e=this,t=this.keys();return ri({next:function(){var n=t.next(),r=n.done,o=n.value;return{done:r,value:r?void 0:e.get(o)}}})},t.entries=function(){var e=this,t=this.keys();return ri({next:function(){var n=t.next(),r=n.done,o=n.value;return{done:r,value:r?void 0:[o,e.get(o)]}}})},t[go]=function(){return this.entries()},t.forEach=function(e,t){for(var n,r=Mt(this);!(n=r()).done;){var o=n.value,i=o[0],a=o[1];e.call(t,a,i,this)}},t.merge=function(e){var t=this;return jo(e)&&(e=new Map(e)),Jr((function(){gt(e)?function(e){var t=Object.keys(e);if(!Ot)return t;var n=Object.getOwnPropertySymbols(e);return n.length?[].concat(t,n.filter((function(t){return lt.propertyIsEnumerable.call(e,t)}))):t}(e).forEach((function(n){return t.set(n,e[n])})):Array.isArray(e)?e.forEach((function(e){var n=e[0],r=e[1];return t.set(n,r)})):kt(e)?(e.constructor!==Map&&tt(19,e),e.forEach((function(e,n){return t.set(n,e)}))):null!=e&&tt(20,e)})),this},t.clear=function(){var e=this;Jr((function(){Xn((function(){for(var t,n=Mt(e.keys());!(t=n()).done;){var r=t.value;e.delete(r)}}))}))},t.replace=function(e){var t=this;return Jr((function(){for(var n,r=function(e){if(kt(e)||jo(e))return e;if(Array.isArray(e))return new Map(e);if(gt(e)){var t=new Map;for(var n in e)t.set(n,e[n]);return t}return tt(21,e)}(e),o=new Map,i=!1,a=Mt(t.data_.keys());!(n=a()).done;){var l=n.value;if(!r.has(l))if(t.delete(l))i=!0;else{var u=t.data_.get(l);o.set(l,u)}}for(var s,c=Mt(r.entries());!(s=c()).done;){var f=s.value,d=f[0],p=f[1],h=t.data_.has(d);if(t.set(d,p),t.data_.has(d)){var y=t.data_.get(d);o.set(d,y),h||(i=!0)}}if(!i)if(t.data_.size!==o.size)t.keysAtom_.reportChanged();else for(var v=t.data_.keys(),m=o.keys(),g=v.next(),b=m.next();!g.done;){if(g.value!==b.value){t.keysAtom_.reportChanged();break}g=v.next(),b=m.next()}t.data_=o})),this},t.toString=function(){return"[object ObservableMap]"},t.toJSON=function(){return Array.from(this)},t.observe_=function(e,t){return oo(this,e)},t.intercept_=function(e){return to(this,e)},Tt(e,[{key:"size",get:function(){return this.keysAtom_.reportObserved(),this.data_.size}},{key:bo,get:function(){return"Map"}}]),e}(),jo=St("ObservableMap",Po),Co={};Oo=Symbol.iterator,Eo=Symbol.toStringTag;var Ao=function(){function e(e,t,n){void 0===t&&(t=qt),void 0===n&&(n="ObservableSet"),this.name_=void 0,this[Bt]=Co,this.data_=new Set,this.atom_=void 0,this.changeListeners_=void 0,this.interceptors_=void 0,this.dehancer=void 0,this.enhancer_=void 0,this.name_=n,yt(Set)||tt(22),this.atom_=$t(this.name_),this.enhancer_=function(e,r){return t(e,r,n)},e&&this.replace(e)}var t=e.prototype;return t.dehanceValue_=function(e){return void 0!==this.dehancer?this.dehancer(e):e},t.clear=function(){var e=this;Jr((function(){Xn((function(){for(var t,n=Mt(e.data_.values());!(t=n()).done;){var r=t.value;e.delete(r)}}))}))},t.forEach=function(e,t){for(var n,r=Mt(this);!(n=r()).done;){var o=n.value;e.call(t,o,o,this)}},t.add=function(e){var t=this;if(this.atom_,eo(this)&&!no(this,{type:ko,object:this,newValue:e}))return this;if(!this.has(e)){Jr((function(){t.data_.add(t.enhancer_(e,void 0)),t.atom_.reportChanged()}));var n=ro(this),r=n?{observableKind:"set",debugObjectName:this.name_,type:ko,object:this,newValue:e}:null;n&&io(this,r)}return this},t.delete=function(e){var t=this;if(eo(this)&&!no(this,{type:xo,object:this,oldValue:e}))return!1;if(this.has(e)){var n=ro(this),r=n?{observableKind:"set",debugObjectName:this.name_,type:xo,object:this,oldValue:e}:null;return Jr((function(){t.atom_.reportChanged(),t.data_.delete(e)})),n&&io(this,r),!0}return!1},t.has=function(e){return this.atom_.reportObserved(),this.data_.has(this.dehanceValue_(e))},t.entries=function(){var e=0,t=Array.from(this.keys()),n=Array.from(this.values());return ri({next:function(){var r=e;return e+=1,r<n.length?{value:[t[r],n[r]],done:!1}:{done:!0}}})},t.keys=function(){return this.values()},t.values=function(){this.atom_.reportObserved();var e=this,t=0,n=Array.from(this.data_.values());return ri({next:function(){return t<n.length?{value:e.dehanceValue_(n[t++]),done:!1}:{done:!0}}})},t.replace=function(e){var t=this;return To(e)&&(e=new Set(e)),Jr((function(){Array.isArray(e)||xt(e)?(t.clear(),e.forEach((function(e){return t.add(e)}))):null!=e&&tt("Cannot initialize set from "+e)})),this},t.observe_=function(e,t){return oo(this,e)},t.intercept_=function(e){return to(this,e)},t.toJSON=function(){return Array.from(this)},t.toString=function(){return"[object ObservableSet]"},t[Oo]=function(){return this.values()},Tt(e,[{key:"size",get:function(){return this.atom_.reportObserved(),this.data_.size}},{key:Eo,get:function(){return"Set"}}]),e}(),To=St("ObservableSet",Ao),No=Object.create(null),Lo="remove",Ro=function(){function e(e,t,n,r){void 0===t&&(t=new Map),void 0===r&&(r=fn),this.target_=void 0,this.values_=void 0,this.name_=void 0,this.defaultAnnotation_=void 0,this.keysAtom_=void 0,this.changeListeners_=void 0,this.interceptors_=void 0,this.proxy_=void 0,this.isPlainObject_=void 0,this.appliedAnnotations_=void 0,this.pendingKeys_=void 0,this.target_=e,this.values_=t,this.name_=n,this.defaultAnnotation_=r,this.keysAtom_=new Vt("ObservableObject.keys"),this.isPlainObject_=gt(this.target_)}var t=e.prototype;return t.getObservablePropValue_=function(e){return this.values_.get(e).get()},t.setObservablePropValue_=function(e,t){var n=this.values_.get(e);if(n instanceof Hn)return n.set(t),!0;if(eo(this)){var r=no(this,{type:uo,object:this.proxy_||this.target_,name:e,newValue:t});if(!r)return null;t=r.newValue}if((t=n.prepareNewValue_(t))!==lr.UNCHANGED){var o=ro(this),i=o?{type:uo,observableKind:"object",debugObjectName:this.name_,object:this.proxy_||this.target_,oldValue:n.value_,name:e,newValue:t}:null;n.setNewValue_(t),o&&io(this,i)}return!0},t.get_=function(e){return lr.trackingDerivation&&!jt(this.target_,e)&&this.has_(e),this.target_[e]},t.set_=function(e,t,n){return void 0===n&&(n=!1),jt(this.target_,e)?this.values_.has(e)?this.setObservablePropValue_(e,t):n?Reflect.set(this.target_,e,t):(this.target_[e]=t,!0):this.extend_(e,{value:t,enumerable:!0,writable:!0,configurable:!0},this.defaultAnnotation_,n)},t.has_=function(e){if(!lr.trackingDerivation)return e in this.target_;this.pendingKeys_||(this.pendingKeys_=new Map);var t=this.pendingKeys_.get(e);return t||(t=new Vn(e in this.target_,Gt,"ObservableObject.key?",!1),this.pendingKeys_.set(e,t)),t.get()},t.make_=function(e,t){if(!0===t&&(t=this.defaultAnnotation_),!1!==t){if(!(e in this.target_)){var n;if(null!=(n=this.target_[Ft])&&n[e])return;tt(1,t.annotationType_,this.name_+"."+e.toString())}for(var r=this.target_;r&&r!==lt;){var o=it(r,e);if(o){var i=t.make_(this,e,o,r);if(0===i)return;if(1===i)break}r=Object.getPrototypeOf(r)}Uo(this,0,e)}},t.extend_=function(e,t,n,r){if(void 0===r&&(r=!1),!0===n&&(n=this.defaultAnnotation_),!1===n)return this.defineProperty_(e,t,r);var o=n.extend_(this,e,t,r);return o&&Uo(this,0,e),o},t.defineProperty_=function(e,t,n){void 0===n&&(n=!1);try{cr();var r=this.delete_(e);if(!r)return r;if(eo(this)){var o=no(this,{object:this.proxy_||this.target_,name:e,type:ko,newValue:t.value});if(!o)return null;var i=o.newValue;t.value!==i&&(t=Nt({},t,{value:i}))}if(n){if(!Reflect.defineProperty(this.target_,e,t))return!1}else at(this.target_,e,t);this.notifyPropertyAddition_(e,t.value)}finally{fr()}return!0},t.defineObservableProperty_=function(e,t,n,r){void 0===r&&(r=!1);try{cr();var o=this.delete_(e);if(!o)return o;if(eo(this)){var i=no(this,{object:this.proxy_||this.target_,name:e,type:ko,newValue:t});if(!i)return null;t=i.newValue}var a=Mo(e),l={configurable:!lr.safeDescriptors||this.isPlainObject_,enumerable:!0,get:a.get,set:a.set};if(r){if(!Reflect.defineProperty(this.target_,e,l))return!1}else at(this.target_,e,l);var u=new Vn(t,n,"ObservableObject.key",!1);this.values_.set(e,u),this.notifyPropertyAddition_(e,u.value_)}finally{fr()}return!0},t.defineComputedProperty_=function(e,t,n){void 0===n&&(n=!1);try{cr();var r=this.delete_(e);if(!r)return r;if(eo(this)&&!no(this,{object:this.proxy_||this.target_,name:e,type:ko,newValue:void 0}))return null;t.name||(t.name="ObservableObject.key"),t.context=this.proxy_||this.target_;var o=Mo(e),i={configurable:!lr.safeDescriptors||this.isPlainObject_,enumerable:!1,get:o.get,set:o.set};if(n){if(!Reflect.defineProperty(this.target_,e,i))return!1}else at(this.target_,e,i);this.values_.set(e,new Hn(t)),this.notifyPropertyAddition_(e,void 0)}finally{fr()}return!0},t.delete_=function(e,t){if(void 0===t&&(t=!1),!jt(this.target_,e))return!0;if(eo(this)&&!no(this,{object:this.proxy_||this.target_,name:e,type:Lo}))return null;try{var n,r;cr();var o,i=ro(this),a=this.values_.get(e),l=void 0;if(!a&&i&&(l=null==(o=it(this.target_,e))?void 0:o.value),t){if(!Reflect.deleteProperty(this.target_,e))return!1}else delete this.target_[e];if(a&&(this.values_.delete(e),a instanceof Vn&&(l=a.value_),pr(a)),this.keysAtom_.reportChanged(),null==(n=this.pendingKeys_)||null==(r=n.get(e))||r.set(e in this.target_),i){var u={type:Lo,observableKind:"object",object:this.proxy_||this.target_,debugObjectName:this.name_,oldValue:l,name:e};i&&io(this,u)}}finally{fr()}return!0},t.observe_=function(e,t){return oo(this,e)},t.intercept_=function(e){return to(this,e)},t.notifyPropertyAddition_=function(e,t){var n,r,o=ro(this);if(o){var i=o?{type:ko,observableKind:"object",debugObjectName:this.name_,object:this.proxy_||this.target_,name:e,newValue:t}:null;o&&io(this,i)}null==(n=this.pendingKeys_)||null==(r=n.get(e))||r.set(!0),this.keysAtom_.reportChanged()},t.ownKeys_=function(){return this.keysAtom_.reportObserved(),Et(this.target_)},t.keys_=function(){return this.keysAtom_.reportObserved(),Object.keys(this.target_)},e}();function Do(e,t){var n;if(jt(e,Bt))return e;var r=null!=(n=null==t?void 0:t.name)?n:"ObservableObject",o=new Ro(e,new Map,String(r),function(e){var t;return e?null!=(t=e.defaultDecorator)?t:dn(e):void 0}(t));return _t(e,Bt,o),e}var Io=St("ObservableObjectAdministration",Ro);function Mo(e){return No[e]||(No[e]={get:function(){return this[Bt].getObservablePropValue_(e)},set:function(t){return this[Bt].setObservablePropValue_(e,t)}})}function Fo(e){return!!mt(e)&&Io(e[Bt])}function Uo(e,t,n){var r;null==(r=e.target_[Ft])||delete r[n]}var zo,Bo,Vo=qo(0),Wo=0,$o=function(){};zo=$o,Bo=Array.prototype,Object.setPrototypeOf?Object.setPrototypeOf(zo.prototype,Bo):void 0!==zo.prototype.__proto__?zo.prototype.__proto__=Bo:zo.prototype=Bo;var Ho=function(e,t,n){function r(t,n,r,o){var i;void 0===r&&(r="ObservableArray"),void 0===o&&(o=!1),i=e.call(this)||this;var a=new co(r,n,o,!0);if(a.proxy_=Dt(i),wt(Dt(i),Bt,a),t&&t.length){var l=Un(!0);i.spliceWithArray(0,0,t),zn(l)}return Object.defineProperty(Dt(i),"0",Vo),i}Lt(r,e);var o=r.prototype;return o.concat=function(){this[Bt].atom_.reportObserved();for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return Array.prototype.concat.apply(this.slice(),t.map((function(e){return wo(e)?e.slice():e})))},o[n]=function(){var e=this,t=0;return ri({next:function(){return t<e.length?{value:e[t++],done:!1}:{done:!0,value:void 0}}})},Tt(r,[{key:"length",get:function(){return this[Bt].getArrayLength_()},set:function(e){this[Bt].setArrayLength_(e)}},{key:t,get:function(){return"Array"}}]),r}($o,Symbol.toStringTag,Symbol.iterator);function qo(e){return{enumerable:!1,configurable:!0,get:function(){return this[Bt].get_(e)},set:function(t){this[Bt].set_(e,t)}}}function Go(e){at(Ho.prototype,""+e,qo(e))}function Ko(e){if(e>Wo){for(var t=Wo;t<e+100;t++)Go(t);Wo=e}}function Qo(e,t,n){return new Ho(e,t,n)}function Yo(e,t){if("object"===et(e)&&null!==e){if(wo(e))return void 0!==t&&tt(23),e[Bt].atom_;if(To(e))return e.atom_;if(jo(e)){if(void 0===t)return e.keysAtom_;var n=e.data_.get(t)||e.hasMap_.get(t);return n||tt(25,t,Xo(e)),n}if(Fo(e)){if(!t)return tt(26);var r=e[Bt].values_.get(t);return r||tt(27,t,Xo(e)),r}if(Wt(e)||qn(e)||br(e))return e}else if(yt(e)&&br(e[Bt]))return e[Bt];tt(28)}function Jo(e,t){return e||tt(29),void 0!==t?Jo(Yo(e,t)):Wt(e)||qn(e)||br(e)||jo(e)||To(e)?e:e[Bt]?e[Bt]:void tt(24,e)}function Xo(e,t){var n;if(void 0!==t)n=Yo(e,t);else{if(Tr(e))return e.name;n=Fo(e)||jo(e)||To(e)?Jo(e):Yo(e)}return n.name_}Object.entries(po).forEach((function(e){var t=e[0],n=e[1];"concat"!==t&&_t(Ho.prototype,t,n)})),Ko(1e3);var Zo=lt.toString;function ei(e,t,n){return void 0===n&&(n=-1),ti(e,t,n)}function ti(e,t,n,r,o){if(e===t)return 0!==e||1/e==1/t;if(null==e||null==t)return!1;if(e!=e)return t!=t;var i=et(e);if("function"!==i&&"object"!==i&&"object"!=et(t))return!1;var a=Zo.call(e);if(a!==Zo.call(t))return!1;switch(a){case"[object RegExp]":case"[object String]":return""+e==""+t;case"[object Number]":return+e!=+e?+t!=+t:0==+e?1/+e==1/t:+e==+t;case"[object Date]":case"[object Boolean]":return+e==+t;case"[object Symbol]":return"undefined"!=typeof Symbol&&Symbol.valueOf.call(e)===Symbol.valueOf.call(t);case"[object Map]":case"[object Set]":n>=0&&n++}e=ni(e),t=ni(t);var l="[object Array]"===a;if(!l){if("object"!=et(e)||"object"!=et(t))return!1;var u=e.constructor,s=t.constructor;if(u!==s&&!(yt(u)&&u instanceof u&&yt(s)&&s instanceof s)&&"constructor"in e&&"constructor"in t)return!1}if(0===n)return!1;n<0&&(n=-1),o=o||[];for(var c=(r=r||[]).length;c--;)if(r[c]===e)return o[c]===t;if(r.push(e),o.push(t),l){if((c=e.length)!==t.length)return!1;for(;c--;)if(!ti(e[c],t[c],n-1,r,o))return!1}else{var f,d=Object.keys(e);if(c=d.length,Object.keys(t).length!==c)return!1;for(;c--;)if(!jt(t,f=d[c])||!ti(e[f],t[f],n-1,r,o))return!1}return r.pop(),o.pop(),!0}function ni(e){return wo(e)?e.slice():kt(e)||jo(e)||xt(e)||To(e)?Array.from(e.entries()):e}function ri(e){return e[Symbol.iterator]=oi,e}function oi(){return this}function ii(e){return ii="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ii(e)}function ai(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,li(r.key),r)}}function li(e){var t=function(e,t){if("object"!==ii(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==ii(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===ii(t)?t:String(t)}["Symbol","Map","Set"].forEach((function(e){void 0===rt()[e]&&tt("MobX requires global '"+e+"' to be available or polyfilled")})),"object"===("undefined"==typeof __MOBX_DEVTOOLS_GLOBAL_HOOK__?"undefined":et(__MOBX_DEVTOOLS_GLOBAL_HOOK__))&&__MOBX_DEVTOOLS_GLOBAL_HOOK__.injectMobx({spy:function(e){return console.warn("[mobx.spy] Is a no-op in production builds"),function(){}},extras:{getDebugName:Xo},$mobx:Bt});var ui=function(){function e(){var t,n,r;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),t=this,r=[],(n=li(n="_cartItems"))in t?Object.defineProperty(t,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[n]=r,ao(this,{_cartItems:En,cartItems:An,addToCart:jr,removeFromCart:jr,resetCart:jr,setCartItems:jr})}var t,n;return t=e,(n=[{key:"cartItems",get:function(){return this._cartItems}},{key:"setCartItems",value:function(e){this._cartItems=e}},{key:"addToCart",value:function(e){this._cartItems.find((function(t){return t.product.id===e.product.id}))?(this.cartItems.map((function(t){return t.product.id===e.product.id?t.quantity+=e.quantity:t})),localStorage.setItem(Ze,JSON.stringify(this._cartItems))):(this._cartItems.push(e),localStorage.setItem(Ze,JSON.stringify(this._cartItems)))}},{key:"removeFromCart",value:function(e){this._cartItems=this._cartItems.filter((function(t){return t.product.id!==e})),localStorage.setItem(Ze,JSON.stringify(this._cartItems))}},{key:"resetCart",value:function(){this._cartItems=[],localStorage.setItem(Ze,JSON.stringify(this._cartItems))}}])&&ai(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}(),si=o(520);function ci(e){return ci="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ci(e)}function fi(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,pi(r.key),r)}}function di(e,t,n){return(t=pi(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function pi(e){var t=function(e,t){if("object"!==ci(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==ci(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===ci(t)?t:String(t)}var hi=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),di(this,"_params",{}),di(this,"_search",""),ao(this,{_params:En.ref,setSearch:jr})}var t,n;return t=e,(n=[{key:"getParam",value:function(e){return this._params[e]}},{key:"setSearch",value:function(e){e=e.startsWith("?")?e.slice(1):e,this._search!==e&&(this._search=e,this._params=si.parse(e))}}])&&fi(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function yi(e){return yi="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},yi(e)}function vi(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,bi(r.key),r)}}function mi(e,t,n){return t&&vi(e.prototype,t),n&&vi(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}function gi(e,t,n){return(t=bi(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function bi(e){var t=function(e,t){if("object"!==yi(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==yi(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===yi(t)?t:String(t)}var _i=mi((function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),gi(this,"query",new hi),gi(this,"cart",new ui)}));const wi=new _i;if(!t.useState)throw new Error("mobx-react-lite requires React with Hooks support");if(!ao)throw new Error("mobx-react-lite@3 requires mobx at least version 6 to be available");var Si=o(116);function ki(e){e()}function xi(e){return Vr(Yo(e,t));var t}var Oi="undefined"==typeof FinalizationRegistry?void 0:FinalizationRegistry;function Ei(e){return{reaction:e,mounted:!1,changedBeforeMount:!1,cleanAt:Date.now()+Pi}}var Pi=1e4,ji=1e4,Ci=Oi?function(e){var t=new Map,n=1,r=new e((function(e){var n=t.get(e);n&&(n.reaction.dispose(),t.delete(e))}));return{addReactionToTrack:function(e,o,i){var a=n++;return r.register(i,a,e),e.current=Ei(o),e.current.finalizationRegistryCleanupToken=a,t.set(a,e.current),e.current},recordReactionAsCommitted:function(e){r.unregister(e),e.current&&e.current.finalizationRegistryCleanupToken&&t.delete(e.current.finalizationRegistryCleanupToken)},forceCleanupTimerToRunNowForTests:function(){},resetCleanupScheduleForTests:function(){}}}(Oi):function(){var e,t=new Set;function n(){void 0===e&&(e=setTimeout(r,ji))}function r(){e=void 0;var r=Date.now();t.forEach((function(e){var n=e.current;n&&r>=n.cleanAt&&(n.reaction.dispose(),e.current=null,t.delete(e))})),t.size>0&&n()}return{addReactionToTrack:function(e,r,o){var i;return e.current=Ei(r),i=e,t.add(i),n(),e.current},recordReactionAsCommitted:function(e){t.delete(e)},forceCleanupTimerToRunNowForTests:function(){e&&(clearTimeout(e),r())},resetCleanupScheduleForTests:function(){var n,r;if(t.size>0){try{for(var o=function(e){var t="function"==typeof Symbol&&Symbol.iterator,n=t&&e[t],r=0;if(n)return n.call(e);if(e&&"number"==typeof e.length)return{next:function(){return e&&r>=e.length&&(e=void 0),{value:e&&e[r++],done:!e}}};throw new TypeError(t?"Object is not iterable.":"Symbol.iterator is not defined.")}(t),i=o.next();!i.done;i=o.next()){var a=i.value,l=a.current;l&&(l.reaction.dispose(),a.current=null)}}catch(e){n={error:e}}finally{try{i&&!i.done&&(r=o.return)&&r.call(o)}finally{if(n)throw n.error}}t.clear()}e&&(clearTimeout(e),e=void 0)}}}(),Ai=Ci.addReactionToTrack,Ti=Ci.recordReactionAsCommitted,Ni=(Ci.resetCleanupScheduleForTests,Ci.forceCleanupTimerToRunNowForTests,!1);function Li(){return Ni}var Ri=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a};function Di(e){return"observer".concat(e)}var Ii=function(){};function Mi(){return new Ii}var Fi="function"==typeof Symbol&&Symbol.for,Ui=Fi?Symbol.for("react.forward_ref"):"function"==typeof t.forwardRef&&(0,t.forwardRef)((function(e){return null})).$$typeof,zi=Fi?Symbol.for("react.memo"):"function"==typeof t.memo&&(0,t.memo)((function(e){return null})).$$typeof;function Bi(e,n){var r;if(zi&&e.$$typeof===zi)throw new Error("[mobx-react-lite] You are trying to use `observer` on a function component wrapped in either another `observer` or `React.memo`. The observer already applies 'React.memo' for you.");if(Li())return e;var o=null!==(r=null==n?void 0:n.forwardRef)&&void 0!==r&&r,i=e,a=e.displayName||e.name;if(Ui&&e.$$typeof===Ui&&(o=!0,"function"!=typeof(i=e.render)))throw new Error("[mobx-react-lite] `render` property of ForwardRef was not a function");var l,u,s=function(e,n){return function(e,n){if(void 0===n&&(n="observed"),Li())return e();var r=Ri(t.useState(Mi),1)[0],o=Ri(t.useState(),2)[1],i=function(){return o([])},a=t.useRef(null);if(!a.current)var l=new hr(Di(n),(function(){u.mounted?i():u.changedBeforeMount=!0})),u=Ai(a,l,r);var s,c,f=a.current.reaction;if(t.useDebugValue(f,xi),t.useEffect((function(){return Ti(a),a.current?(a.current.mounted=!0,a.current.changedBeforeMount&&(a.current.changedBeforeMount=!1,i())):(a.current={reaction:new hr(Di(n),(function(){i()})),mounted:!0,changedBeforeMount:!1,cleanAt:1/0},i()),function(){a.current.reaction.dispose(),a.current=null}}),[]),f.track((function(){try{s=e()}catch(e){c=e}})),c)throw c;return s}((function(){return i(e,n)}),a)};return""!==a&&(s.displayName=a),e.contextTypes&&(s.contextTypes=e.contextTypes),o&&(s=(0,t.forwardRef)(s)),l=e,u=s=(0,t.memo)(s),Object.keys(l).forEach((function(e){Vi[e]||Object.defineProperty(u,e,Object.getOwnPropertyDescriptor(l,e))})),s}var Vi={$$typeof:!0,render:!0,compare:!0,type:!0,displayName:!0},Wi=function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a};!function(e){e||(e=ki),Br({reactionScheduler:e})}(Si.unstable_batchedUpdates);const $i={Cart:"src-components-Cart-Cart-module__Cart",product:"src-components-Cart-Cart-module__product",product_image:"src-components-Cart-Cart-module__product_image",detail:"src-components-Cart-Cart-module__detail",trash:"src-components-Cart-Cart-module__trash",total:"src-components-Cart-Cart-module__total",checkout_btn:"src-components-Cart-Cart-module__checkout_btn",reset:"src-components-Cart-Cart-module__reset"};var Hi=Bi((function(){var e,n=(0,t.useCallback)((function(){wi.cart.resetCart()}),[]),r=(0,t.useCallback)((function(){var e=0;return wi.cart.cartItems.forEach((function(t){return e+=t.quantity*t.product.price})),e.toFixed(2)}),[]);return(0,Ve.jsxs)("div",{className:$i.Cart,children:[(0,Ve.jsx)("h2",{children:"Products in your cart"}),0===wi.cart.cartItems.length&&(0,Ve.jsx)("div",{className:"cart__empty",children:(0,Ve.jsx)("p",{children:"Your cart is empty."})}),null===(e=wi.cart.cartItems)||void 0===e?void 0:e.map((function(e){return(0,Ve.jsxs)("div",{className:$i.product,children:[(0,Ve.jsx)("img",{className:$i.product_image,src:e.product.images[0],alt:e.product.title}),(0,Ve.jsxs)("div",{className:$i.detail,children:[(0,Ve.jsx)("h2",{className:$i.title,children:e.product.title}),(0,Ve.jsx)("p",{children:e.product.description.substring(0,20)}),(0,Ve.jsxs)("div",{className:$i.price,children:[e.quantity," x $",e.product.price]})]}),(0,Ve.jsx)("img",{className:$i.trash,src:Xe,alt:"trash",onClick:(t=e.product.id,function(){wi.cart.removeFromCart(t)})})]},e.product.id);var t})),(0,Ve.jsxs)("div",{className:$i.total,children:[(0,Ve.jsx)("span",{children:"SUBTOTAL"}),(0,Ve.jsxs)("span",{children:["$",r()]})]}),(0,Ve.jsx)(Je,{className:$i.checkout_btn,children:"PROCEED TO CHECKOUT"}),(0,Ve.jsx)("span",{className:$i.reset,onClick:n,children:"Reset Cart"})]})}));const qi=(0,t.memo)(Hi),Gi={Modal:"src-components-Modal-Modal-module__Modal",overlay:"src-components-Modal-Modal-module__overlay",content:"src-components-Modal-Modal-module__content",opened:"src-components-Modal-Modal-module__opened",isClosing:"src-components-Modal-Modal-module__isClosing"};function Ki(e){return Ki="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Ki(e)}function Qi(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==Ki(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==Ki(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Ki(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Yi(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Ji=300;function Xi(e){var n,r,o=e.children,i=e.isOpen,a=e.onClose,l=(n=(0,t.useState)(!1),r=2,function(e){if(Array.isArray(e))return e}(n)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,l=[],u=!0,s=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=i.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){s=!0,o=e}finally{try{if(!u&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(s)throw o}}return l}}(n,r)||function(e,t){if(e){if("string"==typeof e)return Yi(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Yi(e,t):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),u=l[0],s=l[1],c=(0,t.useRef)(),f=(0,t.useCallback)((function(){a&&(s(!0),c.current=setTimeout((function(){a(),s(!1)}),Ji))}),[a]),d=(0,t.useCallback)((function(e){"Escape"===e.key&&f()}),[f]);return(0,t.useEffect)((function(){return i&&window.addEventListener("keydown",d),function(){clearTimeout(c.current),window.removeEventListener("keydown",d)}}),[i,d]),(0,Ve.jsx)("div",{className:Me()(Gi.Modal,Qi({},Gi.opened,i),Qi({},Gi.isClosing,u)),children:(0,Ve.jsx)("div",{className:Gi.overlay,onClick:f,children:(0,Ve.jsx)("div",{className:Gi.content,onClick:function(e){e.stopPropagation()},children:o})})})}const Zi=o.p+"83e8b634513113fef0111e2df46161d2.svg",ea=o.p+"c90ae3d303db18e7e24f85837564068f.png",ta=o.p+"602259693f266cd9809bf5256f07eb35.svg",na="src-components-Navbar-Navbar-module__link";function ra(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var oa=Bi((function(){var e,n,r=(e=(0,t.useState)(!1),n=2,function(e){if(Array.isArray(e))return e}(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,l=[],u=!0,s=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=i.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){s=!0,o=e}finally{try{if(!u&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(s)throw o}}return l}}(e,n)||function(e,t){if(e){if("string"==typeof e)return ra(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?ra(e,t):void 0}}(e,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],i=r[1];return(0,Ve.jsxs)(Ve.Fragment,{children:[(0,Ve.jsxs)("div",{className:"src-components-Navbar-Navbar-module__Navbar",children:[(0,Ve.jsx)("div",{className:"logo",children:(0,Ve.jsx)(Re,{to:"/",children:(0,Ve.jsx)("img",{src:ea,alt:"logo"})})}),(0,Ve.jsxs)("div",{className:"src-components-Navbar-Navbar-module__content",children:[(0,Ve.jsx)(Re,{className:na,to:"/",children:(0,Ve.jsx)("p",{children:"Products"})}),(0,Ve.jsx)(Re,{className:na,to:"/",children:(0,Ve.jsx)("p",{children:"Categories"})}),(0,Ve.jsx)(Re,{className:na,to:"/",children:(0,Ve.jsx)("p",{children:"About Us"})})]}),(0,Ve.jsxs)("div",{className:"src-components-Navbar-Navbar-module__user",children:[(0,Ve.jsxs)("div",{className:"src-components-Navbar-Navbar-module__cart",onClick:function(){return i(!0)},children:[(0,Ve.jsx)("img",{src:Zi,alt:"bag"}),(0,Ve.jsx)("span",{children:wi.cart.cartItems.length})]}),(0,Ve.jsx)(Re,{to:"/",children:(0,Ve.jsx)("img",{src:ta,alt:"user"})})]})]}),(0,Ve.jsx)(Xi,{isOpen:o,onClose:function(){return i(!1)},children:(0,Ve.jsx)(qi,{})})]})}));const ia=(0,t.memo)(oa);var aa,la=function(e){e.id;var t=e.image,n=e.category,r=e.title,o=e.subtitle,i=e.content,a=e.onClick;return(0,Ve.jsxs)("div",{className:"src-components-Card-Card-module__card",onClick:a,children:[(0,Ve.jsx)("img",{className:"src-components-Card-Card-module__image",src:t,alt:r}),(0,Ve.jsx)("div",{className:"src-components-Card-Card-module__category",children:n}),(0,Ve.jsx)("div",{className:"src-components-Card-Card-module__title",children:r}),(0,Ve.jsx)("div",{className:"src-components-Card-Card-module__subtitle",children:o}),(0,Ve.jsxs)("div",{className:"src-components-Card-Card-module__content",children:["$",i]})]})},ua="https://api.escuelajs.co/api/v1/products";function sa(e,t){return function(){return e.apply(t,arguments)}}function ca(e){return ca="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ca(e)}!function(e){e.initial="initial",e.loading="loading",e.error="error",e.success="success"}(aa||(aa={}));var fa,da=Object.prototype.toString,pa=Object.getPrototypeOf,ha=(fa=Object.create(null),function(e){var t=da.call(e);return fa[t]||(fa[t]=t.slice(8,-1).toLowerCase())}),ya=function(e){return e=e.toLowerCase(),function(t){return ha(t)===e}},va=function(e){return function(t){return ca(t)===e}},ma=Array.isArray,ga=va("undefined"),ba=ya("ArrayBuffer"),_a=va("string"),wa=va("function"),Sa=va("number"),ka=function(e){return null!==e&&"object"===ca(e)},xa=function(e){if("object"!==ha(e))return!1;var t=pa(e);return!(null!==t&&t!==Object.prototype&&null!==Object.getPrototypeOf(t)||Symbol.toStringTag in e||Symbol.iterator in e)},Oa=ya("Date"),Ea=ya("File"),Pa=ya("Blob"),ja=ya("FileList"),Ca=ya("URLSearchParams");function Aa(e,t){var n,r,o=(arguments.length>2&&void 0!==arguments[2]?arguments[2]:{}).allOwnKeys,i=void 0!==o&&o;if(null!=e)if("object"!==ca(e)&&(e=[e]),ma(e))for(n=0,r=e.length;n<r;n++)t.call(null,e[n],n,e);else{var a,l=i?Object.getOwnPropertyNames(e):Object.keys(e),u=l.length;for(n=0;n<u;n++)a=l[n],t.call(null,e[a],a,e)}}function Ta(e,t){t=t.toLowerCase();for(var n,r=Object.keys(e),o=r.length;o-- >0;)if(t===(n=r[o]).toLowerCase())return n;return null}var Na,La,Ra="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:global,Da=function(e){return!ga(e)&&e!==Ra},Ia=(Na="undefined"!=typeof Uint8Array&&pa(Uint8Array),function(e){return Na&&e instanceof Na}),Ma=ya("HTMLFormElement"),Fa=(La=Object.prototype.hasOwnProperty,function(e,t){return La.call(e,t)}),Ua=ya("RegExp"),za=function(e,t){var n=Object.getOwnPropertyDescriptors(e),r={};Aa(n,(function(n,o){!1!==t(n,o,e)&&(r[o]=n)})),Object.defineProperties(e,r)},Ba="abcdefghijklmnopqrstuvwxyz",Va="0123456789",Wa={DIGIT:Va,ALPHA:Ba,ALPHA_DIGIT:Ba+Ba.toUpperCase()+Va};const $a={isArray:ma,isArrayBuffer:ba,isBuffer:function(e){return null!==e&&!ga(e)&&null!==e.constructor&&!ga(e.constructor)&&wa(e.constructor.isBuffer)&&e.constructor.isBuffer(e)},isFormData:function(e){var t="[object FormData]";return e&&("function"==typeof FormData&&e instanceof FormData||da.call(e)===t||wa(e.toString)&&e.toString()===t)},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&ba(e.buffer)},isString:_a,isNumber:Sa,isBoolean:function(e){return!0===e||!1===e},isObject:ka,isPlainObject:xa,isUndefined:ga,isDate:Oa,isFile:Ea,isBlob:Pa,isRegExp:Ua,isFunction:wa,isStream:function(e){return ka(e)&&wa(e.pipe)},isURLSearchParams:Ca,isTypedArray:Ia,isFileList:ja,forEach:Aa,merge:function e(){for(var t=(Da(this)&&this||{}).caseless,n={},r=function(r,o){var i=t&&Ta(n,o)||o;xa(n[i])&&xa(r)?n[i]=e(n[i],r):xa(r)?n[i]=e({},r):ma(r)?n[i]=r.slice():n[i]=r},o=0,i=arguments.length;o<i;o++)arguments[o]&&Aa(arguments[o],r);return n},extend:function(e,t,n){return Aa(t,(function(t,r){n&&wa(t)?e[r]=sa(t,n):e[r]=t}),{allOwnKeys:(arguments.length>3&&void 0!==arguments[3]?arguments[3]:{}).allOwnKeys}),e},trim:function(e){return e.trim?e.trim():e.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,"")},stripBOM:function(e){return 65279===e.charCodeAt(0)&&(e=e.slice(1)),e},inherits:function(e,t,n,r){e.prototype=Object.create(t.prototype,r),e.prototype.constructor=e,Object.defineProperty(e,"super",{value:t.prototype}),n&&Object.assign(e.prototype,n)},toFlatObject:function(e,t,n,r){var o,i,a,l={};if(t=t||{},null==e)return t;do{for(i=(o=Object.getOwnPropertyNames(e)).length;i-- >0;)a=o[i],r&&!r(a,e,t)||l[a]||(t[a]=e[a],l[a]=!0);e=!1!==n&&pa(e)}while(e&&(!n||n(e,t))&&e!==Object.prototype);return t},kindOf:ha,kindOfTest:ya,endsWith:function(e,t,n){e=String(e),(void 0===n||n>e.length)&&(n=e.length),n-=t.length;var r=e.indexOf(t,n);return-1!==r&&r===n},toArray:function(e){if(!e)return null;if(ma(e))return e;var t=e.length;if(!Sa(t))return null;for(var n=new Array(t);t-- >0;)n[t]=e[t];return n},forEachEntry:function(e,t){for(var n,r=(e&&e[Symbol.iterator]).call(e);(n=r.next())&&!n.done;){var o=n.value;t.call(e,o[0],o[1])}},matchAll:function(e,t){for(var n,r=[];null!==(n=e.exec(t));)r.push(n);return r},isHTMLForm:Ma,hasOwnProperty:Fa,hasOwnProp:Fa,reduceDescriptors:za,freezeMethods:function(e){za(e,(function(t,n){if(wa(e)&&-1!==["arguments","caller","callee"].indexOf(n))return!1;var r=e[n];wa(r)&&(t.enumerable=!1,"writable"in t?t.writable=!1:t.set||(t.set=function(){throw Error("Can not rewrite read-only method '"+n+"'")}))}))},toObjectSet:function(e,t){var n={},r=function(e){e.forEach((function(e){n[e]=!0}))};return ma(e)?r(e):r(String(e).split(t)),n},toCamelCase:function(e){return e.toLowerCase().replace(/[-_\s]([a-z\d])(\w*)/g,(function(e,t,n){return t.toUpperCase()+n}))},noop:function(){},toFiniteNumber:function(e,t){return e=+e,Number.isFinite(e)?e:t},findKey:Ta,global:Ra,isContextDefined:Da,ALPHABET:Wa,generateString:function(){for(var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:16,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:Wa.ALPHA_DIGIT,n="",r=t.length;e--;)n+=t[Math.random()*r|0];return n},isSpecCompliantForm:function(e){return!!(e&&wa(e.append)&&"FormData"===e[Symbol.toStringTag]&&e[Symbol.iterator])},toJSONObject:function(e){var t=new Array(10);return function e(n,r){if(ka(n)){if(t.indexOf(n)>=0)return;if(!("toJSON"in n)){t[r]=n;var o=ma(n)?[]:{};return Aa(n,(function(t,n){var i=e(t,r+1);!ga(i)&&(o[n]=i)})),t[r]=void 0,o}}return n}(e,0)}};function Ha(e,t,n,r,o){Error.call(this),Error.captureStackTrace?Error.captureStackTrace(this,this.constructor):this.stack=(new Error).stack,this.message=e,this.name="AxiosError",t&&(this.code=t),n&&(this.config=n),r&&(this.request=r),o&&(this.response=o)}$a.inherits(Ha,Error,{toJSON:function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:$a.toJSONObject(this.config),code:this.code,status:this.response&&this.response.status?this.response.status:null}}});var qa=Ha.prototype,Ga={};["ERR_BAD_OPTION_VALUE","ERR_BAD_OPTION","ECONNABORTED","ETIMEDOUT","ERR_NETWORK","ERR_FR_TOO_MANY_REDIRECTS","ERR_DEPRECATED","ERR_BAD_RESPONSE","ERR_BAD_REQUEST","ERR_CANCELED","ERR_NOT_SUPPORT","ERR_INVALID_URL"].forEach((function(e){Ga[e]={value:e}})),Object.defineProperties(Ha,Ga),Object.defineProperty(qa,"isAxiosError",{value:!0}),Ha.from=function(e,t,n,r,o,i){var a=Object.create(qa);return $a.toFlatObject(e,a,(function(e){return e!==Error.prototype}),(function(e){return"isAxiosError"!==e})),Ha.call(a,e.message,t,n,r,o),a.cause=e,a.name=e.name,i&&Object.assign(a,i),a};const Ka=Ha;function Qa(e){return Qa="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Qa(e)}function Ya(e){return $a.isPlainObject(e)||$a.isArray(e)}function Ja(e){return $a.endsWith(e,"[]")?e.slice(0,-2):e}function Xa(e,t,n){return e?e.concat(t).map((function(e,t){return e=Ja(e),!n&&t?"["+e+"]":e})).join(n?".":""):t}var Za=$a.toFlatObject($a,{},null,(function(e){return/^is[A-Z]/.test(e)}));const el=function(e,t,n){if(!$a.isObject(e))throw new TypeError("target must be an object");t=t||new FormData;var r=(n=$a.toFlatObject(n,{metaTokens:!0,dots:!1,indexes:!1},!1,(function(e,t){return!$a.isUndefined(t[e])}))).metaTokens,o=n.visitor||s,i=n.dots,a=n.indexes,l=(n.Blob||"undefined"!=typeof Blob&&Blob)&&$a.isSpecCompliantForm(t);if(!$a.isFunction(o))throw new TypeError("visitor must be a function");function u(e){if(null===e)return"";if($a.isDate(e))return e.toISOString();if(!l&&$a.isBlob(e))throw new Ka("Blob is not supported. Use a Buffer instead.");return $a.isArrayBuffer(e)||$a.isTypedArray(e)?l&&"function"==typeof Blob?new Blob([e]):Buffer.from(e):e}function s(e,n,o){var l=e;if(e&&!o&&"object"===Qa(e))if($a.endsWith(n,"{}"))n=r?n:n.slice(0,-2),e=JSON.stringify(e);else if($a.isArray(e)&&function(e){return $a.isArray(e)&&!e.some(Ya)}(e)||($a.isFileList(e)||$a.endsWith(n,"[]"))&&(l=$a.toArray(e)))return n=Ja(n),l.forEach((function(e,r){!$a.isUndefined(e)&&null!==e&&t.append(!0===a?Xa([n],r,i):null===a?n:n+"[]",u(e))})),!1;return!!Ya(e)||(t.append(Xa(o,n,i),u(e)),!1)}var c=[],f=Object.assign(Za,{defaultVisitor:s,convertValue:u,isVisitable:Ya});if(!$a.isObject(e))throw new TypeError("data must be an object");return function e(n,r){if(!$a.isUndefined(n)){if(-1!==c.indexOf(n))throw Error("Circular reference detected in "+r.join("."));c.push(n),$a.forEach(n,(function(n,i){!0===(!($a.isUndefined(n)||null===n)&&o.call(t,n,$a.isString(i)?i.trim():i,r,f))&&e(n,r?r.concat(i):[i])})),c.pop()}}(e),t};function tl(e){var t={"!":"%21","'":"%27","(":"%28",")":"%29","~":"%7E","%20":"+","%00":"\0"};return encodeURIComponent(e).replace(/[!'()~]|%20|%00/g,(function(e){return t[e]}))}function nl(e,t){this._pairs=[],e&&el(e,this,t)}var rl=nl.prototype;rl.append=function(e,t){this._pairs.push([e,t])},rl.toString=function(e){var t=e?function(t){return e.call(this,t,tl)}:tl;return this._pairs.map((function(e){return t(e[0])+"="+t(e[1])}),"").join("&")};const ol=nl;function il(e){return encodeURIComponent(e).replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}function al(e,t,n){if(!t)return e;var r,o=n&&n.encode||il,i=n&&n.serialize;if(r=i?i(t,n):$a.isURLSearchParams(t)?t.toString():new ol(t,n).toString(o)){var a=e.indexOf("#");-1!==a&&(e=e.slice(0,a)),e+=(-1===e.indexOf("?")?"?":"&")+r}return e}function ll(e){return ll="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ll(e)}function ul(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(void 0,o=function(e,t){if("object"!==ll(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==ll(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r.key),"symbol"===ll(o)?o:String(o)),r)}var o}var sl=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.handlers=[]}var t,n;return t=e,(n=[{key:"use",value:function(e,t,n){return this.handlers.push({fulfilled:e,rejected:t,synchronous:!!n&&n.synchronous,runWhen:n?n.runWhen:null}),this.handlers.length-1}},{key:"eject",value:function(e){this.handlers[e]&&(this.handlers[e]=null)}},{key:"clear",value:function(){this.handlers&&(this.handlers=[])}},{key:"forEach",value:function(e){$a.forEach(this.handlers,(function(t){null!==t&&e(t)}))}}])&&ul(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();const cl=sl,fl={silentJSONParsing:!0,forcedJSONParsing:!0,clarifyTimeoutError:!1},dl="undefined"!=typeof URLSearchParams?URLSearchParams:ol,pl="undefined"!=typeof FormData?FormData:null;var hl,yl=("undefined"==typeof navigator||"ReactNative"!==(hl=navigator.product)&&"NativeScript"!==hl&&"NS"!==hl)&&"undefined"!=typeof window&&"undefined"!=typeof document,vl="undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope&&"function"==typeof self.importScripts;const ml={isBrowser:!0,classes:{URLSearchParams:dl,FormData:pl,Blob},isStandardBrowserEnv:yl,isStandardBrowserWebWorkerEnv:vl,protocols:["http","https","file","blob","url","data"]},gl=function(e){function t(e,n,r,o){var i=e[o++],a=Number.isFinite(+i),l=o>=e.length;return i=!i&&$a.isArray(r)?r.length:i,l?($a.hasOwnProp(r,i)?r[i]=[r[i],n]:r[i]=n,!a):(r[i]&&$a.isObject(r[i])||(r[i]=[]),t(e,n,r[i],o)&&$a.isArray(r[i])&&(r[i]=function(e){var t,n,r={},o=Object.keys(e),i=o.length;for(t=0;t<i;t++)r[n=o[t]]=e[n];return r}(r[i])),!a)}if($a.isFormData(e)&&$a.isFunction(e.entries)){var n={};return $a.forEachEntry(e,(function(e,r){t(function(e){return $a.matchAll(/\w+|\[(\w*)]/g,e).map((function(e){return"[]"===e[0]?"":e[1]||e[0]}))}(e),r,n,0)})),n}return null};var bl={"Content-Type":void 0},_l={transitional:fl,adapter:["xhr","http"],transformRequest:[function(e,t){var n,r=t.getContentType()||"",o=r.indexOf("application/json")>-1,i=$a.isObject(e);if(i&&$a.isHTMLForm(e)&&(e=new FormData(e)),$a.isFormData(e))return o&&o?JSON.stringify(gl(e)):e;if($a.isArrayBuffer(e)||$a.isBuffer(e)||$a.isStream(e)||$a.isFile(e)||$a.isBlob(e))return e;if($a.isArrayBufferView(e))return e.buffer;if($a.isURLSearchParams(e))return t.setContentType("application/x-www-form-urlencoded;charset=utf-8",!1),e.toString();if(i){if(r.indexOf("application/x-www-form-urlencoded")>-1)return function(e,t){return el(e,new ml.classes.URLSearchParams,Object.assign({visitor:function(e,t,n,r){return ml.isNode&&$a.isBuffer(e)?(this.append(t,e.toString("base64")),!1):r.defaultVisitor.apply(this,arguments)}},t))}(e,this.formSerializer).toString();if((n=$a.isFileList(e))||r.indexOf("multipart/form-data")>-1){var a=this.env&&this.env.FormData;return el(n?{"files[]":e}:e,a&&new a,this.formSerializer)}}return i||o?(t.setContentType("application/json",!1),function(e,t,n){if($a.isString(e))try{return(0,JSON.parse)(e),$a.trim(e)}catch(e){if("SyntaxError"!==e.name)throw e}return(0,JSON.stringify)(e)}(e)):e}],transformResponse:[function(e){var t=this.transitional||_l.transitional,n=t&&t.forcedJSONParsing,r="json"===this.responseType;if(e&&$a.isString(e)&&(n&&!this.responseType||r)){var o=!(t&&t.silentJSONParsing)&&r;try{return JSON.parse(e)}catch(e){if(o){if("SyntaxError"===e.name)throw Ka.from(e,Ka.ERR_BAD_RESPONSE,this,null,this.response);throw e}}}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,maxBodyLength:-1,env:{FormData:ml.classes.FormData,Blob:ml.classes.Blob},validateStatus:function(e){return e>=200&&e<300},headers:{common:{Accept:"application/json, text/plain, */*"}}};$a.forEach(["delete","get","head"],(function(e){_l.headers[e]={}})),$a.forEach(["post","put","patch"],(function(e){_l.headers[e]=$a.merge(bl)}));const wl=_l;var Sl=$a.toObjectSet(["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"]);function kl(e){return kl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},kl(e)}function xl(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Ol(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(void 0,o=function(e,t){if("object"!==kl(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==kl(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r.key),"symbol"===kl(o)?o:String(o)),r)}var o}var El=Symbol("internals");function Pl(e){return e&&String(e).trim().toLowerCase()}function jl(e){return!1===e||null==e?e:$a.isArray(e)?e.map(jl):String(e)}function Cl(e,t,n,r,o){return $a.isFunction(r)?r.call(this,t,n):(o&&(t=n),$a.isString(t)?$a.isString(r)?-1!==t.indexOf(r):$a.isRegExp(r)?r.test(t):void 0:void 0)}var Al=function(e,t){function n(e){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),e&&this.set(e)}var r,o,i;return r=n,o=[{key:"set",value:function(e,t,n){var r=this;function o(e,t,n){var o=Pl(t);if(!o)throw new Error("header name must be a non-empty string");var i=$a.findKey(r,o);(!i||void 0===r[i]||!0===n||void 0===n&&!1!==r[i])&&(r[i||t]=jl(e))}var i,a,l,u,s,c=function(e,t){return $a.forEach(e,(function(e,n){return o(e,n,t)}))};return $a.isPlainObject(e)||e instanceof this.constructor?c(e,t):$a.isString(e)&&(e=e.trim())&&!/^[-_a-zA-Z]+$/.test(e.trim())?c((s={},(i=e)&&i.split("\n").forEach((function(e){u=e.indexOf(":"),a=e.substring(0,u).trim().toLowerCase(),l=e.substring(u+1).trim(),!a||s[a]&&Sl[a]||("set-cookie"===a?s[a]?s[a].push(l):s[a]=[l]:s[a]=s[a]?s[a]+", "+l:l)})),s),t):null!=e&&o(t,e,n),this}},{key:"get",value:function(e,t){if(e=Pl(e)){var n=$a.findKey(this,e);if(n){var r=this[n];if(!t)return r;if(!0===t)return function(e){for(var t,n=Object.create(null),r=/([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;t=r.exec(e);)n[t[1]]=t[2];return n}(r);if($a.isFunction(t))return t.call(this,r,n);if($a.isRegExp(t))return t.exec(r);throw new TypeError("parser must be boolean|regexp|function")}}}},{key:"has",value:function(e,t){if(e=Pl(e)){var n=$a.findKey(this,e);return!(!n||void 0===this[n]||t&&!Cl(0,this[n],n,t))}return!1}},{key:"delete",value:function(e,t){var n=this,r=!1;function o(e){if(e=Pl(e)){var o=$a.findKey(n,e);!o||t&&!Cl(0,n[o],o,t)||(delete n[o],r=!0)}}return $a.isArray(e)?e.forEach(o):o(e),r}},{key:"clear",value:function(e){for(var t=Object.keys(this),n=t.length,r=!1;n--;){var o=t[n];e&&!Cl(0,this[o],o,e,!0)||(delete this[o],r=!0)}return r}},{key:"normalize",value:function(e){var t=this,n={};return $a.forEach(this,(function(r,o){var i=$a.findKey(n,o);if(i)return t[i]=jl(r),void delete t[o];var a=e?function(e){return e.trim().toLowerCase().replace(/([a-z\d])(\w*)/g,(function(e,t,n){return t.toUpperCase()+n}))}(o):String(o).trim();a!==o&&delete t[o],t[a]=jl(r),n[a]=!0})),this}},{key:"concat",value:function(){for(var e,t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];return(e=this.constructor).concat.apply(e,[this].concat(n))}},{key:"toJSON",value:function(e){var t=Object.create(null);return $a.forEach(this,(function(n,r){null!=n&&!1!==n&&(t[r]=e&&$a.isArray(n)?n.join(", "):n)})),t}},{key:Symbol.iterator,value:function(){return Object.entries(this.toJSON())[Symbol.iterator]()}},{key:"toString",value:function(){return Object.entries(this.toJSON()).map((function(e){var t,n,r=(n=2,function(e){if(Array.isArray(e))return e}(t=e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,l=[],u=!0,s=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=i.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){s=!0,o=e}finally{try{if(!u&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(s)throw o}}return l}}(t,n)||function(e,t){if(e){if("string"==typeof e)return xl(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?xl(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}());return r[0]+": "+r[1]})).join("\n")}},{key:Symbol.toStringTag,get:function(){return"AxiosHeaders"}}],i=[{key:"from",value:function(e){return e instanceof this?e:new this(e)}},{key:"concat",value:function(e){for(var t=new this(e),n=arguments.length,r=new Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];return r.forEach((function(e){return t.set(e)})),t}},{key:"accessor",value:function(e){var t=(this[El]=this[El]={accessors:{}}).accessors,n=this.prototype;function r(e){var r=Pl(e);t[r]||(function(e,t){var n=$a.toCamelCase(" "+t);["get","set","has"].forEach((function(r){Object.defineProperty(e,r+n,{value:function(e,n,o){return this[r].call(this,t,e,n,o)},configurable:!0})}))}(n,e),t[r]=!0)}return $a.isArray(e)?e.forEach(r):r(e),this}}],o&&Ol(r.prototype,o),i&&Ol(r,i),Object.defineProperty(r,"prototype",{writable:!1}),n}();Al.accessor(["Content-Type","Content-Length","Accept","Accept-Encoding","User-Agent","Authorization"]),$a.freezeMethods(Al.prototype),$a.freezeMethods(Al);const Tl=Al;function Nl(e,t){var n=this||wl,r=t||n,o=Tl.from(r.headers),i=r.data;return $a.forEach(e,(function(e){i=e.call(n,i,o.normalize(),t?t.status:void 0)})),o.normalize(),i}function Ll(e){return!(!e||!e.__CANCEL__)}function Rl(e,t,n){Ka.call(this,null==e?"canceled":e,Ka.ERR_CANCELED,t,n),this.name="CanceledError"}$a.inherits(Rl,Ka,{__CANCEL__:!0});const Dl=Rl,Il=ml.isStandardBrowserEnv?{write:function(e,t,n,r,o,i){var a=[];a.push(e+"="+encodeURIComponent(t)),$a.isNumber(n)&&a.push("expires="+new Date(n).toGMTString()),$a.isString(r)&&a.push("path="+r),$a.isString(o)&&a.push("domain="+o),!0===i&&a.push("secure"),document.cookie=a.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}};function Ml(e,t){return e&&!/^([a-z][a-z\d+\-.]*:)?\/\//i.test(t)?function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}(e,t):t}const Fl=ml.isStandardBrowserEnv?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),n=document.createElement("a");function r(e){var r=e;return t&&(n.setAttribute("href",r),r=n.href),n.setAttribute("href",r),{href:n.href,protocol:n.protocol?n.protocol.replace(/:$/,""):"",host:n.host,search:n.search?n.search.replace(/^\?/,""):"",hash:n.hash?n.hash.replace(/^#/,""):"",hostname:n.hostname,port:n.port,pathname:"/"===n.pathname.charAt(0)?n.pathname:"/"+n.pathname}}return e=r(window.location.href),function(t){var n=$a.isString(t)?r(t):t;return n.protocol===e.protocol&&n.host===e.host}}():function(){return!0},Ul=function(e,t){e=e||10;var n,r=new Array(e),o=new Array(e),i=0,a=0;return t=void 0!==t?t:1e3,function(l){var u=Date.now(),s=o[a];n||(n=u),r[i]=l,o[i]=u;for(var c=a,f=0;c!==i;)f+=r[c++],c%=e;if((i=(i+1)%e)===a&&(a=(a+1)%e),!(u-n<t)){var d=s&&u-s;return d?Math.round(1e3*f/d):void 0}}};function zl(e,t){var n=0,r=Ul(50,250);return function(o){var i=o.loaded,a=o.lengthComputable?o.total:void 0,l=i-n,u=r(l);n=i;var s={loaded:i,total:a,progress:a?i/a:void 0,bytes:l,rate:u||void 0,estimated:u&&a&&i<=a?(a-i)/u:void 0,event:o};s[t?"download":"upload"]=!0,e(s)}}var Bl={http:null,xhr:"undefined"!=typeof XMLHttpRequest&&function(e){return new Promise((function(t,n){var r,o=e.data,i=Tl.from(e.headers).normalize(),a=e.responseType;function l(){e.cancelToken&&e.cancelToken.unsubscribe(r),e.signal&&e.signal.removeEventListener("abort",r)}$a.isFormData(o)&&(ml.isStandardBrowserEnv||ml.isStandardBrowserWebWorkerEnv)&&i.setContentType(!1);var u=new XMLHttpRequest;if(e.auth){var s=e.auth.username||"",c=e.auth.password?unescape(encodeURIComponent(e.auth.password)):"";i.set("Authorization","Basic "+btoa(s+":"+c))}var f=Ml(e.baseURL,e.url);function d(){if(u){var r=Tl.from("getAllResponseHeaders"in u&&u.getAllResponseHeaders());!function(e,t,n){var r=n.config.validateStatus;n.status&&r&&!r(n.status)?t(new Ka("Request failed with status code "+n.status,[Ka.ERR_BAD_REQUEST,Ka.ERR_BAD_RESPONSE][Math.floor(n.status/100)-4],n.config,n.request,n)):e(n)}((function(e){t(e),l()}),(function(e){n(e),l()}),{data:a&&"text"!==a&&"json"!==a?u.response:u.responseText,status:u.status,statusText:u.statusText,headers:r,config:e,request:u}),u=null}}if(u.open(e.method.toUpperCase(),al(f,e.params,e.paramsSerializer),!0),u.timeout=e.timeout,"onloadend"in u?u.onloadend=d:u.onreadystatechange=function(){u&&4===u.readyState&&(0!==u.status||u.responseURL&&0===u.responseURL.indexOf("file:"))&&setTimeout(d)},u.onabort=function(){u&&(n(new Ka("Request aborted",Ka.ECONNABORTED,e,u)),u=null)},u.onerror=function(){n(new Ka("Network Error",Ka.ERR_NETWORK,e,u)),u=null},u.ontimeout=function(){var t=e.timeout?"timeout of "+e.timeout+"ms exceeded":"timeout exceeded",r=e.transitional||fl;e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),n(new Ka(t,r.clarifyTimeoutError?Ka.ETIMEDOUT:Ka.ECONNABORTED,e,u)),u=null},ml.isStandardBrowserEnv){var p=(e.withCredentials||Fl(f))&&e.xsrfCookieName&&Il.read(e.xsrfCookieName);p&&i.set(e.xsrfHeaderName,p)}void 0===o&&i.setContentType(null),"setRequestHeader"in u&&$a.forEach(i.toJSON(),(function(e,t){u.setRequestHeader(t,e)})),$a.isUndefined(e.withCredentials)||(u.withCredentials=!!e.withCredentials),a&&"json"!==a&&(u.responseType=e.responseType),"function"==typeof e.onDownloadProgress&&u.addEventListener("progress",zl(e.onDownloadProgress,!0)),"function"==typeof e.onUploadProgress&&u.upload&&u.upload.addEventListener("progress",zl(e.onUploadProgress)),(e.cancelToken||e.signal)&&(r=function(t){u&&(n(!t||t.type?new Dl(null,e,u):t),u.abort(),u=null)},e.cancelToken&&e.cancelToken.subscribe(r),e.signal&&(e.signal.aborted?r():e.signal.addEventListener("abort",r)));var h,y=(h=/^([-+\w]{1,25})(:?\/\/|:)/.exec(f))&&h[1]||"";y&&-1===ml.protocols.indexOf(y)?n(new Ka("Unsupported protocol "+y+":",Ka.ERR_BAD_REQUEST,e)):u.send(o||null)}))}};$a.forEach(Bl,(function(e,t){if(e){try{Object.defineProperty(e,"name",{value:t})}catch(e){}Object.defineProperty(e,"adapterName",{value:t})}}));const Vl={getAdapter:function(e){for(var t,n,r=(e=$a.isArray(e)?e:[e]).length,o=0;o<r&&(t=e[o],!(n=$a.isString(t)?Bl[t.toLowerCase()]:t));o++);if(!n){if(!1===n)throw new Ka("Adapter ".concat(t," is not supported by the environment"),"ERR_NOT_SUPPORT");throw new Error($a.hasOwnProp(Bl,t)?"Adapter '".concat(t,"' is not available in the build"):"Unknown adapter '".concat(t,"'"))}if(!$a.isFunction(n))throw new TypeError("adapter is not a function");return n},adapters:Bl};function Wl(e){if(e.cancelToken&&e.cancelToken.throwIfRequested(),e.signal&&e.signal.aborted)throw new Dl(null,e)}function $l(e){return Wl(e),e.headers=Tl.from(e.headers),e.data=Nl.call(e,e.transformRequest),-1!==["post","put","patch"].indexOf(e.method)&&e.headers.setContentType("application/x-www-form-urlencoded",!1),Vl.getAdapter(e.adapter||wl.adapter)(e).then((function(t){return Wl(e),t.data=Nl.call(e,e.transformResponse,t),t.headers=Tl.from(t.headers),t}),(function(t){return Ll(t)||(Wl(e),t&&t.response&&(t.response.data=Nl.call(e,e.transformResponse,t.response),t.response.headers=Tl.from(t.response.headers))),Promise.reject(t)}))}var Hl=function(e){return e instanceof Tl?e.toJSON():e};function ql(e,t){t=t||{};var n={};function r(e,t,n){return $a.isPlainObject(e)&&$a.isPlainObject(t)?$a.merge.call({caseless:n},e,t):$a.isPlainObject(t)?$a.merge({},t):$a.isArray(t)?t.slice():t}function o(e,t,n){return $a.isUndefined(t)?$a.isUndefined(e)?void 0:r(void 0,e,n):r(e,t,n)}function i(e,t){if(!$a.isUndefined(t))return r(void 0,t)}function a(e,t){return $a.isUndefined(t)?$a.isUndefined(e)?void 0:r(void 0,e):r(void 0,t)}function l(n,o,i){return i in t?r(n,o):i in e?r(void 0,n):void 0}var u={url:i,method:i,data:i,baseURL:a,transformRequest:a,transformResponse:a,paramsSerializer:a,timeout:a,timeoutMessage:a,withCredentials:a,adapter:a,responseType:a,xsrfCookieName:a,xsrfHeaderName:a,onUploadProgress:a,onDownloadProgress:a,decompress:a,maxContentLength:a,maxBodyLength:a,beforeRedirect:a,transport:a,httpAgent:a,httpsAgent:a,cancelToken:a,socketPath:a,responseEncoding:a,validateStatus:l,headers:function(e,t){return o(Hl(e),Hl(t),!0)}};return $a.forEach(Object.keys(e).concat(Object.keys(t)),(function(r){var i=u[r]||o,a=i(e[r],t[r],r);$a.isUndefined(a)&&i!==l||(n[r]=a)})),n}var Gl="1.3.3";function Kl(e){return Kl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Kl(e)}var Ql={};["object","boolean","number","function","string","symbol"].forEach((function(e,t){Ql[e]=function(n){return Kl(n)===e||"a"+(t<1?"n ":" ")+e}}));var Yl={};Ql.transitional=function(e,t,n){function r(e,t){return"[Axios v"+Gl+"] Transitional option '"+e+"'"+t+(n?". "+n:"")}return function(n,o,i){if(!1===e)throw new Ka(r(o," has been removed"+(t?" in "+t:"")),Ka.ERR_DEPRECATED);return t&&!Yl[o]&&(Yl[o]=!0,console.warn(r(o," has been deprecated since v"+t+" and will be removed in the near future"))),!e||e(n,o,i)}};const Jl={assertOptions:function(e,t,n){if("object"!==Kl(e))throw new Ka("options must be an object",Ka.ERR_BAD_OPTION_VALUE);for(var r=Object.keys(e),o=r.length;o-- >0;){var i=r[o],a=t[i];if(a){var l=e[i],u=void 0===l||a(l,i,e);if(!0!==u)throw new Ka("option "+i+" must be "+u,Ka.ERR_BAD_OPTION_VALUE)}else if(!0!==n)throw new Ka("Unknown option "+i,Ka.ERR_BAD_OPTION)}},validators:Ql};function Xl(e){return Xl="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Xl(e)}function Zl(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(void 0,o=function(e,t){if("object"!==Xl(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==Xl(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r.key),"symbol"===Xl(o)?o:String(o)),r)}var o}var eu=Jl.validators,tu=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.defaults=t,this.interceptors={request:new cl,response:new cl}}var t,n;return t=e,(n=[{key:"request",value:function(e,t){"string"==typeof e?(t=t||{}).url=e:t=e||{};var n,r=t=ql(this.defaults,t),o=r.transitional,i=r.paramsSerializer,a=r.headers;void 0!==o&&Jl.assertOptions(o,{silentJSONParsing:eu.transitional(eu.boolean),forcedJSONParsing:eu.transitional(eu.boolean),clarifyTimeoutError:eu.transitional(eu.boolean)},!1),void 0!==i&&Jl.assertOptions(i,{encode:eu.function,serialize:eu.function},!0),t.method=(t.method||this.defaults.method||"get").toLowerCase(),(n=a&&$a.merge(a.common,a[t.method]))&&$a.forEach(["delete","get","head","post","put","patch","common"],(function(e){delete a[e]})),t.headers=Tl.concat(n,a);var l=[],u=!0;this.interceptors.request.forEach((function(e){"function"==typeof e.runWhen&&!1===e.runWhen(t)||(u=u&&e.synchronous,l.unshift(e.fulfilled,e.rejected))}));var s,c=[];this.interceptors.response.forEach((function(e){c.push(e.fulfilled,e.rejected)}));var f,d=0;if(!u){var p=[$l.bind(this),void 0];for(p.unshift.apply(p,l),p.push.apply(p,c),f=p.length,s=Promise.resolve(t);d<f;)s=s.then(p[d++],p[d++]);return s}f=l.length;var h=t;for(d=0;d<f;){var y=l[d++],v=l[d++];try{h=y(h)}catch(e){v.call(this,e);break}}try{s=$l.call(this,h)}catch(e){return Promise.reject(e)}for(d=0,f=c.length;d<f;)s=s.then(c[d++],c[d++]);return s}},{key:"getUri",value:function(e){return al(Ml((e=ql(this.defaults,e)).baseURL,e.url),e.params,e.paramsSerializer)}}])&&Zl(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();$a.forEach(["delete","get","head","options"],(function(e){tu.prototype[e]=function(t,n){return this.request(ql(n||{},{method:e,url:t,data:(n||{}).data}))}})),$a.forEach(["post","put","patch"],(function(e){function t(t){return function(n,r,o){return this.request(ql(o||{},{method:e,headers:t?{"Content-Type":"multipart/form-data"}:{},url:n,data:r}))}}tu.prototype[e]=t(),tu.prototype[e+"Form"]=t(!0)}));const nu=tu;function ru(e){return ru="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},ru(e)}function ou(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,(void 0,o=function(e,t){if("object"!==ru(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==ru(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(r.key),"symbol"===ru(o)?o:String(o)),r)}var o}var iu=function(){function e(t){if(function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),"function"!=typeof t)throw new TypeError("executor must be a function.");var n;this.promise=new Promise((function(e){n=e}));var r=this;this.promise.then((function(e){if(r._listeners){for(var t=r._listeners.length;t-- >0;)r._listeners[t](e);r._listeners=null}})),this.promise.then=function(e){var t,n=new Promise((function(e){r.subscribe(e),t=e})).then(e);return n.cancel=function(){r.unsubscribe(t)},n},t((function(e,t,o){r.reason||(r.reason=new Dl(e,t,o),n(r.reason))}))}var t,n,r;return t=e,r=[{key:"source",value:function(){var t;return{token:new e((function(e){t=e})),cancel:t}}}],(n=[{key:"throwIfRequested",value:function(){if(this.reason)throw this.reason}},{key:"subscribe",value:function(e){this.reason?e(this.reason):this._listeners?this._listeners.push(e):this._listeners=[e]}},{key:"unsubscribe",value:function(e){if(this._listeners){var t=this._listeners.indexOf(e);-1!==t&&this._listeners.splice(t,1)}}}])&&ou(t.prototype,n),r&&ou(t,r),Object.defineProperty(t,"prototype",{writable:!1}),e}();const au=iu;function lu(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var uu={Continue:100,SwitchingProtocols:101,Processing:102,EarlyHints:103,Ok:200,Created:201,Accepted:202,NonAuthoritativeInformation:203,NoContent:204,ResetContent:205,PartialContent:206,MultiStatus:207,AlreadyReported:208,ImUsed:226,MultipleChoices:300,MovedPermanently:301,Found:302,SeeOther:303,NotModified:304,UseProxy:305,Unused:306,TemporaryRedirect:307,PermanentRedirect:308,BadRequest:400,Unauthorized:401,PaymentRequired:402,Forbidden:403,NotFound:404,MethodNotAllowed:405,NotAcceptable:406,ProxyAuthenticationRequired:407,RequestTimeout:408,Conflict:409,Gone:410,LengthRequired:411,PreconditionFailed:412,PayloadTooLarge:413,UriTooLong:414,UnsupportedMediaType:415,RangeNotSatisfiable:416,ExpectationFailed:417,ImATeapot:418,MisdirectedRequest:421,UnprocessableEntity:422,Locked:423,FailedDependency:424,TooEarly:425,UpgradeRequired:426,PreconditionRequired:428,TooManyRequests:429,RequestHeaderFieldsTooLarge:431,UnavailableForLegalReasons:451,InternalServerError:500,NotImplemented:501,BadGateway:502,ServiceUnavailable:503,GatewayTimeout:504,HttpVersionNotSupported:505,VariantAlsoNegotiates:506,InsufficientStorage:507,LoopDetected:508,NotExtended:510,NetworkAuthenticationRequired:511};Object.entries(uu).forEach((function(e){var t,n,r=(n=2,function(e){if(Array.isArray(e))return e}(t=e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,l=[],u=!0,s=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=i.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){s=!0,o=e}finally{try{if(!u&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(s)throw o}}return l}}(t,n)||function(e,t){if(e){if("string"==typeof e)return lu(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?lu(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],i=r[1];uu[i]=o}));const su=uu;var cu=function e(t){var n=new nu(t),r=sa(nu.prototype.request,n);return $a.extend(r,nu.prototype,n,{allOwnKeys:!0}),$a.extend(r,n,null,{allOwnKeys:!0}),r.create=function(n){return e(ql(t,n))},r}(wl);cu.Axios=nu,cu.CanceledError=Dl,cu.CancelToken=au,cu.isCancel=Ll,cu.VERSION=Gl,cu.toFormData=el,cu.AxiosError=Ka,cu.Cancel=cu.CanceledError,cu.all=function(e){return Promise.all(e)},cu.spread=function(e){return function(t){return e.apply(null,t)}},cu.isAxiosError=function(e){return $a.isObject(e)&&!0===e.isAxiosError},cu.mergeConfig=ql,cu.AxiosHeaders=Tl,cu.formToJSON=function(e){return gl($a.isHTMLForm(e)?new FormData(e):e)},cu.HttpStatusCode=su,cu.default=cu;const fu=cu;function du(e){return du="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},du(e)}function pu(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function hu(){hu=function(){return e};var e={},t=Object.prototype,n=t.hasOwnProperty,r=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",l=o.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,o){var i=t&&t.prototype instanceof d?t:d,a=Object.create(i.prototype),l=new O(o||[]);return r(a,"_invoke",{value:w(e,n,l)}),a}function c(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var f={};function d(){}function p(){}function h(){}var y={};u(y,i,(function(){return this}));var v=Object.getPrototypeOf,m=v&&v(v(E([])));m&&m!==t&&n.call(m,i)&&(y=m);var g=h.prototype=d.prototype=Object.create(y);function b(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function _(e,t){function o(r,i,a,l){var u=c(e[r],e,i);if("throw"!==u.type){var s=u.arg,f=s.value;return f&&"object"==du(f)&&n.call(f,"__await")?t.resolve(f.__await).then((function(e){o("next",e,a,l)}),(function(e){o("throw",e,a,l)})):t.resolve(f).then((function(e){s.value=e,a(s)}),(function(e){return o("throw",e,a,l)}))}l(u.arg)}var i;r(this,"_invoke",{value:function(e,n){function r(){return new t((function(t,r){o(e,n,t,r)}))}return i=i?i.then(r,r):r()}})}function w(e,t,n){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var l=S(a,n);if(l){if(l===f)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var u=c(e,t,n);if("normal"===u.type){if(r=n.done?"completed":"suspendedYield",u.arg===f)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r="completed",n.method="throw",n.arg=u.arg)}}}function S(e,t){var n=t.method,r=e.iterator[n];if(void 0===r)return t.delegate=null,"throw"===n&&e.iterator.return&&(t.method="return",t.arg=void 0,S(e,t),"throw"===t.method)||"return"!==n&&(t.method="throw",t.arg=new TypeError("The iterator does not provide a '"+n+"' method")),f;var o=c(r,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,f;var i=o.arg;return i?i.done?(t[e.resultName]=i.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,f):i:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,f)}function k(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function x(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(k,this),this.reset(!0)}function E(e){if(e){var t=e[i];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function t(){for(;++r<e.length;)if(n.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return o.next=o}}return{next:P}}function P(){return{value:void 0,done:!0}}return p.prototype=h,r(g,"constructor",{value:h,configurable:!0}),r(h,"constructor",{value:p,configurable:!0}),p.displayName=u(h,l,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===p||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,h):(e.__proto__=h,u(e,l,"GeneratorFunction")),e.prototype=Object.create(g),e},e.awrap=function(e){return{__await:e}},b(_.prototype),u(_.prototype,a,(function(){return this})),e.AsyncIterator=_,e.async=function(t,n,r,o,i){void 0===i&&(i=Promise);var a=new _(s(t,n,r,o),i);return e.isGeneratorFunction(n)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},b(g),u(g,l,"Generator"),u(g,i,(function(){return this})),u(g,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=E,O.prototype={constructor:O,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(x),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return a.type="throw",a.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var l=n.call(i,"catchLoc"),u=n.call(i,"finallyLoc");if(l&&u){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),f},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),x(n),f}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;x(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:E(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),f}},e}function yu(e,t,n,r,o,i,a){try{var l=e[i](a),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function vu(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){yu(i,r,o,a,l,"next",e)}function l(e){yu(i,r,o,a,l,"throw",e)}a(void 0)}))}}function mu(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,bu(r.key),r)}}function gu(e,t,n){return(t=bu(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function bu(e){var t=function(e,t){if("object"!==du(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==du(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===du(t)?t:String(t)}var _u=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),gu(this,"_productDetail",null),gu(this,"_relatedProductsList",[]),gu(this,"_meta",aa.initial),gu(this,"_selectedImageIndex",0),ao(this,{_relatedProductsList:En,_productDetail:En,_meta:En,_selectedImageIndex:En,productDetail:An,selectedImageIndex:An,relatedProductsList:An,meta:An,getProductDetail:jr,getRelatedProductsList:jr,nextSlide:jr,prevSlide:jr})}var t,n,r,o;return t=e,n=[{key:"productDetail",get:function(){return this._productDetail}},{key:"relatedProductsList",get:function(){return this._relatedProductsList}},{key:"meta",get:function(){return this._meta}},{key:"selectedImageIndex",get:function(){return this._selectedImageIndex}},{key:"nextSlide",value:function(){this._productDetail&&this._selectedImageIndex!==this._productDetail.images.length-1&&(this._selectedImageIndex+=1)}},{key:"prevSlide",value:function(){this._selectedImageIndex>0&&(this._selectedImageIndex-=1)}},{key:"getProductDetail",value:(o=vu(hu().mark((function e(t){var n,r=this;return hu().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,fu({method:"get",url:"".concat(ua,"/").concat(t)});case 3:n=e.sent,Ar((function(){var e;n.data&&(r._productDetail=n.data,r.getRelatedProductsList(null===(e=r._productDetail)||void 0===e?void 0:e.category.id))})),e.next=10;break;case 7:e.prev=7,e.t0=e.catch(0),this._meta=aa.error;case 10:case"end":return e.stop()}}),e,this,[[0,7]])}))),function(e){return o.apply(this,arguments)})},{key:"getRelatedProductsList",value:(r=vu(hu().mark((function e(t){var n,r=this;return hu().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,this._relatedProductsList=[],e.next=4,fu({method:"get",url:"".concat(ua,"?categoryId=").concat(t)});case 4:n=e.sent,Ar((function(){if(n.data){var e=n.data.filter((function(e){var t;return e.id!==(null===(t=r._productDetail)||void 0===t?void 0:t.id)})).slice(0,3);r._relatedProductsList=function(e){if(Array.isArray(e))return pu(e)}(t=e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(t)||function(e,t){if(e){if("string"==typeof e)return pu(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?pu(e,t):void 0}}(t)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}var t})),e.next=12;break;case 8:e.prev=8,e.t0=e.catch(0),this._meta=aa.error,this._relatedProductsList=[];case 12:case"end":return e.stop()}}),e,this,[[0,8]])}))),function(e){return r.apply(this,arguments)})},{key:"destroy",value:function(){}}],n&&mu(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();const wu={content:"src-pages-ProductDetail-ProductDetail-module__content",image:"src-pages-ProductDetail-ProductDetail-module__image",detail:"src-pages-ProductDetail-ProductDetail-module__detail",title:"src-pages-ProductDetail-ProductDetail-module__title",description:"src-pages-ProductDetail-ProductDetail-module__description",price:"src-pages-ProductDetail-ProductDetail-module__price",add:"src-pages-ProductDetail-ProductDetail-module__add",buy:"src-pages-ProductDetail-ProductDetail-module__buy",navigation:"src-pages-ProductDetail-ProductDetail-module__navigation",arrow:"src-pages-ProductDetail-ProductDetail-module__arrow",related_title:"src-pages-ProductDetail-ProductDetail-module__related_title",related_list:"src-pages-ProductDetail-ProductDetail-module__related_list"};function Su(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var ku=Bi((function(){var e,n,r,o,i,a,l,u,s,c,f=de(),d=(a=t.useContext(ue).matches,(l=a[a.length-1])?l.params:{}).id,p=(u=function(){return new _u},c=s&&function(e){var n=Wi((0,t.useState)((function(){return En(e,{},{deep:!1})})),1)[0];return Ar((function(){Object.assign(n,e)})),n}(s),(0,t.useState)((function(){return En(u(c),void 0,{autoBind:!0})}))[0]);wi.query.setSearch("productId=".concat(d));var h,y,v=wi.query.getParam("productId"),m=(h=(0,t.useState)(1),y=1,function(e){if(Array.isArray(e))return e}(h)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,l=[],u=!0,s=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=i.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){s=!0,o=e}finally{try{if(!u&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(s)throw o}}return l}}(h,y)||function(e,t){if(e){if("string"==typeof e)return Su(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Su(e,t):void 0}}(h,y)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}())[0];return(0,t.useEffect)((function(){p.getProductDetail(v)}),[p,v]),(0,Ve.jsxs)("div",{className:wu.ProductDetail,children:[(0,Ve.jsxs)("div",{className:wu.content,children:[(0,Ve.jsxs)("div",{className:wu.navigation,children:[(0,Ve.jsx)(Je,{className:wu.arrow,onClick:function(){return p.prevSlide()},children:"<"}),(0,Ve.jsx)(Je,{className:wu.arrow,onClick:function(){return p.nextSlide()},children:">"})]}),(0,Ve.jsx)("img",{className:wu.image,src:null===(e=p.productDetail)||void 0===e?void 0:e.images[p.selectedImageIndex],alt:null===(n=p.productDetail)||void 0===n?void 0:n.title}),(0,Ve.jsxs)("div",{className:wu.detail,children:[(0,Ve.jsx)("h1",{className:wu.title,children:null===(r=p.productDetail)||void 0===r?void 0:r.title}),(0,Ve.jsx)("p",{className:wu.description,children:null===(o=p.productDetail)||void 0===o?void 0:o.description}),(0,Ve.jsxs)("p",{className:wu.price,children:["$",null===(i=p.productDetail)||void 0===i?void 0:i.price]}),(0,Ve.jsx)(Je,{className:wu.buy,children:"Buy Now"}),(0,Ve.jsx)(Je,{className:wu.add,onClick:function(){p.productDetail&&wi.cart.addToCart({product:p.productDetail,quantity:m})},children:"Add to Card"})]})]}),(0,Ve.jsx)("h2",{className:wu.related_title,children:"Related Items"}),(0,Ve.jsx)("div",{className:wu.related_list,children:p.relatedProductsList.map((function(e){return(0,Ve.jsx)(la,{id:e.id,image:e.images[0],category:e.category.name,title:e.title,content:e.price,onClick:function(){return f("/product/".concat(e.id))}},e.id)}))})]})}));const xu=t.memo(ku),Ou=o.p+"3745b96e021127d76a5e68596bd2e822.svg",Eu="src-components-Dropdown-Dropdown-module__MultiDropdown",Pu="src-components-Dropdown-Dropdown-module__button",ju="src-components-Dropdown-Dropdown-module__list",Cu="src-components-Dropdown-Dropdown-module__list_open",Au="src-components-Dropdown-Dropdown-module__item";function Tu(e){return Tu="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Tu(e)}function Nu(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==Tu(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==Tu(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Tu(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Lu(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var Ru=function(e){var n,r,o=e.options,i=e.value,a=e.onChange,l=e.disabled,u=(n=(0,t.useState)(!1),r=2,function(e){if(Array.isArray(e))return e}(n)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,l=[],u=!0,s=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=i.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){s=!0,o=e}finally{try{if(!u&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(s)throw o}}return l}}(n,r)||function(e,t){if(e){if("string"==typeof e)return Lu(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?Lu(e,t):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),s=u[0],c=u[1];function f(e){return!(i.key!==e.key)}return(0,Ve.jsxs)("div",{className:Eu,children:[(0,Ve.jsx)("button",{className:Pu,disabled:l,onClick:function(){return c((function(e){return!e}))},children:i.key?i.value:(0,Ve.jsxs)(Ve.Fragment,{children:[(0,Ve.jsx)("img",{src:Ou,alt:"filter"}),"Filter"]})}),!l&&(0,Ve.jsx)("ul",{className:Me()(ju,Nu({},Cu,s)),children:function(e){return e.map((function(e){return(0,Ve.jsxs)("li",{children:[(0,Ve.jsx)("input",{type:"checkbox",id:e.key,checked:f(e),onChange:function(){var t;f(t=e)?a({key:"",value:""}):a(t)}}),(0,Ve.jsx)("label",{className:Au,htmlFor:e.key,children:e.value})]},e.key)}))}(o)})]})};function Du(e){return Du="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Du(e)}var Iu=["className","value","onChange","disabled"];function Mu(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Fu(e,t,n){return(t=function(e){var t=function(e,t){if("object"!==Du(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==Du(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Du(t)?t:String(t)}(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var Uu=(0,t.memo)((function(e){var t=e.className,n=e.value,r=e.onChange,o=e.disabled,i=function(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}(e,Iu);return(0,Ve.jsx)("input",function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Mu(Object(n),!0).forEach((function(t){Fu(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Mu(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({className:Me()(t,"src-components-Input-Input-module__input"),type:"text",value:n,disabled:o,onChange:o?void 0:function(e){r(e.target.value)}},i))}));const zu=o.p+"2685acf8739d6250661025603f3df7c9.svg";function Bu(e){return Bu="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},Bu(e)}function Vu(){Vu=function(){return e};var e={},t=Object.prototype,n=t.hasOwnProperty,r=Object.defineProperty||function(e,t,n){e[t]=n.value},o="function"==typeof Symbol?Symbol:{},i=o.iterator||"@@iterator",a=o.asyncIterator||"@@asyncIterator",l=o.toStringTag||"@@toStringTag";function u(e,t,n){return Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}),e[t]}try{u({},"")}catch(e){u=function(e,t,n){return e[t]=n}}function s(e,t,n,o){var i=t&&t.prototype instanceof d?t:d,a=Object.create(i.prototype),l=new O(o||[]);return r(a,"_invoke",{value:w(e,n,l)}),a}function c(e,t,n){try{return{type:"normal",arg:e.call(t,n)}}catch(e){return{type:"throw",arg:e}}}e.wrap=s;var f={};function d(){}function p(){}function h(){}var y={};u(y,i,(function(){return this}));var v=Object.getPrototypeOf,m=v&&v(v(E([])));m&&m!==t&&n.call(m,i)&&(y=m);var g=h.prototype=d.prototype=Object.create(y);function b(e){["next","throw","return"].forEach((function(t){u(e,t,(function(e){return this._invoke(t,e)}))}))}function _(e,t){function o(r,i,a,l){var u=c(e[r],e,i);if("throw"!==u.type){var s=u.arg,f=s.value;return f&&"object"==Bu(f)&&n.call(f,"__await")?t.resolve(f.__await).then((function(e){o("next",e,a,l)}),(function(e){o("throw",e,a,l)})):t.resolve(f).then((function(e){s.value=e,a(s)}),(function(e){return o("throw",e,a,l)}))}l(u.arg)}var i;r(this,"_invoke",{value:function(e,n){function r(){return new t((function(t,r){o(e,n,t,r)}))}return i=i?i.then(r,r):r()}})}function w(e,t,n){var r="suspendedStart";return function(o,i){if("executing"===r)throw new Error("Generator is already running");if("completed"===r){if("throw"===o)throw i;return{value:void 0,done:!0}}for(n.method=o,n.arg=i;;){var a=n.delegate;if(a){var l=S(a,n);if(l){if(l===f)continue;return l}}if("next"===n.method)n.sent=n._sent=n.arg;else if("throw"===n.method){if("suspendedStart"===r)throw r="completed",n.arg;n.dispatchException(n.arg)}else"return"===n.method&&n.abrupt("return",n.arg);r="executing";var u=c(e,t,n);if("normal"===u.type){if(r=n.done?"completed":"suspendedYield",u.arg===f)continue;return{value:u.arg,done:n.done}}"throw"===u.type&&(r="completed",n.method="throw",n.arg=u.arg)}}}function S(e,t){var n=t.method,r=e.iterator[n];if(void 0===r)return t.delegate=null,"throw"===n&&e.iterator.return&&(t.method="return",t.arg=void 0,S(e,t),"throw"===t.method)||"return"!==n&&(t.method="throw",t.arg=new TypeError("The iterator does not provide a '"+n+"' method")),f;var o=c(r,e.iterator,t.arg);if("throw"===o.type)return t.method="throw",t.arg=o.arg,t.delegate=null,f;var i=o.arg;return i?i.done?(t[e.resultName]=i.value,t.next=e.nextLoc,"return"!==t.method&&(t.method="next",t.arg=void 0),t.delegate=null,f):i:(t.method="throw",t.arg=new TypeError("iterator result is not an object"),t.delegate=null,f)}function k(e){var t={tryLoc:e[0]};1 in e&&(t.catchLoc=e[1]),2 in e&&(t.finallyLoc=e[2],t.afterLoc=e[3]),this.tryEntries.push(t)}function x(e){var t=e.completion||{};t.type="normal",delete t.arg,e.completion=t}function O(e){this.tryEntries=[{tryLoc:"root"}],e.forEach(k,this),this.reset(!0)}function E(e){if(e){var t=e[i];if(t)return t.call(e);if("function"==typeof e.next)return e;if(!isNaN(e.length)){var r=-1,o=function t(){for(;++r<e.length;)if(n.call(e,r))return t.value=e[r],t.done=!1,t;return t.value=void 0,t.done=!0,t};return o.next=o}}return{next:P}}function P(){return{value:void 0,done:!0}}return p.prototype=h,r(g,"constructor",{value:h,configurable:!0}),r(h,"constructor",{value:p,configurable:!0}),p.displayName=u(h,l,"GeneratorFunction"),e.isGeneratorFunction=function(e){var t="function"==typeof e&&e.constructor;return!!t&&(t===p||"GeneratorFunction"===(t.displayName||t.name))},e.mark=function(e){return Object.setPrototypeOf?Object.setPrototypeOf(e,h):(e.__proto__=h,u(e,l,"GeneratorFunction")),e.prototype=Object.create(g),e},e.awrap=function(e){return{__await:e}},b(_.prototype),u(_.prototype,a,(function(){return this})),e.AsyncIterator=_,e.async=function(t,n,r,o,i){void 0===i&&(i=Promise);var a=new _(s(t,n,r,o),i);return e.isGeneratorFunction(n)?a:a.next().then((function(e){return e.done?e.value:a.next()}))},b(g),u(g,l,"Generator"),u(g,i,(function(){return this})),u(g,"toString",(function(){return"[object Generator]"})),e.keys=function(e){var t=Object(e),n=[];for(var r in t)n.push(r);return n.reverse(),function e(){for(;n.length;){var r=n.pop();if(r in t)return e.value=r,e.done=!1,e}return e.done=!0,e}},e.values=E,O.prototype={constructor:O,reset:function(e){if(this.prev=0,this.next=0,this.sent=this._sent=void 0,this.done=!1,this.delegate=null,this.method="next",this.arg=void 0,this.tryEntries.forEach(x),!e)for(var t in this)"t"===t.charAt(0)&&n.call(this,t)&&!isNaN(+t.slice(1))&&(this[t]=void 0)},stop:function(){this.done=!0;var e=this.tryEntries[0].completion;if("throw"===e.type)throw e.arg;return this.rval},dispatchException:function(e){if(this.done)throw e;var t=this;function r(n,r){return a.type="throw",a.arg=e,t.next=n,r&&(t.method="next",t.arg=void 0),!!r}for(var o=this.tryEntries.length-1;o>=0;--o){var i=this.tryEntries[o],a=i.completion;if("root"===i.tryLoc)return r("end");if(i.tryLoc<=this.prev){var l=n.call(i,"catchLoc"),u=n.call(i,"finallyLoc");if(l&&u){if(this.prev<i.catchLoc)return r(i.catchLoc,!0);if(this.prev<i.finallyLoc)return r(i.finallyLoc)}else if(l){if(this.prev<i.catchLoc)return r(i.catchLoc,!0)}else{if(!u)throw new Error("try statement without catch or finally");if(this.prev<i.finallyLoc)return r(i.finallyLoc)}}}},abrupt:function(e,t){for(var r=this.tryEntries.length-1;r>=0;--r){var o=this.tryEntries[r];if(o.tryLoc<=this.prev&&n.call(o,"finallyLoc")&&this.prev<o.finallyLoc){var i=o;break}}i&&("break"===e||"continue"===e)&&i.tryLoc<=t&&t<=i.finallyLoc&&(i=null);var a=i?i.completion:{};return a.type=e,a.arg=t,i?(this.method="next",this.next=i.finallyLoc,f):this.complete(a)},complete:function(e,t){if("throw"===e.type)throw e.arg;return"break"===e.type||"continue"===e.type?this.next=e.arg:"return"===e.type?(this.rval=this.arg=e.arg,this.method="return",this.next="end"):"normal"===e.type&&t&&(this.next=t),f},finish:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.finallyLoc===e)return this.complete(n.completion,n.afterLoc),x(n),f}},catch:function(e){for(var t=this.tryEntries.length-1;t>=0;--t){var n=this.tryEntries[t];if(n.tryLoc===e){var r=n.completion;if("throw"===r.type){var o=r.arg;x(n)}return o}}throw new Error("illegal catch attempt")},delegateYield:function(e,t,n){return this.delegate={iterator:E(e),resultName:t,nextLoc:n},"next"===this.method&&(this.arg=void 0),f}},e}function Wu(e){return function(e){if(Array.isArray(e))return $u(e)}(e)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(e)||function(e,t){if(e){if("string"==typeof e)return $u(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?$u(e,t):void 0}}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function $u(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function Hu(e,t,n,r,o,i,a){try{var l=e[i](a),u=l.value}catch(e){return void n(e)}l.done?t(u):Promise.resolve(u).then(r,o)}function qu(e){return function(){var t=this,n=arguments;return new Promise((function(r,o){var i=e.apply(t,n);function a(e){Hu(i,r,o,a,l,"next",e)}function l(e){Hu(i,r,o,a,l,"throw",e)}a(void 0)}))}}function Gu(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,Qu(r.key),r)}}function Ku(e,t,n){return(t=Qu(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function Qu(e){var t=function(e,t){if("object"!==Bu(e)||null===e)return e;var n=e[Symbol.toPrimitive];if(void 0!==n){var r=n.call(e,"string");if("object"!==Bu(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"===Bu(t)?t:String(t)}var Yu=function(){function e(){var t=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),Ku(this,"_totalProductsList",[]),Ku(this,"_totalProductsCount",0),Ku(this,"_meta",aa.initial),Ku(this,"_searchTitle",""),Ku(this,"_productsPage",0),Ku(this,"_hasMoreData",!0),Ku(this,"_categoriesList",[]),Ku(this,"_filterValue",{key:"",value:""}),Ku(this,"_categoryId",""),Ku(this,"_searchCategory",""),Ku(this,"_qpReaction",function(e,t,n){var r;void 0===n&&(n=st);var o,i,a,l,u=null!=(r=n.name)?r:"Reaction",s=jr(u,n.onError?(o=n.onError,i=t,function(){try{return i.apply(this,arguments)}catch(e){o.call(this,e)}}):t),c=!n.scheduler&&!n.delay,f=Lr(n),d=!0,p=!1,h=n.compareStructural?Ht.structural:n.equals||Ht.default,y=new hr(u,(function(){d||c?v():p||(p=!0,f(v))}),n.onError,n.requiresObservable);function v(){if(p=!1,!y.isDisposed_){var t=!1;y.track((function(){var n=Fn(!1,(function(){return e(y)}));t=d||!h(a,n),l=a,a=n})),(d&&n.fireImmediately||!d&&t)&&s(a,l,y),d=!1}}return y.schedule_(),y.getDisposer_()}((function(){return wi.query.getParam("search")||""}),(function(e){t._searchTitle=e}))),ao(this,{_totalProductsList:En.ref,_totalProductsCount:En,_meta:En,_searchTitle:En,_productsPage:En,_hasMoreData:En,_categoriesList:En,_filterValue:En,_categoryId:En,_searchCategory:En,totalProductsList:An,totalProductsCount:An,meta:An,searchTitle:An,hasMoreData:An,productsPage:An,categoriesList:An,filterValue:An,getProductsList:jr,getTotalProductCount:jr,clearProductList:jr,setProductsPage:jr,setHasMoreData:jr,setSearchTitle:jr,setMeta:jr,getCategoriesList:jr,changeFilterOptions:jr,setCategoryId:jr,setSearchCategory:jr})}var t,n,r,o,i;return t=e,n=[{key:"totalProductsList",get:function(){return this._totalProductsList}},{key:"totalProductsCount",get:function(){return this._totalProductsCount}},{key:"meta",get:function(){return this._meta}},{key:"searchTitle",get:function(){return this._searchTitle}},{key:"hasMoreData",get:function(){return this._hasMoreData}},{key:"productsPage",get:function(){return this._productsPage}},{key:"categoriesList",get:function(){return this._categoriesList}},{key:"filterValue",get:function(){return this._filterValue}},{key:"setSearchTitle",value:function(e){this._searchTitle=e}},{key:"setHasMoreData",value:function(e){this._hasMoreData=e}},{key:"setProductsPage",value:function(e){this._productsPage=e}},{key:"setCategoryId",value:function(e){this._categoryId=e}},{key:"setMeta",value:function(e){this._meta=e}},{key:"getProductsList",value:(i=qu(Vu().mark((function e(){var t,n=this;return Vu().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,fu({method:"get",url:"".concat(ua,"?title=").concat(this._searchTitle,"&categoryId=").concat(this._categoryId,"&offset=").concat(this._productsPage,"&limit=10")});case 3:t=e.sent,Ar((function(){n._meta=aa.success,n._totalProductsList=[].concat(Wu(n._totalProductsList),Wu(t.data)),t.data.length<10&&(n._hasMoreData=!1),n._productsPage=n._productsPage+10})),e.next=12;break;case 7:e.prev=7,e.t0=e.catch(0),this._meta=aa.error,this._totalProductsList=[],this._hasMoreData=!1;case 12:case"end":return e.stop()}}),e,this,[[0,7]])}))),function(){return i.apply(this,arguments)})},{key:"getTotalProductCount",value:(o=qu(Vu().mark((function e(){var t,n=this;return Vu().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,fu({method:"get",url:"".concat(ua,"?title=").concat(this._searchTitle,"&categoryId=").concat(this._categoryId)});case 3:t=e.sent,Ar((function(){n._totalProductsCount=t.data.length})),e.next=11;break;case 7:e.prev=7,e.t0=e.catch(0),this._meta=aa.error,this._totalProductsCount=0;case 11:case"end":return e.stop()}}),e,this,[[0,7]])}))),function(){return o.apply(this,arguments)})},{key:"clearProductList",value:function(){this._totalProductsList=[]}},{key:"getCategoriesList",value:(r=qu(Vu().mark((function e(){var t,n,r=this;return Vu().wrap((function(e){for(;;)switch(e.prev=e.next){case 0:return e.prev=0,e.next=3,fu({method:"get",url:"".concat("https://api.escuelajs.co/api/v1/categories")});case 3:t=e.sent,n=t.data.map((function(e){return{key:e.id,value:e.name}})),Ar((function(){r._categoriesList=Wu(n);var e=r._categoriesList.find((function(e){return e.value===r._searchCategory}));e&&(r._filterValue=e,r._categoryId=e.key),r.getProductsList(),r.getTotalProductCount()})),e.next=12;break;case 8:e.prev=8,e.t0=e.catch(0),this._meta=aa.error,this._categoriesList=[];case 12:case"end":return e.stop()}}),e,this,[[0,8]])}))),function(){return r.apply(this,arguments)})},{key:"changeFilterOptions",value:function(e){this._filterValue=e}},{key:"setSearchCategory",value:function(e){this._searchCategory=e}},{key:"destroy",value:function(){this._qpReaction()}}],n&&Gu(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}(),Ju=function(e,t){return Ju=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])},Ju(e,t)},Xu=function(){return Xu=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e},Xu.apply(this,arguments)},Zu={Pixel:"Pixel",Percent:"Percent"},es={unit:Zu.Percent,value:.8};function ts(e){return"number"==typeof e?{unit:Zu.Percent,value:100*e}:"string"==typeof e?e.match(/^(\d*(\.\d+)?)px$/)?{unit:Zu.Pixel,value:parseFloat(e)}:e.match(/^(\d*(\.\d+)?)%$/)?{unit:Zu.Percent,value:parseFloat(e)}:(console.warn('scrollThreshold format is invalid. Valid formats: "120px", "50%"...'),es):(console.warn("scrollThreshold should be string or number"),es)}const ns=function(e){function n(t){var n=e.call(this,t)||this;return n.lastScrollTop=0,n.actionTriggered=!1,n.startY=0,n.currentY=0,n.dragging=!1,n.maxPullDownDistance=0,n.getScrollableTarget=function(){return n.props.scrollableTarget instanceof HTMLElement?n.props.scrollableTarget:"string"==typeof n.props.scrollableTarget?document.getElementById(n.props.scrollableTarget):(null===n.props.scrollableTarget&&console.warn("You are trying to pass scrollableTarget but it is null. This might\n        happen because the element may not have been added to DOM yet.\n        See https://github.com/ankeetmaini/react-infinite-scroll-component/issues/59 for more info.\n      "),null)},n.onStart=function(e){n.lastScrollTop||(n.dragging=!0,e instanceof MouseEvent?n.startY=e.pageY:e instanceof TouchEvent&&(n.startY=e.touches[0].pageY),n.currentY=n.startY,n._infScroll&&(n._infScroll.style.willChange="transform",n._infScroll.style.transition="transform 0.2s cubic-bezier(0,0,0.31,1)"))},n.onMove=function(e){n.dragging&&(e instanceof MouseEvent?n.currentY=e.pageY:e instanceof TouchEvent&&(n.currentY=e.touches[0].pageY),n.currentY<n.startY||(n.currentY-n.startY>=Number(n.props.pullDownToRefreshThreshold)&&n.setState({pullToRefreshThresholdBreached:!0}),n.currentY-n.startY>1.5*n.maxPullDownDistance||n._infScroll&&(n._infScroll.style.overflow="visible",n._infScroll.style.transform="translate3d(0px, "+(n.currentY-n.startY)+"px, 0px)")))},n.onEnd=function(){n.startY=0,n.currentY=0,n.dragging=!1,n.state.pullToRefreshThresholdBreached&&(n.props.refreshFunction&&n.props.refreshFunction(),n.setState({pullToRefreshThresholdBreached:!1})),requestAnimationFrame((function(){n._infScroll&&(n._infScroll.style.overflow="auto",n._infScroll.style.transform="none",n._infScroll.style.willChange="unset")}))},n.onScrollListener=function(e){"function"==typeof n.props.onScroll&&setTimeout((function(){return n.props.onScroll&&n.props.onScroll(e)}),0);var t=n.props.height||n._scrollableNode?e.target:document.documentElement.scrollTop?document.documentElement:document.body;n.actionTriggered||((n.props.inverse?n.isElementAtTop(t,n.props.scrollThreshold):n.isElementAtBottom(t,n.props.scrollThreshold))&&n.props.hasMore&&(n.actionTriggered=!0,n.setState({showLoader:!0}),n.props.next&&n.props.next()),n.lastScrollTop=t.scrollTop)},n.state={showLoader:!1,pullToRefreshThresholdBreached:!1,prevDataLength:t.dataLength},n.throttledOnScrollListener=function(e,t,n,r){var o,i=!1,a=0;function l(){o&&clearTimeout(o)}function u(){var u=this,s=Date.now()-a,c=arguments;function f(){a=Date.now(),n.apply(u,c)}i||(r&&!o&&f(),l(),void 0===r&&s>e?f():!0!==t&&(o=setTimeout(r?function(){o=void 0}:f,void 0===r?e-s:e)))}return"boolean"!=typeof t&&(r=n,n=t,t=void 0),u.cancel=function(){l(),i=!0},u}(150,n.onScrollListener).bind(n),n.onStart=n.onStart.bind(n),n.onMove=n.onMove.bind(n),n.onEnd=n.onEnd.bind(n),n}return function(e,t){function n(){this.constructor=e}Ju(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}(n,e),n.prototype.componentDidMount=function(){if(void 0===this.props.dataLength)throw new Error('mandatory prop "dataLength" is missing. The prop is needed when loading more content. Check README.md for usage');if(this._scrollableNode=this.getScrollableTarget(),this.el=this.props.height?this._infScroll:this._scrollableNode||window,this.el&&this.el.addEventListener("scroll",this.throttledOnScrollListener),"number"==typeof this.props.initialScrollY&&this.el&&this.el instanceof HTMLElement&&this.el.scrollHeight>this.props.initialScrollY&&this.el.scrollTo(0,this.props.initialScrollY),this.props.pullDownToRefresh&&this.el&&(this.el.addEventListener("touchstart",this.onStart),this.el.addEventListener("touchmove",this.onMove),this.el.addEventListener("touchend",this.onEnd),this.el.addEventListener("mousedown",this.onStart),this.el.addEventListener("mousemove",this.onMove),this.el.addEventListener("mouseup",this.onEnd),this.maxPullDownDistance=this._pullDown&&this._pullDown.firstChild&&this._pullDown.firstChild.getBoundingClientRect().height||0,this.forceUpdate(),"function"!=typeof this.props.refreshFunction))throw new Error('Mandatory prop "refreshFunction" missing.\n          Pull Down To Refresh functionality will not work\n          as expected. Check README.md for usage\'')},n.prototype.componentWillUnmount=function(){this.el&&(this.el.removeEventListener("scroll",this.throttledOnScrollListener),this.props.pullDownToRefresh&&(this.el.removeEventListener("touchstart",this.onStart),this.el.removeEventListener("touchmove",this.onMove),this.el.removeEventListener("touchend",this.onEnd),this.el.removeEventListener("mousedown",this.onStart),this.el.removeEventListener("mousemove",this.onMove),this.el.removeEventListener("mouseup",this.onEnd)))},n.prototype.componentDidUpdate=function(e){this.props.dataLength!==e.dataLength&&(this.actionTriggered=!1,this.setState({showLoader:!1}))},n.getDerivedStateFromProps=function(e,t){return e.dataLength!==t.prevDataLength?Xu(Xu({},t),{prevDataLength:e.dataLength}):null},n.prototype.isElementAtTop=function(e,t){void 0===t&&(t=.8);var n=e===document.body||e===document.documentElement?window.screen.availHeight:e.clientHeight,r=ts(t);return r.unit===Zu.Pixel?e.scrollTop<=r.value+n-e.scrollHeight+1:e.scrollTop<=r.value/100+n-e.scrollHeight+1},n.prototype.isElementAtBottom=function(e,t){void 0===t&&(t=.8);var n=e===document.body||e===document.documentElement?window.screen.availHeight:e.clientHeight,r=ts(t);return r.unit===Zu.Pixel?e.scrollTop+n>=e.scrollHeight-r.value:e.scrollTop+n>=r.value/100*e.scrollHeight},n.prototype.render=function(){var e=this,n=Xu({height:this.props.height||"auto",overflow:"auto",WebkitOverflowScrolling:"touch"},this.props.style),r=this.props.hasChildren||!!(this.props.children&&this.props.children instanceof Array&&this.props.children.length),o=this.props.pullDownToRefresh&&this.props.height?{overflow:"auto"}:{};return t.createElement("div",{style:o,className:"infinite-scroll-component__outerdiv"},t.createElement("div",{className:"infinite-scroll-component "+(this.props.className||""),ref:function(t){return e._infScroll=t},style:n},this.props.pullDownToRefresh&&t.createElement("div",{style:{position:"relative"},ref:function(t){return e._pullDown=t}},t.createElement("div",{style:{position:"absolute",left:0,right:0,top:-1*this.maxPullDownDistance}},this.state.pullToRefreshThresholdBreached?this.props.releaseToRefreshContent:this.props.pullDownToRefreshContent)),this.props.children,!this.state.showLoader&&!r&&this.props.hasMore&&this.props.loader,this.state.showLoader&&this.props.hasMore&&this.props.loader,!this.props.hasMore&&this.props.endMessage))},n}(t.Component);function rs(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}var os=Bi((function(){var e,n,r,o,i=(r=De(),o=2,function(e){if(Array.isArray(e))return e}(r)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i,a,l=[],u=!0,s=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=i.call(n)).done)&&(l.push(r.value),l.length!==t);u=!0);}catch(e){s=!0,o=e}finally{try{if(!u&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(s)throw o}}return l}}(r,o)||function(e,t){if(e){if("string"==typeof e)return rs(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?rs(e,t):void 0}}(r,o)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),a=i[0],l=i[1],u=de(),s=(e=function(){return new Yu},null===(n=t.useRef(null)).current&&(n.current=e()),t.useEffect((function(){return function(){var e;return null===(e=n.current)||void 0===e?void 0:e.destroy()}}),[]),n.current);(0,t.useEffect)((function(){s.setSearchTitle(a.get("search")||""),s.setSearchCategory(a.get("category")||""),s.getCategoriesList()}),[]);var c=(0,t.useCallback)((function(e){l((function(t){return e?t.set("search",e):t.delete("search"),t})),s.setHasMoreData(!0)}),[s,l]),f=(0,t.useCallback)((function(){s.setMeta(aa.loading),s.clearProductList(),s.setProductsPage(0),s.getProductsList(),s.getTotalProductCount()}),[s]),d=(0,t.useCallback)((function(){return s.getProductsList()}),[s]);return(0,Ve.jsxs)("div",{className:"src-pages-Products-Products-module__Products",children:[(0,Ve.jsxs)("div",{className:"src-pages-Products-Products-module__container",children:[(0,Ve.jsx)("h1",{children:"Products"}),(0,Ve.jsx)("p",{className:"src-pages-Products-Products-module__subtitle",children:"We display products based on the latest products we have, if you want to see our old products please enter the name of the item"}),(0,Ve.jsxs)("div",{className:"src-pages-Products-Products-module__search_container",children:[(0,Ve.jsxs)("div",{className:"src-pages-Products-Products-module__search",children:[(0,Ve.jsx)("img",{src:zu,alt:"search"}),(0,Ve.jsx)(Uu,{value:a.get("search")||"",onChange:c,placeholder:"Search property"}),(0,Ve.jsx)(Je,{onClick:f,loading:"loading"===s.meta,disabled:!s.hasMoreData,children:"Find Now"})]}),(0,Ve.jsx)(Ru,{options:s.categoriesList,value:s.filterValue,onChange:function(e){s.changeFilterOptions(e),s.setCategoryId(e.key||""),s.clearProductList(),s.setProductsPage(0),s.getProductsList(),s.getTotalProductCount(),l((function(t){return e.value?t.set("category",e.value):t.delete("category"),t}))}})]}),(0,Ve.jsxs)("div",{className:"src-pages-Products-Products-module__products_info",children:[(0,Ve.jsx)("h2",{children:"Total Product"}),(0,Ve.jsx)("div",{className:"src-pages-Products-Products-module__count",children:s.totalProductsCount})]})]}),(0,Ve.jsx)(ns,{className:"src-pages-Products-Products-module__infinite_scroll",dataLength:s.totalProductsList.length,next:d,hasMore:s.hasMoreData,loader:(0,Ve.jsx)(He,{size:Be.l}),endMessage:"error"===s.meta?(0,Ve.jsx)("h2",{children:"Network error, please try again later"}):(0,Ve.jsx)("h2",{children:"You have seen it all"}),children:(0,Ve.jsx)("div",{className:"src-pages-Products-Products-module__products_list",children:s.totalProductsList.map((function(e){return(0,Ve.jsx)(la,{id:e.id,image:e.images[0],category:e.category.name,title:e.title,content:e.price,onClick:function(){wi.query.setSearch("productId=".concat(e.id)),u("/product/".concat(e.id))}},e.id)}))})})]})}));const is=t.memo(os),as=function(){var e,t,n;return e=fe().search,wi.query.setSearch(e),n=(t=localStorage.getItem("cart"))?JSON.parse(t):[],wi.cart.setCartItems(n),(0,Ve.jsxs)("div",{className:"app",children:[(0,Ve.jsx)(ia,{}),(0,Ve.jsxs)(ke,{children:[(0,Ve.jsx)(we,{path:"/",element:(0,Ve.jsx)(is,{})}),(0,Ve.jsx)(we,{path:"/product/:id",element:(0,Ve.jsx)(xu,{})}),(0,Ve.jsx)(we,{path:"*",element:(0,Ve.jsx)(_e,{to:"/",replace:!0})})]})]})};r.createRoot(document.getElementById("root")).render((0,Ve.jsx)(Ae,{children:(0,Ve.jsx)(as,{})}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFDakksR0FBSyxDQUFDbkssS0dsQkosZUhrQjBCdnpCLFNBQVMybEMsRUFBQUEsR0FBQUEsS0FBQzRuQyxHQUFhLE9BQ3BENW5DLEVBQUFBLEdBQUFBLEtBQUNqSSxHQUFLLENBQUNuSyxLQUFLLElBQUl2ekIsU0FBUzJsQyxFQUFBQSxHQUFBQSxLQUFDckksR0FBUSxDQUFDMUssR0dwQm5DLElIb0JvRC9tRCxTQUFPLFdBSW5FLEVJZGF3bkcsRUFBQUEsV0FDWHgwRixTQUFTeTBGLGVBQWUsU0FFckJoeEYsUUFDSHFqRCxFQUFBQSxHQUFBQSxLQUFDbEYsR0FBVSxDQUFBMzdDLFVBQ1Q2Z0QsRUFBQUEsR0FBQUEsS0FBQzR0QyxHQUFHIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZS1jb21tZXJjZS93ZWJwYWNrL3J1bnRpbWUvY3JlYXRlIGZha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL2NhbGwtYmluZC9jYWxsQm91bmQuanMiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uL25vZGVfbW9kdWxlcy9jYWxsLWJpbmQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uL25vZGVfbW9kdWxlcy9jbGFzc25hbWVzL2luZGV4LmpzIiwid2VicGFjazovL2UtY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvZnVuY3Rpb24tYmluZC9pbXBsZW1lbnRhdGlvbi5qcyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL2Z1bmN0aW9uLWJpbmQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uL25vZGVfbW9kdWxlcy9nZXQtaW50cmluc2ljL2luZGV4LmpzIiwid2VicGFjazovL2UtY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvaGFzLXN5bWJvbHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uL25vZGVfbW9kdWxlcy9oYXMtc3ltYm9scy9zaGFtcy5qcyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL2hhcy9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uL25vZGVfbW9kdWxlcy9vYmplY3QtaW5zcGVjdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL3FzL2xpYi9mb3JtYXRzLmpzIiwid2VicGFjazovL2UtY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvcXMvbGliL2luZGV4LmpzIiwid2VicGFjazovL2UtY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvcXMvbGliL3BhcnNlLmpzIiwid2VicGFjazovL2UtY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvcXMvbGliL3N0cmluZ2lmeS5qcyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL3FzL2xpYi91dGlscy5qcyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovL2UtY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2NsaWVudC5qcyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9pbmRleC5qcyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC1qc3gtcnVudGltZS5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovL2UtY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvcmVhY3QvanN4LXJ1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uL25vZGVfbW9kdWxlcy9yZWdlbmVyYXRvci1ydW50aW1lL3J1bnRpbWUuanMiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL3NpZGUtY2hhbm5lbC9pbmRleC5qcyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL2UtY29tbWVyY2Uvd2VicGFjay9ydW50aW1lL2FtZCBvcHRpb25zIiwid2VicGFjazovL2UtY29tbWVyY2Uvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL2UtY29tbWVyY2Uvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlL3dlYnBhY2svcnVudGltZS9tYWtlIG5hbWVzcGFjZSBvYmplY3QiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS93ZWJwYWNrL3J1bnRpbWUvbm9kZSBtb2R1bGUgZGVjb3JhdG9yIiwid2VicGFjazovL2UtY29tbWVyY2Uvd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uLi9oaXN0b3J5LnRzIiwid2VicGFjazovL2UtY29tbWVyY2UvLi4vdXRpbHMudHMiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uLi9yb3V0ZXIudHMiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uLi9saWIvdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUtc2hpbS91c2VTeW5jRXh0ZXJuYWxTdG9yZVNoaW1DbGllbnQudHMiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uLi9saWIvdXNlLXN5bmMtZXh0ZXJuYWwtc3RvcmUtc2hpbS9pbmRleC50cyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4uL2xpYi9jb250ZXh0LnRzIiwid2VicGFjazovL2UtY29tbWVyY2UvLi4vbGliL2hvb2tzLnRzeCIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4uL2xpYi9jb21wb25lbnRzLnRzeCIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4uL2RvbS50cyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4uL2luZGV4LnRzeCIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4vc3JjL2NvbXBvbmVudHMvQnV0dG9uL0J1dHRvbi5tb2R1bGUuc2Nzcz9iOTdiIiwid2VicGFjazovL2UtY29tbWVyY2UvLi9wdWJsaWMvaWNvbnMvTG9hZGVyLWwuc3ZnIiwid2VicGFjazovL2UtY29tbWVyY2UvLi9wdWJsaWMvaWNvbnMvTG9hZGVyLW0uc3ZnIiwid2VicGFjazovL2UtY29tbWVyY2UvLi9wdWJsaWMvaWNvbnMvTG9hZGVyLXMuc3ZnIiwid2VicGFjazovL2UtY29tbWVyY2UvLi9zcmMvY29tcG9uZW50cy9Mb2FkZXIvTG9hZGVyLnRzeCIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4vc3JjL2NvbXBvbmVudHMvTG9hZGVyL0xvYWRlci5tb2R1bGUuc2Nzcz9lMDk0Iiwid2VicGFjazovL2UtY29tbWVyY2UvLi9zcmMvY29tcG9uZW50cy9CdXR0b24vQnV0dG9uLnRzeCIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4vcHVibGljL2ljb25zL3RyYXNoLnN2ZyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4vc3JjL3V0aWxzL2xvY2Fsc3RvcmFnZS50cyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4uL3NyYy9lcnJvcnMudHMiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uLi9zcmMvdXRpbHMvZ2xvYmFsLnRzIiwid2VicGFjazovL2UtY29tbWVyY2UvLi4vc3JjL3V0aWxzL3V0aWxzLnRzIiwid2VicGFjazovL2UtY29tbWVyY2UvLi4vc3JjL2FwaS9kZWNvcmF0b3JzLnRzIiwid2VicGFjazovL2UtY29tbWVyY2UvLi4vc3JjL3R5cGVzL292ZXJyaWRlYW5ub3RhdGlvbi50cyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4uL3NyYy9jb3JlL2F0b20udHMiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uLi9zcmMvYXBpL2JlY29tZS1vYnNlcnZlZC50cyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4uL3NyYy91dGlscy9jb21wYXJlci50cyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4uL3NyYy90eXBlcy9tb2RpZmllcnMudHMiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uLi9zcmMvdHlwZXMvYWN0aW9uYW5ub3RhdGlvbi50cyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4uL3NyYy90eXBlcy9mbG93YW5ub3RhdGlvbi50cyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4uL3NyYy90eXBlcy9jb21wdXRlZGFubm90YXRpb24udHMiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uLi9zcmMvdHlwZXMvb2JzZXJ2YWJsZWFubm90YXRpb24udHMiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uLi9zcmMvdHlwZXMvYXV0b2Fubm90YXRpb24udHMiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uLi9zcmMvYXBpL29ic2VydmFibGUudHMiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uLi9zcmMvYXBpL2V4dGVuZG9ic2VydmFibGUudHMiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uLi9zcmMvdHlwZXMvZHluYW1pY29iamVjdC50cyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4uL3NyYy9hcGkvY29tcHV0ZWQudHMiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uLi9zcmMvY29yZS9hY3Rpb24udHMiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uLi9zcmMvdHlwZXMvb2JzZXJ2YWJsZXZhbHVlLnRzIiwid2VicGFjazovL2UtY29tbWVyY2UvLi4vc3JjL2NvcmUvY29tcHV0ZWR2YWx1ZS50cyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4uL3NyYy9jb3JlL2Rlcml2YXRpb24udHMiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uLi9zcmMvY29yZS9vYnNlcnZhYmxlLnRzIiwid2VicGFjazovL2UtY29tbWVyY2UvLi4vc3JjL2FwaS9hdXRvcnVuLnRzIiwid2VicGFjazovL2UtY29tbWVyY2UvLi4vc3JjL2NvcmUvZ2xvYmFsc3RhdGUudHMiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uLi9zcmMvY29yZS9yZWFjdGlvbi50cyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4uL3NyYy9hcGkvdHJhY2UudHMiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uLi9zcmMvYXBpL2FjdGlvbi50cyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4uL3NyYy9hcGkvY29uZmlndXJlLnRzIiwid2VicGFjazovL2UtY29tbWVyY2UvLi4vc3JjL2FwaS9leHRyYXMudHMiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uLi9zcmMvYXBpL2Zsb3cudHMiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uLi9zcmMvYXBpL2lzb2JzZXJ2YWJsZS50cyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4uL3NyYy9hcGkvdHJhbnNhY3Rpb24udHMiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uLi9zcmMvdHlwZXMvaW50ZXJjZXB0LXV0aWxzLnRzIiwid2VicGFjazovL2UtY29tbWVyY2UvLi4vc3JjL3R5cGVzL2xpc3Rlbi11dGlscy50cyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4uL3NyYy9hcGkvbWFrZU9ic2VydmFibGUudHMiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uLi9zcmMvdHlwZXMvb2JzZXJ2YWJsZWFycmF5LnRzIiwid2VicGFjazovL2UtY29tbWVyY2UvLi4vc3JjL2NvcmUvc3B5LnRzIiwid2VicGFjazovL2UtY29tbWVyY2UvLi4vc3JjL3R5cGVzL29ic2VydmFibGVtYXAudHMiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uLi9zcmMvdHlwZXMvb2JzZXJ2YWJsZXNldC50cyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4uL3NyYy90eXBlcy9vYnNlcnZhYmxlb2JqZWN0LnRzIiwid2VicGFjazovL2UtY29tbWVyY2UvLi4vc3JjL3R5cGVzL2xlZ2FjeW9ic2VydmFibGVhcnJheS50cyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4uL3NyYy90eXBlcy90eXBlLXV0aWxzLnRzIiwid2VicGFjazovL2UtY29tbWVyY2UvLi4vc3JjL3V0aWxzL2VxLnRzIiwid2VicGFjazovL2UtY29tbWVyY2UvLi4vc3JjL3V0aWxzL2l0ZXJhYmxlLnRzIiwid2VicGFjazovL2UtY29tbWVyY2UvLi4vc3JjL21vYngudHMiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uL3NyYy9zdG9yZS9Sb290U3RvcmUvQ2FydFN0b3JlL0NhcnRTdG9yZS50cyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4vc3JjL3N0b3JlL1Jvb3RTdG9yZS9RdWVyeVBhcmFtc1N0b3JlL1F1ZXJ5UGFyYW1zU3RvcmUudHMiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uL3NyYy9zdG9yZS9Sb290U3RvcmUvUm9vdFN0b3JlLnRzIiwid2VicGFjazovL2UtY29tbWVyY2UvLi9zcmMvc3RvcmUvUm9vdFN0b3JlL2luc3RhbmNlLnRzIiwid2VicGFjazovL2UtY29tbWVyY2UvLi4vLi4vc3JjL3V0aWxzL2Fzc2VydEVudmlyb25tZW50LnRzIiwid2VicGFjazovL2UtY29tbWVyY2UvLi4vLi4vc3JjL3V0aWxzL29ic2VydmVyQmF0Y2hpbmcudHMiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uLi8uLi9zcmMvdXRpbHMvcHJpbnREZWJ1Z1ZhbHVlLnRzIiwid2VicGFjazovL2UtY29tbWVyY2UvLi4vLi4vc3JjL3V0aWxzL0ZpbmFsaXphdGlvblJlZ2lzdHJ5V3JhcHBlci50cyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4uLy4uL3NyYy91dGlscy9yZWFjdGlvbkNsZWFudXBUcmFja2luZ0NvbW1vbi50cyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4uLy4uL3NyYy91dGlscy9yZWFjdGlvbkNsZWFudXBUcmFja2luZy50cyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4uLy4uL3NyYy91dGlscy9jcmVhdGVSZWFjdGlvbkNsZWFudXBUcmFja2luZ1VzaW5nRmluYWxpemF0aW9uUmVnaXN0ZXIudHMiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uLi8uLi9zcmMvdXRpbHMvY3JlYXRlVGltZXJCYXNlZFJlYWN0aW9uQ2xlYW51cFRyYWNraW5nLnRzIiwid2VicGFjazovL2UtY29tbWVyY2UvLi4vc3JjL3N0YXRpY1JlbmRlcmluZy50cyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4uL3NyYy91c2VPYnNlcnZlci50cyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4uL3NyYy9vYnNlcnZlci50cyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4uL3NyYy9pbmRleC50cyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4vc3JjL2NvbXBvbmVudHMvQ2FydC9DYXJ0Lm1vZHVsZS5zY3NzPzFkZGQiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uL3NyYy9jb21wb25lbnRzL0NhcnQvQ2FydC50c3giLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uL3NyYy9jb21wb25lbnRzL01vZGFsL01vZGFsLm1vZHVsZS5zY3NzP2JkMjgiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uL3NyYy9jb21wb25lbnRzL01vZGFsL01vZGFsLnRzeCIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4vcHVibGljL2ljb25zL2JhZy5zdmciLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uL3B1YmxpYy9pY29ucy9sb2dvLnBuZyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4vcHVibGljL2ljb25zL3VzZXIuc3ZnIiwid2VicGFjazovL2UtY29tbWVyY2UvLi9zcmMvY29tcG9uZW50cy9OYXZiYXIvTmF2YmFyLm1vZHVsZS5zY3NzP2UxODYiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uL3NyYy9jb21wb25lbnRzL05hdmJhci9OYXZiYXIudHN4Iiwid2VicGFjazovL2UtY29tbWVyY2UvLi9zcmMvY29tcG9uZW50cy9DYXJkL0NhcmQudHN4Iiwid2VicGFjazovL2UtY29tbWVyY2UvLi9zcmMvdXRpbHMvbWV0YS50cyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4vc3JjL2NvbXBvbmVudHMvQ2FyZC9DYXJkLm1vZHVsZS5zY3NzPzE2MmQiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uL3NyYy9jb25maWdzL2FwaS50cyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2JpbmQuanMiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvc0Vycm9yLmpzIiwid2VicGFjazovL2UtY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvdG9Gb3JtRGF0YS5qcyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL0F4aW9zVVJMU2VhcmNoUGFyYW1zLmpzIiwid2VicGFjazovL2UtY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvYnVpbGRVUkwuanMiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9JbnRlcmNlcHRvck1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvZGVmYXVsdHMvdHJhbnNpdGlvbmFsLmpzIiwid2VicGFjazovL2UtY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3BsYXRmb3JtL2Jyb3dzZXIvY2xhc3Nlcy9VUkxTZWFyY2hQYXJhbXMuanMiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvcGxhdGZvcm0vYnJvd3Nlci9jbGFzc2VzL0Zvcm1EYXRhLmpzIiwid2VicGFjazovL2UtY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL3BsYXRmb3JtL2Jyb3dzZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9mb3JtRGF0YVRvSlNPTi5qcyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9kZWZhdWx0cy9pbmRleC5qcyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3RvVVJMRW5jb2RlZEZvcm0uanMiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvaGVscGVycy9wYXJzZUhlYWRlcnMuanMiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9BeGlvc0hlYWRlcnMuanMiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS90cmFuc2Zvcm1EYXRhLmpzIiwid2VicGFjazovL2UtY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9pc0NhbmNlbC5qcyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jYW5jZWwvQ2FuY2VsZWRFcnJvci5qcyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2Nvb2tpZXMuanMiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9idWlsZEZ1bGxQYXRoLmpzIiwid2VicGFjazovL2UtY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBYnNvbHV0ZVVSTC5qcyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzIiwid2VicGFjazovL2UtY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNVUkxTYW1lT3JpZ2luLmpzIiwid2VicGFjazovL2UtY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3BlZWRvbWV0ZXIuanMiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvYWRhcHRlcnMveGhyLmpzIiwid2VicGFjazovL2UtY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2FkYXB0ZXJzL2FkYXB0ZXJzLmpzIiwid2VicGFjazovL2UtY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvbnVsbC5qcyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL3NldHRsZS5qcyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3BhcnNlUHJvdG9jb2wuanMiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9kaXNwYXRjaFJlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uL25vZGVfbW9kdWxlcy9heGlvcy9saWIvY29yZS9tZXJnZUNvbmZpZy5qcyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9lbnYvZGF0YS5qcyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL3ZhbGlkYXRvci5qcyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9jb3JlL0F4aW9zLmpzIiwid2VicGFjazovL2UtY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2NhbmNlbC9DYW5jZWxUb2tlbi5qcyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4vbm9kZV9tb2R1bGVzL2F4aW9zL2xpYi9oZWxwZXJzL0h0dHBTdGF0dXNDb2RlLmpzIiwid2VicGFjazovL2UtY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2F4aW9zLmpzIiwid2VicGFjazovL2UtY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvc3ByZWFkLmpzIiwid2VicGFjazovL2UtY29tbWVyY2UvLi9ub2RlX21vZHVsZXMvYXhpb3MvbGliL2hlbHBlcnMvaXNBeGlvc0Vycm9yLmpzIiwid2VicGFjazovL2UtY29tbWVyY2UvLi9zcmMvc3RvcmUvUHJvZHVjdERldGFpbFN0b3JlL1Byb2R1Y3REZXRhaWxTdG9yZS50cyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4vc3JjL3BhZ2VzL1Byb2R1Y3REZXRhaWwvUHJvZHVjdERldGFpbC5tb2R1bGUuc2Nzcz9jMjMxIiwid2VicGFjazovL2UtY29tbWVyY2UvLi9zcmMvcGFnZXMvUHJvZHVjdERldGFpbC9Qcm9kdWN0RGV0YWlsLnRzeCIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4uL3NyYy91c2VMb2NhbFN0b3JlLnRzIiwid2VicGFjazovL2UtY29tbWVyY2UvLi4vc3JjL3VzZUFzT2JzZXJ2YWJsZVNvdXJjZS50cyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4vcHVibGljL2ljb25zL2ZpbHRlci5zdmciLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uL3NyYy9jb21wb25lbnRzL0Ryb3Bkb3duL0Ryb3Bkb3duLm1vZHVsZS5zY3NzPzNhMzUiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uL3NyYy9jb21wb25lbnRzL0Ryb3Bkb3duL0Ryb3Bkb3duLnRzeCIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4vc3JjL2NvbXBvbmVudHMvSW5wdXQvSW5wdXQudHN4Iiwid2VicGFjazovL2UtY29tbWVyY2UvLi9zcmMvY29tcG9uZW50cy9JbnB1dC9JbnB1dC5tb2R1bGUuc2Nzcz8zOTEwIiwid2VicGFjazovL2UtY29tbWVyY2UvLi9wdWJsaWMvaWNvbnMvc2VhcmNoLW5vcm1hbC5zdmciLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uL3NyYy9zdG9yZS9Qcm9kdWN0c1N0b3JlL1Byb2R1Y3RzU3RvcmUudHMiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uLi9ub2RlX21vZHVsZXMvdHNsaWIvdHNsaWIuZXM2LmpzIiwid2VicGFjazovL2UtY29tbWVyY2UvLi4vbm9kZV9tb2R1bGVzL3Rocm90dGxlLWRlYm91bmNlL2Rpc3QvaW5kZXguZXNtLmpzIiwid2VicGFjazovL2UtY29tbWVyY2UvLi9zcmMvcGFnZXMvUHJvZHVjdHMvUHJvZHVjdHMudHN4Iiwid2VicGFjazovL2UtY29tbWVyY2UvLi9zcmMvdXRpbHMvdXNlTG9jYWxTdG9yZS50cyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4vc3JjL3BhZ2VzL1Byb2R1Y3RzL1Byb2R1Y3RzLm1vZHVsZS5zY3NzPzkzYTMiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uL3NyYy9BcHAvQXBwLnRzeCIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4vc3JjL3N0b3JlL1Jvb3RTdG9yZS9ob29rcy91c2VRdWVyeVBhcmFtc1N0b3JlSW5pdC50cyIsIndlYnBhY2s6Ly9lLWNvbW1lcmNlLy4vc3JjL3N0b3JlL1Jvb3RTdG9yZS9ob29rcy91c2VDYXJ0U3RvcmVJbml0LnRzIiwid2VicGFjazovL2UtY29tbWVyY2UvLi9zcmMvY29uZmlncy9yb3V0ZXMudHMiLCJ3ZWJwYWNrOi8vZS1jb21tZXJjZS8uL3NyYy9pbmRleC50c3giXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mID8gKG9iaikgPT4gKE9iamVjdC5nZXRQcm90b3R5cGVPZihvYmopKSA6IChvYmopID0+IChvYmouX19wcm90b19fKTtcbnZhciBsZWFmUHJvdG90eXBlcztcbi8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuLy8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4vLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbi8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuLy8gbW9kZSAmIDE2OiByZXR1cm4gdmFsdWUgd2hlbiBpdCdzIFByb21pc2UtbGlrZVxuLy8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuX193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcblx0aWYobW9kZSAmIDEpIHZhbHVlID0gdGhpcyh2YWx1ZSk7XG5cdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG5cdGlmKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgJiYgdmFsdWUpIHtcblx0XHRpZigobW9kZSAmIDQpICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcblx0XHRpZigobW9kZSAmIDE2KSAmJiB0eXBlb2YgdmFsdWUudGhlbiA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHZhbHVlO1xuXHR9XG5cdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG5cdHZhciBkZWYgPSB7fTtcblx0bGVhZlByb3RvdHlwZXMgPSBsZWFmUHJvdG90eXBlcyB8fCBbbnVsbCwgZ2V0UHJvdG8oe30pLCBnZXRQcm90byhbXSksIGdldFByb3RvKGdldFByb3RvKV07XG5cdGZvcih2YXIgY3VycmVudCA9IG1vZGUgJiAyICYmIHZhbHVlOyB0eXBlb2YgY3VycmVudCA9PSAnb2JqZWN0JyAmJiAhfmxlYWZQcm90b3R5cGVzLmluZGV4T2YoY3VycmVudCk7IGN1cnJlbnQgPSBnZXRQcm90byhjdXJyZW50KSkge1xuXHRcdE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGN1cnJlbnQpLmZvckVhY2goKGtleSkgPT4gKGRlZltrZXldID0gKCkgPT4gKHZhbHVlW2tleV0pKSk7XG5cdH1cblx0ZGVmWydkZWZhdWx0J10gPSAoKSA9PiAodmFsdWUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGRlZik7XG5cdHJldHVybiBucztcbn07IiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgR2V0SW50cmluc2ljID0gcmVxdWlyZSgnZ2V0LWludHJpbnNpYycpO1xuXG52YXIgY2FsbEJpbmQgPSByZXF1aXJlKCcuLycpO1xuXG52YXIgJGluZGV4T2YgPSBjYWxsQmluZChHZXRJbnRyaW5zaWMoJ1N0cmluZy5wcm90b3R5cGUuaW5kZXhPZicpKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjYWxsQm91bmRJbnRyaW5zaWMobmFtZSwgYWxsb3dNaXNzaW5nKSB7XG5cdHZhciBpbnRyaW5zaWMgPSBHZXRJbnRyaW5zaWMobmFtZSwgISFhbGxvd01pc3NpbmcpO1xuXHRpZiAodHlwZW9mIGludHJpbnNpYyA9PT0gJ2Z1bmN0aW9uJyAmJiAkaW5kZXhPZihuYW1lLCAnLnByb3RvdHlwZS4nKSA+IC0xKSB7XG5cdFx0cmV0dXJuIGNhbGxCaW5kKGludHJpbnNpYyk7XG5cdH1cblx0cmV0dXJuIGludHJpbnNpYztcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBiaW5kID0gcmVxdWlyZSgnZnVuY3Rpb24tYmluZCcpO1xudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJ2dldC1pbnRyaW5zaWMnKTtcblxudmFyICRhcHBseSA9IEdldEludHJpbnNpYygnJUZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseSUnKTtcbnZhciAkY2FsbCA9IEdldEludHJpbnNpYygnJUZ1bmN0aW9uLnByb3RvdHlwZS5jYWxsJScpO1xudmFyICRyZWZsZWN0QXBwbHkgPSBHZXRJbnRyaW5zaWMoJyVSZWZsZWN0LmFwcGx5JScsIHRydWUpIHx8IGJpbmQuY2FsbCgkY2FsbCwgJGFwcGx5KTtcblxudmFyICRnT1BEID0gR2V0SW50cmluc2ljKCclT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciUnLCB0cnVlKTtcbnZhciAkZGVmaW5lUHJvcGVydHkgPSBHZXRJbnRyaW5zaWMoJyVPYmplY3QuZGVmaW5lUHJvcGVydHklJywgdHJ1ZSk7XG52YXIgJG1heCA9IEdldEludHJpbnNpYygnJU1hdGgubWF4JScpO1xuXG5pZiAoJGRlZmluZVByb3BlcnR5KSB7XG5cdHRyeSB7XG5cdFx0JGRlZmluZVByb3BlcnR5KHt9LCAnYScsIHsgdmFsdWU6IDEgfSk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHQvLyBJRSA4IGhhcyBhIGJyb2tlbiBkZWZpbmVQcm9wZXJ0eVxuXHRcdCRkZWZpbmVQcm9wZXJ0eSA9IG51bGw7XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBjYWxsQmluZChvcmlnaW5hbEZ1bmN0aW9uKSB7XG5cdHZhciBmdW5jID0gJHJlZmxlY3RBcHBseShiaW5kLCAkY2FsbCwgYXJndW1lbnRzKTtcblx0aWYgKCRnT1BEICYmICRkZWZpbmVQcm9wZXJ0eSkge1xuXHRcdHZhciBkZXNjID0gJGdPUEQoZnVuYywgJ2xlbmd0aCcpO1xuXHRcdGlmIChkZXNjLmNvbmZpZ3VyYWJsZSkge1xuXHRcdFx0Ly8gb3JpZ2luYWwgbGVuZ3RoLCBwbHVzIHRoZSByZWNlaXZlciwgbWludXMgYW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIChhZnRlciB0aGUgcmVjZWl2ZXIpXG5cdFx0XHQkZGVmaW5lUHJvcGVydHkoXG5cdFx0XHRcdGZ1bmMsXG5cdFx0XHRcdCdsZW5ndGgnLFxuXHRcdFx0XHR7IHZhbHVlOiAxICsgJG1heCgwLCBvcmlnaW5hbEZ1bmN0aW9uLmxlbmd0aCAtIChhcmd1bWVudHMubGVuZ3RoIC0gMSkpIH1cblx0XHRcdCk7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBmdW5jO1xufTtcblxudmFyIGFwcGx5QmluZCA9IGZ1bmN0aW9uIGFwcGx5QmluZCgpIHtcblx0cmV0dXJuICRyZWZsZWN0QXBwbHkoYmluZCwgJGFwcGx5LCBhcmd1bWVudHMpO1xufTtcblxuaWYgKCRkZWZpbmVQcm9wZXJ0eSkge1xuXHQkZGVmaW5lUHJvcGVydHkobW9kdWxlLmV4cG9ydHMsICdhcHBseScsIHsgdmFsdWU6IGFwcGx5QmluZCB9KTtcbn0gZWxzZSB7XG5cdG1vZHVsZS5leHBvcnRzLmFwcGx5ID0gYXBwbHlCaW5kO1xufVxuIiwiLyohXG5cdENvcHlyaWdodCAoYykgMjAxOCBKZWQgV2F0c29uLlxuXHRMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UgKE1JVCksIHNlZVxuXHRodHRwOi8vamVkd2F0c29uLmdpdGh1Yi5pby9jbGFzc25hbWVzXG4qL1xuLyogZ2xvYmFsIGRlZmluZSAqL1xuXG4oZnVuY3Rpb24gKCkge1xuXHQndXNlIHN0cmljdCc7XG5cblx0dmFyIGhhc093biA9IHt9Lmhhc093blByb3BlcnR5O1xuXHR2YXIgbmF0aXZlQ29kZVN0cmluZyA9ICdbbmF0aXZlIGNvZGVdJztcblxuXHRmdW5jdGlvbiBjbGFzc05hbWVzKCkge1xuXHRcdHZhciBjbGFzc2VzID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGFyZyA9IGFyZ3VtZW50c1tpXTtcblx0XHRcdGlmICghYXJnKSBjb250aW51ZTtcblxuXHRcdFx0dmFyIGFyZ1R5cGUgPSB0eXBlb2YgYXJnO1xuXG5cdFx0XHRpZiAoYXJnVHlwZSA9PT0gJ3N0cmluZycgfHwgYXJnVHlwZSA9PT0gJ251bWJlcicpIHtcblx0XHRcdFx0Y2xhc3Nlcy5wdXNoKGFyZyk7XG5cdFx0XHR9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoYXJnKSkge1xuXHRcdFx0XHRpZiAoYXJnLmxlbmd0aCkge1xuXHRcdFx0XHRcdHZhciBpbm5lciA9IGNsYXNzTmFtZXMuYXBwbHkobnVsbCwgYXJnKTtcblx0XHRcdFx0XHRpZiAoaW5uZXIpIHtcblx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChpbm5lcik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKGFyZ1R5cGUgPT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdGlmIChhcmcudG9TdHJpbmcgIT09IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcgJiYgIWFyZy50b1N0cmluZy50b1N0cmluZygpLmluY2x1ZGVzKCdbbmF0aXZlIGNvZGVdJykpIHtcblx0XHRcdFx0XHRjbGFzc2VzLnB1c2goYXJnLnRvU3RyaW5nKCkpO1xuXHRcdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Zm9yICh2YXIga2V5IGluIGFyZykge1xuXHRcdFx0XHRcdGlmIChoYXNPd24uY2FsbChhcmcsIGtleSkgJiYgYXJnW2tleV0pIHtcblx0XHRcdFx0XHRcdGNsYXNzZXMucHVzaChrZXkpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjbGFzc2VzLmpvaW4oJyAnKTtcblx0fVxuXG5cdGlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyAmJiBtb2R1bGUuZXhwb3J0cykge1xuXHRcdGNsYXNzTmFtZXMuZGVmYXVsdCA9IGNsYXNzTmFtZXM7XG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBjbGFzc05hbWVzO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGRlZmluZS5hbWQgPT09ICdvYmplY3QnICYmIGRlZmluZS5hbWQpIHtcblx0XHQvLyByZWdpc3RlciBhcyAnY2xhc3NuYW1lcycsIGNvbnNpc3RlbnQgd2l0aCBucG0gcGFja2FnZSBuYW1lXG5cdFx0ZGVmaW5lKCdjbGFzc25hbWVzJywgW10sIGZ1bmN0aW9uICgpIHtcblx0XHRcdHJldHVybiBjbGFzc05hbWVzO1xuXHRcdH0pO1xuXHR9IGVsc2Uge1xuXHRcdHdpbmRvdy5jbGFzc05hbWVzID0gY2xhc3NOYW1lcztcblx0fVxufSgpKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyogZXNsaW50IG5vLWludmFsaWQtdGhpczogMSAqL1xuXG52YXIgRVJST1JfTUVTU0FHRSA9ICdGdW5jdGlvbi5wcm90b3R5cGUuYmluZCBjYWxsZWQgb24gaW5jb21wYXRpYmxlICc7XG52YXIgc2xpY2UgPSBBcnJheS5wcm90b3R5cGUuc2xpY2U7XG52YXIgdG9TdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGZ1bmNUeXBlID0gJ1tvYmplY3QgRnVuY3Rpb25dJztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBiaW5kKHRoYXQpIHtcbiAgICB2YXIgdGFyZ2V0ID0gdGhpcztcbiAgICBpZiAodHlwZW9mIHRhcmdldCAhPT0gJ2Z1bmN0aW9uJyB8fCB0b1N0ci5jYWxsKHRhcmdldCkgIT09IGZ1bmNUeXBlKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRVJST1JfTUVTU0FHRSArIHRhcmdldCk7XG4gICAgfVxuICAgIHZhciBhcmdzID0gc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpO1xuXG4gICAgdmFyIGJvdW5kO1xuICAgIHZhciBiaW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzIGluc3RhbmNlb2YgYm91bmQpIHtcbiAgICAgICAgICAgIHZhciByZXN1bHQgPSB0YXJnZXQuYXBwbHkoXG4gICAgICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgICAgICBhcmdzLmNvbmNhdChzbGljZS5jYWxsKGFyZ3VtZW50cykpXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKE9iamVjdChyZXN1bHQpID09PSByZXN1bHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGFyZ2V0LmFwcGx5KFxuICAgICAgICAgICAgICAgIHRoYXQsXG4gICAgICAgICAgICAgICAgYXJncy5jb25jYXQoc2xpY2UuY2FsbChhcmd1bWVudHMpKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgYm91bmRMZW5ndGggPSBNYXRoLm1heCgwLCB0YXJnZXQubGVuZ3RoIC0gYXJncy5sZW5ndGgpO1xuICAgIHZhciBib3VuZEFyZ3MgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGJvdW5kTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYm91bmRBcmdzLnB1c2goJyQnICsgaSk7XG4gICAgfVxuXG4gICAgYm91bmQgPSBGdW5jdGlvbignYmluZGVyJywgJ3JldHVybiBmdW5jdGlvbiAoJyArIGJvdW5kQXJncy5qb2luKCcsJykgKyAnKXsgcmV0dXJuIGJpbmRlci5hcHBseSh0aGlzLGFyZ3VtZW50cyk7IH0nKShiaW5kZXIpO1xuXG4gICAgaWYgKHRhcmdldC5wcm90b3R5cGUpIHtcbiAgICAgICAgdmFyIEVtcHR5ID0gZnVuY3Rpb24gRW1wdHkoKSB7fTtcbiAgICAgICAgRW1wdHkucHJvdG90eXBlID0gdGFyZ2V0LnByb3RvdHlwZTtcbiAgICAgICAgYm91bmQucHJvdG90eXBlID0gbmV3IEVtcHR5KCk7XG4gICAgICAgIEVtcHR5LnByb3RvdHlwZSA9IG51bGw7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJvdW5kO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGltcGxlbWVudGF0aW9uID0gcmVxdWlyZSgnLi9pbXBsZW1lbnRhdGlvbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEZ1bmN0aW9uLnByb3RvdHlwZS5iaW5kIHx8IGltcGxlbWVudGF0aW9uO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgdW5kZWZpbmVkO1xuXG52YXIgJFN5bnRheEVycm9yID0gU3ludGF4RXJyb3I7XG52YXIgJEZ1bmN0aW9uID0gRnVuY3Rpb247XG52YXIgJFR5cGVFcnJvciA9IFR5cGVFcnJvcjtcblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG52YXIgZ2V0RXZhbGxlZENvbnN0cnVjdG9yID0gZnVuY3Rpb24gKGV4cHJlc3Npb25TeW50YXgpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gJEZ1bmN0aW9uKCdcInVzZSBzdHJpY3RcIjsgcmV0dXJuICgnICsgZXhwcmVzc2lvblN5bnRheCArICcpLmNvbnN0cnVjdG9yOycpKCk7XG5cdH0gY2F0Y2ggKGUpIHt9XG59O1xuXG52YXIgJGdPUEQgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuaWYgKCRnT1BEKSB7XG5cdHRyeSB7XG5cdFx0JGdPUEQoe30sICcnKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdCRnT1BEID0gbnVsbDsgLy8gdGhpcyBpcyBJRSA4LCB3aGljaCBoYXMgYSBicm9rZW4gZ09QRFxuXHR9XG59XG5cbnZhciB0aHJvd1R5cGVFcnJvciA9IGZ1bmN0aW9uICgpIHtcblx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoKTtcbn07XG52YXIgVGhyb3dUeXBlRXJyb3IgPSAkZ09QRFxuXHQ/IChmdW5jdGlvbiAoKSB7XG5cdFx0dHJ5IHtcblx0XHRcdC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtZXhwcmVzc2lvbnMsIG5vLWNhbGxlciwgbm8tcmVzdHJpY3RlZC1wcm9wZXJ0aWVzXG5cdFx0XHRhcmd1bWVudHMuY2FsbGVlOyAvLyBJRSA4IGRvZXMgbm90IHRocm93IGhlcmVcblx0XHRcdHJldHVybiB0aHJvd1R5cGVFcnJvcjtcblx0XHR9IGNhdGNoIChjYWxsZWVUaHJvd3MpIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdC8vIElFIDggdGhyb3dzIG9uIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYXJndW1lbnRzLCAnJylcblx0XHRcdFx0cmV0dXJuICRnT1BEKGFyZ3VtZW50cywgJ2NhbGxlZScpLmdldDtcblx0XHRcdH0gY2F0Y2ggKGdPUER0aHJvd3MpIHtcblx0XHRcdFx0cmV0dXJuIHRocm93VHlwZUVycm9yO1xuXHRcdFx0fVxuXHRcdH1cblx0fSgpKVxuXHQ6IHRocm93VHlwZUVycm9yO1xuXG52YXIgaGFzU3ltYm9scyA9IHJlcXVpcmUoJ2hhcy1zeW1ib2xzJykoKTtcblxudmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uICh4KSB7IHJldHVybiB4Ll9fcHJvdG9fXzsgfTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wcm90b1xuXG52YXIgbmVlZHNFdmFsID0ge307XG5cbnZhciBUeXBlZEFycmF5ID0gdHlwZW9mIFVpbnQ4QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogZ2V0UHJvdG8oVWludDhBcnJheSk7XG5cbnZhciBJTlRSSU5TSUNTID0ge1xuXHQnJUFnZ3JlZ2F0ZUVycm9yJSc6IHR5cGVvZiBBZ2dyZWdhdGVFcnJvciA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBBZ2dyZWdhdGVFcnJvcixcblx0JyVBcnJheSUnOiBBcnJheSxcblx0JyVBcnJheUJ1ZmZlciUnOiB0eXBlb2YgQXJyYXlCdWZmZXIgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogQXJyYXlCdWZmZXIsXG5cdCclQXJyYXlJdGVyYXRvclByb3RvdHlwZSUnOiBoYXNTeW1ib2xzID8gZ2V0UHJvdG8oW11bU3ltYm9sLml0ZXJhdG9yXSgpKSA6IHVuZGVmaW5lZCxcblx0JyVBc3luY0Zyb21TeW5jSXRlcmF0b3JQcm90b3R5cGUlJzogdW5kZWZpbmVkLFxuXHQnJUFzeW5jRnVuY3Rpb24lJzogbmVlZHNFdmFsLFxuXHQnJUFzeW5jR2VuZXJhdG9yJSc6IG5lZWRzRXZhbCxcblx0JyVBc3luY0dlbmVyYXRvckZ1bmN0aW9uJSc6IG5lZWRzRXZhbCxcblx0JyVBc3luY0l0ZXJhdG9yUHJvdG90eXBlJSc6IG5lZWRzRXZhbCxcblx0JyVBdG9taWNzJSc6IHR5cGVvZiBBdG9taWNzID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEF0b21pY3MsXG5cdCclQmlnSW50JSc6IHR5cGVvZiBCaWdJbnQgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogQmlnSW50LFxuXHQnJUJpZ0ludDY0QXJyYXklJzogdHlwZW9mIEJpZ0ludDY0QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogQmlnSW50NjRBcnJheSxcblx0JyVCaWdVaW50NjRBcnJheSUnOiB0eXBlb2YgQmlnVWludDY0QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogQmlnVWludDY0QXJyYXksXG5cdCclQm9vbGVhbiUnOiBCb29sZWFuLFxuXHQnJURhdGFWaWV3JSc6IHR5cGVvZiBEYXRhVmlldyA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBEYXRhVmlldyxcblx0JyVEYXRlJSc6IERhdGUsXG5cdCclZGVjb2RlVVJJJSc6IGRlY29kZVVSSSxcblx0JyVkZWNvZGVVUklDb21wb25lbnQlJzogZGVjb2RlVVJJQ29tcG9uZW50LFxuXHQnJWVuY29kZVVSSSUnOiBlbmNvZGVVUkksXG5cdCclZW5jb2RlVVJJQ29tcG9uZW50JSc6IGVuY29kZVVSSUNvbXBvbmVudCxcblx0JyVFcnJvciUnOiBFcnJvcixcblx0JyVldmFsJSc6IGV2YWwsIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZXZhbFxuXHQnJUV2YWxFcnJvciUnOiBFdmFsRXJyb3IsXG5cdCclRmxvYXQzMkFycmF5JSc6IHR5cGVvZiBGbG9hdDMyQXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogRmxvYXQzMkFycmF5LFxuXHQnJUZsb2F0NjRBcnJheSUnOiB0eXBlb2YgRmxvYXQ2NEFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IEZsb2F0NjRBcnJheSxcblx0JyVGaW5hbGl6YXRpb25SZWdpc3RyeSUnOiB0eXBlb2YgRmluYWxpemF0aW9uUmVnaXN0cnkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogRmluYWxpemF0aW9uUmVnaXN0cnksXG5cdCclRnVuY3Rpb24lJzogJEZ1bmN0aW9uLFxuXHQnJUdlbmVyYXRvckZ1bmN0aW9uJSc6IG5lZWRzRXZhbCxcblx0JyVJbnQ4QXJyYXklJzogdHlwZW9mIEludDhBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBJbnQ4QXJyYXksXG5cdCclSW50MTZBcnJheSUnOiB0eXBlb2YgSW50MTZBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBJbnQxNkFycmF5LFxuXHQnJUludDMyQXJyYXklJzogdHlwZW9mIEludDMyQXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogSW50MzJBcnJheSxcblx0JyVpc0Zpbml0ZSUnOiBpc0Zpbml0ZSxcblx0JyVpc05hTiUnOiBpc05hTixcblx0JyVJdGVyYXRvclByb3RvdHlwZSUnOiBoYXNTeW1ib2xzID8gZ2V0UHJvdG8oZ2V0UHJvdG8oW11bU3ltYm9sLml0ZXJhdG9yXSgpKSkgOiB1bmRlZmluZWQsXG5cdCclSlNPTiUnOiB0eXBlb2YgSlNPTiA9PT0gJ29iamVjdCcgPyBKU09OIDogdW5kZWZpbmVkLFxuXHQnJU1hcCUnOiB0eXBlb2YgTWFwID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IE1hcCxcblx0JyVNYXBJdGVyYXRvclByb3RvdHlwZSUnOiB0eXBlb2YgTWFwID09PSAndW5kZWZpbmVkJyB8fCAhaGFzU3ltYm9scyA/IHVuZGVmaW5lZCA6IGdldFByb3RvKG5ldyBNYXAoKVtTeW1ib2wuaXRlcmF0b3JdKCkpLFxuXHQnJU1hdGglJzogTWF0aCxcblx0JyVOdW1iZXIlJzogTnVtYmVyLFxuXHQnJU9iamVjdCUnOiBPYmplY3QsXG5cdCclcGFyc2VGbG9hdCUnOiBwYXJzZUZsb2F0LFxuXHQnJXBhcnNlSW50JSc6IHBhcnNlSW50LFxuXHQnJVByb21pc2UlJzogdHlwZW9mIFByb21pc2UgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogUHJvbWlzZSxcblx0JyVQcm94eSUnOiB0eXBlb2YgUHJveHkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogUHJveHksXG5cdCclUmFuZ2VFcnJvciUnOiBSYW5nZUVycm9yLFxuXHQnJVJlZmVyZW5jZUVycm9yJSc6IFJlZmVyZW5jZUVycm9yLFxuXHQnJVJlZmxlY3QlJzogdHlwZW9mIFJlZmxlY3QgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogUmVmbGVjdCxcblx0JyVSZWdFeHAlJzogUmVnRXhwLFxuXHQnJVNldCUnOiB0eXBlb2YgU2V0ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFNldCxcblx0JyVTZXRJdGVyYXRvclByb3RvdHlwZSUnOiB0eXBlb2YgU2V0ID09PSAndW5kZWZpbmVkJyB8fCAhaGFzU3ltYm9scyA/IHVuZGVmaW5lZCA6IGdldFByb3RvKG5ldyBTZXQoKVtTeW1ib2wuaXRlcmF0b3JdKCkpLFxuXHQnJVNoYXJlZEFycmF5QnVmZmVyJSc6IHR5cGVvZiBTaGFyZWRBcnJheUJ1ZmZlciA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBTaGFyZWRBcnJheUJ1ZmZlcixcblx0JyVTdHJpbmclJzogU3RyaW5nLFxuXHQnJVN0cmluZ0l0ZXJhdG9yUHJvdG90eXBlJSc6IGhhc1N5bWJvbHMgPyBnZXRQcm90bygnJ1tTeW1ib2wuaXRlcmF0b3JdKCkpIDogdW5kZWZpbmVkLFxuXHQnJVN5bWJvbCUnOiBoYXNTeW1ib2xzID8gU3ltYm9sIDogdW5kZWZpbmVkLFxuXHQnJVN5bnRheEVycm9yJSc6ICRTeW50YXhFcnJvcixcblx0JyVUaHJvd1R5cGVFcnJvciUnOiBUaHJvd1R5cGVFcnJvcixcblx0JyVUeXBlZEFycmF5JSc6IFR5cGVkQXJyYXksXG5cdCclVHlwZUVycm9yJSc6ICRUeXBlRXJyb3IsXG5cdCclVWludDhBcnJheSUnOiB0eXBlb2YgVWludDhBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBVaW50OEFycmF5LFxuXHQnJVVpbnQ4Q2xhbXBlZEFycmF5JSc6IHR5cGVvZiBVaW50OENsYW1wZWRBcnJheSA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBVaW50OENsYW1wZWRBcnJheSxcblx0JyVVaW50MTZBcnJheSUnOiB0eXBlb2YgVWludDE2QXJyYXkgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogVWludDE2QXJyYXksXG5cdCclVWludDMyQXJyYXklJzogdHlwZW9mIFVpbnQzMkFycmF5ID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFVpbnQzMkFycmF5LFxuXHQnJVVSSUVycm9yJSc6IFVSSUVycm9yLFxuXHQnJVdlYWtNYXAlJzogdHlwZW9mIFdlYWtNYXAgPT09ICd1bmRlZmluZWQnID8gdW5kZWZpbmVkIDogV2Vha01hcCxcblx0JyVXZWFrUmVmJSc6IHR5cGVvZiBXZWFrUmVmID09PSAndW5kZWZpbmVkJyA/IHVuZGVmaW5lZCA6IFdlYWtSZWYsXG5cdCclV2Vha1NldCUnOiB0eXBlb2YgV2Vha1NldCA9PT0gJ3VuZGVmaW5lZCcgPyB1bmRlZmluZWQgOiBXZWFrU2V0XG59O1xuXG50cnkge1xuXHRudWxsLmVycm9yOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXVudXNlZC1leHByZXNzaW9uc1xufSBjYXRjaCAoZSkge1xuXHQvLyBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1zaGFkb3dyZWFsbS9wdWxsLzM4NCNpc3N1ZWNvbW1lbnQtMTM2NDI2NDIyOVxuXHR2YXIgZXJyb3JQcm90byA9IGdldFByb3RvKGdldFByb3RvKGUpKTtcblx0SU5UUklOU0lDU1snJUVycm9yLnByb3RvdHlwZSUnXSA9IGVycm9yUHJvdG87XG59XG5cbnZhciBkb0V2YWwgPSBmdW5jdGlvbiBkb0V2YWwobmFtZSkge1xuXHR2YXIgdmFsdWU7XG5cdGlmIChuYW1lID09PSAnJUFzeW5jRnVuY3Rpb24lJykge1xuXHRcdHZhbHVlID0gZ2V0RXZhbGxlZENvbnN0cnVjdG9yKCdhc3luYyBmdW5jdGlvbiAoKSB7fScpO1xuXHR9IGVsc2UgaWYgKG5hbWUgPT09ICclR2VuZXJhdG9yRnVuY3Rpb24lJykge1xuXHRcdHZhbHVlID0gZ2V0RXZhbGxlZENvbnN0cnVjdG9yKCdmdW5jdGlvbiogKCkge30nKTtcblx0fSBlbHNlIGlmIChuYW1lID09PSAnJUFzeW5jR2VuZXJhdG9yRnVuY3Rpb24lJykge1xuXHRcdHZhbHVlID0gZ2V0RXZhbGxlZENvbnN0cnVjdG9yKCdhc3luYyBmdW5jdGlvbiogKCkge30nKTtcblx0fSBlbHNlIGlmIChuYW1lID09PSAnJUFzeW5jR2VuZXJhdG9yJScpIHtcblx0XHR2YXIgZm4gPSBkb0V2YWwoJyVBc3luY0dlbmVyYXRvckZ1bmN0aW9uJScpO1xuXHRcdGlmIChmbikge1xuXHRcdFx0dmFsdWUgPSBmbi5wcm90b3R5cGU7XG5cdFx0fVxuXHR9IGVsc2UgaWYgKG5hbWUgPT09ICclQXN5bmNJdGVyYXRvclByb3RvdHlwZSUnKSB7XG5cdFx0dmFyIGdlbiA9IGRvRXZhbCgnJUFzeW5jR2VuZXJhdG9yJScpO1xuXHRcdGlmIChnZW4pIHtcblx0XHRcdHZhbHVlID0gZ2V0UHJvdG8oZ2VuLnByb3RvdHlwZSk7XG5cdFx0fVxuXHR9XG5cblx0SU5UUklOU0lDU1tuYW1lXSA9IHZhbHVlO1xuXG5cdHJldHVybiB2YWx1ZTtcbn07XG5cbnZhciBMRUdBQ1lfQUxJQVNFUyA9IHtcblx0JyVBcnJheUJ1ZmZlclByb3RvdHlwZSUnOiBbJ0FycmF5QnVmZmVyJywgJ3Byb3RvdHlwZSddLFxuXHQnJUFycmF5UHJvdG90eXBlJSc6IFsnQXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclQXJyYXlQcm90b19lbnRyaWVzJSc6IFsnQXJyYXknLCAncHJvdG90eXBlJywgJ2VudHJpZXMnXSxcblx0JyVBcnJheVByb3RvX2ZvckVhY2glJzogWydBcnJheScsICdwcm90b3R5cGUnLCAnZm9yRWFjaCddLFxuXHQnJUFycmF5UHJvdG9fa2V5cyUnOiBbJ0FycmF5JywgJ3Byb3RvdHlwZScsICdrZXlzJ10sXG5cdCclQXJyYXlQcm90b192YWx1ZXMlJzogWydBcnJheScsICdwcm90b3R5cGUnLCAndmFsdWVzJ10sXG5cdCclQXN5bmNGdW5jdGlvblByb3RvdHlwZSUnOiBbJ0FzeW5jRnVuY3Rpb24nLCAncHJvdG90eXBlJ10sXG5cdCclQXN5bmNHZW5lcmF0b3IlJzogWydBc3luY0dlbmVyYXRvckZ1bmN0aW9uJywgJ3Byb3RvdHlwZSddLFxuXHQnJUFzeW5jR2VuZXJhdG9yUHJvdG90eXBlJSc6IFsnQXN5bmNHZW5lcmF0b3JGdW5jdGlvbicsICdwcm90b3R5cGUnLCAncHJvdG90eXBlJ10sXG5cdCclQm9vbGVhblByb3RvdHlwZSUnOiBbJ0Jvb2xlYW4nLCAncHJvdG90eXBlJ10sXG5cdCclRGF0YVZpZXdQcm90b3R5cGUlJzogWydEYXRhVmlldycsICdwcm90b3R5cGUnXSxcblx0JyVEYXRlUHJvdG90eXBlJSc6IFsnRGF0ZScsICdwcm90b3R5cGUnXSxcblx0JyVFcnJvclByb3RvdHlwZSUnOiBbJ0Vycm9yJywgJ3Byb3RvdHlwZSddLFxuXHQnJUV2YWxFcnJvclByb3RvdHlwZSUnOiBbJ0V2YWxFcnJvcicsICdwcm90b3R5cGUnXSxcblx0JyVGbG9hdDMyQXJyYXlQcm90b3R5cGUlJzogWydGbG9hdDMyQXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclRmxvYXQ2NEFycmF5UHJvdG90eXBlJSc6IFsnRmxvYXQ2NEFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJUZ1bmN0aW9uUHJvdG90eXBlJSc6IFsnRnVuY3Rpb24nLCAncHJvdG90eXBlJ10sXG5cdCclR2VuZXJhdG9yJSc6IFsnR2VuZXJhdG9yRnVuY3Rpb24nLCAncHJvdG90eXBlJ10sXG5cdCclR2VuZXJhdG9yUHJvdG90eXBlJSc6IFsnR2VuZXJhdG9yRnVuY3Rpb24nLCAncHJvdG90eXBlJywgJ3Byb3RvdHlwZSddLFxuXHQnJUludDhBcnJheVByb3RvdHlwZSUnOiBbJ0ludDhBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVJbnQxNkFycmF5UHJvdG90eXBlJSc6IFsnSW50MTZBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVJbnQzMkFycmF5UHJvdG90eXBlJSc6IFsnSW50MzJBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVKU09OUGFyc2UlJzogWydKU09OJywgJ3BhcnNlJ10sXG5cdCclSlNPTlN0cmluZ2lmeSUnOiBbJ0pTT04nLCAnc3RyaW5naWZ5J10sXG5cdCclTWFwUHJvdG90eXBlJSc6IFsnTWFwJywgJ3Byb3RvdHlwZSddLFxuXHQnJU51bWJlclByb3RvdHlwZSUnOiBbJ051bWJlcicsICdwcm90b3R5cGUnXSxcblx0JyVPYmplY3RQcm90b3R5cGUlJzogWydPYmplY3QnLCAncHJvdG90eXBlJ10sXG5cdCclT2JqUHJvdG9fdG9TdHJpbmclJzogWydPYmplY3QnLCAncHJvdG90eXBlJywgJ3RvU3RyaW5nJ10sXG5cdCclT2JqUHJvdG9fdmFsdWVPZiUnOiBbJ09iamVjdCcsICdwcm90b3R5cGUnLCAndmFsdWVPZiddLFxuXHQnJVByb21pc2VQcm90b3R5cGUlJzogWydQcm9taXNlJywgJ3Byb3RvdHlwZSddLFxuXHQnJVByb21pc2VQcm90b190aGVuJSc6IFsnUHJvbWlzZScsICdwcm90b3R5cGUnLCAndGhlbiddLFxuXHQnJVByb21pc2VfYWxsJSc6IFsnUHJvbWlzZScsICdhbGwnXSxcblx0JyVQcm9taXNlX3JlamVjdCUnOiBbJ1Byb21pc2UnLCAncmVqZWN0J10sXG5cdCclUHJvbWlzZV9yZXNvbHZlJSc6IFsnUHJvbWlzZScsICdyZXNvbHZlJ10sXG5cdCclUmFuZ2VFcnJvclByb3RvdHlwZSUnOiBbJ1JhbmdlRXJyb3InLCAncHJvdG90eXBlJ10sXG5cdCclUmVmZXJlbmNlRXJyb3JQcm90b3R5cGUlJzogWydSZWZlcmVuY2VFcnJvcicsICdwcm90b3R5cGUnXSxcblx0JyVSZWdFeHBQcm90b3R5cGUlJzogWydSZWdFeHAnLCAncHJvdG90eXBlJ10sXG5cdCclU2V0UHJvdG90eXBlJSc6IFsnU2V0JywgJ3Byb3RvdHlwZSddLFxuXHQnJVNoYXJlZEFycmF5QnVmZmVyUHJvdG90eXBlJSc6IFsnU2hhcmVkQXJyYXlCdWZmZXInLCAncHJvdG90eXBlJ10sXG5cdCclU3RyaW5nUHJvdG90eXBlJSc6IFsnU3RyaW5nJywgJ3Byb3RvdHlwZSddLFxuXHQnJVN5bWJvbFByb3RvdHlwZSUnOiBbJ1N5bWJvbCcsICdwcm90b3R5cGUnXSxcblx0JyVTeW50YXhFcnJvclByb3RvdHlwZSUnOiBbJ1N5bnRheEVycm9yJywgJ3Byb3RvdHlwZSddLFxuXHQnJVR5cGVkQXJyYXlQcm90b3R5cGUlJzogWydUeXBlZEFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJVR5cGVFcnJvclByb3RvdHlwZSUnOiBbJ1R5cGVFcnJvcicsICdwcm90b3R5cGUnXSxcblx0JyVVaW50OEFycmF5UHJvdG90eXBlJSc6IFsnVWludDhBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVVaW50OENsYW1wZWRBcnJheVByb3RvdHlwZSUnOiBbJ1VpbnQ4Q2xhbXBlZEFycmF5JywgJ3Byb3RvdHlwZSddLFxuXHQnJVVpbnQxNkFycmF5UHJvdG90eXBlJSc6IFsnVWludDE2QXJyYXknLCAncHJvdG90eXBlJ10sXG5cdCclVWludDMyQXJyYXlQcm90b3R5cGUlJzogWydVaW50MzJBcnJheScsICdwcm90b3R5cGUnXSxcblx0JyVVUklFcnJvclByb3RvdHlwZSUnOiBbJ1VSSUVycm9yJywgJ3Byb3RvdHlwZSddLFxuXHQnJVdlYWtNYXBQcm90b3R5cGUlJzogWydXZWFrTWFwJywgJ3Byb3RvdHlwZSddLFxuXHQnJVdlYWtTZXRQcm90b3R5cGUlJzogWydXZWFrU2V0JywgJ3Byb3RvdHlwZSddXG59O1xuXG52YXIgYmluZCA9IHJlcXVpcmUoJ2Z1bmN0aW9uLWJpbmQnKTtcbnZhciBoYXNPd24gPSByZXF1aXJlKCdoYXMnKTtcbnZhciAkY29uY2F0ID0gYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsIEFycmF5LnByb3RvdHlwZS5jb25jYXQpO1xudmFyICRzcGxpY2VBcHBseSA9IGJpbmQuY2FsbChGdW5jdGlvbi5hcHBseSwgQXJyYXkucHJvdG90eXBlLnNwbGljZSk7XG52YXIgJHJlcGxhY2UgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlKTtcbnZhciAkc3RyU2xpY2UgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgU3RyaW5nLnByb3RvdHlwZS5zbGljZSk7XG52YXIgJGV4ZWMgPSBiaW5kLmNhbGwoRnVuY3Rpb24uY2FsbCwgUmVnRXhwLnByb3RvdHlwZS5leGVjKTtcblxuLyogYWRhcHRlZCBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9sb2Rhc2gvbG9kYXNoL2Jsb2IvNC4xNy4xNS9kaXN0L2xvZGFzaC5qcyNMNjczNS1MNjc0NCAqL1xudmFyIHJlUHJvcE5hbWUgPSAvW14lLltcXF1dK3xcXFsoPzooLT9cXGQrKD86XFwuXFxkKyk/KXwoW1wiJ10pKCg/Oig/IVxcMilbXlxcXFxdfFxcXFwuKSo/KVxcMilcXF18KD89KD86XFwufFxcW1xcXSkoPzpcXC58XFxbXFxdfCUkKSkvZztcbnZhciByZUVzY2FwZUNoYXIgPSAvXFxcXChcXFxcKT8vZzsgLyoqIFVzZWQgdG8gbWF0Y2ggYmFja3NsYXNoZXMgaW4gcHJvcGVydHkgcGF0aHMuICovXG52YXIgc3RyaW5nVG9QYXRoID0gZnVuY3Rpb24gc3RyaW5nVG9QYXRoKHN0cmluZykge1xuXHR2YXIgZmlyc3QgPSAkc3RyU2xpY2Uoc3RyaW5nLCAwLCAxKTtcblx0dmFyIGxhc3QgPSAkc3RyU2xpY2Uoc3RyaW5nLCAtMSk7XG5cdGlmIChmaXJzdCA9PT0gJyUnICYmIGxhc3QgIT09ICclJykge1xuXHRcdHRocm93IG5ldyAkU3ludGF4RXJyb3IoJ2ludmFsaWQgaW50cmluc2ljIHN5bnRheCwgZXhwZWN0ZWQgY2xvc2luZyBgJWAnKTtcblx0fSBlbHNlIGlmIChsYXN0ID09PSAnJScgJiYgZmlyc3QgIT09ICclJykge1xuXHRcdHRocm93IG5ldyAkU3ludGF4RXJyb3IoJ2ludmFsaWQgaW50cmluc2ljIHN5bnRheCwgZXhwZWN0ZWQgb3BlbmluZyBgJWAnKTtcblx0fVxuXHR2YXIgcmVzdWx0ID0gW107XG5cdCRyZXBsYWNlKHN0cmluZywgcmVQcm9wTmFtZSwgZnVuY3Rpb24gKG1hdGNoLCBudW1iZXIsIHF1b3RlLCBzdWJTdHJpbmcpIHtcblx0XHRyZXN1bHRbcmVzdWx0Lmxlbmd0aF0gPSBxdW90ZSA/ICRyZXBsYWNlKHN1YlN0cmluZywgcmVFc2NhcGVDaGFyLCAnJDEnKSA6IG51bWJlciB8fCBtYXRjaDtcblx0fSk7XG5cdHJldHVybiByZXN1bHQ7XG59O1xuLyogZW5kIGFkYXB0YXRpb24gKi9cblxudmFyIGdldEJhc2VJbnRyaW5zaWMgPSBmdW5jdGlvbiBnZXRCYXNlSW50cmluc2ljKG5hbWUsIGFsbG93TWlzc2luZykge1xuXHR2YXIgaW50cmluc2ljTmFtZSA9IG5hbWU7XG5cdHZhciBhbGlhcztcblx0aWYgKGhhc093bihMRUdBQ1lfQUxJQVNFUywgaW50cmluc2ljTmFtZSkpIHtcblx0XHRhbGlhcyA9IExFR0FDWV9BTElBU0VTW2ludHJpbnNpY05hbWVdO1xuXHRcdGludHJpbnNpY05hbWUgPSAnJScgKyBhbGlhc1swXSArICclJztcblx0fVxuXG5cdGlmIChoYXNPd24oSU5UUklOU0lDUywgaW50cmluc2ljTmFtZSkpIHtcblx0XHR2YXIgdmFsdWUgPSBJTlRSSU5TSUNTW2ludHJpbnNpY05hbWVdO1xuXHRcdGlmICh2YWx1ZSA9PT0gbmVlZHNFdmFsKSB7XG5cdFx0XHR2YWx1ZSA9IGRvRXZhbChpbnRyaW5zaWNOYW1lKTtcblx0XHR9XG5cdFx0aWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgJiYgIWFsbG93TWlzc2luZykge1xuXHRcdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2ludHJpbnNpYyAnICsgbmFtZSArICcgZXhpc3RzLCBidXQgaXMgbm90IGF2YWlsYWJsZS4gUGxlYXNlIGZpbGUgYW4gaXNzdWUhJyk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHtcblx0XHRcdGFsaWFzOiBhbGlhcyxcblx0XHRcdG5hbWU6IGludHJpbnNpY05hbWUsXG5cdFx0XHR2YWx1ZTogdmFsdWVcblx0XHR9O1xuXHR9XG5cblx0dGhyb3cgbmV3ICRTeW50YXhFcnJvcignaW50cmluc2ljICcgKyBuYW1lICsgJyBkb2VzIG5vdCBleGlzdCEnKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gR2V0SW50cmluc2ljKG5hbWUsIGFsbG93TWlzc2luZykge1xuXHRpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnIHx8IG5hbWUubGVuZ3RoID09PSAwKSB7XG5cdFx0dGhyb3cgbmV3ICRUeXBlRXJyb3IoJ2ludHJpbnNpYyBuYW1lIG11c3QgYmUgYSBub24tZW1wdHkgc3RyaW5nJyk7XG5cdH1cblx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIHR5cGVvZiBhbGxvd01pc3NpbmcgIT09ICdib29sZWFuJykge1xuXHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdcImFsbG93TWlzc2luZ1wiIGFyZ3VtZW50IG11c3QgYmUgYSBib29sZWFuJyk7XG5cdH1cblxuXHRpZiAoJGV4ZWMoL14lP1teJV0qJT8kLywgbmFtZSkgPT09IG51bGwpIHtcblx0XHR0aHJvdyBuZXcgJFN5bnRheEVycm9yKCdgJWAgbWF5IG5vdCBiZSBwcmVzZW50IGFueXdoZXJlIGJ1dCBhdCB0aGUgYmVnaW5uaW5nIGFuZCBlbmQgb2YgdGhlIGludHJpbnNpYyBuYW1lJyk7XG5cdH1cblx0dmFyIHBhcnRzID0gc3RyaW5nVG9QYXRoKG5hbWUpO1xuXHR2YXIgaW50cmluc2ljQmFzZU5hbWUgPSBwYXJ0cy5sZW5ndGggPiAwID8gcGFydHNbMF0gOiAnJztcblxuXHR2YXIgaW50cmluc2ljID0gZ2V0QmFzZUludHJpbnNpYygnJScgKyBpbnRyaW5zaWNCYXNlTmFtZSArICclJywgYWxsb3dNaXNzaW5nKTtcblx0dmFyIGludHJpbnNpY1JlYWxOYW1lID0gaW50cmluc2ljLm5hbWU7XG5cdHZhciB2YWx1ZSA9IGludHJpbnNpYy52YWx1ZTtcblx0dmFyIHNraXBGdXJ0aGVyQ2FjaGluZyA9IGZhbHNlO1xuXG5cdHZhciBhbGlhcyA9IGludHJpbnNpYy5hbGlhcztcblx0aWYgKGFsaWFzKSB7XG5cdFx0aW50cmluc2ljQmFzZU5hbWUgPSBhbGlhc1swXTtcblx0XHQkc3BsaWNlQXBwbHkocGFydHMsICRjb25jYXQoWzAsIDFdLCBhbGlhcykpO1xuXHR9XG5cblx0Zm9yICh2YXIgaSA9IDEsIGlzT3duID0gdHJ1ZTsgaSA8IHBhcnRzLmxlbmd0aDsgaSArPSAxKSB7XG5cdFx0dmFyIHBhcnQgPSBwYXJ0c1tpXTtcblx0XHR2YXIgZmlyc3QgPSAkc3RyU2xpY2UocGFydCwgMCwgMSk7XG5cdFx0dmFyIGxhc3QgPSAkc3RyU2xpY2UocGFydCwgLTEpO1xuXHRcdGlmIChcblx0XHRcdChcblx0XHRcdFx0KGZpcnN0ID09PSAnXCInIHx8IGZpcnN0ID09PSBcIidcIiB8fCBmaXJzdCA9PT0gJ2AnKVxuXHRcdFx0XHR8fCAobGFzdCA9PT0gJ1wiJyB8fCBsYXN0ID09PSBcIidcIiB8fCBsYXN0ID09PSAnYCcpXG5cdFx0XHQpXG5cdFx0XHQmJiBmaXJzdCAhPT0gbGFzdFxuXHRcdCkge1xuXHRcdFx0dGhyb3cgbmV3ICRTeW50YXhFcnJvcigncHJvcGVydHkgbmFtZXMgd2l0aCBxdW90ZXMgbXVzdCBoYXZlIG1hdGNoaW5nIHF1b3RlcycpO1xuXHRcdH1cblx0XHRpZiAocGFydCA9PT0gJ2NvbnN0cnVjdG9yJyB8fCAhaXNPd24pIHtcblx0XHRcdHNraXBGdXJ0aGVyQ2FjaGluZyA9IHRydWU7XG5cdFx0fVxuXG5cdFx0aW50cmluc2ljQmFzZU5hbWUgKz0gJy4nICsgcGFydDtcblx0XHRpbnRyaW5zaWNSZWFsTmFtZSA9ICclJyArIGludHJpbnNpY0Jhc2VOYW1lICsgJyUnO1xuXG5cdFx0aWYgKGhhc093bihJTlRSSU5TSUNTLCBpbnRyaW5zaWNSZWFsTmFtZSkpIHtcblx0XHRcdHZhbHVlID0gSU5UUklOU0lDU1tpbnRyaW5zaWNSZWFsTmFtZV07XG5cdFx0fSBlbHNlIGlmICh2YWx1ZSAhPSBudWxsKSB7XG5cdFx0XHRpZiAoIShwYXJ0IGluIHZhbHVlKSkge1xuXHRcdFx0XHRpZiAoIWFsbG93TWlzc2luZykge1xuXHRcdFx0XHRcdHRocm93IG5ldyAkVHlwZUVycm9yKCdiYXNlIGludHJpbnNpYyBmb3IgJyArIG5hbWUgKyAnIGV4aXN0cywgYnV0IHRoZSBwcm9wZXJ0eSBpcyBub3QgYXZhaWxhYmxlLicpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB2b2lkIHVuZGVmaW5lZDtcblx0XHRcdH1cblx0XHRcdGlmICgkZ09QRCAmJiAoaSArIDEpID49IHBhcnRzLmxlbmd0aCkge1xuXHRcdFx0XHR2YXIgZGVzYyA9ICRnT1BEKHZhbHVlLCBwYXJ0KTtcblx0XHRcdFx0aXNPd24gPSAhIWRlc2M7XG5cblx0XHRcdFx0Ly8gQnkgY29udmVudGlvbiwgd2hlbiBhIGRhdGEgcHJvcGVydHkgaXMgY29udmVydGVkIHRvIGFuIGFjY2Vzc29yXG5cdFx0XHRcdC8vIHByb3BlcnR5IHRvIGVtdWxhdGUgYSBkYXRhIHByb3BlcnR5IHRoYXQgZG9lcyBub3Qgc3VmZmVyIGZyb21cblx0XHRcdFx0Ly8gdGhlIG92ZXJyaWRlIG1pc3Rha2UsIHRoYXQgYWNjZXNzb3IncyBnZXR0ZXIgaXMgbWFya2VkIHdpdGhcblx0XHRcdFx0Ly8gYW4gYG9yaWdpbmFsVmFsdWVgIHByb3BlcnR5LiBIZXJlLCB3aGVuIHdlIGRldGVjdCB0aGlzLCB3ZVxuXHRcdFx0XHQvLyB1cGhvbGQgdGhlIGlsbHVzaW9uIGJ5IHByZXRlbmRpbmcgdG8gc2VlIHRoYXQgb3JpZ2luYWwgZGF0YVxuXHRcdFx0XHQvLyBwcm9wZXJ0eSwgaS5lLiwgcmV0dXJuaW5nIHRoZSB2YWx1ZSByYXRoZXIgdGhhbiB0aGUgZ2V0dGVyXG5cdFx0XHRcdC8vIGl0c2VsZi5cblx0XHRcdFx0aWYgKGlzT3duICYmICdnZXQnIGluIGRlc2MgJiYgISgnb3JpZ2luYWxWYWx1ZScgaW4gZGVzYy5nZXQpKSB7XG5cdFx0XHRcdFx0dmFsdWUgPSBkZXNjLmdldDtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR2YWx1ZSA9IHZhbHVlW3BhcnRdO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpc093biA9IGhhc093bih2YWx1ZSwgcGFydCk7XG5cdFx0XHRcdHZhbHVlID0gdmFsdWVbcGFydF07XG5cdFx0XHR9XG5cblx0XHRcdGlmIChpc093biAmJiAhc2tpcEZ1cnRoZXJDYWNoaW5nKSB7XG5cdFx0XHRcdElOVFJJTlNJQ1NbaW50cmluc2ljUmVhbE5hbWVdID0gdmFsdWU7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdHJldHVybiB2YWx1ZTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBvcmlnU3ltYm9sID0gdHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sO1xudmFyIGhhc1N5bWJvbFNoYW0gPSByZXF1aXJlKCcuL3NoYW1zJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gaGFzTmF0aXZlU3ltYm9scygpIHtcblx0aWYgKHR5cGVvZiBvcmlnU3ltYm9sICE9PSAnZnVuY3Rpb24nKSB7IHJldHVybiBmYWxzZTsgfVxuXHRpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ2Z1bmN0aW9uJykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKHR5cGVvZiBvcmlnU3ltYm9sKCdmb28nKSAhPT0gJ3N5bWJvbCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmICh0eXBlb2YgU3ltYm9sKCdiYXInKSAhPT0gJ3N5bWJvbCcpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0cmV0dXJuIGhhc1N5bWJvbFNoYW0oKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qIGVzbGludCBjb21wbGV4aXR5OiBbMiwgMThdLCBtYXgtc3RhdGVtZW50czogWzIsIDMzXSAqL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBoYXNTeW1ib2xzKCkge1xuXHRpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ2Z1bmN0aW9uJyB8fCB0eXBlb2YgT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyAhPT0gJ2Z1bmN0aW9uJykgeyByZXR1cm4gZmFsc2U7IH1cblx0aWYgKHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09ICdzeW1ib2wnKSB7IHJldHVybiB0cnVlOyB9XG5cblx0dmFyIG9iaiA9IHt9O1xuXHR2YXIgc3ltID0gU3ltYm9sKCd0ZXN0Jyk7XG5cdHZhciBzeW1PYmogPSBPYmplY3Qoc3ltKTtcblx0aWYgKHR5cGVvZiBzeW0gPT09ICdzdHJpbmcnKSB7IHJldHVybiBmYWxzZTsgfVxuXG5cdGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoc3ltKSAhPT0gJ1tvYmplY3QgU3ltYm9sXScpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdGlmIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoc3ltT2JqKSAhPT0gJ1tvYmplY3QgU3ltYm9sXScpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0Ly8gdGVtcCBkaXNhYmxlZCBwZXIgaHR0cHM6Ly9naXRodWIuY29tL2xqaGFyYi9vYmplY3QuYXNzaWduL2lzc3Vlcy8xN1xuXHQvLyBpZiAoc3ltIGluc3RhbmNlb2YgU3ltYm9sKSB7IHJldHVybiBmYWxzZTsgfVxuXHQvLyB0ZW1wIGRpc2FibGVkIHBlciBodHRwczovL2dpdGh1Yi5jb20vV2ViUmVmbGVjdGlvbi9nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMvaXNzdWVzLzRcblx0Ly8gaWYgKCEoc3ltT2JqIGluc3RhbmNlb2YgU3ltYm9sKSkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHQvLyBpZiAodHlwZW9mIFN5bWJvbC5wcm90b3R5cGUudG9TdHJpbmcgIT09ICdmdW5jdGlvbicpIHsgcmV0dXJuIGZhbHNlOyB9XG5cdC8vIGlmIChTdHJpbmcoc3ltKSAhPT0gU3ltYm9sLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHN5bSkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0dmFyIHN5bVZhbCA9IDQyO1xuXHRvYmpbc3ltXSA9IHN5bVZhbDtcblx0Zm9yIChzeW0gaW4gb2JqKSB7IHJldHVybiBmYWxzZTsgfSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4LCBuby11bnJlYWNoYWJsZS1sb29wXG5cdGlmICh0eXBlb2YgT2JqZWN0LmtleXMgPT09ICdmdW5jdGlvbicgJiYgT2JqZWN0LmtleXMob2JqKS5sZW5ndGggIT09IDApIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0aWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyA9PT0gJ2Z1bmN0aW9uJyAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopLmxlbmd0aCAhPT0gMCkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHR2YXIgc3ltcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqKTtcblx0aWYgKHN5bXMubGVuZ3RoICE9PSAxIHx8IHN5bXNbMF0gIT09IHN5bSkgeyByZXR1cm4gZmFsc2U7IH1cblxuXHRpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmosIHN5bSkpIHsgcmV0dXJuIGZhbHNlOyB9XG5cblx0aWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0dmFyIGRlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwgc3ltKTtcblx0XHRpZiAoZGVzY3JpcHRvci52YWx1ZSAhPT0gc3ltVmFsIHx8IGRlc2NyaXB0b3IuZW51bWVyYWJsZSAhPT0gdHJ1ZSkgeyByZXR1cm4gZmFsc2U7IH1cblx0fVxuXG5cdHJldHVybiB0cnVlO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGJpbmQgPSByZXF1aXJlKCdmdW5jdGlvbi1iaW5kJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gYmluZC5jYWxsKEZ1bmN0aW9uLmNhbGwsIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkpO1xuIiwidmFyIGhhc01hcCA9IHR5cGVvZiBNYXAgPT09ICdmdW5jdGlvbicgJiYgTWFwLnByb3RvdHlwZTtcbnZhciBtYXBTaXplRGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgJiYgaGFzTWFwID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihNYXAucHJvdG90eXBlLCAnc2l6ZScpIDogbnVsbDtcbnZhciBtYXBTaXplID0gaGFzTWFwICYmIG1hcFNpemVEZXNjcmlwdG9yICYmIHR5cGVvZiBtYXBTaXplRGVzY3JpcHRvci5nZXQgPT09ICdmdW5jdGlvbicgPyBtYXBTaXplRGVzY3JpcHRvci5nZXQgOiBudWxsO1xudmFyIG1hcEZvckVhY2ggPSBoYXNNYXAgJiYgTWFwLnByb3RvdHlwZS5mb3JFYWNoO1xudmFyIGhhc1NldCA9IHR5cGVvZiBTZXQgPT09ICdmdW5jdGlvbicgJiYgU2V0LnByb3RvdHlwZTtcbnZhciBzZXRTaXplRGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgJiYgaGFzU2V0ID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihTZXQucHJvdG90eXBlLCAnc2l6ZScpIDogbnVsbDtcbnZhciBzZXRTaXplID0gaGFzU2V0ICYmIHNldFNpemVEZXNjcmlwdG9yICYmIHR5cGVvZiBzZXRTaXplRGVzY3JpcHRvci5nZXQgPT09ICdmdW5jdGlvbicgPyBzZXRTaXplRGVzY3JpcHRvci5nZXQgOiBudWxsO1xudmFyIHNldEZvckVhY2ggPSBoYXNTZXQgJiYgU2V0LnByb3RvdHlwZS5mb3JFYWNoO1xudmFyIGhhc1dlYWtNYXAgPSB0eXBlb2YgV2Vha01hcCA9PT0gJ2Z1bmN0aW9uJyAmJiBXZWFrTWFwLnByb3RvdHlwZTtcbnZhciB3ZWFrTWFwSGFzID0gaGFzV2Vha01hcCA/IFdlYWtNYXAucHJvdG90eXBlLmhhcyA6IG51bGw7XG52YXIgaGFzV2Vha1NldCA9IHR5cGVvZiBXZWFrU2V0ID09PSAnZnVuY3Rpb24nICYmIFdlYWtTZXQucHJvdG90eXBlO1xudmFyIHdlYWtTZXRIYXMgPSBoYXNXZWFrU2V0ID8gV2Vha1NldC5wcm90b3R5cGUuaGFzIDogbnVsbDtcbnZhciBoYXNXZWFrUmVmID0gdHlwZW9mIFdlYWtSZWYgPT09ICdmdW5jdGlvbicgJiYgV2Vha1JlZi5wcm90b3R5cGU7XG52YXIgd2Vha1JlZkRlcmVmID0gaGFzV2Vha1JlZiA/IFdlYWtSZWYucHJvdG90eXBlLmRlcmVmIDogbnVsbDtcbnZhciBib29sZWFuVmFsdWVPZiA9IEJvb2xlYW4ucHJvdG90eXBlLnZhbHVlT2Y7XG52YXIgb2JqZWN0VG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGZ1bmN0aW9uVG9TdHJpbmcgPSBGdW5jdGlvbi5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgJG1hdGNoID0gU3RyaW5nLnByb3RvdHlwZS5tYXRjaDtcbnZhciAkc2xpY2UgPSBTdHJpbmcucHJvdG90eXBlLnNsaWNlO1xudmFyICRyZXBsYWNlID0gU3RyaW5nLnByb3RvdHlwZS5yZXBsYWNlO1xudmFyICR0b1VwcGVyQ2FzZSA9IFN0cmluZy5wcm90b3R5cGUudG9VcHBlckNhc2U7XG52YXIgJHRvTG93ZXJDYXNlID0gU3RyaW5nLnByb3RvdHlwZS50b0xvd2VyQ2FzZTtcbnZhciAkdGVzdCA9IFJlZ0V4cC5wcm90b3R5cGUudGVzdDtcbnZhciAkY29uY2F0ID0gQXJyYXkucHJvdG90eXBlLmNvbmNhdDtcbnZhciAkam9pbiA9IEFycmF5LnByb3RvdHlwZS5qb2luO1xudmFyICRhcnJTbGljZSA9IEFycmF5LnByb3RvdHlwZS5zbGljZTtcbnZhciAkZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIGJpZ0ludFZhbHVlT2YgPSB0eXBlb2YgQmlnSW50ID09PSAnZnVuY3Rpb24nID8gQmlnSW50LnByb3RvdHlwZS52YWx1ZU9mIDogbnVsbDtcbnZhciBnT1BTID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBzeW1Ub1N0cmluZyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gJ3N5bWJvbCcgPyBTeW1ib2wucHJvdG90eXBlLnRvU3RyaW5nIDogbnVsbDtcbnZhciBoYXNTaGFtbWVkU3ltYm9scyA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gJ29iamVjdCc7XG4vLyBpZSwgYGhhcy10b3N0cmluZ3RhZy9zaGFtc1xudmFyIHRvU3RyaW5nVGFnID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcgJiYgKHR5cGVvZiBTeW1ib2wudG9TdHJpbmdUYWcgPT09IGhhc1NoYW1tZWRTeW1ib2xzID8gJ29iamVjdCcgOiAnc3ltYm9sJylcbiAgICA/IFN5bWJvbC50b1N0cmluZ1RhZ1xuICAgIDogbnVsbDtcbnZhciBpc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG52YXIgZ1BPID0gKHR5cGVvZiBSZWZsZWN0ID09PSAnZnVuY3Rpb24nID8gUmVmbGVjdC5nZXRQcm90b3R5cGVPZiA6IE9iamVjdC5nZXRQcm90b3R5cGVPZikgfHwgKFxuICAgIFtdLl9fcHJvdG9fXyA9PT0gQXJyYXkucHJvdG90eXBlIC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcHJvdG9cbiAgICAgICAgPyBmdW5jdGlvbiAoTykge1xuICAgICAgICAgICAgcmV0dXJuIE8uX19wcm90b19fOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXByb3RvXG4gICAgICAgIH1cbiAgICAgICAgOiBudWxsXG4pO1xuXG5mdW5jdGlvbiBhZGROdW1lcmljU2VwYXJhdG9yKG51bSwgc3RyKSB7XG4gICAgaWYgKFxuICAgICAgICBudW0gPT09IEluZmluaXR5XG4gICAgICAgIHx8IG51bSA9PT0gLUluZmluaXR5XG4gICAgICAgIHx8IG51bSAhPT0gbnVtXG4gICAgICAgIHx8IChudW0gJiYgbnVtID4gLTEwMDAgJiYgbnVtIDwgMTAwMClcbiAgICAgICAgfHwgJHRlc3QuY2FsbCgvZS8sIHN0cilcbiAgICApIHtcbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gICAgdmFyIHNlcFJlZ2V4ID0gL1swLTldKD89KD86WzAtOV17M30pKyg/IVswLTldKSkvZztcbiAgICBpZiAodHlwZW9mIG51bSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgdmFyIGludCA9IG51bSA8IDAgPyAtJGZsb29yKC1udW0pIDogJGZsb29yKG51bSk7IC8vIHRydW5jKG51bSlcbiAgICAgICAgaWYgKGludCAhPT0gbnVtKSB7XG4gICAgICAgICAgICB2YXIgaW50U3RyID0gU3RyaW5nKGludCk7XG4gICAgICAgICAgICB2YXIgZGVjID0gJHNsaWNlLmNhbGwoc3RyLCBpbnRTdHIubGVuZ3RoICsgMSk7XG4gICAgICAgICAgICByZXR1cm4gJHJlcGxhY2UuY2FsbChpbnRTdHIsIHNlcFJlZ2V4LCAnJCZfJykgKyAnLicgKyAkcmVwbGFjZS5jYWxsKCRyZXBsYWNlLmNhbGwoZGVjLCAvKFswLTldezN9KS9nLCAnJCZfJyksIC9fJC8sICcnKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gJHJlcGxhY2UuY2FsbChzdHIsIHNlcFJlZ2V4LCAnJCZfJyk7XG59XG5cbnZhciB1dGlsSW5zcGVjdCA9IHJlcXVpcmUoJy4vdXRpbC5pbnNwZWN0Jyk7XG52YXIgaW5zcGVjdEN1c3RvbSA9IHV0aWxJbnNwZWN0LmN1c3RvbTtcbnZhciBpbnNwZWN0U3ltYm9sID0gaXNTeW1ib2woaW5zcGVjdEN1c3RvbSkgPyBpbnNwZWN0Q3VzdG9tIDogbnVsbDtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBpbnNwZWN0XyhvYmosIG9wdGlvbnMsIGRlcHRoLCBzZWVuKSB7XG4gICAgdmFyIG9wdHMgPSBvcHRpb25zIHx8IHt9O1xuXG4gICAgaWYgKGhhcyhvcHRzLCAncXVvdGVTdHlsZScpICYmIChvcHRzLnF1b3RlU3R5bGUgIT09ICdzaW5nbGUnICYmIG9wdHMucXVvdGVTdHlsZSAhPT0gJ2RvdWJsZScpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbiBcInF1b3RlU3R5bGVcIiBtdXN0IGJlIFwic2luZ2xlXCIgb3IgXCJkb3VibGVcIicpO1xuICAgIH1cbiAgICBpZiAoXG4gICAgICAgIGhhcyhvcHRzLCAnbWF4U3RyaW5nTGVuZ3RoJykgJiYgKHR5cGVvZiBvcHRzLm1heFN0cmluZ0xlbmd0aCA9PT0gJ251bWJlcidcbiAgICAgICAgICAgID8gb3B0cy5tYXhTdHJpbmdMZW5ndGggPCAwICYmIG9wdHMubWF4U3RyaW5nTGVuZ3RoICE9PSBJbmZpbml0eVxuICAgICAgICAgICAgOiBvcHRzLm1heFN0cmluZ0xlbmd0aCAhPT0gbnVsbFxuICAgICAgICApXG4gICAgKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ29wdGlvbiBcIm1heFN0cmluZ0xlbmd0aFwiLCBpZiBwcm92aWRlZCwgbXVzdCBiZSBhIHBvc2l0aXZlIGludGVnZXIsIEluZmluaXR5LCBvciBgbnVsbGAnKTtcbiAgICB9XG4gICAgdmFyIGN1c3RvbUluc3BlY3QgPSBoYXMob3B0cywgJ2N1c3RvbUluc3BlY3QnKSA/IG9wdHMuY3VzdG9tSW5zcGVjdCA6IHRydWU7XG4gICAgaWYgKHR5cGVvZiBjdXN0b21JbnNwZWN0ICE9PSAnYm9vbGVhbicgJiYgY3VzdG9tSW5zcGVjdCAhPT0gJ3N5bWJvbCcpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9uIFwiY3VzdG9tSW5zcGVjdFwiLCBpZiBwcm92aWRlZCwgbXVzdCBiZSBgdHJ1ZWAsIGBmYWxzZWAsIG9yIGBcXCdzeW1ib2xcXCdgJyk7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgICBoYXMob3B0cywgJ2luZGVudCcpXG4gICAgICAgICYmIG9wdHMuaW5kZW50ICE9PSBudWxsXG4gICAgICAgICYmIG9wdHMuaW5kZW50ICE9PSAnXFx0J1xuICAgICAgICAmJiAhKHBhcnNlSW50KG9wdHMuaW5kZW50LCAxMCkgPT09IG9wdHMuaW5kZW50ICYmIG9wdHMuaW5kZW50ID4gMClcbiAgICApIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignb3B0aW9uIFwiaW5kZW50XCIgbXVzdCBiZSBcIlxcXFx0XCIsIGFuIGludGVnZXIgPiAwLCBvciBgbnVsbGAnKTtcbiAgICB9XG4gICAgaWYgKGhhcyhvcHRzLCAnbnVtZXJpY1NlcGFyYXRvcicpICYmIHR5cGVvZiBvcHRzLm51bWVyaWNTZXBhcmF0b3IgIT09ICdib29sZWFuJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdvcHRpb24gXCJudW1lcmljU2VwYXJhdG9yXCIsIGlmIHByb3ZpZGVkLCBtdXN0IGJlIGB0cnVlYCBvciBgZmFsc2VgJyk7XG4gICAgfVxuICAgIHZhciBudW1lcmljU2VwYXJhdG9yID0gb3B0cy5udW1lcmljU2VwYXJhdG9yO1xuXG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHJldHVybiAndW5kZWZpbmVkJztcbiAgICB9XG4gICAgaWYgKG9iaiA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gJ251bGwnO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHJldHVybiBvYmogPyAndHJ1ZScgOiAnZmFsc2UnO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygb2JqID09PSAnc3RyaW5nJykge1xuICAgICAgICByZXR1cm4gaW5zcGVjdFN0cmluZyhvYmosIG9wdHMpO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgaWYgKG9iaiA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIEluZmluaXR5IC8gb2JqID4gMCA/ICcwJyA6ICctMCc7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN0ciA9IFN0cmluZyhvYmopO1xuICAgICAgICByZXR1cm4gbnVtZXJpY1NlcGFyYXRvciA/IGFkZE51bWVyaWNTZXBhcmF0b3Iob2JqLCBzdHIpIDogc3RyO1xuICAgIH1cbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ2JpZ2ludCcpIHtcbiAgICAgICAgdmFyIGJpZ0ludFN0ciA9IFN0cmluZyhvYmopICsgJ24nO1xuICAgICAgICByZXR1cm4gbnVtZXJpY1NlcGFyYXRvciA/IGFkZE51bWVyaWNTZXBhcmF0b3Iob2JqLCBiaWdJbnRTdHIpIDogYmlnSW50U3RyO1xuICAgIH1cblxuICAgIHZhciBtYXhEZXB0aCA9IHR5cGVvZiBvcHRzLmRlcHRoID09PSAndW5kZWZpbmVkJyA/IDUgOiBvcHRzLmRlcHRoO1xuICAgIGlmICh0eXBlb2YgZGVwdGggPT09ICd1bmRlZmluZWQnKSB7IGRlcHRoID0gMDsgfVxuICAgIGlmIChkZXB0aCA+PSBtYXhEZXB0aCAmJiBtYXhEZXB0aCA+IDAgJiYgdHlwZW9mIG9iaiA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIGlzQXJyYXkob2JqKSA/ICdbQXJyYXldJyA6ICdbT2JqZWN0XSc7XG4gICAgfVxuXG4gICAgdmFyIGluZGVudCA9IGdldEluZGVudChvcHRzLCBkZXB0aCk7XG5cbiAgICBpZiAodHlwZW9mIHNlZW4gPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIHNlZW4gPSBbXTtcbiAgICB9IGVsc2UgaWYgKGluZGV4T2Yoc2Vlbiwgb2JqKSA+PSAwKSB7XG4gICAgICAgIHJldHVybiAnW0NpcmN1bGFyXSc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5zcGVjdCh2YWx1ZSwgZnJvbSwgbm9JbmRlbnQpIHtcbiAgICAgICAgaWYgKGZyb20pIHtcbiAgICAgICAgICAgIHNlZW4gPSAkYXJyU2xpY2UuY2FsbChzZWVuKTtcbiAgICAgICAgICAgIHNlZW4ucHVzaChmcm9tKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobm9JbmRlbnQpIHtcbiAgICAgICAgICAgIHZhciBuZXdPcHRzID0ge1xuICAgICAgICAgICAgICAgIGRlcHRoOiBvcHRzLmRlcHRoXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgaWYgKGhhcyhvcHRzLCAncXVvdGVTdHlsZScpKSB7XG4gICAgICAgICAgICAgICAgbmV3T3B0cy5xdW90ZVN0eWxlID0gb3B0cy5xdW90ZVN0eWxlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGluc3BlY3RfKHZhbHVlLCBuZXdPcHRzLCBkZXB0aCArIDEsIHNlZW4pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbnNwZWN0Xyh2YWx1ZSwgb3B0cywgZGVwdGggKyAxLCBzZWVuKTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ2Z1bmN0aW9uJyAmJiAhaXNSZWdFeHAob2JqKSkgeyAvLyBpbiBvbGRlciBlbmdpbmVzLCByZWdleGVzIGFyZSBjYWxsYWJsZVxuICAgICAgICB2YXIgbmFtZSA9IG5hbWVPZihvYmopO1xuICAgICAgICB2YXIga2V5cyA9IGFyck9iaktleXMob2JqLCBpbnNwZWN0KTtcbiAgICAgICAgcmV0dXJuICdbRnVuY3Rpb24nICsgKG5hbWUgPyAnOiAnICsgbmFtZSA6ICcgKGFub255bW91cyknKSArICddJyArIChrZXlzLmxlbmd0aCA+IDAgPyAnIHsgJyArICRqb2luLmNhbGwoa2V5cywgJywgJykgKyAnIH0nIDogJycpO1xuICAgIH1cbiAgICBpZiAoaXNTeW1ib2wob2JqKSkge1xuICAgICAgICB2YXIgc3ltU3RyaW5nID0gaGFzU2hhbW1lZFN5bWJvbHMgPyAkcmVwbGFjZS5jYWxsKFN0cmluZyhvYmopLCAvXihTeW1ib2xcXCguKlxcKSlfW14pXSokLywgJyQxJykgOiBzeW1Ub1N0cmluZy5jYWxsKG9iaik7XG4gICAgICAgIHJldHVybiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiAhaGFzU2hhbW1lZFN5bWJvbHMgPyBtYXJrQm94ZWQoc3ltU3RyaW5nKSA6IHN5bVN0cmluZztcbiAgICB9XG4gICAgaWYgKGlzRWxlbWVudChvYmopKSB7XG4gICAgICAgIHZhciBzID0gJzwnICsgJHRvTG93ZXJDYXNlLmNhbGwoU3RyaW5nKG9iai5ub2RlTmFtZSkpO1xuICAgICAgICB2YXIgYXR0cnMgPSBvYmouYXR0cmlidXRlcyB8fCBbXTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhdHRycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcyArPSAnICcgKyBhdHRyc1tpXS5uYW1lICsgJz0nICsgd3JhcFF1b3RlcyhxdW90ZShhdHRyc1tpXS52YWx1ZSksICdkb3VibGUnLCBvcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBzICs9ICc+JztcbiAgICAgICAgaWYgKG9iai5jaGlsZE5vZGVzICYmIG9iai5jaGlsZE5vZGVzLmxlbmd0aCkgeyBzICs9ICcuLi4nOyB9XG4gICAgICAgIHMgKz0gJzwvJyArICR0b0xvd2VyQ2FzZS5jYWxsKFN0cmluZyhvYmoubm9kZU5hbWUpKSArICc+JztcbiAgICAgICAgcmV0dXJuIHM7XG4gICAgfVxuICAgIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAgICAgaWYgKG9iai5sZW5ndGggPT09IDApIHsgcmV0dXJuICdbXSc7IH1cbiAgICAgICAgdmFyIHhzID0gYXJyT2JqS2V5cyhvYmosIGluc3BlY3QpO1xuICAgICAgICBpZiAoaW5kZW50ICYmICFzaW5nbGVMaW5lVmFsdWVzKHhzKSkge1xuICAgICAgICAgICAgcmV0dXJuICdbJyArIGluZGVudGVkSm9pbih4cywgaW5kZW50KSArICddJztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gJ1sgJyArICRqb2luLmNhbGwoeHMsICcsICcpICsgJyBdJztcbiAgICB9XG4gICAgaWYgKGlzRXJyb3Iob2JqKSkge1xuICAgICAgICB2YXIgcGFydHMgPSBhcnJPYmpLZXlzKG9iaiwgaW5zcGVjdCk7XG4gICAgICAgIGlmICghKCdjYXVzZScgaW4gRXJyb3IucHJvdG90eXBlKSAmJiAnY2F1c2UnIGluIG9iaiAmJiAhaXNFbnVtZXJhYmxlLmNhbGwob2JqLCAnY2F1c2UnKSkge1xuICAgICAgICAgICAgcmV0dXJuICd7IFsnICsgU3RyaW5nKG9iaikgKyAnXSAnICsgJGpvaW4uY2FsbCgkY29uY2F0LmNhbGwoJ1tjYXVzZV06ICcgKyBpbnNwZWN0KG9iai5jYXVzZSksIHBhcnRzKSwgJywgJykgKyAnIH0nO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYXJ0cy5sZW5ndGggPT09IDApIHsgcmV0dXJuICdbJyArIFN0cmluZyhvYmopICsgJ10nOyB9XG4gICAgICAgIHJldHVybiAneyBbJyArIFN0cmluZyhvYmopICsgJ10gJyArICRqb2luLmNhbGwocGFydHMsICcsICcpICsgJyB9JztcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIGN1c3RvbUluc3BlY3QpIHtcbiAgICAgICAgaWYgKGluc3BlY3RTeW1ib2wgJiYgdHlwZW9mIG9ialtpbnNwZWN0U3ltYm9sXSA9PT0gJ2Z1bmN0aW9uJyAmJiB1dGlsSW5zcGVjdCkge1xuICAgICAgICAgICAgcmV0dXJuIHV0aWxJbnNwZWN0KG9iaiwgeyBkZXB0aDogbWF4RGVwdGggLSBkZXB0aCB9KTtcbiAgICAgICAgfSBlbHNlIGlmIChjdXN0b21JbnNwZWN0ICE9PSAnc3ltYm9sJyAmJiB0eXBlb2Ygb2JqLmluc3BlY3QgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHJldHVybiBvYmouaW5zcGVjdCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChpc01hcChvYmopKSB7XG4gICAgICAgIHZhciBtYXBQYXJ0cyA9IFtdO1xuICAgICAgICBpZiAobWFwRm9yRWFjaCkge1xuICAgICAgICAgICAgbWFwRm9yRWFjaC5jYWxsKG9iaiwgZnVuY3Rpb24gKHZhbHVlLCBrZXkpIHtcbiAgICAgICAgICAgICAgICBtYXBQYXJ0cy5wdXNoKGluc3BlY3Qoa2V5LCBvYmosIHRydWUpICsgJyA9PiAnICsgaW5zcGVjdCh2YWx1ZSwgb2JqKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29sbGVjdGlvbk9mKCdNYXAnLCBtYXBTaXplLmNhbGwob2JqKSwgbWFwUGFydHMsIGluZGVudCk7XG4gICAgfVxuICAgIGlmIChpc1NldChvYmopKSB7XG4gICAgICAgIHZhciBzZXRQYXJ0cyA9IFtdO1xuICAgICAgICBpZiAoc2V0Rm9yRWFjaCkge1xuICAgICAgICAgICAgc2V0Rm9yRWFjaC5jYWxsKG9iaiwgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgc2V0UGFydHMucHVzaChpbnNwZWN0KHZhbHVlLCBvYmopKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb2xsZWN0aW9uT2YoJ1NldCcsIHNldFNpemUuY2FsbChvYmopLCBzZXRQYXJ0cywgaW5kZW50KTtcbiAgICB9XG4gICAgaWYgKGlzV2Vha01hcChvYmopKSB7XG4gICAgICAgIHJldHVybiB3ZWFrQ29sbGVjdGlvbk9mKCdXZWFrTWFwJyk7XG4gICAgfVxuICAgIGlmIChpc1dlYWtTZXQob2JqKSkge1xuICAgICAgICByZXR1cm4gd2Vha0NvbGxlY3Rpb25PZignV2Vha1NldCcpO1xuICAgIH1cbiAgICBpZiAoaXNXZWFrUmVmKG9iaikpIHtcbiAgICAgICAgcmV0dXJuIHdlYWtDb2xsZWN0aW9uT2YoJ1dlYWtSZWYnKTtcbiAgICB9XG4gICAgaWYgKGlzTnVtYmVyKG9iaikpIHtcbiAgICAgICAgcmV0dXJuIG1hcmtCb3hlZChpbnNwZWN0KE51bWJlcihvYmopKSk7XG4gICAgfVxuICAgIGlmIChpc0JpZ0ludChvYmopKSB7XG4gICAgICAgIHJldHVybiBtYXJrQm94ZWQoaW5zcGVjdChiaWdJbnRWYWx1ZU9mLmNhbGwob2JqKSkpO1xuICAgIH1cbiAgICBpZiAoaXNCb29sZWFuKG9iaikpIHtcbiAgICAgICAgcmV0dXJuIG1hcmtCb3hlZChib29sZWFuVmFsdWVPZi5jYWxsKG9iaikpO1xuICAgIH1cbiAgICBpZiAoaXNTdHJpbmcob2JqKSkge1xuICAgICAgICByZXR1cm4gbWFya0JveGVkKGluc3BlY3QoU3RyaW5nKG9iaikpKTtcbiAgICB9XG4gICAgaWYgKCFpc0RhdGUob2JqKSAmJiAhaXNSZWdFeHAob2JqKSkge1xuICAgICAgICB2YXIgeXMgPSBhcnJPYmpLZXlzKG9iaiwgaW5zcGVjdCk7XG4gICAgICAgIHZhciBpc1BsYWluT2JqZWN0ID0gZ1BPID8gZ1BPKG9iaikgPT09IE9iamVjdC5wcm90b3R5cGUgOiBvYmogaW5zdGFuY2VvZiBPYmplY3QgfHwgb2JqLmNvbnN0cnVjdG9yID09PSBPYmplY3Q7XG4gICAgICAgIHZhciBwcm90b1RhZyA9IG9iaiBpbnN0YW5jZW9mIE9iamVjdCA/ICcnIDogJ251bGwgcHJvdG90eXBlJztcbiAgICAgICAgdmFyIHN0cmluZ1RhZyA9ICFpc1BsYWluT2JqZWN0ICYmIHRvU3RyaW5nVGFnICYmIE9iamVjdChvYmopID09PSBvYmogJiYgdG9TdHJpbmdUYWcgaW4gb2JqID8gJHNsaWNlLmNhbGwodG9TdHIob2JqKSwgOCwgLTEpIDogcHJvdG9UYWcgPyAnT2JqZWN0JyA6ICcnO1xuICAgICAgICB2YXIgY29uc3RydWN0b3JUYWcgPSBpc1BsYWluT2JqZWN0IHx8IHR5cGVvZiBvYmouY29uc3RydWN0b3IgIT09ICdmdW5jdGlvbicgPyAnJyA6IG9iai5jb25zdHJ1Y3Rvci5uYW1lID8gb2JqLmNvbnN0cnVjdG9yLm5hbWUgKyAnICcgOiAnJztcbiAgICAgICAgdmFyIHRhZyA9IGNvbnN0cnVjdG9yVGFnICsgKHN0cmluZ1RhZyB8fCBwcm90b1RhZyA/ICdbJyArICRqb2luLmNhbGwoJGNvbmNhdC5jYWxsKFtdLCBzdHJpbmdUYWcgfHwgW10sIHByb3RvVGFnIHx8IFtdKSwgJzogJykgKyAnXSAnIDogJycpO1xuICAgICAgICBpZiAoeXMubGVuZ3RoID09PSAwKSB7IHJldHVybiB0YWcgKyAne30nOyB9XG4gICAgICAgIGlmIChpbmRlbnQpIHtcbiAgICAgICAgICAgIHJldHVybiB0YWcgKyAneycgKyBpbmRlbnRlZEpvaW4oeXMsIGluZGVudCkgKyAnfSc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhZyArICd7ICcgKyAkam9pbi5jYWxsKHlzLCAnLCAnKSArICcgfSc7XG4gICAgfVxuICAgIHJldHVybiBTdHJpbmcob2JqKTtcbn07XG5cbmZ1bmN0aW9uIHdyYXBRdW90ZXMocywgZGVmYXVsdFN0eWxlLCBvcHRzKSB7XG4gICAgdmFyIHF1b3RlQ2hhciA9IChvcHRzLnF1b3RlU3R5bGUgfHwgZGVmYXVsdFN0eWxlKSA9PT0gJ2RvdWJsZScgPyAnXCInIDogXCInXCI7XG4gICAgcmV0dXJuIHF1b3RlQ2hhciArIHMgKyBxdW90ZUNoYXI7XG59XG5cbmZ1bmN0aW9uIHF1b3RlKHMpIHtcbiAgICByZXR1cm4gJHJlcGxhY2UuY2FsbChTdHJpbmcocyksIC9cIi9nLCAnJnF1b3Q7Jyk7XG59XG5cbmZ1bmN0aW9uIGlzQXJyYXkob2JqKSB7IHJldHVybiB0b1N0cihvYmopID09PSAnW29iamVjdCBBcnJheV0nICYmICghdG9TdHJpbmdUYWcgfHwgISh0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiB0b1N0cmluZ1RhZyBpbiBvYmopKTsgfVxuZnVuY3Rpb24gaXNEYXRlKG9iaikgeyByZXR1cm4gdG9TdHIob2JqKSA9PT0gJ1tvYmplY3QgRGF0ZV0nICYmICghdG9TdHJpbmdUYWcgfHwgISh0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiB0b1N0cmluZ1RhZyBpbiBvYmopKTsgfVxuZnVuY3Rpb24gaXNSZWdFeHAob2JqKSB7IHJldHVybiB0b1N0cihvYmopID09PSAnW29iamVjdCBSZWdFeHBdJyAmJiAoIXRvU3RyaW5nVGFnIHx8ICEodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgdG9TdHJpbmdUYWcgaW4gb2JqKSk7IH1cbmZ1bmN0aW9uIGlzRXJyb3Iob2JqKSB7IHJldHVybiB0b1N0cihvYmopID09PSAnW29iamVjdCBFcnJvcl0nICYmICghdG9TdHJpbmdUYWcgfHwgISh0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiB0b1N0cmluZ1RhZyBpbiBvYmopKTsgfVxuZnVuY3Rpb24gaXNTdHJpbmcob2JqKSB7IHJldHVybiB0b1N0cihvYmopID09PSAnW29iamVjdCBTdHJpbmddJyAmJiAoIXRvU3RyaW5nVGFnIHx8ICEodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcgJiYgdG9TdHJpbmdUYWcgaW4gb2JqKSk7IH1cbmZ1bmN0aW9uIGlzTnVtYmVyKG9iaikgeyByZXR1cm4gdG9TdHIob2JqKSA9PT0gJ1tvYmplY3QgTnVtYmVyXScgJiYgKCF0b1N0cmluZ1RhZyB8fCAhKHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIHRvU3RyaW5nVGFnIGluIG9iaikpOyB9XG5mdW5jdGlvbiBpc0Jvb2xlYW4ob2JqKSB7IHJldHVybiB0b1N0cihvYmopID09PSAnW29iamVjdCBCb29sZWFuXScgJiYgKCF0b1N0cmluZ1RhZyB8fCAhKHR5cGVvZiBvYmogPT09ICdvYmplY3QnICYmIHRvU3RyaW5nVGFnIGluIG9iaikpOyB9XG5cbi8vIFN5bWJvbCBhbmQgQmlnSW50IGRvIGhhdmUgU3ltYm9sLnRvU3RyaW5nVGFnIGJ5IHNwZWMsIHNvIHRoYXQgY2FuJ3QgYmUgdXNlZCB0byBlbGltaW5hdGUgZmFsc2UgcG9zaXRpdmVzXG5mdW5jdGlvbiBpc1N5bWJvbChvYmopIHtcbiAgICBpZiAoaGFzU2hhbW1lZFN5bWJvbHMpIHtcbiAgICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JyAmJiBvYmogaW5zdGFuY2VvZiBTeW1ib2w7XG4gICAgfVxuICAgIGlmICh0eXBlb2Ygb2JqID09PSAnc3ltYm9sJykge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gICAgaWYgKCFvYmogfHwgdHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgfHwgIXN5bVRvU3RyaW5nKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgc3ltVG9TdHJpbmcuY2FsbChvYmopO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaXNCaWdJbnQob2JqKSB7XG4gICAgaWYgKCFvYmogfHwgdHlwZW9mIG9iaiAhPT0gJ29iamVjdCcgfHwgIWJpZ0ludFZhbHVlT2YpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICBiaWdJbnRWYWx1ZU9mLmNhbGwob2JqKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbnZhciBoYXNPd24gPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5IHx8IGZ1bmN0aW9uIChrZXkpIHsgcmV0dXJuIGtleSBpbiB0aGlzOyB9O1xuZnVuY3Rpb24gaGFzKG9iaiwga2V5KSB7XG4gICAgcmV0dXJuIGhhc093bi5jYWxsKG9iaiwga2V5KTtcbn1cblxuZnVuY3Rpb24gdG9TdHIob2JqKSB7XG4gICAgcmV0dXJuIG9iamVjdFRvU3RyaW5nLmNhbGwob2JqKTtcbn1cblxuZnVuY3Rpb24gbmFtZU9mKGYpIHtcbiAgICBpZiAoZi5uYW1lKSB7IHJldHVybiBmLm5hbWU7IH1cbiAgICB2YXIgbSA9ICRtYXRjaC5jYWxsKGZ1bmN0aW9uVG9TdHJpbmcuY2FsbChmKSwgL15mdW5jdGlvblxccyooW1xcdyRdKykvKTtcbiAgICBpZiAobSkgeyByZXR1cm4gbVsxXTsgfVxuICAgIHJldHVybiBudWxsO1xufVxuXG5mdW5jdGlvbiBpbmRleE9mKHhzLCB4KSB7XG4gICAgaWYgKHhzLmluZGV4T2YpIHsgcmV0dXJuIHhzLmluZGV4T2YoeCk7IH1cbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IHhzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBpZiAoeHNbaV0gPT09IHgpIHsgcmV0dXJuIGk7IH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xufVxuXG5mdW5jdGlvbiBpc01hcCh4KSB7XG4gICAgaWYgKCFtYXBTaXplIHx8ICF4IHx8IHR5cGVvZiB4ICE9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIG1hcFNpemUuY2FsbCh4KTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHNldFNpemUuY2FsbCh4KTtcbiAgICAgICAgfSBjYXRjaCAocykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHggaW5zdGFuY2VvZiBNYXA7IC8vIGNvcmUtanMgd29ya2Fyb3VuZCwgcHJlLXYyLjUuMFxuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1dlYWtNYXAoeCkge1xuICAgIGlmICghd2Vha01hcEhhcyB8fCAheCB8fCB0eXBlb2YgeCAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICB3ZWFrTWFwSGFzLmNhbGwoeCwgd2Vha01hcEhhcyk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB3ZWFrU2V0SGFzLmNhbGwoeCwgd2Vha1NldEhhcyk7XG4gICAgICAgIH0gY2F0Y2ggKHMpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB4IGluc3RhbmNlb2YgV2Vha01hcDsgLy8gY29yZS1qcyB3b3JrYXJvdW5kLCBwcmUtdjIuNS4wXG4gICAgfSBjYXRjaCAoZSkge31cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzV2Vha1JlZih4KSB7XG4gICAgaWYgKCF3ZWFrUmVmRGVyZWYgfHwgIXggfHwgdHlwZW9mIHggIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgd2Vha1JlZkRlcmVmLmNhbGwoeCk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1NldCh4KSB7XG4gICAgaWYgKCFzZXRTaXplIHx8ICF4IHx8IHR5cGVvZiB4ICE9PSAnb2JqZWN0Jykge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIHNldFNpemUuY2FsbCh4KTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIG1hcFNpemUuY2FsbCh4KTtcbiAgICAgICAgfSBjYXRjaCAobSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHggaW5zdGFuY2VvZiBTZXQ7IC8vIGNvcmUtanMgd29ya2Fyb3VuZCwgcHJlLXYyLjUuMFxuICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBpc1dlYWtTZXQoeCkge1xuICAgIGlmICghd2Vha1NldEhhcyB8fCAheCB8fCB0eXBlb2YgeCAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgICB3ZWFrU2V0SGFzLmNhbGwoeCwgd2Vha1NldEhhcyk7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICB3ZWFrTWFwSGFzLmNhbGwoeCwgd2Vha01hcEhhcyk7XG4gICAgICAgIH0gY2F0Y2ggKHMpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB4IGluc3RhbmNlb2YgV2Vha1NldDsgLy8gY29yZS1qcyB3b3JrYXJvdW5kLCBwcmUtdjIuNS4wXG4gICAgfSBjYXRjaCAoZSkge31cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGlzRWxlbWVudCh4KSB7XG4gICAgaWYgKCF4IHx8IHR5cGVvZiB4ICE9PSAnb2JqZWN0JykgeyByZXR1cm4gZmFsc2U7IH1cbiAgICBpZiAodHlwZW9mIEhUTUxFbGVtZW50ICE9PSAndW5kZWZpbmVkJyAmJiB4IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIHJldHVybiB0eXBlb2YgeC5ub2RlTmFtZSA9PT0gJ3N0cmluZycgJiYgdHlwZW9mIHguZ2V0QXR0cmlidXRlID09PSAnZnVuY3Rpb24nO1xufVxuXG5mdW5jdGlvbiBpbnNwZWN0U3RyaW5nKHN0ciwgb3B0cykge1xuICAgIGlmIChzdHIubGVuZ3RoID4gb3B0cy5tYXhTdHJpbmdMZW5ndGgpIHtcbiAgICAgICAgdmFyIHJlbWFpbmluZyA9IHN0ci5sZW5ndGggLSBvcHRzLm1heFN0cmluZ0xlbmd0aDtcbiAgICAgICAgdmFyIHRyYWlsZXIgPSAnLi4uICcgKyByZW1haW5pbmcgKyAnIG1vcmUgY2hhcmFjdGVyJyArIChyZW1haW5pbmcgPiAxID8gJ3MnIDogJycpO1xuICAgICAgICByZXR1cm4gaW5zcGVjdFN0cmluZygkc2xpY2UuY2FsbChzdHIsIDAsIG9wdHMubWF4U3RyaW5nTGVuZ3RoKSwgb3B0cykgKyB0cmFpbGVyO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udHJvbC1yZWdleFxuICAgIHZhciBzID0gJHJlcGxhY2UuY2FsbCgkcmVwbGFjZS5jYWxsKHN0ciwgLyhbJ1xcXFxdKS9nLCAnXFxcXCQxJyksIC9bXFx4MDAtXFx4MWZdL2csIGxvd2J5dGUpO1xuICAgIHJldHVybiB3cmFwUXVvdGVzKHMsICdzaW5nbGUnLCBvcHRzKTtcbn1cblxuZnVuY3Rpb24gbG93Ynl0ZShjKSB7XG4gICAgdmFyIG4gPSBjLmNoYXJDb2RlQXQoMCk7XG4gICAgdmFyIHggPSB7XG4gICAgICAgIDg6ICdiJyxcbiAgICAgICAgOTogJ3QnLFxuICAgICAgICAxMDogJ24nLFxuICAgICAgICAxMjogJ2YnLFxuICAgICAgICAxMzogJ3InXG4gICAgfVtuXTtcbiAgICBpZiAoeCkgeyByZXR1cm4gJ1xcXFwnICsgeDsgfVxuICAgIHJldHVybiAnXFxcXHgnICsgKG4gPCAweDEwID8gJzAnIDogJycpICsgJHRvVXBwZXJDYXNlLmNhbGwobi50b1N0cmluZygxNikpO1xufVxuXG5mdW5jdGlvbiBtYXJrQm94ZWQoc3RyKSB7XG4gICAgcmV0dXJuICdPYmplY3QoJyArIHN0ciArICcpJztcbn1cblxuZnVuY3Rpb24gd2Vha0NvbGxlY3Rpb25PZih0eXBlKSB7XG4gICAgcmV0dXJuIHR5cGUgKyAnIHsgPyB9Jztcbn1cblxuZnVuY3Rpb24gY29sbGVjdGlvbk9mKHR5cGUsIHNpemUsIGVudHJpZXMsIGluZGVudCkge1xuICAgIHZhciBqb2luZWRFbnRyaWVzID0gaW5kZW50ID8gaW5kZW50ZWRKb2luKGVudHJpZXMsIGluZGVudCkgOiAkam9pbi5jYWxsKGVudHJpZXMsICcsICcpO1xuICAgIHJldHVybiB0eXBlICsgJyAoJyArIHNpemUgKyAnKSB7JyArIGpvaW5lZEVudHJpZXMgKyAnfSc7XG59XG5cbmZ1bmN0aW9uIHNpbmdsZUxpbmVWYWx1ZXMoeHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHhzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChpbmRleE9mKHhzW2ldLCAnXFxuJykgPj0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBnZXRJbmRlbnQob3B0cywgZGVwdGgpIHtcbiAgICB2YXIgYmFzZUluZGVudDtcbiAgICBpZiAob3B0cy5pbmRlbnQgPT09ICdcXHQnKSB7XG4gICAgICAgIGJhc2VJbmRlbnQgPSAnXFx0JztcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBvcHRzLmluZGVudCA9PT0gJ251bWJlcicgJiYgb3B0cy5pbmRlbnQgPiAwKSB7XG4gICAgICAgIGJhc2VJbmRlbnQgPSAkam9pbi5jYWxsKEFycmF5KG9wdHMuaW5kZW50ICsgMSksICcgJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIGJhc2U6IGJhc2VJbmRlbnQsXG4gICAgICAgIHByZXY6ICRqb2luLmNhbGwoQXJyYXkoZGVwdGggKyAxKSwgYmFzZUluZGVudClcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBpbmRlbnRlZEpvaW4oeHMsIGluZGVudCkge1xuICAgIGlmICh4cy5sZW5ndGggPT09IDApIHsgcmV0dXJuICcnOyB9XG4gICAgdmFyIGxpbmVKb2luZXIgPSAnXFxuJyArIGluZGVudC5wcmV2ICsgaW5kZW50LmJhc2U7XG4gICAgcmV0dXJuIGxpbmVKb2luZXIgKyAkam9pbi5jYWxsKHhzLCAnLCcgKyBsaW5lSm9pbmVyKSArICdcXG4nICsgaW5kZW50LnByZXY7XG59XG5cbmZ1bmN0aW9uIGFyck9iaktleXMob2JqLCBpbnNwZWN0KSB7XG4gICAgdmFyIGlzQXJyID0gaXNBcnJheShvYmopO1xuICAgIHZhciB4cyA9IFtdO1xuICAgIGlmIChpc0Fycikge1xuICAgICAgICB4cy5sZW5ndGggPSBvYmoubGVuZ3RoO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iai5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgeHNbaV0gPSBoYXMob2JqLCBpKSA/IGluc3BlY3Qob2JqW2ldLCBvYmopIDogJyc7XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIHN5bXMgPSB0eXBlb2YgZ09QUyA9PT0gJ2Z1bmN0aW9uJyA/IGdPUFMob2JqKSA6IFtdO1xuICAgIHZhciBzeW1NYXA7XG4gICAgaWYgKGhhc1NoYW1tZWRTeW1ib2xzKSB7XG4gICAgICAgIHN5bU1hcCA9IHt9O1xuICAgICAgICBmb3IgKHZhciBrID0gMDsgayA8IHN5bXMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgICAgIHN5bU1hcFsnJCcgKyBzeW1zW2tdXSA9IHN5bXNba107XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXhcbiAgICAgICAgaWYgKCFoYXMob2JqLCBrZXkpKSB7IGNvbnRpbnVlOyB9IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcmVzdHJpY3RlZC1zeW50YXgsIG5vLWNvbnRpbnVlXG4gICAgICAgIGlmIChpc0FyciAmJiBTdHJpbmcoTnVtYmVyKGtleSkpID09PSBrZXkgJiYga2V5IDwgb2JqLmxlbmd0aCkgeyBjb250aW51ZTsgfSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXJlc3RyaWN0ZWQtc3ludGF4LCBuby1jb250aW51ZVxuICAgICAgICBpZiAoaGFzU2hhbW1lZFN5bWJvbHMgJiYgc3ltTWFwWyckJyArIGtleV0gaW5zdGFuY2VvZiBTeW1ib2wpIHtcbiAgICAgICAgICAgIC8vIHRoaXMgaXMgdG8gcHJldmVudCBzaGFtbWVkIFN5bWJvbHMsIHdoaWNoIGFyZSBzdG9yZWQgYXMgc3RyaW5ncywgZnJvbSBiZWluZyBpbmNsdWRlZCBpbiB0aGUgc3RyaW5nIGtleSBzZWN0aW9uXG4gICAgICAgICAgICBjb250aW51ZTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1yZXN0cmljdGVkLXN5bnRheCwgbm8tY29udGludWVcbiAgICAgICAgfSBlbHNlIGlmICgkdGVzdC5jYWxsKC9bXlxcdyRdLywga2V5KSkge1xuICAgICAgICAgICAgeHMucHVzaChpbnNwZWN0KGtleSwgb2JqKSArICc6ICcgKyBpbnNwZWN0KG9ialtrZXldLCBvYmopKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHhzLnB1c2goa2V5ICsgJzogJyArIGluc3BlY3Qob2JqW2tleV0sIG9iaikpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZ09QUyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHN5bXMubGVuZ3RoOyBqKyspIHtcbiAgICAgICAgICAgIGlmIChpc0VudW1lcmFibGUuY2FsbChvYmosIHN5bXNbal0pKSB7XG4gICAgICAgICAgICAgICAgeHMucHVzaCgnWycgKyBpbnNwZWN0KHN5bXNbal0pICsgJ106ICcgKyBpbnNwZWN0KG9ialtzeW1zW2pdXSwgb2JqKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHhzO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgcmVwbGFjZSA9IFN0cmluZy5wcm90b3R5cGUucmVwbGFjZTtcbnZhciBwZXJjZW50VHdlbnRpZXMgPSAvJTIwL2c7XG5cbnZhciBGb3JtYXQgPSB7XG4gICAgUkZDMTczODogJ1JGQzE3MzgnLFxuICAgIFJGQzM5ODY6ICdSRkMzOTg2J1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICAgJ2RlZmF1bHQnOiBGb3JtYXQuUkZDMzk4NixcbiAgICBmb3JtYXR0ZXJzOiB7XG4gICAgICAgIFJGQzE3Mzg6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHJlcGxhY2UuY2FsbCh2YWx1ZSwgcGVyY2VudFR3ZW50aWVzLCAnKycpO1xuICAgICAgICB9LFxuICAgICAgICBSRkMzOTg2OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybiBTdHJpbmcodmFsdWUpO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBSRkMxNzM4OiBGb3JtYXQuUkZDMTczOCxcbiAgICBSRkMzOTg2OiBGb3JtYXQuUkZDMzk4NlxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHN0cmluZ2lmeSA9IHJlcXVpcmUoJy4vc3RyaW5naWZ5Jyk7XG52YXIgcGFyc2UgPSByZXF1aXJlKCcuL3BhcnNlJyk7XG52YXIgZm9ybWF0cyA9IHJlcXVpcmUoJy4vZm9ybWF0cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBmb3JtYXRzOiBmb3JtYXRzLFxuICAgIHBhcnNlOiBwYXJzZSxcbiAgICBzdHJpbmdpZnk6IHN0cmluZ2lmeVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIHV0aWxzID0gcmVxdWlyZSgnLi91dGlscycpO1xuXG52YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxudmFyIGRlZmF1bHRzID0ge1xuICAgIGFsbG93RG90czogZmFsc2UsXG4gICAgYWxsb3dQcm90b3R5cGVzOiBmYWxzZSxcbiAgICBhbGxvd1NwYXJzZTogZmFsc2UsXG4gICAgYXJyYXlMaW1pdDogMjAsXG4gICAgY2hhcnNldDogJ3V0Zi04JyxcbiAgICBjaGFyc2V0U2VudGluZWw6IGZhbHNlLFxuICAgIGNvbW1hOiBmYWxzZSxcbiAgICBkZWNvZGVyOiB1dGlscy5kZWNvZGUsXG4gICAgZGVsaW1pdGVyOiAnJicsXG4gICAgZGVwdGg6IDUsXG4gICAgaWdub3JlUXVlcnlQcmVmaXg6IGZhbHNlLFxuICAgIGludGVycHJldE51bWVyaWNFbnRpdGllczogZmFsc2UsXG4gICAgcGFyYW1ldGVyTGltaXQ6IDEwMDAsXG4gICAgcGFyc2VBcnJheXM6IHRydWUsXG4gICAgcGxhaW5PYmplY3RzOiBmYWxzZSxcbiAgICBzdHJpY3ROdWxsSGFuZGxpbmc6IGZhbHNlXG59O1xuXG52YXIgaW50ZXJwcmV0TnVtZXJpY0VudGl0aWVzID0gZnVuY3Rpb24gKHN0cikge1xuICAgIHJldHVybiBzdHIucmVwbGFjZSgvJiMoXFxkKyk7L2csIGZ1bmN0aW9uICgkMCwgbnVtYmVyU3RyKSB7XG4gICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKHBhcnNlSW50KG51bWJlclN0ciwgMTApKTtcbiAgICB9KTtcbn07XG5cbnZhciBwYXJzZUFycmF5VmFsdWUgPSBmdW5jdGlvbiAodmFsLCBvcHRpb25zKSB7XG4gICAgaWYgKHZhbCAmJiB0eXBlb2YgdmFsID09PSAnc3RyaW5nJyAmJiBvcHRpb25zLmNvbW1hICYmIHZhbC5pbmRleE9mKCcsJykgPiAtMSkge1xuICAgICAgICByZXR1cm4gdmFsLnNwbGl0KCcsJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbDtcbn07XG5cbi8vIFRoaXMgaXMgd2hhdCBicm93c2VycyB3aWxsIHN1Ym1pdCB3aGVuIHRoZSDinJMgY2hhcmFjdGVyIG9jY3VycyBpbiBhblxuLy8gYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkIGJvZHkgYW5kIHRoZSBlbmNvZGluZyBvZiB0aGUgcGFnZSBjb250YWluaW5nXG4vLyB0aGUgZm9ybSBpcyBpc28tODg1OS0xLCBvciB3aGVuIHRoZSBzdWJtaXR0ZWQgZm9ybSBoYXMgYW4gYWNjZXB0LWNoYXJzZXRcbi8vIGF0dHJpYnV0ZSBvZiBpc28tODg1OS0xLiBQcmVzdW1hYmx5IGFsc28gd2l0aCBvdGhlciBjaGFyc2V0cyB0aGF0IGRvIG5vdCBjb250YWluXG4vLyB0aGUg4pyTIGNoYXJhY3Rlciwgc3VjaCBhcyB1cy1hc2NpaS5cbnZhciBpc29TZW50aW5lbCA9ICd1dGY4PSUyNiUyMzEwMDAzJTNCJzsgLy8gZW5jb2RlVVJJQ29tcG9uZW50KCcmIzEwMDAzOycpXG5cbi8vIFRoZXNlIGFyZSB0aGUgcGVyY2VudC1lbmNvZGVkIHV0Zi04IG9jdGV0cyByZXByZXNlbnRpbmcgYSBjaGVja21hcmssIGluZGljYXRpbmcgdGhhdCB0aGUgcmVxdWVzdCBhY3R1YWxseSBpcyB1dGYtOCBlbmNvZGVkLlxudmFyIGNoYXJzZXRTZW50aW5lbCA9ICd1dGY4PSVFMiU5QyU5Myc7IC8vIGVuY29kZVVSSUNvbXBvbmVudCgn4pyTJylcblxudmFyIHBhcnNlVmFsdWVzID0gZnVuY3Rpb24gcGFyc2VRdWVyeVN0cmluZ1ZhbHVlcyhzdHIsIG9wdGlvbnMpIHtcbiAgICB2YXIgb2JqID0ge307XG4gICAgdmFyIGNsZWFuU3RyID0gb3B0aW9ucy5pZ25vcmVRdWVyeVByZWZpeCA/IHN0ci5yZXBsYWNlKC9eXFw/LywgJycpIDogc3RyO1xuICAgIHZhciBsaW1pdCA9IG9wdGlvbnMucGFyYW1ldGVyTGltaXQgPT09IEluZmluaXR5ID8gdW5kZWZpbmVkIDogb3B0aW9ucy5wYXJhbWV0ZXJMaW1pdDtcbiAgICB2YXIgcGFydHMgPSBjbGVhblN0ci5zcGxpdChvcHRpb25zLmRlbGltaXRlciwgbGltaXQpO1xuICAgIHZhciBza2lwSW5kZXggPSAtMTsgLy8gS2VlcCB0cmFjayBvZiB3aGVyZSB0aGUgdXRmOCBzZW50aW5lbCB3YXMgZm91bmRcbiAgICB2YXIgaTtcblxuICAgIHZhciBjaGFyc2V0ID0gb3B0aW9ucy5jaGFyc2V0O1xuICAgIGlmIChvcHRpb25zLmNoYXJzZXRTZW50aW5lbCkge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgcGFydHMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGlmIChwYXJ0c1tpXS5pbmRleE9mKCd1dGY4PScpID09PSAwKSB7XG4gICAgICAgICAgICAgICAgaWYgKHBhcnRzW2ldID09PSBjaGFyc2V0U2VudGluZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhcnNldCA9ICd1dGYtOCc7XG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmIChwYXJ0c1tpXSA9PT0gaXNvU2VudGluZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgY2hhcnNldCA9ICdpc28tODg1OS0xJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc2tpcEluZGV4ID0gaTtcbiAgICAgICAgICAgICAgICBpID0gcGFydHMubGVuZ3RoOyAvLyBUaGUgZXNsaW50IHNldHRpbmdzIGRvIG5vdCBhbGxvdyBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZvciAoaSA9IDA7IGkgPCBwYXJ0cy5sZW5ndGg7ICsraSkge1xuICAgICAgICBpZiAoaSA9PT0gc2tpcEluZGV4KSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgcGFydCA9IHBhcnRzW2ldO1xuXG4gICAgICAgIHZhciBicmFja2V0RXF1YWxzUG9zID0gcGFydC5pbmRleE9mKCddPScpO1xuICAgICAgICB2YXIgcG9zID0gYnJhY2tldEVxdWFsc1BvcyA9PT0gLTEgPyBwYXJ0LmluZGV4T2YoJz0nKSA6IGJyYWNrZXRFcXVhbHNQb3MgKyAxO1xuXG4gICAgICAgIHZhciBrZXksIHZhbDtcbiAgICAgICAgaWYgKHBvcyA9PT0gLTEpIHtcbiAgICAgICAgICAgIGtleSA9IG9wdGlvbnMuZGVjb2RlcihwYXJ0LCBkZWZhdWx0cy5kZWNvZGVyLCBjaGFyc2V0LCAna2V5Jyk7XG4gICAgICAgICAgICB2YWwgPSBvcHRpb25zLnN0cmljdE51bGxIYW5kbGluZyA/IG51bGwgOiAnJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGtleSA9IG9wdGlvbnMuZGVjb2RlcihwYXJ0LnNsaWNlKDAsIHBvcyksIGRlZmF1bHRzLmRlY29kZXIsIGNoYXJzZXQsICdrZXknKTtcbiAgICAgICAgICAgIHZhbCA9IHV0aWxzLm1heWJlTWFwKFxuICAgICAgICAgICAgICAgIHBhcnNlQXJyYXlWYWx1ZShwYXJ0LnNsaWNlKHBvcyArIDEpLCBvcHRpb25zKSxcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiAoZW5jb2RlZFZhbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3B0aW9ucy5kZWNvZGVyKGVuY29kZWRWYWwsIGRlZmF1bHRzLmRlY29kZXIsIGNoYXJzZXQsICd2YWx1ZScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsICYmIG9wdGlvbnMuaW50ZXJwcmV0TnVtZXJpY0VudGl0aWVzICYmIGNoYXJzZXQgPT09ICdpc28tODg1OS0xJykge1xuICAgICAgICAgICAgdmFsID0gaW50ZXJwcmV0TnVtZXJpY0VudGl0aWVzKHZhbCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocGFydC5pbmRleE9mKCdbXT0nKSA+IC0xKSB7XG4gICAgICAgICAgICB2YWwgPSBpc0FycmF5KHZhbCkgPyBbdmFsXSA6IHZhbDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoYXMuY2FsbChvYmosIGtleSkpIHtcbiAgICAgICAgICAgIG9ialtrZXldID0gdXRpbHMuY29tYmluZShvYmpba2V5XSwgdmFsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG9ialtrZXldID0gdmFsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG9iajtcbn07XG5cbnZhciBwYXJzZU9iamVjdCA9IGZ1bmN0aW9uIChjaGFpbiwgdmFsLCBvcHRpb25zLCB2YWx1ZXNQYXJzZWQpIHtcbiAgICB2YXIgbGVhZiA9IHZhbHVlc1BhcnNlZCA/IHZhbCA6IHBhcnNlQXJyYXlWYWx1ZSh2YWwsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgaSA9IGNoYWluLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBvYmo7XG4gICAgICAgIHZhciByb290ID0gY2hhaW5baV07XG5cbiAgICAgICAgaWYgKHJvb3QgPT09ICdbXScgJiYgb3B0aW9ucy5wYXJzZUFycmF5cykge1xuICAgICAgICAgICAgb2JqID0gW10uY29uY2F0KGxlYWYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgb2JqID0gb3B0aW9ucy5wbGFpbk9iamVjdHMgPyBPYmplY3QuY3JlYXRlKG51bGwpIDoge307XG4gICAgICAgICAgICB2YXIgY2xlYW5Sb290ID0gcm9vdC5jaGFyQXQoMCkgPT09ICdbJyAmJiByb290LmNoYXJBdChyb290Lmxlbmd0aCAtIDEpID09PSAnXScgPyByb290LnNsaWNlKDEsIC0xKSA6IHJvb3Q7XG4gICAgICAgICAgICB2YXIgaW5kZXggPSBwYXJzZUludChjbGVhblJvb3QsIDEwKTtcbiAgICAgICAgICAgIGlmICghb3B0aW9ucy5wYXJzZUFycmF5cyAmJiBjbGVhblJvb3QgPT09ICcnKSB7XG4gICAgICAgICAgICAgICAgb2JqID0geyAwOiBsZWFmIH07XG4gICAgICAgICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAgICAgICAgICFpc05hTihpbmRleClcbiAgICAgICAgICAgICAgICAmJiByb290ICE9PSBjbGVhblJvb3RcbiAgICAgICAgICAgICAgICAmJiBTdHJpbmcoaW5kZXgpID09PSBjbGVhblJvb3RcbiAgICAgICAgICAgICAgICAmJiBpbmRleCA+PSAwXG4gICAgICAgICAgICAgICAgJiYgKG9wdGlvbnMucGFyc2VBcnJheXMgJiYgaW5kZXggPD0gb3B0aW9ucy5hcnJheUxpbWl0KVxuICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgb2JqID0gW107XG4gICAgICAgICAgICAgICAgb2JqW2luZGV4XSA9IGxlYWY7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGNsZWFuUm9vdCAhPT0gJ19fcHJvdG9fXycpIHtcbiAgICAgICAgICAgICAgICBvYmpbY2xlYW5Sb290XSA9IGxlYWY7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBsZWFmID0gb2JqO1xuICAgIH1cblxuICAgIHJldHVybiBsZWFmO1xufTtcblxudmFyIHBhcnNlS2V5cyA9IGZ1bmN0aW9uIHBhcnNlUXVlcnlTdHJpbmdLZXlzKGdpdmVuS2V5LCB2YWwsIG9wdGlvbnMsIHZhbHVlc1BhcnNlZCkge1xuICAgIGlmICghZ2l2ZW5LZXkpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFRyYW5zZm9ybSBkb3Qgbm90YXRpb24gdG8gYnJhY2tldCBub3RhdGlvblxuICAgIHZhciBrZXkgPSBvcHRpb25zLmFsbG93RG90cyA/IGdpdmVuS2V5LnJlcGxhY2UoL1xcLihbXi5bXSspL2csICdbJDFdJykgOiBnaXZlbktleTtcblxuICAgIC8vIFRoZSByZWdleCBjaHVua3NcblxuICAgIHZhciBicmFja2V0cyA9IC8oXFxbW15bXFxdXSpdKS87XG4gICAgdmFyIGNoaWxkID0gLyhcXFtbXltcXF1dKl0pL2c7XG5cbiAgICAvLyBHZXQgdGhlIHBhcmVudFxuXG4gICAgdmFyIHNlZ21lbnQgPSBvcHRpb25zLmRlcHRoID4gMCAmJiBicmFja2V0cy5leGVjKGtleSk7XG4gICAgdmFyIHBhcmVudCA9IHNlZ21lbnQgPyBrZXkuc2xpY2UoMCwgc2VnbWVudC5pbmRleCkgOiBrZXk7XG5cbiAgICAvLyBTdGFzaCB0aGUgcGFyZW50IGlmIGl0IGV4aXN0c1xuXG4gICAgdmFyIGtleXMgPSBbXTtcbiAgICBpZiAocGFyZW50KSB7XG4gICAgICAgIC8vIElmIHdlIGFyZW4ndCB1c2luZyBwbGFpbiBvYmplY3RzLCBvcHRpb25hbGx5IHByZWZpeCBrZXlzIHRoYXQgd291bGQgb3ZlcndyaXRlIG9iamVjdCBwcm90b3R5cGUgcHJvcGVydGllc1xuICAgICAgICBpZiAoIW9wdGlvbnMucGxhaW5PYmplY3RzICYmIGhhcy5jYWxsKE9iamVjdC5wcm90b3R5cGUsIHBhcmVudCkpIHtcbiAgICAgICAgICAgIGlmICghb3B0aW9ucy5hbGxvd1Byb3RvdHlwZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBrZXlzLnB1c2gocGFyZW50KTtcbiAgICB9XG5cbiAgICAvLyBMb29wIHRocm91Z2ggY2hpbGRyZW4gYXBwZW5kaW5nIHRvIHRoZSBhcnJheSB1bnRpbCB3ZSBoaXQgZGVwdGhcblxuICAgIHZhciBpID0gMDtcbiAgICB3aGlsZSAob3B0aW9ucy5kZXB0aCA+IDAgJiYgKHNlZ21lbnQgPSBjaGlsZC5leGVjKGtleSkpICE9PSBudWxsICYmIGkgPCBvcHRpb25zLmRlcHRoKSB7XG4gICAgICAgIGkgKz0gMTtcbiAgICAgICAgaWYgKCFvcHRpb25zLnBsYWluT2JqZWN0cyAmJiBoYXMuY2FsbChPYmplY3QucHJvdG90eXBlLCBzZWdtZW50WzFdLnNsaWNlKDEsIC0xKSkpIHtcbiAgICAgICAgICAgIGlmICghb3B0aW9ucy5hbGxvd1Byb3RvdHlwZXMpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAga2V5cy5wdXNoKHNlZ21lbnRbMV0pO1xuICAgIH1cblxuICAgIC8vIElmIHRoZXJlJ3MgYSByZW1haW5kZXIsIGp1c3QgYWRkIHdoYXRldmVyIGlzIGxlZnRcblxuICAgIGlmIChzZWdtZW50KSB7XG4gICAgICAgIGtleXMucHVzaCgnWycgKyBrZXkuc2xpY2Uoc2VnbWVudC5pbmRleCkgKyAnXScpO1xuICAgIH1cblxuICAgIHJldHVybiBwYXJzZU9iamVjdChrZXlzLCB2YWwsIG9wdGlvbnMsIHZhbHVlc1BhcnNlZCk7XG59O1xuXG52YXIgbm9ybWFsaXplUGFyc2VPcHRpb25zID0gZnVuY3Rpb24gbm9ybWFsaXplUGFyc2VPcHRpb25zKG9wdHMpIHtcbiAgICBpZiAoIW9wdHMpIHtcbiAgICAgICAgcmV0dXJuIGRlZmF1bHRzO1xuICAgIH1cblxuICAgIGlmIChvcHRzLmRlY29kZXIgIT09IG51bGwgJiYgb3B0cy5kZWNvZGVyICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIG9wdHMuZGVjb2RlciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdEZWNvZGVyIGhhcyB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygb3B0cy5jaGFyc2V0ICE9PSAndW5kZWZpbmVkJyAmJiBvcHRzLmNoYXJzZXQgIT09ICd1dGYtOCcgJiYgb3B0cy5jaGFyc2V0ICE9PSAnaXNvLTg4NTktMScpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVGhlIGNoYXJzZXQgb3B0aW9uIG11c3QgYmUgZWl0aGVyIHV0Zi04LCBpc28tODg1OS0xLCBvciB1bmRlZmluZWQnKTtcbiAgICB9XG4gICAgdmFyIGNoYXJzZXQgPSB0eXBlb2Ygb3B0cy5jaGFyc2V0ID09PSAndW5kZWZpbmVkJyA/IGRlZmF1bHRzLmNoYXJzZXQgOiBvcHRzLmNoYXJzZXQ7XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBhbGxvd0RvdHM6IHR5cGVvZiBvcHRzLmFsbG93RG90cyA9PT0gJ3VuZGVmaW5lZCcgPyBkZWZhdWx0cy5hbGxvd0RvdHMgOiAhIW9wdHMuYWxsb3dEb3RzLFxuICAgICAgICBhbGxvd1Byb3RvdHlwZXM6IHR5cGVvZiBvcHRzLmFsbG93UHJvdG90eXBlcyA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5hbGxvd1Byb3RvdHlwZXMgOiBkZWZhdWx0cy5hbGxvd1Byb3RvdHlwZXMsXG4gICAgICAgIGFsbG93U3BhcnNlOiB0eXBlb2Ygb3B0cy5hbGxvd1NwYXJzZSA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5hbGxvd1NwYXJzZSA6IGRlZmF1bHRzLmFsbG93U3BhcnNlLFxuICAgICAgICBhcnJheUxpbWl0OiB0eXBlb2Ygb3B0cy5hcnJheUxpbWl0ID09PSAnbnVtYmVyJyA/IG9wdHMuYXJyYXlMaW1pdCA6IGRlZmF1bHRzLmFycmF5TGltaXQsXG4gICAgICAgIGNoYXJzZXQ6IGNoYXJzZXQsXG4gICAgICAgIGNoYXJzZXRTZW50aW5lbDogdHlwZW9mIG9wdHMuY2hhcnNldFNlbnRpbmVsID09PSAnYm9vbGVhbicgPyBvcHRzLmNoYXJzZXRTZW50aW5lbCA6IGRlZmF1bHRzLmNoYXJzZXRTZW50aW5lbCxcbiAgICAgICAgY29tbWE6IHR5cGVvZiBvcHRzLmNvbW1hID09PSAnYm9vbGVhbicgPyBvcHRzLmNvbW1hIDogZGVmYXVsdHMuY29tbWEsXG4gICAgICAgIGRlY29kZXI6IHR5cGVvZiBvcHRzLmRlY29kZXIgPT09ICdmdW5jdGlvbicgPyBvcHRzLmRlY29kZXIgOiBkZWZhdWx0cy5kZWNvZGVyLFxuICAgICAgICBkZWxpbWl0ZXI6IHR5cGVvZiBvcHRzLmRlbGltaXRlciA9PT0gJ3N0cmluZycgfHwgdXRpbHMuaXNSZWdFeHAob3B0cy5kZWxpbWl0ZXIpID8gb3B0cy5kZWxpbWl0ZXIgOiBkZWZhdWx0cy5kZWxpbWl0ZXIsXG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1pbXBsaWNpdC1jb2VyY2lvbiwgbm8tZXh0cmEtcGFyZW5zXG4gICAgICAgIGRlcHRoOiAodHlwZW9mIG9wdHMuZGVwdGggPT09ICdudW1iZXInIHx8IG9wdHMuZGVwdGggPT09IGZhbHNlKSA/ICtvcHRzLmRlcHRoIDogZGVmYXVsdHMuZGVwdGgsXG4gICAgICAgIGlnbm9yZVF1ZXJ5UHJlZml4OiBvcHRzLmlnbm9yZVF1ZXJ5UHJlZml4ID09PSB0cnVlLFxuICAgICAgICBpbnRlcnByZXROdW1lcmljRW50aXRpZXM6IHR5cGVvZiBvcHRzLmludGVycHJldE51bWVyaWNFbnRpdGllcyA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5pbnRlcnByZXROdW1lcmljRW50aXRpZXMgOiBkZWZhdWx0cy5pbnRlcnByZXROdW1lcmljRW50aXRpZXMsXG4gICAgICAgIHBhcmFtZXRlckxpbWl0OiB0eXBlb2Ygb3B0cy5wYXJhbWV0ZXJMaW1pdCA9PT0gJ251bWJlcicgPyBvcHRzLnBhcmFtZXRlckxpbWl0IDogZGVmYXVsdHMucGFyYW1ldGVyTGltaXQsXG4gICAgICAgIHBhcnNlQXJyYXlzOiBvcHRzLnBhcnNlQXJyYXlzICE9PSBmYWxzZSxcbiAgICAgICAgcGxhaW5PYmplY3RzOiB0eXBlb2Ygb3B0cy5wbGFpbk9iamVjdHMgPT09ICdib29sZWFuJyA/IG9wdHMucGxhaW5PYmplY3RzIDogZGVmYXVsdHMucGxhaW5PYmplY3RzLFxuICAgICAgICBzdHJpY3ROdWxsSGFuZGxpbmc6IHR5cGVvZiBvcHRzLnN0cmljdE51bGxIYW5kbGluZyA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5zdHJpY3ROdWxsSGFuZGxpbmcgOiBkZWZhdWx0cy5zdHJpY3ROdWxsSGFuZGxpbmdcbiAgICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoc3RyLCBvcHRzKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBub3JtYWxpemVQYXJzZU9wdGlvbnMob3B0cyk7XG5cbiAgICBpZiAoc3RyID09PSAnJyB8fCBzdHIgPT09IG51bGwgfHwgdHlwZW9mIHN0ciA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIG9wdGlvbnMucGxhaW5PYmplY3RzID8gT2JqZWN0LmNyZWF0ZShudWxsKSA6IHt9O1xuICAgIH1cblxuICAgIHZhciB0ZW1wT2JqID0gdHlwZW9mIHN0ciA9PT0gJ3N0cmluZycgPyBwYXJzZVZhbHVlcyhzdHIsIG9wdGlvbnMpIDogc3RyO1xuICAgIHZhciBvYmogPSBvcHRpb25zLnBsYWluT2JqZWN0cyA/IE9iamVjdC5jcmVhdGUobnVsbCkgOiB7fTtcblxuICAgIC8vIEl0ZXJhdGUgb3ZlciB0aGUga2V5cyBhbmQgc2V0dXAgdGhlIG5ldyBvYmplY3RcblxuICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXModGVtcE9iaik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgICB2YXIgbmV3T2JqID0gcGFyc2VLZXlzKGtleSwgdGVtcE9ialtrZXldLCBvcHRpb25zLCB0eXBlb2Ygc3RyID09PSAnc3RyaW5nJyk7XG4gICAgICAgIG9iaiA9IHV0aWxzLm1lcmdlKG9iaiwgbmV3T2JqLCBvcHRpb25zKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5hbGxvd1NwYXJzZSA9PT0gdHJ1ZSkge1xuICAgICAgICByZXR1cm4gb2JqO1xuICAgIH1cblxuICAgIHJldHVybiB1dGlscy5jb21wYWN0KG9iaik7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZ2V0U2lkZUNoYW5uZWwgPSByZXF1aXJlKCdzaWRlLWNoYW5uZWwnKTtcbnZhciB1dGlscyA9IHJlcXVpcmUoJy4vdXRpbHMnKTtcbnZhciBmb3JtYXRzID0gcmVxdWlyZSgnLi9mb3JtYXRzJyk7XG52YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxudmFyIGFycmF5UHJlZml4R2VuZXJhdG9ycyA9IHtcbiAgICBicmFja2V0czogZnVuY3Rpb24gYnJhY2tldHMocHJlZml4KSB7XG4gICAgICAgIHJldHVybiBwcmVmaXggKyAnW10nO1xuICAgIH0sXG4gICAgY29tbWE6ICdjb21tYScsXG4gICAgaW5kaWNlczogZnVuY3Rpb24gaW5kaWNlcyhwcmVmaXgsIGtleSkge1xuICAgICAgICByZXR1cm4gcHJlZml4ICsgJ1snICsga2V5ICsgJ10nO1xuICAgIH0sXG4gICAgcmVwZWF0OiBmdW5jdGlvbiByZXBlYXQocHJlZml4KSB7XG4gICAgICAgIHJldHVybiBwcmVmaXg7XG4gICAgfVxufTtcblxudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xudmFyIHNwbGl0ID0gU3RyaW5nLnByb3RvdHlwZS5zcGxpdDtcbnZhciBwdXNoID0gQXJyYXkucHJvdG90eXBlLnB1c2g7XG52YXIgcHVzaFRvQXJyYXkgPSBmdW5jdGlvbiAoYXJyLCB2YWx1ZU9yQXJyYXkpIHtcbiAgICBwdXNoLmFwcGx5KGFyciwgaXNBcnJheSh2YWx1ZU9yQXJyYXkpID8gdmFsdWVPckFycmF5IDogW3ZhbHVlT3JBcnJheV0pO1xufTtcblxudmFyIHRvSVNPID0gRGF0ZS5wcm90b3R5cGUudG9JU09TdHJpbmc7XG5cbnZhciBkZWZhdWx0Rm9ybWF0ID0gZm9ybWF0c1snZGVmYXVsdCddO1xudmFyIGRlZmF1bHRzID0ge1xuICAgIGFkZFF1ZXJ5UHJlZml4OiBmYWxzZSxcbiAgICBhbGxvd0RvdHM6IGZhbHNlLFxuICAgIGNoYXJzZXQ6ICd1dGYtOCcsXG4gICAgY2hhcnNldFNlbnRpbmVsOiBmYWxzZSxcbiAgICBkZWxpbWl0ZXI6ICcmJyxcbiAgICBlbmNvZGU6IHRydWUsXG4gICAgZW5jb2RlcjogdXRpbHMuZW5jb2RlLFxuICAgIGVuY29kZVZhbHVlc09ubHk6IGZhbHNlLFxuICAgIGZvcm1hdDogZGVmYXVsdEZvcm1hdCxcbiAgICBmb3JtYXR0ZXI6IGZvcm1hdHMuZm9ybWF0dGVyc1tkZWZhdWx0Rm9ybWF0XSxcbiAgICAvLyBkZXByZWNhdGVkXG4gICAgaW5kaWNlczogZmFsc2UsXG4gICAgc2VyaWFsaXplRGF0ZTogZnVuY3Rpb24gc2VyaWFsaXplRGF0ZShkYXRlKSB7XG4gICAgICAgIHJldHVybiB0b0lTTy5jYWxsKGRhdGUpO1xuICAgIH0sXG4gICAgc2tpcE51bGxzOiBmYWxzZSxcbiAgICBzdHJpY3ROdWxsSGFuZGxpbmc6IGZhbHNlXG59O1xuXG52YXIgaXNOb25OdWxsaXNoUHJpbWl0aXZlID0gZnVuY3Rpb24gaXNOb25OdWxsaXNoUHJpbWl0aXZlKHYpIHtcbiAgICByZXR1cm4gdHlwZW9mIHYgPT09ICdzdHJpbmcnXG4gICAgICAgIHx8IHR5cGVvZiB2ID09PSAnbnVtYmVyJ1xuICAgICAgICB8fCB0eXBlb2YgdiA9PT0gJ2Jvb2xlYW4nXG4gICAgICAgIHx8IHR5cGVvZiB2ID09PSAnc3ltYm9sJ1xuICAgICAgICB8fCB0eXBlb2YgdiA9PT0gJ2JpZ2ludCc7XG59O1xuXG52YXIgc2VudGluZWwgPSB7fTtcblxudmFyIHN0cmluZ2lmeSA9IGZ1bmN0aW9uIHN0cmluZ2lmeShcbiAgICBvYmplY3QsXG4gICAgcHJlZml4LFxuICAgIGdlbmVyYXRlQXJyYXlQcmVmaXgsXG4gICAgY29tbWFSb3VuZFRyaXAsXG4gICAgc3RyaWN0TnVsbEhhbmRsaW5nLFxuICAgIHNraXBOdWxscyxcbiAgICBlbmNvZGVyLFxuICAgIGZpbHRlcixcbiAgICBzb3J0LFxuICAgIGFsbG93RG90cyxcbiAgICBzZXJpYWxpemVEYXRlLFxuICAgIGZvcm1hdCxcbiAgICBmb3JtYXR0ZXIsXG4gICAgZW5jb2RlVmFsdWVzT25seSxcbiAgICBjaGFyc2V0LFxuICAgIHNpZGVDaGFubmVsXG4pIHtcbiAgICB2YXIgb2JqID0gb2JqZWN0O1xuXG4gICAgdmFyIHRtcFNjID0gc2lkZUNoYW5uZWw7XG4gICAgdmFyIHN0ZXAgPSAwO1xuICAgIHZhciBmaW5kRmxhZyA9IGZhbHNlO1xuICAgIHdoaWxlICgodG1wU2MgPSB0bXBTYy5nZXQoc2VudGluZWwpKSAhPT0gdm9pZCB1bmRlZmluZWQgJiYgIWZpbmRGbGFnKSB7XG4gICAgICAgIC8vIFdoZXJlIG9iamVjdCBsYXN0IGFwcGVhcmVkIGluIHRoZSByZWYgdHJlZVxuICAgICAgICB2YXIgcG9zID0gdG1wU2MuZ2V0KG9iamVjdCk7XG4gICAgICAgIHN0ZXAgKz0gMTtcbiAgICAgICAgaWYgKHR5cGVvZiBwb3MgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBpZiAocG9zID09PSBzdGVwKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0N5Y2xpYyBvYmplY3QgdmFsdWUnKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZmluZEZsYWcgPSB0cnVlOyAvLyBCcmVhayB3aGlsZVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0eXBlb2YgdG1wU2MuZ2V0KHNlbnRpbmVsKSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgIHN0ZXAgPSAwO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBmaWx0ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgb2JqID0gZmlsdGVyKHByZWZpeCwgb2JqKTtcbiAgICB9IGVsc2UgaWYgKG9iaiBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgb2JqID0gc2VyaWFsaXplRGF0ZShvYmopO1xuICAgIH0gZWxzZSBpZiAoZ2VuZXJhdGVBcnJheVByZWZpeCA9PT0gJ2NvbW1hJyAmJiBpc0FycmF5KG9iaikpIHtcbiAgICAgICAgb2JqID0gdXRpbHMubWF5YmVNYXAob2JqLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIERhdGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VyaWFsaXplRGF0ZSh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmIChvYmogPT09IG51bGwpIHtcbiAgICAgICAgaWYgKHN0cmljdE51bGxIYW5kbGluZykge1xuICAgICAgICAgICAgcmV0dXJuIGVuY29kZXIgJiYgIWVuY29kZVZhbHVlc09ubHkgPyBlbmNvZGVyKHByZWZpeCwgZGVmYXVsdHMuZW5jb2RlciwgY2hhcnNldCwgJ2tleScsIGZvcm1hdCkgOiBwcmVmaXg7XG4gICAgICAgIH1cblxuICAgICAgICBvYmogPSAnJztcbiAgICB9XG5cbiAgICBpZiAoaXNOb25OdWxsaXNoUHJpbWl0aXZlKG9iaikgfHwgdXRpbHMuaXNCdWZmZXIob2JqKSkge1xuICAgICAgICBpZiAoZW5jb2Rlcikge1xuICAgICAgICAgICAgdmFyIGtleVZhbHVlID0gZW5jb2RlVmFsdWVzT25seSA/IHByZWZpeCA6IGVuY29kZXIocHJlZml4LCBkZWZhdWx0cy5lbmNvZGVyLCBjaGFyc2V0LCAna2V5JywgZm9ybWF0KTtcbiAgICAgICAgICAgIGlmIChnZW5lcmF0ZUFycmF5UHJlZml4ID09PSAnY29tbWEnICYmIGVuY29kZVZhbHVlc09ubHkpIHtcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWVzQXJyYXkgPSBzcGxpdC5jYWxsKFN0cmluZyhvYmopLCAnLCcpO1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZXNKb2luZWQgPSAnJztcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlc0FycmF5Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlc0pvaW5lZCArPSAoaSA9PT0gMCA/ICcnIDogJywnKSArIGZvcm1hdHRlcihlbmNvZGVyKHZhbHVlc0FycmF5W2ldLCBkZWZhdWx0cy5lbmNvZGVyLCBjaGFyc2V0LCAndmFsdWUnLCBmb3JtYXQpKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIFtmb3JtYXR0ZXIoa2V5VmFsdWUpICsgKGNvbW1hUm91bmRUcmlwICYmIGlzQXJyYXkob2JqKSAmJiB2YWx1ZXNBcnJheS5sZW5ndGggPT09IDEgPyAnW10nIDogJycpICsgJz0nICsgdmFsdWVzSm9pbmVkXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBbZm9ybWF0dGVyKGtleVZhbHVlKSArICc9JyArIGZvcm1hdHRlcihlbmNvZGVyKG9iaiwgZGVmYXVsdHMuZW5jb2RlciwgY2hhcnNldCwgJ3ZhbHVlJywgZm9ybWF0KSldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbZm9ybWF0dGVyKHByZWZpeCkgKyAnPScgKyBmb3JtYXR0ZXIoU3RyaW5nKG9iaikpXTtcbiAgICB9XG5cbiAgICB2YXIgdmFsdWVzID0gW107XG5cbiAgICBpZiAodHlwZW9mIG9iaiA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlcztcbiAgICB9XG5cbiAgICB2YXIgb2JqS2V5cztcbiAgICBpZiAoZ2VuZXJhdGVBcnJheVByZWZpeCA9PT0gJ2NvbW1hJyAmJiBpc0FycmF5KG9iaikpIHtcbiAgICAgICAgLy8gd2UgbmVlZCB0byBqb2luIGVsZW1lbnRzIGluXG4gICAgICAgIG9iaktleXMgPSBbeyB2YWx1ZTogb2JqLmxlbmd0aCA+IDAgPyBvYmouam9pbignLCcpIHx8IG51bGwgOiB2b2lkIHVuZGVmaW5lZCB9XTtcbiAgICB9IGVsc2UgaWYgKGlzQXJyYXkoZmlsdGVyKSkge1xuICAgICAgICBvYmpLZXlzID0gZmlsdGVyO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICAgICAgb2JqS2V5cyA9IHNvcnQgPyBrZXlzLnNvcnQoc29ydCkgOiBrZXlzO1xuICAgIH1cblxuICAgIHZhciBhZGp1c3RlZFByZWZpeCA9IGNvbW1hUm91bmRUcmlwICYmIGlzQXJyYXkob2JqKSAmJiBvYmoubGVuZ3RoID09PSAxID8gcHJlZml4ICsgJ1tdJyA6IHByZWZpeDtcblxuICAgIGZvciAodmFyIGogPSAwOyBqIDwgb2JqS2V5cy5sZW5ndGg7ICsraikge1xuICAgICAgICB2YXIga2V5ID0gb2JqS2V5c1tqXTtcbiAgICAgICAgdmFyIHZhbHVlID0gdHlwZW9mIGtleSA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIGtleS52YWx1ZSAhPT0gJ3VuZGVmaW5lZCcgPyBrZXkudmFsdWUgOiBvYmpba2V5XTtcblxuICAgICAgICBpZiAoc2tpcE51bGxzICYmIHZhbHVlID09PSBudWxsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBrZXlQcmVmaXggPSBpc0FycmF5KG9iailcbiAgICAgICAgICAgID8gdHlwZW9mIGdlbmVyYXRlQXJyYXlQcmVmaXggPT09ICdmdW5jdGlvbicgPyBnZW5lcmF0ZUFycmF5UHJlZml4KGFkanVzdGVkUHJlZml4LCBrZXkpIDogYWRqdXN0ZWRQcmVmaXhcbiAgICAgICAgICAgIDogYWRqdXN0ZWRQcmVmaXggKyAoYWxsb3dEb3RzID8gJy4nICsga2V5IDogJ1snICsga2V5ICsgJ10nKTtcblxuICAgICAgICBzaWRlQ2hhbm5lbC5zZXQob2JqZWN0LCBzdGVwKTtcbiAgICAgICAgdmFyIHZhbHVlU2lkZUNoYW5uZWwgPSBnZXRTaWRlQ2hhbm5lbCgpO1xuICAgICAgICB2YWx1ZVNpZGVDaGFubmVsLnNldChzZW50aW5lbCwgc2lkZUNoYW5uZWwpO1xuICAgICAgICBwdXNoVG9BcnJheSh2YWx1ZXMsIHN0cmluZ2lmeShcbiAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAga2V5UHJlZml4LFxuICAgICAgICAgICAgZ2VuZXJhdGVBcnJheVByZWZpeCxcbiAgICAgICAgICAgIGNvbW1hUm91bmRUcmlwLFxuICAgICAgICAgICAgc3RyaWN0TnVsbEhhbmRsaW5nLFxuICAgICAgICAgICAgc2tpcE51bGxzLFxuICAgICAgICAgICAgZW5jb2RlcixcbiAgICAgICAgICAgIGZpbHRlcixcbiAgICAgICAgICAgIHNvcnQsXG4gICAgICAgICAgICBhbGxvd0RvdHMsXG4gICAgICAgICAgICBzZXJpYWxpemVEYXRlLFxuICAgICAgICAgICAgZm9ybWF0LFxuICAgICAgICAgICAgZm9ybWF0dGVyLFxuICAgICAgICAgICAgZW5jb2RlVmFsdWVzT25seSxcbiAgICAgICAgICAgIGNoYXJzZXQsXG4gICAgICAgICAgICB2YWx1ZVNpZGVDaGFubmVsXG4gICAgICAgICkpO1xuICAgIH1cblxuICAgIHJldHVybiB2YWx1ZXM7XG59O1xuXG52YXIgbm9ybWFsaXplU3RyaW5naWZ5T3B0aW9ucyA9IGZ1bmN0aW9uIG5vcm1hbGl6ZVN0cmluZ2lmeU9wdGlvbnMob3B0cykge1xuICAgIGlmICghb3B0cykge1xuICAgICAgICByZXR1cm4gZGVmYXVsdHM7XG4gICAgfVxuXG4gICAgaWYgKG9wdHMuZW5jb2RlciAhPT0gbnVsbCAmJiB0eXBlb2Ygb3B0cy5lbmNvZGVyICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2Ygb3B0cy5lbmNvZGVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0VuY29kZXIgaGFzIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgdmFyIGNoYXJzZXQgPSBvcHRzLmNoYXJzZXQgfHwgZGVmYXVsdHMuY2hhcnNldDtcbiAgICBpZiAodHlwZW9mIG9wdHMuY2hhcnNldCAhPT0gJ3VuZGVmaW5lZCcgJiYgb3B0cy5jaGFyc2V0ICE9PSAndXRmLTgnICYmIG9wdHMuY2hhcnNldCAhPT0gJ2lzby04ODU5LTEnKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBjaGFyc2V0IG9wdGlvbiBtdXN0IGJlIGVpdGhlciB1dGYtOCwgaXNvLTg4NTktMSwgb3IgdW5kZWZpbmVkJyk7XG4gICAgfVxuXG4gICAgdmFyIGZvcm1hdCA9IGZvcm1hdHNbJ2RlZmF1bHQnXTtcbiAgICBpZiAodHlwZW9mIG9wdHMuZm9ybWF0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBpZiAoIWhhcy5jYWxsKGZvcm1hdHMuZm9ybWF0dGVycywgb3B0cy5mb3JtYXQpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGZvcm1hdCBvcHRpb24gcHJvdmlkZWQuJyk7XG4gICAgICAgIH1cbiAgICAgICAgZm9ybWF0ID0gb3B0cy5mb3JtYXQ7XG4gICAgfVxuICAgIHZhciBmb3JtYXR0ZXIgPSBmb3JtYXRzLmZvcm1hdHRlcnNbZm9ybWF0XTtcblxuICAgIHZhciBmaWx0ZXIgPSBkZWZhdWx0cy5maWx0ZXI7XG4gICAgaWYgKHR5cGVvZiBvcHRzLmZpbHRlciA9PT0gJ2Z1bmN0aW9uJyB8fCBpc0FycmF5KG9wdHMuZmlsdGVyKSkge1xuICAgICAgICBmaWx0ZXIgPSBvcHRzLmZpbHRlcjtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgICBhZGRRdWVyeVByZWZpeDogdHlwZW9mIG9wdHMuYWRkUXVlcnlQcmVmaXggPT09ICdib29sZWFuJyA/IG9wdHMuYWRkUXVlcnlQcmVmaXggOiBkZWZhdWx0cy5hZGRRdWVyeVByZWZpeCxcbiAgICAgICAgYWxsb3dEb3RzOiB0eXBlb2Ygb3B0cy5hbGxvd0RvdHMgPT09ICd1bmRlZmluZWQnID8gZGVmYXVsdHMuYWxsb3dEb3RzIDogISFvcHRzLmFsbG93RG90cyxcbiAgICAgICAgY2hhcnNldDogY2hhcnNldCxcbiAgICAgICAgY2hhcnNldFNlbnRpbmVsOiB0eXBlb2Ygb3B0cy5jaGFyc2V0U2VudGluZWwgPT09ICdib29sZWFuJyA/IG9wdHMuY2hhcnNldFNlbnRpbmVsIDogZGVmYXVsdHMuY2hhcnNldFNlbnRpbmVsLFxuICAgICAgICBkZWxpbWl0ZXI6IHR5cGVvZiBvcHRzLmRlbGltaXRlciA9PT0gJ3VuZGVmaW5lZCcgPyBkZWZhdWx0cy5kZWxpbWl0ZXIgOiBvcHRzLmRlbGltaXRlcixcbiAgICAgICAgZW5jb2RlOiB0eXBlb2Ygb3B0cy5lbmNvZGUgPT09ICdib29sZWFuJyA/IG9wdHMuZW5jb2RlIDogZGVmYXVsdHMuZW5jb2RlLFxuICAgICAgICBlbmNvZGVyOiB0eXBlb2Ygb3B0cy5lbmNvZGVyID09PSAnZnVuY3Rpb24nID8gb3B0cy5lbmNvZGVyIDogZGVmYXVsdHMuZW5jb2RlcixcbiAgICAgICAgZW5jb2RlVmFsdWVzT25seTogdHlwZW9mIG9wdHMuZW5jb2RlVmFsdWVzT25seSA9PT0gJ2Jvb2xlYW4nID8gb3B0cy5lbmNvZGVWYWx1ZXNPbmx5IDogZGVmYXVsdHMuZW5jb2RlVmFsdWVzT25seSxcbiAgICAgICAgZmlsdGVyOiBmaWx0ZXIsXG4gICAgICAgIGZvcm1hdDogZm9ybWF0LFxuICAgICAgICBmb3JtYXR0ZXI6IGZvcm1hdHRlcixcbiAgICAgICAgc2VyaWFsaXplRGF0ZTogdHlwZW9mIG9wdHMuc2VyaWFsaXplRGF0ZSA9PT0gJ2Z1bmN0aW9uJyA/IG9wdHMuc2VyaWFsaXplRGF0ZSA6IGRlZmF1bHRzLnNlcmlhbGl6ZURhdGUsXG4gICAgICAgIHNraXBOdWxsczogdHlwZW9mIG9wdHMuc2tpcE51bGxzID09PSAnYm9vbGVhbicgPyBvcHRzLnNraXBOdWxscyA6IGRlZmF1bHRzLnNraXBOdWxscyxcbiAgICAgICAgc29ydDogdHlwZW9mIG9wdHMuc29ydCA9PT0gJ2Z1bmN0aW9uJyA/IG9wdHMuc29ydCA6IG51bGwsXG4gICAgICAgIHN0cmljdE51bGxIYW5kbGluZzogdHlwZW9mIG9wdHMuc3RyaWN0TnVsbEhhbmRsaW5nID09PSAnYm9vbGVhbicgPyBvcHRzLnN0cmljdE51bGxIYW5kbGluZyA6IGRlZmF1bHRzLnN0cmljdE51bGxIYW5kbGluZ1xuICAgIH07XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG9wdHMpIHtcbiAgICB2YXIgb2JqID0gb2JqZWN0O1xuICAgIHZhciBvcHRpb25zID0gbm9ybWFsaXplU3RyaW5naWZ5T3B0aW9ucyhvcHRzKTtcblxuICAgIHZhciBvYmpLZXlzO1xuICAgIHZhciBmaWx0ZXI7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMuZmlsdGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGZpbHRlciA9IG9wdGlvbnMuZmlsdGVyO1xuICAgICAgICBvYmogPSBmaWx0ZXIoJycsIG9iaik7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KG9wdGlvbnMuZmlsdGVyKSkge1xuICAgICAgICBmaWx0ZXIgPSBvcHRpb25zLmZpbHRlcjtcbiAgICAgICAgb2JqS2V5cyA9IGZpbHRlcjtcbiAgICB9XG5cbiAgICB2YXIga2V5cyA9IFtdO1xuXG4gICAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnIHx8IG9iaiA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuXG4gICAgdmFyIGFycmF5Rm9ybWF0O1xuICAgIGlmIChvcHRzICYmIG9wdHMuYXJyYXlGb3JtYXQgaW4gYXJyYXlQcmVmaXhHZW5lcmF0b3JzKSB7XG4gICAgICAgIGFycmF5Rm9ybWF0ID0gb3B0cy5hcnJheUZvcm1hdDtcbiAgICB9IGVsc2UgaWYgKG9wdHMgJiYgJ2luZGljZXMnIGluIG9wdHMpIHtcbiAgICAgICAgYXJyYXlGb3JtYXQgPSBvcHRzLmluZGljZXMgPyAnaW5kaWNlcycgOiAncmVwZWF0JztcbiAgICB9IGVsc2Uge1xuICAgICAgICBhcnJheUZvcm1hdCA9ICdpbmRpY2VzJztcbiAgICB9XG5cbiAgICB2YXIgZ2VuZXJhdGVBcnJheVByZWZpeCA9IGFycmF5UHJlZml4R2VuZXJhdG9yc1thcnJheUZvcm1hdF07XG4gICAgaWYgKG9wdHMgJiYgJ2NvbW1hUm91bmRUcmlwJyBpbiBvcHRzICYmIHR5cGVvZiBvcHRzLmNvbW1hUm91bmRUcmlwICE9PSAnYm9vbGVhbicpIHtcbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYGNvbW1hUm91bmRUcmlwYCBtdXN0IGJlIGEgYm9vbGVhbiwgb3IgYWJzZW50Jyk7XG4gICAgfVxuICAgIHZhciBjb21tYVJvdW5kVHJpcCA9IGdlbmVyYXRlQXJyYXlQcmVmaXggPT09ICdjb21tYScgJiYgb3B0cyAmJiBvcHRzLmNvbW1hUm91bmRUcmlwO1xuXG4gICAgaWYgKCFvYmpLZXlzKSB7XG4gICAgICAgIG9iaktleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zLnNvcnQpIHtcbiAgICAgICAgb2JqS2V5cy5zb3J0KG9wdGlvbnMuc29ydCk7XG4gICAgfVxuXG4gICAgdmFyIHNpZGVDaGFubmVsID0gZ2V0U2lkZUNoYW5uZWwoKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9iaktleXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIGtleSA9IG9iaktleXNbaV07XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuc2tpcE51bGxzICYmIG9ialtrZXldID09PSBudWxsKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBwdXNoVG9BcnJheShrZXlzLCBzdHJpbmdpZnkoXG4gICAgICAgICAgICBvYmpba2V5XSxcbiAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgIGdlbmVyYXRlQXJyYXlQcmVmaXgsXG4gICAgICAgICAgICBjb21tYVJvdW5kVHJpcCxcbiAgICAgICAgICAgIG9wdGlvbnMuc3RyaWN0TnVsbEhhbmRsaW5nLFxuICAgICAgICAgICAgb3B0aW9ucy5za2lwTnVsbHMsXG4gICAgICAgICAgICBvcHRpb25zLmVuY29kZSA/IG9wdGlvbnMuZW5jb2RlciA6IG51bGwsXG4gICAgICAgICAgICBvcHRpb25zLmZpbHRlcixcbiAgICAgICAgICAgIG9wdGlvbnMuc29ydCxcbiAgICAgICAgICAgIG9wdGlvbnMuYWxsb3dEb3RzLFxuICAgICAgICAgICAgb3B0aW9ucy5zZXJpYWxpemVEYXRlLFxuICAgICAgICAgICAgb3B0aW9ucy5mb3JtYXQsXG4gICAgICAgICAgICBvcHRpb25zLmZvcm1hdHRlcixcbiAgICAgICAgICAgIG9wdGlvbnMuZW5jb2RlVmFsdWVzT25seSxcbiAgICAgICAgICAgIG9wdGlvbnMuY2hhcnNldCxcbiAgICAgICAgICAgIHNpZGVDaGFubmVsXG4gICAgICAgICkpO1xuICAgIH1cblxuICAgIHZhciBqb2luZWQgPSBrZXlzLmpvaW4ob3B0aW9ucy5kZWxpbWl0ZXIpO1xuICAgIHZhciBwcmVmaXggPSBvcHRpb25zLmFkZFF1ZXJ5UHJlZml4ID09PSB0cnVlID8gJz8nIDogJyc7XG5cbiAgICBpZiAob3B0aW9ucy5jaGFyc2V0U2VudGluZWwpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuY2hhcnNldCA9PT0gJ2lzby04ODU5LTEnKSB7XG4gICAgICAgICAgICAvLyBlbmNvZGVVUklDb21wb25lbnQoJyYjMTAwMDM7JyksIHRoZSBcIm51bWVyaWMgZW50aXR5XCIgcmVwcmVzZW50YXRpb24gb2YgYSBjaGVja21hcmtcbiAgICAgICAgICAgIHByZWZpeCArPSAndXRmOD0lMjYlMjMxMDAwMyUzQiYnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gZW5jb2RlVVJJQ29tcG9uZW50KCfinJMnKVxuICAgICAgICAgICAgcHJlZml4ICs9ICd1dGY4PSVFMiU5QyU5MyYnO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGpvaW5lZC5sZW5ndGggPiAwID8gcHJlZml4ICsgam9pbmVkIDogJyc7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZm9ybWF0cyA9IHJlcXVpcmUoJy4vZm9ybWF0cycpO1xuXG52YXIgaGFzID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxudmFyIGhleFRhYmxlID0gKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgYXJyYXkgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgKytpKSB7XG4gICAgICAgIGFycmF5LnB1c2goJyUnICsgKChpIDwgMTYgPyAnMCcgOiAnJykgKyBpLnRvU3RyaW5nKDE2KSkudG9VcHBlckNhc2UoKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFycmF5O1xufSgpKTtcblxudmFyIGNvbXBhY3RRdWV1ZSA9IGZ1bmN0aW9uIGNvbXBhY3RRdWV1ZShxdWV1ZSkge1xuICAgIHdoaWxlIChxdWV1ZS5sZW5ndGggPiAxKSB7XG4gICAgICAgIHZhciBpdGVtID0gcXVldWUucG9wKCk7XG4gICAgICAgIHZhciBvYmogPSBpdGVtLm9ialtpdGVtLnByb3BdO1xuXG4gICAgICAgIGlmIChpc0FycmF5KG9iaikpIHtcbiAgICAgICAgICAgIHZhciBjb21wYWN0ZWQgPSBbXTtcblxuICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBvYmoubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG9ialtqXSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgICAgICAgICAgICAgY29tcGFjdGVkLnB1c2gob2JqW2pdKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGl0ZW0ub2JqW2l0ZW0ucHJvcF0gPSBjb21wYWN0ZWQ7XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG52YXIgYXJyYXlUb09iamVjdCA9IGZ1bmN0aW9uIGFycmF5VG9PYmplY3Qoc291cmNlLCBvcHRpb25zKSB7XG4gICAgdmFyIG9iaiA9IG9wdGlvbnMgJiYgb3B0aW9ucy5wbGFpbk9iamVjdHMgPyBPYmplY3QuY3JlYXRlKG51bGwpIDoge307XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzb3VyY2UubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBzb3VyY2VbaV0gIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICBvYmpbaV0gPSBzb3VyY2VbaV07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gb2JqO1xufTtcblxudmFyIG1lcmdlID0gZnVuY3Rpb24gbWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpIHtcbiAgICAvKiBlc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246IDAgKi9cbiAgICBpZiAoIXNvdXJjZSkge1xuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygc291cmNlICE9PSAnb2JqZWN0Jykge1xuICAgICAgICBpZiAoaXNBcnJheSh0YXJnZXQpKSB7XG4gICAgICAgICAgICB0YXJnZXQucHVzaChzb3VyY2UpO1xuICAgICAgICB9IGVsc2UgaWYgKHRhcmdldCAmJiB0eXBlb2YgdGFyZ2V0ID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgaWYgKChvcHRpb25zICYmIChvcHRpb25zLnBsYWluT2JqZWN0cyB8fCBvcHRpb25zLmFsbG93UHJvdG90eXBlcykpIHx8ICFoYXMuY2FsbChPYmplY3QucHJvdG90eXBlLCBzb3VyY2UpKSB7XG4gICAgICAgICAgICAgICAgdGFyZ2V0W3NvdXJjZV0gPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIFt0YXJnZXQsIHNvdXJjZV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cblxuICAgIGlmICghdGFyZ2V0IHx8IHR5cGVvZiB0YXJnZXQgIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBbdGFyZ2V0XS5jb25jYXQoc291cmNlKTtcbiAgICB9XG5cbiAgICB2YXIgbWVyZ2VUYXJnZXQgPSB0YXJnZXQ7XG4gICAgaWYgKGlzQXJyYXkodGFyZ2V0KSAmJiAhaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICAgIG1lcmdlVGFyZ2V0ID0gYXJyYXlUb09iamVjdCh0YXJnZXQsIG9wdGlvbnMpO1xuICAgIH1cblxuICAgIGlmIChpc0FycmF5KHRhcmdldCkgJiYgaXNBcnJheShzb3VyY2UpKSB7XG4gICAgICAgIHNvdXJjZS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtLCBpKSB7XG4gICAgICAgICAgICBpZiAoaGFzLmNhbGwodGFyZ2V0LCBpKSkge1xuICAgICAgICAgICAgICAgIHZhciB0YXJnZXRJdGVtID0gdGFyZ2V0W2ldO1xuICAgICAgICAgICAgICAgIGlmICh0YXJnZXRJdGVtICYmIHR5cGVvZiB0YXJnZXRJdGVtID09PSAnb2JqZWN0JyAmJiBpdGVtICYmIHR5cGVvZiBpdGVtID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXRbaV0gPSBtZXJnZSh0YXJnZXRJdGVtLCBpdGVtLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0YXJnZXQucHVzaChpdGVtKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRhcmdldFtpXSA9IGl0ZW07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdGFyZ2V0O1xuICAgIH1cblxuICAgIHJldHVybiBPYmplY3Qua2V5cyhzb3VyY2UpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBrZXkpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gc291cmNlW2tleV07XG5cbiAgICAgICAgaWYgKGhhcy5jYWxsKGFjYywga2V5KSkge1xuICAgICAgICAgICAgYWNjW2tleV0gPSBtZXJnZShhY2Nba2V5XSwgdmFsdWUsIG9wdGlvbnMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYWNjW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWNjO1xuICAgIH0sIG1lcmdlVGFyZ2V0KTtcbn07XG5cbnZhciBhc3NpZ24gPSBmdW5jdGlvbiBhc3NpZ25TaW5nbGVTb3VyY2UodGFyZ2V0LCBzb3VyY2UpIHtcbiAgICByZXR1cm4gT2JqZWN0LmtleXMoc291cmNlKS5yZWR1Y2UoZnVuY3Rpb24gKGFjYywga2V5KSB7XG4gICAgICAgIGFjY1trZXldID0gc291cmNlW2tleV07XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgfSwgdGFyZ2V0KTtcbn07XG5cbnZhciBkZWNvZGUgPSBmdW5jdGlvbiAoc3RyLCBkZWNvZGVyLCBjaGFyc2V0KSB7XG4gICAgdmFyIHN0cldpdGhvdXRQbHVzID0gc3RyLnJlcGxhY2UoL1xcKy9nLCAnICcpO1xuICAgIGlmIChjaGFyc2V0ID09PSAnaXNvLTg4NTktMScpIHtcbiAgICAgICAgLy8gdW5lc2NhcGUgbmV2ZXIgdGhyb3dzLCBubyB0cnkuLi5jYXRjaCBuZWVkZWQ6XG4gICAgICAgIHJldHVybiBzdHJXaXRob3V0UGx1cy5yZXBsYWNlKC8lWzAtOWEtZl17Mn0vZ2ksIHVuZXNjYXBlKTtcbiAgICB9XG4gICAgLy8gdXRmLThcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gZGVjb2RlVVJJQ29tcG9uZW50KHN0cldpdGhvdXRQbHVzKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiBzdHJXaXRob3V0UGx1cztcbiAgICB9XG59O1xuXG52YXIgZW5jb2RlID0gZnVuY3Rpb24gZW5jb2RlKHN0ciwgZGVmYXVsdEVuY29kZXIsIGNoYXJzZXQsIGtpbmQsIGZvcm1hdCkge1xuICAgIC8vIFRoaXMgY29kZSB3YXMgb3JpZ2luYWxseSB3cml0dGVuIGJ5IEJyaWFuIFdoaXRlIChtc2NkZXgpIGZvciB0aGUgaW8uanMgY29yZSBxdWVyeXN0cmluZyBsaWJyYXJ5LlxuICAgIC8vIEl0IGhhcyBiZWVuIGFkYXB0ZWQgaGVyZSBmb3Igc3RyaWN0ZXIgYWRoZXJlbmNlIHRvIFJGQyAzOTg2XG4gICAgaWYgKHN0ci5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG5cbiAgICB2YXIgc3RyaW5nID0gc3RyO1xuICAgIGlmICh0eXBlb2Ygc3RyID09PSAnc3ltYm9sJykge1xuICAgICAgICBzdHJpbmcgPSBTeW1ib2wucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoc3RyKTtcbiAgICB9IGVsc2UgaWYgKHR5cGVvZiBzdHIgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHN0cmluZyA9IFN0cmluZyhzdHIpO1xuICAgIH1cblxuICAgIGlmIChjaGFyc2V0ID09PSAnaXNvLTg4NTktMScpIHtcbiAgICAgICAgcmV0dXJuIGVzY2FwZShzdHJpbmcpLnJlcGxhY2UoLyV1WzAtOWEtZl17NH0vZ2ksIGZ1bmN0aW9uICgkMCkge1xuICAgICAgICAgICAgcmV0dXJuICclMjYlMjMnICsgcGFyc2VJbnQoJDAuc2xpY2UoMiksIDE2KSArICclM0InO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICB2YXIgb3V0ID0gJyc7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHJpbmcubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgdmFyIGMgPSBzdHJpbmcuY2hhckNvZGVBdChpKTtcblxuICAgICAgICBpZiAoXG4gICAgICAgICAgICBjID09PSAweDJEIC8vIC1cbiAgICAgICAgICAgIHx8IGMgPT09IDB4MkUgLy8gLlxuICAgICAgICAgICAgfHwgYyA9PT0gMHg1RiAvLyBfXG4gICAgICAgICAgICB8fCBjID09PSAweDdFIC8vIH5cbiAgICAgICAgICAgIHx8IChjID49IDB4MzAgJiYgYyA8PSAweDM5KSAvLyAwLTlcbiAgICAgICAgICAgIHx8IChjID49IDB4NDEgJiYgYyA8PSAweDVBKSAvLyBhLXpcbiAgICAgICAgICAgIHx8IChjID49IDB4NjEgJiYgYyA8PSAweDdBKSAvLyBBLVpcbiAgICAgICAgICAgIHx8IChmb3JtYXQgPT09IGZvcm1hdHMuUkZDMTczOCAmJiAoYyA9PT0gMHgyOCB8fCBjID09PSAweDI5KSkgLy8gKCApXG4gICAgICAgICkge1xuICAgICAgICAgICAgb3V0ICs9IHN0cmluZy5jaGFyQXQoaSk7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjIDwgMHg4MCkge1xuICAgICAgICAgICAgb3V0ID0gb3V0ICsgaGV4VGFibGVbY107XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChjIDwgMHg4MDApIHtcbiAgICAgICAgICAgIG91dCA9IG91dCArIChoZXhUYWJsZVsweEMwIHwgKGMgPj4gNildICsgaGV4VGFibGVbMHg4MCB8IChjICYgMHgzRildKTtcbiAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGMgPCAweEQ4MDAgfHwgYyA+PSAweEUwMDApIHtcbiAgICAgICAgICAgIG91dCA9IG91dCArIChoZXhUYWJsZVsweEUwIHwgKGMgPj4gMTIpXSArIGhleFRhYmxlWzB4ODAgfCAoKGMgPj4gNikgJiAweDNGKV0gKyBoZXhUYWJsZVsweDgwIHwgKGMgJiAweDNGKV0pO1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBpICs9IDE7XG4gICAgICAgIGMgPSAweDEwMDAwICsgKCgoYyAmIDB4M0ZGKSA8PCAxMCkgfCAoc3RyaW5nLmNoYXJDb2RlQXQoaSkgJiAweDNGRikpO1xuICAgICAgICAvKiBlc2xpbnQgb3BlcmF0b3ItbGluZWJyZWFrOiBbMiwgXCJiZWZvcmVcIl0gKi9cbiAgICAgICAgb3V0ICs9IGhleFRhYmxlWzB4RjAgfCAoYyA+PiAxOCldXG4gICAgICAgICAgICArIGhleFRhYmxlWzB4ODAgfCAoKGMgPj4gMTIpICYgMHgzRildXG4gICAgICAgICAgICArIGhleFRhYmxlWzB4ODAgfCAoKGMgPj4gNikgJiAweDNGKV1cbiAgICAgICAgICAgICsgaGV4VGFibGVbMHg4MCB8IChjICYgMHgzRildO1xuICAgIH1cblxuICAgIHJldHVybiBvdXQ7XG59O1xuXG52YXIgY29tcGFjdCA9IGZ1bmN0aW9uIGNvbXBhY3QodmFsdWUpIHtcbiAgICB2YXIgcXVldWUgPSBbeyBvYmo6IHsgbzogdmFsdWUgfSwgcHJvcDogJ28nIH1dO1xuICAgIHZhciByZWZzID0gW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHZhciBpdGVtID0gcXVldWVbaV07XG4gICAgICAgIHZhciBvYmogPSBpdGVtLm9ialtpdGVtLnByb3BdO1xuXG4gICAgICAgIHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCBrZXlzLmxlbmd0aDsgKytqKSB7XG4gICAgICAgICAgICB2YXIga2V5ID0ga2V5c1tqXTtcbiAgICAgICAgICAgIHZhciB2YWwgPSBvYmpba2V5XTtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsID09PSAnb2JqZWN0JyAmJiB2YWwgIT09IG51bGwgJiYgcmVmcy5pbmRleE9mKHZhbCkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgcXVldWUucHVzaCh7IG9iajogb2JqLCBwcm9wOiBrZXkgfSk7XG4gICAgICAgICAgICAgICAgcmVmcy5wdXNoKHZhbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb21wYWN0UXVldWUocXVldWUpO1xuXG4gICAgcmV0dXJuIHZhbHVlO1xufTtcblxudmFyIGlzUmVnRXhwID0gZnVuY3Rpb24gaXNSZWdFeHAob2JqKSB7XG4gICAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBSZWdFeHBdJztcbn07XG5cbnZhciBpc0J1ZmZlciA9IGZ1bmN0aW9uIGlzQnVmZmVyKG9iaikge1xuICAgIGlmICghb2JqIHx8IHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gISEob2JqLmNvbnN0cnVjdG9yICYmIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlciAmJiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIob2JqKSk7XG59O1xuXG52YXIgY29tYmluZSA9IGZ1bmN0aW9uIGNvbWJpbmUoYSwgYikge1xuICAgIHJldHVybiBbXS5jb25jYXQoYSwgYik7XG59O1xuXG52YXIgbWF5YmVNYXAgPSBmdW5jdGlvbiBtYXliZU1hcCh2YWwsIGZuKSB7XG4gICAgaWYgKGlzQXJyYXkodmFsKSkge1xuICAgICAgICB2YXIgbWFwcGVkID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsLmxlbmd0aDsgaSArPSAxKSB7XG4gICAgICAgICAgICBtYXBwZWQucHVzaChmbih2YWxbaV0pKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbWFwcGVkO1xuICAgIH1cbiAgICByZXR1cm4gZm4odmFsKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAgIGFycmF5VG9PYmplY3Q6IGFycmF5VG9PYmplY3QsXG4gICAgYXNzaWduOiBhc3NpZ24sXG4gICAgY29tYmluZTogY29tYmluZSxcbiAgICBjb21wYWN0OiBjb21wYWN0LFxuICAgIGRlY29kZTogZGVjb2RlLFxuICAgIGVuY29kZTogZW5jb2RlLFxuICAgIGlzQnVmZmVyOiBpc0J1ZmZlcixcbiAgICBpc1JlZ0V4cDogaXNSZWdFeHAsXG4gICAgbWF5YmVNYXA6IG1heWJlTWFwLFxuICAgIG1lcmdlOiBtZXJnZVxufTtcbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcInJlYWN0XCIpLGNhPXJlcXVpcmUoXCJzY2hlZHVsZXJcIik7ZnVuY3Rpb24gcChhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn12YXIgZGE9bmV3IFNldCxlYT17fTtmdW5jdGlvbiBmYShhLGIpe2hhKGEsYik7aGEoYStcIkNhcHR1cmVcIixiKX1cbmZ1bmN0aW9uIGhhKGEsYil7ZWFbYV09Yjtmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKWRhLmFkZChiW2FdKX1cbnZhciBpYT0hKFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudHx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCksamE9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxrYT0vXls6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRF1bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRcXC0uMC05XFx1MDBCN1xcdTAzMDAtXFx1MDM2RlxcdTIwM0YtXFx1MjA0MF0qJC8sbGE9XG57fSxtYT17fTtmdW5jdGlvbiBvYShhKXtpZihqYS5jYWxsKG1hLGEpKXJldHVybiEwO2lmKGphLmNhbGwobGEsYSkpcmV0dXJuITE7aWYoa2EudGVzdChhKSlyZXR1cm4gbWFbYV09ITA7bGFbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gcGEoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBxYShhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxwYShhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIHYoYSxiLGMsZCxlLGYsZyl7dGhpcy5hY2NlcHRzQm9vbGVhbnM9Mj09PWJ8fDM9PT1ifHw0PT09Yjt0aGlzLmF0dHJpYnV0ZU5hbWU9ZDt0aGlzLmF0dHJpYnV0ZU5hbWVzcGFjZT1lO3RoaXMubXVzdFVzZVByb3BlcnR5PWM7dGhpcy5wcm9wZXJ0eU5hbWU9YTt0aGlzLnR5cGU9Yjt0aGlzLnNhbml0aXplVVJMPWY7dGhpcy5yZW1vdmVFbXB0eVN0cmluZz1nfXZhciB6PXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMCwhMSxhLG51bGwsITEsITEpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO3pbYl09bmV3IHYoYiwxLCExLGFbMV0sbnVsbCwhMSwhMSl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJmb2N1c2FibGVcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMiwhMSxhLG51bGwsITEsITEpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUgZGlzYWJsZVJlbW90ZVBsYXliYWNrIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEsITEpfSk7XG5bXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDMsITAsYSxudWxsLCExLCExKX0pO1tcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7elthXT1uZXcgdihhLDQsITEsYSxudWxsLCExLCExKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsNiwhMSxhLG51bGwsITEsITEpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTt2YXIgcmE9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiBzYShhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShyYSxcbnNhKTt6W2JdPW5ldyB2KGIsMSwhMSxhLG51bGwsITEsITEpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocmEsc2EpO3pbYl09bmV3IHYoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITEsITEpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UocmEsc2EpO3pbYl09bmV3IHYoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIiwhMSwhMSl9KTtbXCJ0YWJJbmRleFwiLFwiY3Jvc3NPcmlnaW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSwhMSl9KTtcbnoueGxpbmtIcmVmPW5ldyB2KFwieGxpbmtIcmVmXCIsMSwhMSxcInhsaW5rOmhyZWZcIixcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMCwhMSk7W1wic3JjXCIsXCJocmVmXCIsXCJhY3Rpb25cIixcImZvcm1BY3Rpb25cIl0uZm9yRWFjaChmdW5jdGlvbihhKXt6W2FdPW5ldyB2KGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMCwhMCl9KTtcbmZ1bmN0aW9uIHRhKGEsYixjLGQpe3ZhciBlPXouaGFzT3duUHJvcGVydHkoYik/eltiXTpudWxsO2lmKG51bGwhPT1lPzAhPT1lLnR5cGU6ZHx8ISgyPGIubGVuZ3RoKXx8XCJvXCIhPT1iWzBdJiZcIk9cIiE9PWJbMF18fFwiblwiIT09YlsxXSYmXCJOXCIhPT1iWzFdKXFhKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9vYShiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSl9XG52YXIgdWE9YWEuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQsdmE9U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksd2E9U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKSx5YT1TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIiksemE9U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpLEFhPVN5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKSxCYT1TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIiksQ2E9U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIiksRGE9U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpLEVhPVN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKSxGYT1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VfbGlzdFwiKSxHYT1TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKSxIYT1TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTtTeW1ib2wuZm9yKFwicmVhY3Quc2NvcGVcIik7U3ltYm9sLmZvcihcInJlYWN0LmRlYnVnX3RyYWNlX21vZGVcIik7XG52YXIgSWE9U3ltYm9sLmZvcihcInJlYWN0Lm9mZnNjcmVlblwiKTtTeW1ib2wuZm9yKFwicmVhY3QubGVnYWN5X2hpZGRlblwiKTtTeW1ib2wuZm9yKFwicmVhY3QuY2FjaGVcIik7U3ltYm9sLmZvcihcInJlYWN0LnRyYWNpbmdfbWFya2VyXCIpO3ZhciBKYT1TeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gS2EoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPUphJiZhW0phXXx8YVtcIkBAaXRlcmF0b3JcIl07cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGE/YTpudWxsfXZhciBBPU9iamVjdC5hc3NpZ24sTGE7ZnVuY3Rpb24gTWEoYSl7aWYodm9pZCAwPT09TGEpdHJ5e3Rocm93IEVycm9yKCk7fWNhdGNoKGMpe3ZhciBiPWMuc3RhY2sudHJpbSgpLm1hdGNoKC9cXG4oICooYXQgKT8pLyk7TGE9YiYmYlsxXXx8XCJcIn1yZXR1cm5cIlxcblwiK0xhK2F9dmFyIE5hPSExO1xuZnVuY3Rpb24gT2EoYSxiKXtpZighYXx8TmEpcmV0dXJuXCJcIjtOYT0hMDt2YXIgYz1FcnJvci5wcmVwYXJlU3RhY2tUcmFjZTtFcnJvci5wcmVwYXJlU3RhY2tUcmFjZT12b2lkIDA7dHJ5e2lmKGIpaWYoYj1mdW5jdGlvbigpe3Rocm93IEVycm9yKCk7fSxPYmplY3QuZGVmaW5lUHJvcGVydHkoYi5wcm90b3R5cGUsXCJwcm9wc1wiLHtzZXQ6ZnVuY3Rpb24oKXt0aHJvdyBFcnJvcigpO319KSxcIm9iamVjdFwiPT09dHlwZW9mIFJlZmxlY3QmJlJlZmxlY3QuY29uc3RydWN0KXt0cnl7UmVmbGVjdC5jb25zdHJ1Y3QoYixbXSl9Y2F0Y2gobCl7dmFyIGQ9bH1SZWZsZWN0LmNvbnN0cnVjdChhLFtdLGIpfWVsc2V7dHJ5e2IuY2FsbCgpfWNhdGNoKGwpe2Q9bH1hLmNhbGwoYi5wcm90b3R5cGUpfWVsc2V7dHJ5e3Rocm93IEVycm9yKCk7fWNhdGNoKGwpe2Q9bH1hKCl9fWNhdGNoKGwpe2lmKGwmJmQmJlwic3RyaW5nXCI9PT10eXBlb2YgbC5zdGFjayl7Zm9yKHZhciBlPWwuc3RhY2suc3BsaXQoXCJcXG5cIiksXG5mPWQuc3RhY2suc3BsaXQoXCJcXG5cIiksZz1lLmxlbmd0aC0xLGg9Zi5sZW5ndGgtMTsxPD1nJiYwPD1oJiZlW2ddIT09ZltoXTspaC0tO2Zvcig7MTw9ZyYmMDw9aDtnLS0saC0tKWlmKGVbZ10hPT1mW2hdKXtpZigxIT09Z3x8MSE9PWgpe2RvIGlmKGctLSxoLS0sMD5ofHxlW2ddIT09ZltoXSl7dmFyIGs9XCJcXG5cIitlW2ddLnJlcGxhY2UoXCIgYXQgbmV3IFwiLFwiIGF0IFwiKTthLmRpc3BsYXlOYW1lJiZrLmluY2x1ZGVzKFwiPGFub255bW91cz5cIikmJihrPWsucmVwbGFjZShcIjxhbm9ueW1vdXM+XCIsYS5kaXNwbGF5TmFtZSkpO3JldHVybiBrfXdoaWxlKDE8PWcmJjA8PWgpfWJyZWFrfX19ZmluYWxseXtOYT0hMSxFcnJvci5wcmVwYXJlU3RhY2tUcmFjZT1jfXJldHVybihhPWE/YS5kaXNwbGF5TmFtZXx8YS5uYW1lOlwiXCIpP01hKGEpOlwiXCJ9XG5mdW5jdGlvbiBQYShhKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTpyZXR1cm4gTWEoYS50eXBlKTtjYXNlIDE2OnJldHVybiBNYShcIkxhenlcIik7Y2FzZSAxMzpyZXR1cm4gTWEoXCJTdXNwZW5zZVwiKTtjYXNlIDE5OnJldHVybiBNYShcIlN1c3BlbnNlTGlzdFwiKTtjYXNlIDA6Y2FzZSAyOmNhc2UgMTU6cmV0dXJuIGE9T2EoYS50eXBlLCExKSxhO2Nhc2UgMTE6cmV0dXJuIGE9T2EoYS50eXBlLnJlbmRlciwhMSksYTtjYXNlIDE6cmV0dXJuIGE9T2EoYS50eXBlLCEwKSxhO2RlZmF1bHQ6cmV0dXJuXCJcIn19XG5mdW5jdGlvbiBRYShhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhO3N3aXRjaChhKXtjYXNlIHlhOnJldHVyblwiRnJhZ21lbnRcIjtjYXNlIHdhOnJldHVyblwiUG9ydGFsXCI7Y2FzZSBBYTpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSB6YTpyZXR1cm5cIlN0cmljdE1vZGVcIjtjYXNlIEVhOnJldHVyblwiU3VzcGVuc2VcIjtjYXNlIEZhOnJldHVyblwiU3VzcGVuc2VMaXN0XCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIENhOnJldHVybihhLmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuQ29uc3VtZXJcIjtjYXNlIEJhOnJldHVybihhLl9jb250ZXh0LmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuUHJvdmlkZXJcIjtjYXNlIERhOnZhciBiPWEucmVuZGVyO2E9YS5kaXNwbGF5TmFtZTthfHwoYT1iLmRpc3BsYXlOYW1lfHxcbmIubmFtZXx8XCJcIixhPVwiXCIhPT1hP1wiRm9yd2FyZFJlZihcIithK1wiKVwiOlwiRm9yd2FyZFJlZlwiKTtyZXR1cm4gYTtjYXNlIEdhOnJldHVybiBiPWEuZGlzcGxheU5hbWV8fG51bGwsbnVsbCE9PWI/YjpRYShhLnR5cGUpfHxcIk1lbW9cIjtjYXNlIEhhOmI9YS5fcGF5bG9hZDthPWEuX2luaXQ7dHJ5e3JldHVybiBRYShhKGIpKX1jYXRjaChjKXt9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gUmEoYSl7dmFyIGI9YS50eXBlO3N3aXRjaChhLnRhZyl7Y2FzZSAyNDpyZXR1cm5cIkNhY2hlXCI7Y2FzZSA5OnJldHVybihiLmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuQ29uc3VtZXJcIjtjYXNlIDEwOnJldHVybihiLl9jb250ZXh0LmRpc3BsYXlOYW1lfHxcIkNvbnRleHRcIikrXCIuUHJvdmlkZXJcIjtjYXNlIDE4OnJldHVyblwiRGVoeWRyYXRlZEZyYWdtZW50XCI7Y2FzZSAxMTpyZXR1cm4gYT1iLnJlbmRlcixhPWEuZGlzcGxheU5hbWV8fGEubmFtZXx8XCJcIixiLmRpc3BsYXlOYW1lfHwoXCJcIiE9PWE/XCJGb3J3YXJkUmVmKFwiK2ErXCIpXCI6XCJGb3J3YXJkUmVmXCIpO2Nhc2UgNzpyZXR1cm5cIkZyYWdtZW50XCI7Y2FzZSA1OnJldHVybiBiO2Nhc2UgNDpyZXR1cm5cIlBvcnRhbFwiO2Nhc2UgMzpyZXR1cm5cIlJvb3RcIjtjYXNlIDY6cmV0dXJuXCJUZXh0XCI7Y2FzZSAxNjpyZXR1cm4gUWEoYik7Y2FzZSA4OnJldHVybiBiPT09emE/XCJTdHJpY3RNb2RlXCI6XCJNb2RlXCI7Y2FzZSAyMjpyZXR1cm5cIk9mZnNjcmVlblwiO1xuY2FzZSAxMjpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSAyMTpyZXR1cm5cIlNjb3BlXCI7Y2FzZSAxMzpyZXR1cm5cIlN1c3BlbnNlXCI7Y2FzZSAxOTpyZXR1cm5cIlN1c3BlbnNlTGlzdFwiO2Nhc2UgMjU6cmV0dXJuXCJUcmFjaW5nTWFya2VyXCI7Y2FzZSAxOmNhc2UgMDpjYXNlIDE3OmNhc2UgMjpjYXNlIDE0OmNhc2UgMTU6aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpcmV0dXJuIGIuZGlzcGxheU5hbWV8fGIubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGIpcmV0dXJuIGJ9cmV0dXJuIG51bGx9ZnVuY3Rpb24gU2EoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2Nhc2UgXCJvYmplY3RcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fVxuZnVuY3Rpb24gVGEoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIFVhKGEpe3ZhciBiPVRhKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpe3ZhciBlPWMuZ2V0LGY9Yy5zZXQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtmLmNhbGwodGhpcyxhKX19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZX0pO3JldHVybntnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPVxubnVsbDtkZWxldGUgYVtiXX19fX1mdW5jdGlvbiBWYShhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9VWEoYSkpfWZ1bmN0aW9uIFdhKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1UYShhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfWZ1bmN0aW9uIFhhKGEpe2E9YXx8KFwidW5kZWZpbmVkXCIhPT10eXBlb2YgZG9jdW1lbnQ/ZG9jdW1lbnQ6dm9pZCAwKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGEpcmV0dXJuIG51bGw7dHJ5e3JldHVybiBhLmFjdGl2ZUVsZW1lbnR8fGEuYm9keX1jYXRjaChiKXtyZXR1cm4gYS5ib2R5fX1cbmZ1bmN0aW9uIFlhKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBBKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1mdW5jdGlvbiBaYShhLGIpe3ZhciBjPW51bGw9PWIuZGVmYXVsdFZhbHVlP1wiXCI6Yi5kZWZhdWx0VmFsdWUsZD1udWxsIT1iLmNoZWNrZWQ/Yi5jaGVja2VkOmIuZGVmYXVsdENoZWNrZWQ7Yz1TYShudWxsIT1iLnZhbHVlP2IudmFsdWU6Yyk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsQ2hlY2tlZDpkLGluaXRpYWxWYWx1ZTpjLGNvbnRyb2xsZWQ6XCJjaGVja2JveFwiPT09Yi50eXBlfHxcInJhZGlvXCI9PT1iLnR5cGU/bnVsbCE9Yi5jaGVja2VkOm51bGwhPWIudmFsdWV9fWZ1bmN0aW9uIGFiKGEsYil7Yj1iLmNoZWNrZWQ7bnVsbCE9YiYmdGEoYSxcImNoZWNrZWRcIixiLCExKX1cbmZ1bmN0aW9uIGJiKGEsYil7YWIoYSxiKTt2YXIgYz1TYShiLnZhbHVlKSxkPWIudHlwZTtpZihudWxsIT1jKWlmKFwibnVtYmVyXCI9PT1kKXtpZigwPT09YyYmXCJcIj09PWEudmFsdWV8fGEudmFsdWUhPWMpYS52YWx1ZT1cIlwiK2N9ZWxzZSBhLnZhbHVlIT09XCJcIitjJiYoYS52YWx1ZT1cIlwiK2MpO2Vsc2UgaWYoXCJzdWJtaXRcIj09PWR8fFwicmVzZXRcIj09PWQpe2EucmVtb3ZlQXR0cmlidXRlKFwidmFsdWVcIik7cmV0dXJufWIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKT9jYihhLGIudHlwZSxjKTpiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpJiZjYihhLGIudHlwZSxTYShiLmRlZmF1bHRWYWx1ZSkpO251bGw9PWIuY2hlY2tlZCYmbnVsbCE9Yi5kZWZhdWx0Q2hlY2tlZCYmKGEuZGVmYXVsdENoZWNrZWQ9ISFiLmRlZmF1bHRDaGVja2VkKX1cbmZ1bmN0aW9uIGRiKGEsYixjKXtpZihiLmhhc093blByb3BlcnR5KFwidmFsdWVcIil8fGIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikpe3ZhciBkPWIudHlwZTtpZighKFwic3VibWl0XCIhPT1kJiZcInJlc2V0XCIhPT1kfHx2b2lkIDAhPT1iLnZhbHVlJiZudWxsIT09Yi52YWx1ZSkpcmV0dXJuO2I9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO2N8fGI9PT1hLnZhbHVlfHwoYS52YWx1ZT1iKTthLmRlZmF1bHRWYWx1ZT1ifWM9YS5uYW1lO1wiXCIhPT1jJiYoYS5uYW1lPVwiXCIpO2EuZGVmYXVsdENoZWNrZWQ9ISFhLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWQ7XCJcIiE9PWMmJihhLm5hbWU9Yyl9XG5mdW5jdGlvbiBjYihhLGIsYyl7aWYoXCJudW1iZXJcIiE9PWJ8fFhhKGEub3duZXJEb2N1bWVudCkhPT1hKW51bGw9PWM/YS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlOmEuZGVmYXVsdFZhbHVlIT09XCJcIitjJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitjKX12YXIgZWI9QXJyYXkuaXNBcnJheTtcbmZ1bmN0aW9uIGZiKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIitTYShjKTtiPW51bGw7Zm9yKGU9MDtlPGEubGVuZ3RoO2UrKyl7aWYoYVtlXS52YWx1ZT09PWMpe2FbZV0uc2VsZWN0ZWQ9ITA7ZCYmKGFbZV0uZGVmYXVsdFNlbGVjdGVkPSEwKTtyZXR1cm59bnVsbCE9PWJ8fGFbZV0uZGlzYWJsZWR8fChiPWFbZV0pfW51bGwhPT1iJiYoYi5zZWxlY3RlZD0hMCl9fVxuZnVuY3Rpb24gZ2IoYSxiKXtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXRocm93IEVycm9yKHAoOTEpKTtyZXR1cm4gQSh7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBoYihhLGIpe3ZhciBjPWIudmFsdWU7aWYobnVsbD09Yyl7Yz1iLmNoaWxkcmVuO2I9Yi5kZWZhdWx0VmFsdWU7aWYobnVsbCE9Yyl7aWYobnVsbCE9Yil0aHJvdyBFcnJvcihwKDkyKSk7aWYoZWIoYykpe2lmKDE8Yy5sZW5ndGgpdGhyb3cgRXJyb3IocCg5MykpO2M9Y1swXX1iPWN9bnVsbD09YiYmKGI9XCJcIik7Yz1ifWEuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOlNhKGMpfX1cbmZ1bmN0aW9uIGliKGEsYil7dmFyIGM9U2EoYi52YWx1ZSksZD1TYShiLmRlZmF1bHRWYWx1ZSk7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmYS5kZWZhdWx0VmFsdWUhPT1jJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWQmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2QpfWZ1bmN0aW9uIGpiKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJlwiXCIhPT1iJiZudWxsIT09YiYmKGEudmFsdWU9Yil9ZnVuY3Rpb24ga2IoYSl7c3dpdGNoKGEpe2Nhc2UgXCJzdmdcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI7Y2FzZSBcIm1hdGhcIjpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIjtkZWZhdWx0OnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwifX1cbmZ1bmN0aW9uIGxiKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9rYihiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBtYixuYj1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIT09YS5uYW1lc3BhY2VVUkl8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXttYj1tYnx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTttYi5pbm5lckhUTUw9XCI8c3ZnPlwiK2IudmFsdWVPZigpLnRvU3RyaW5nKCkrXCI8L3N2Zz5cIjtmb3IoYj1tYi5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBvYihhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifVxudmFyIHBiPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxhc3BlY3RSYXRpbzohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRBcmVhOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsXG56b29tOiEwLGZpbGxPcGFjaXR5OiEwLGZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LHFiPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhwYikuZm9yRWFjaChmdW5jdGlvbihhKXtxYi5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO3BiW2JdPXBiW2FdfSl9KTtmdW5jdGlvbiByYihhLGIsYyl7cmV0dXJuIG51bGw9PWJ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGJ8fFwiXCI9PT1iP1wiXCI6Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBifHwwPT09Ynx8cGIuaGFzT3duUHJvcGVydHkoYSkmJnBiW2FdPyhcIlwiK2IpLnRyaW0oKTpiK1wicHhcIn1cbmZ1bmN0aW9uIHNiKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKSxlPXJiKGMsYltjXSxkKTtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIHRiPUEoe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiB1YihhLGIpe2lmKGIpe2lmKHRiW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IocCgxMzcsYSkpO2lmKG51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpe2lmKG51bGwhPWIuY2hpbGRyZW4pdGhyb3cgRXJyb3IocCg2MCkpO2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTHx8IShcIl9faHRtbFwiaW4gYi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IocCg2MSkpO31pZihudWxsIT1iLnN0eWxlJiZcIm9iamVjdFwiIT09dHlwZW9mIGIuc3R5bGUpdGhyb3cgRXJyb3IocCg2MikpO319XG5mdW5jdGlvbiB2YihhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19dmFyIHdiPW51bGw7ZnVuY3Rpb24geGIoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfXZhciB5Yj1udWxsLHpiPW51bGwsQWI9bnVsbDtcbmZ1bmN0aW9uIEJiKGEpe2lmKGE9Q2IoYSkpe2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB5Yil0aHJvdyBFcnJvcihwKDI4MCkpO3ZhciBiPWEuc3RhdGVOb2RlO2ImJihiPURiKGIpLHliKGEuc3RhdGVOb2RlLGEudHlwZSxiKSl9fWZ1bmN0aW9uIEViKGEpe3piP0FiP0FiLnB1c2goYSk6QWI9W2FdOnpiPWF9ZnVuY3Rpb24gRmIoKXtpZih6Yil7dmFyIGE9emIsYj1BYjtBYj16Yj1udWxsO0JiKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylCYihiW2FdKX19ZnVuY3Rpb24gR2IoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBIYigpe312YXIgSWI9ITE7ZnVuY3Rpb24gSmIoYSxiLGMpe2lmKEliKXJldHVybiBhKGIsYyk7SWI9ITA7dHJ5e3JldHVybiBHYihhLGIsYyl9ZmluYWxseXtpZihJYj0hMSxudWxsIT09emJ8fG51bGwhPT1BYilIYigpLEZiKCl9fVxuZnVuY3Rpb24gS2IoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtpZihudWxsPT09YylyZXR1cm4gbnVsbDt2YXIgZD1EYihjKTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDtjPWRbYl07YTpzd2l0Y2goYil7Y2FzZSBcIm9uQ2xpY2tcIjpjYXNlIFwib25DbGlja0NhcHR1cmVcIjpjYXNlIFwib25Eb3VibGVDbGlja1wiOmNhc2UgXCJvbkRvdWJsZUNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRG93blwiOmNhc2UgXCJvbk1vdXNlRG93bkNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZU1vdmVcIjpjYXNlIFwib25Nb3VzZU1vdmVDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VVcFwiOmNhc2UgXCJvbk1vdXNlVXBDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VFbnRlclwiOihkPSFkLmRpc2FibGVkKXx8KGE9YS50eXBlLGQ9IShcImJ1dHRvblwiPT09YXx8XCJpbnB1dFwiPT09YXx8XCJzZWxlY3RcIj09PWF8fFwidGV4dGFyZWFcIj09PWEpKTthPSFkO2JyZWFrIGE7ZGVmYXVsdDphPSExfWlmKGEpcmV0dXJuIG51bGw7aWYoYyYmXCJmdW5jdGlvblwiIT09XG50eXBlb2YgYyl0aHJvdyBFcnJvcihwKDIzMSxiLHR5cGVvZiBjKSk7cmV0dXJuIGN9dmFyIExiPSExO2lmKGlhKXRyeXt2YXIgTWI9e307T2JqZWN0LmRlZmluZVByb3BlcnR5KE1iLFwicGFzc2l2ZVwiLHtnZXQ6ZnVuY3Rpb24oKXtMYj0hMH19KTt3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcInRlc3RcIixNYixNYik7d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJ0ZXN0XCIsTWIsTWIpfWNhdGNoKGEpe0xiPSExfWZ1bmN0aW9uIE5iKGEsYixjLGQsZSxmLGcsaCxrKXt2YXIgbD1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMyk7dHJ5e2IuYXBwbHkoYyxsKX1jYXRjaChtKXt0aGlzLm9uRXJyb3IobSl9fXZhciBPYj0hMSxQYj1udWxsLFFiPSExLFJiPW51bGwsU2I9e29uRXJyb3I6ZnVuY3Rpb24oYSl7T2I9ITA7UGI9YX19O2Z1bmN0aW9uIFRiKGEsYixjLGQsZSxmLGcsaCxrKXtPYj0hMTtQYj1udWxsO05iLmFwcGx5KFNiLGFyZ3VtZW50cyl9XG5mdW5jdGlvbiBVYihhLGIsYyxkLGUsZixnLGgsayl7VGIuYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKE9iKXtpZihPYil7dmFyIGw9UGI7T2I9ITE7UGI9bnVsbH1lbHNlIHRocm93IEVycm9yKHAoMTk4KSk7UWJ8fChRYj0hMCxSYj1sKX19ZnVuY3Rpb24gVmIoYSl7dmFyIGI9YSxjPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiLnJldHVybjspYj1iLnJldHVybjtlbHNle2E9YjtkbyBiPWEsMCE9PShiLmZsYWdzJjQwOTgpJiYoYz1iLnJldHVybiksYT1iLnJldHVybjt3aGlsZShhKX1yZXR1cm4gMz09PWIudGFnP2M6bnVsbH1mdW5jdGlvbiBXYihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWImJihhPWEuYWx0ZXJuYXRlLG51bGwhPT1hJiYoYj1hLm1lbW9pemVkU3RhdGUpKTtpZihudWxsIT09YilyZXR1cm4gYi5kZWh5ZHJhdGVkfXJldHVybiBudWxsfWZ1bmN0aW9uIFhiKGEpe2lmKFZiKGEpIT09YSl0aHJvdyBFcnJvcihwKDE4OCkpO31cbmZ1bmN0aW9uIFliKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2lmKCFiKXtiPVZiKGEpO2lmKG51bGw9PT1iKXRocm93IEVycm9yKHAoMTg4KSk7cmV0dXJuIGIhPT1hP251bGw6YX1mb3IodmFyIGM9YSxkPWI7Oyl7dmFyIGU9Yy5yZXR1cm47aWYobnVsbD09PWUpYnJlYWs7dmFyIGY9ZS5hbHRlcm5hdGU7aWYobnVsbD09PWYpe2Q9ZS5yZXR1cm47aWYobnVsbCE9PWQpe2M9ZDtjb250aW51ZX1icmVha31pZihlLmNoaWxkPT09Zi5jaGlsZCl7Zm9yKGY9ZS5jaGlsZDtmOyl7aWYoZj09PWMpcmV0dXJuIFhiKGUpLGE7aWYoZj09PWQpcmV0dXJuIFhiKGUpLGI7Zj1mLnNpYmxpbmd9dGhyb3cgRXJyb3IocCgxODgpKTt9aWYoYy5yZXR1cm4hPT1kLnJldHVybiljPWUsZD1mO2Vsc2V7Zm9yKHZhciBnPSExLGg9ZS5jaGlsZDtoOyl7aWYoaD09PWMpe2c9ITA7Yz1lO2Q9ZjticmVha31pZihoPT09ZCl7Zz0hMDtkPWU7Yz1mO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXtmb3IoaD1mLmNoaWxkO2g7KXtpZihoPT09XG5jKXtnPSEwO2M9ZjtkPWU7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1mO2M9ZTticmVha31oPWguc2libGluZ31pZighZyl0aHJvdyBFcnJvcihwKDE4OSkpO319aWYoYy5hbHRlcm5hdGUhPT1kKXRocm93IEVycm9yKHAoMTkwKSk7fWlmKDMhPT1jLnRhZyl0aHJvdyBFcnJvcihwKDE4OCkpO3JldHVybiBjLnN0YXRlTm9kZS5jdXJyZW50PT09Yz9hOmJ9ZnVuY3Rpb24gWmIoYSl7YT1ZYihhKTtyZXR1cm4gbnVsbCE9PWE/JGIoYSk6bnVsbH1mdW5jdGlvbiAkYihhKXtpZig1PT09YS50YWd8fDY9PT1hLnRhZylyZXR1cm4gYTtmb3IoYT1hLmNoaWxkO251bGwhPT1hOyl7dmFyIGI9JGIoYSk7aWYobnVsbCE9PWIpcmV0dXJuIGI7YT1hLnNpYmxpbmd9cmV0dXJuIG51bGx9XG52YXIgYWM9Y2EudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayxiYz1jYS51bnN0YWJsZV9jYW5jZWxDYWxsYmFjayxjYz1jYS51bnN0YWJsZV9zaG91bGRZaWVsZCxkYz1jYS51bnN0YWJsZV9yZXF1ZXN0UGFpbnQsQj1jYS51bnN0YWJsZV9ub3csZWM9Y2EudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwsZmM9Y2EudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksZ2M9Y2EudW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHksaGM9Y2EudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksaWM9Y2EudW5zdGFibGVfTG93UHJpb3JpdHksamM9Y2EudW5zdGFibGVfSWRsZVByaW9yaXR5LGtjPW51bGwsbGM9bnVsbDtmdW5jdGlvbiBtYyhhKXtpZihsYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGxjLm9uQ29tbWl0RmliZXJSb290KXRyeXtsYy5vbkNvbW1pdEZpYmVyUm9vdChrYyxhLHZvaWQgMCwxMjg9PT0oYS5jdXJyZW50LmZsYWdzJjEyOCkpfWNhdGNoKGIpe319XG52YXIgb2M9TWF0aC5jbHozMj9NYXRoLmNsejMyOm5jLHBjPU1hdGgubG9nLHFjPU1hdGguTE4yO2Z1bmN0aW9uIG5jKGEpe2E+Pj49MDtyZXR1cm4gMD09PWE/MzI6MzEtKHBjKGEpL3FjfDApfDB9dmFyIHJjPTY0LHNjPTQxOTQzMDQ7XG5mdW5jdGlvbiB0YyhhKXtzd2l0Y2goYSYtYSl7Y2FzZSAxOnJldHVybiAxO2Nhc2UgMjpyZXR1cm4gMjtjYXNlIDQ6cmV0dXJuIDQ7Y2FzZSA4OnJldHVybiA4O2Nhc2UgMTY6cmV0dXJuIDE2O2Nhc2UgMzI6cmV0dXJuIDMyO2Nhc2UgNjQ6Y2FzZSAxMjg6Y2FzZSAyNTY6Y2FzZSA1MTI6Y2FzZSAxMDI0OmNhc2UgMjA0ODpjYXNlIDQwOTY6Y2FzZSA4MTkyOmNhc2UgMTYzODQ6Y2FzZSAzMjc2ODpjYXNlIDY1NTM2OmNhc2UgMTMxMDcyOmNhc2UgMjYyMTQ0OmNhc2UgNTI0Mjg4OmNhc2UgMTA0ODU3NjpjYXNlIDIwOTcxNTI6cmV0dXJuIGEmNDE5NDI0MDtjYXNlIDQxOTQzMDQ6Y2FzZSA4Mzg4NjA4OmNhc2UgMTY3NzcyMTY6Y2FzZSAzMzU1NDQzMjpjYXNlIDY3MTA4ODY0OnJldHVybiBhJjEzMDAyMzQyNDtjYXNlIDEzNDIxNzcyODpyZXR1cm4gMTM0MjE3NzI4O2Nhc2UgMjY4NDM1NDU2OnJldHVybiAyNjg0MzU0NTY7Y2FzZSA1MzY4NzA5MTI6cmV0dXJuIDUzNjg3MDkxMjtjYXNlIDEwNzM3NDE4MjQ6cmV0dXJuIDEwNzM3NDE4MjQ7XG5kZWZhdWx0OnJldHVybiBhfX1mdW5jdGlvbiB1YyhhLGIpe3ZhciBjPWEucGVuZGluZ0xhbmVzO2lmKDA9PT1jKXJldHVybiAwO3ZhciBkPTAsZT1hLnN1c3BlbmRlZExhbmVzLGY9YS5waW5nZWRMYW5lcyxnPWMmMjY4NDM1NDU1O2lmKDAhPT1nKXt2YXIgaD1nJn5lOzAhPT1oP2Q9dGMoaCk6KGYmPWcsMCE9PWYmJihkPXRjKGYpKSl9ZWxzZSBnPWMmfmUsMCE9PWc/ZD10YyhnKTowIT09ZiYmKGQ9dGMoZikpO2lmKDA9PT1kKXJldHVybiAwO2lmKDAhPT1iJiZiIT09ZCYmMD09PShiJmUpJiYoZT1kJi1kLGY9YiYtYixlPj1mfHwxNj09PWUmJjAhPT0oZiY0MTk0MjQwKSkpcmV0dXJuIGI7MCE9PShkJjQpJiYoZHw9YyYxNik7Yj1hLmVudGFuZ2xlZExhbmVzO2lmKDAhPT1iKWZvcihhPWEuZW50YW5nbGVtZW50cyxiJj1kOzA8YjspYz0zMS1vYyhiKSxlPTE8PGMsZHw9YVtjXSxiJj1+ZTtyZXR1cm4gZH1cbmZ1bmN0aW9uIHZjKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSA0OnJldHVybiBiKzI1MDtjYXNlIDg6Y2FzZSAxNjpjYXNlIDMyOmNhc2UgNjQ6Y2FzZSAxMjg6Y2FzZSAyNTY6Y2FzZSA1MTI6Y2FzZSAxMDI0OmNhc2UgMjA0ODpjYXNlIDQwOTY6Y2FzZSA4MTkyOmNhc2UgMTYzODQ6Y2FzZSAzMjc2ODpjYXNlIDY1NTM2OmNhc2UgMTMxMDcyOmNhc2UgMjYyMTQ0OmNhc2UgNTI0Mjg4OmNhc2UgMTA0ODU3NjpjYXNlIDIwOTcxNTI6cmV0dXJuIGIrNUUzO2Nhc2UgNDE5NDMwNDpjYXNlIDgzODg2MDg6Y2FzZSAxNjc3NzIxNjpjYXNlIDMzNTU0NDMyOmNhc2UgNjcxMDg4NjQ6cmV0dXJuLTE7Y2FzZSAxMzQyMTc3Mjg6Y2FzZSAyNjg0MzU0NTY6Y2FzZSA1MzY4NzA5MTI6Y2FzZSAxMDczNzQxODI0OnJldHVybi0xO2RlZmF1bHQ6cmV0dXJuLTF9fVxuZnVuY3Rpb24gd2MoYSxiKXtmb3IodmFyIGM9YS5zdXNwZW5kZWRMYW5lcyxkPWEucGluZ2VkTGFuZXMsZT1hLmV4cGlyYXRpb25UaW1lcyxmPWEucGVuZGluZ0xhbmVzOzA8Zjspe3ZhciBnPTMxLW9jKGYpLGg9MTw8ZyxrPWVbZ107aWYoLTE9PT1rKXtpZigwPT09KGgmYyl8fDAhPT0oaCZkKSllW2ddPXZjKGgsYil9ZWxzZSBrPD1iJiYoYS5leHBpcmVkTGFuZXN8PWgpO2YmPX5ofX1mdW5jdGlvbiB4YyhhKXthPWEucGVuZGluZ0xhbmVzJi0xMDczNzQxODI1O3JldHVybiAwIT09YT9hOmEmMTA3Mzc0MTgyND8xMDczNzQxODI0OjB9ZnVuY3Rpb24geWMoKXt2YXIgYT1yYztyYzw8PTE7MD09PShyYyY0MTk0MjQwKSYmKHJjPTY0KTtyZXR1cm4gYX1mdW5jdGlvbiB6YyhhKXtmb3IodmFyIGI9W10sYz0wOzMxPmM7YysrKWIucHVzaChhKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIEFjKGEsYixjKXthLnBlbmRpbmdMYW5lc3w9Yjs1MzY4NzA5MTIhPT1iJiYoYS5zdXNwZW5kZWRMYW5lcz0wLGEucGluZ2VkTGFuZXM9MCk7YT1hLmV2ZW50VGltZXM7Yj0zMS1vYyhiKTthW2JdPWN9ZnVuY3Rpb24gQmMoYSxiKXt2YXIgYz1hLnBlbmRpbmdMYW5lcyZ+YjthLnBlbmRpbmdMYW5lcz1iO2Euc3VzcGVuZGVkTGFuZXM9MDthLnBpbmdlZExhbmVzPTA7YS5leHBpcmVkTGFuZXMmPWI7YS5tdXRhYmxlUmVhZExhbmVzJj1iO2EuZW50YW5nbGVkTGFuZXMmPWI7Yj1hLmVudGFuZ2xlbWVudHM7dmFyIGQ9YS5ldmVudFRpbWVzO2ZvcihhPWEuZXhwaXJhdGlvblRpbWVzOzA8Yzspe3ZhciBlPTMxLW9jKGMpLGY9MTw8ZTtiW2VdPTA7ZFtlXT0tMTthW2VdPS0xO2MmPX5mfX1cbmZ1bmN0aW9uIENjKGEsYil7dmFyIGM9YS5lbnRhbmdsZWRMYW5lc3w9Yjtmb3IoYT1hLmVudGFuZ2xlbWVudHM7Yzspe3ZhciBkPTMxLW9jKGMpLGU9MTw8ZDtlJmJ8YVtkXSZiJiYoYVtkXXw9Yik7YyY9fmV9fXZhciBDPTA7ZnVuY3Rpb24gRGMoYSl7YSY9LWE7cmV0dXJuIDE8YT80PGE/MCE9PShhJjI2ODQzNTQ1NSk/MTY6NTM2ODcwOTEyOjQ6MX12YXIgRWMsRmMsR2MsSGMsSWMsSmM9ITEsS2M9W10sTGM9bnVsbCxNYz1udWxsLE5jPW51bGwsT2M9bmV3IE1hcCxQYz1uZXcgTWFwLFFjPVtdLFJjPVwibW91c2Vkb3duIG1vdXNldXAgdG91Y2hjYW5jZWwgdG91Y2hlbmQgdG91Y2hzdGFydCBhdXhjbGljayBkYmxjbGljayBwb2ludGVyY2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJ1cCBkcmFnZW5kIGRyYWdzdGFydCBkcm9wIGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBpbnB1dCB0ZXh0SW5wdXQgY29weSBjdXQgcGFzdGUgY2xpY2sgY2hhbmdlIGNvbnRleHRtZW51IHJlc2V0IHN1Ym1pdFwiLnNwbGl0KFwiIFwiKTtcbmZ1bmN0aW9uIFNjKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c2luXCI6Y2FzZSBcImZvY3Vzb3V0XCI6TGM9bnVsbDticmVhaztjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdsZWF2ZVwiOk1jPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJtb3VzZW91dFwiOk5jPW51bGw7YnJlYWs7Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpPYy5kZWxldGUoYi5wb2ludGVySWQpO2JyZWFrO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJsb3N0cG9pbnRlcmNhcHR1cmVcIjpQYy5kZWxldGUoYi5wb2ludGVySWQpfX1cbmZ1bmN0aW9uIFRjKGEsYixjLGQsZSxmKXtpZihudWxsPT09YXx8YS5uYXRpdmVFdmVudCE9PWYpcmV0dXJuIGE9e2Jsb2NrZWRPbjpiLGRvbUV2ZW50TmFtZTpjLGV2ZW50U3lzdGVtRmxhZ3M6ZCxuYXRpdmVFdmVudDpmLHRhcmdldENvbnRhaW5lcnM6W2VdfSxudWxsIT09YiYmKGI9Q2IoYiksbnVsbCE9PWImJkZjKGIpKSxhO2EuZXZlbnRTeXN0ZW1GbGFnc3w9ZDtiPWEudGFyZ2V0Q29udGFpbmVycztudWxsIT09ZSYmLTE9PT1iLmluZGV4T2YoZSkmJmIucHVzaChlKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIFVjKGEsYixjLGQsZSl7c3dpdGNoKGIpe2Nhc2UgXCJmb2N1c2luXCI6cmV0dXJuIExjPVRjKExjLGEsYixjLGQsZSksITA7Y2FzZSBcImRyYWdlbnRlclwiOnJldHVybiBNYz1UYyhNYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJtb3VzZW92ZXJcIjpyZXR1cm4gTmM9VGMoTmMsYSxiLGMsZCxlKSwhMDtjYXNlIFwicG9pbnRlcm92ZXJcIjp2YXIgZj1lLnBvaW50ZXJJZDtPYy5zZXQoZixUYyhPYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSk7cmV0dXJuITA7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6cmV0dXJuIGY9ZS5wb2ludGVySWQsUGMuc2V0KGYsVGMoUGMuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpLCEwfXJldHVybiExfVxuZnVuY3Rpb24gVmMoYSl7dmFyIGI9V2MoYS50YXJnZXQpO2lmKG51bGwhPT1iKXt2YXIgYz1WYihiKTtpZihudWxsIT09YylpZihiPWMudGFnLDEzPT09Yil7aWYoYj1XYihjKSxudWxsIT09Yil7YS5ibG9ja2VkT249YjtJYyhhLnByaW9yaXR5LGZ1bmN0aW9uKCl7R2MoYyl9KTtyZXR1cm59fWVsc2UgaWYoMz09PWImJmMuc3RhdGVOb2RlLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpe2EuYmxvY2tlZE9uPTM9PT1jLnRhZz9jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7cmV0dXJufX1hLmJsb2NrZWRPbj1udWxsfVxuZnVuY3Rpb24gWGMoYSl7aWYobnVsbCE9PWEuYmxvY2tlZE9uKXJldHVybiExO2Zvcih2YXIgYj1hLnRhcmdldENvbnRhaW5lcnM7MDxiLmxlbmd0aDspe3ZhciBjPVljKGEuZG9tRXZlbnROYW1lLGEuZXZlbnRTeXN0ZW1GbGFncyxiWzBdLGEubmF0aXZlRXZlbnQpO2lmKG51bGw9PT1jKXtjPWEubmF0aXZlRXZlbnQ7dmFyIGQ9bmV3IGMuY29uc3RydWN0b3IoYy50eXBlLGMpO3diPWQ7Yy50YXJnZXQuZGlzcGF0Y2hFdmVudChkKTt3Yj1udWxsfWVsc2UgcmV0dXJuIGI9Q2IoYyksbnVsbCE9PWImJkZjKGIpLGEuYmxvY2tlZE9uPWMsITE7Yi5zaGlmdCgpfXJldHVybiEwfWZ1bmN0aW9uIFpjKGEsYixjKXtYYyhhKSYmYy5kZWxldGUoYil9ZnVuY3Rpb24gJGMoKXtKYz0hMTtudWxsIT09TGMmJlhjKExjKSYmKExjPW51bGwpO251bGwhPT1NYyYmWGMoTWMpJiYoTWM9bnVsbCk7bnVsbCE9PU5jJiZYYyhOYykmJihOYz1udWxsKTtPYy5mb3JFYWNoKFpjKTtQYy5mb3JFYWNoKFpjKX1cbmZ1bmN0aW9uIGFkKGEsYil7YS5ibG9ja2VkT249PT1iJiYoYS5ibG9ja2VkT249bnVsbCxKY3x8KEpjPSEwLGNhLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2soY2EudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksJGMpKSl9XG5mdW5jdGlvbiBiZChhKXtmdW5jdGlvbiBiKGIpe3JldHVybiBhZChiLGEpfWlmKDA8S2MubGVuZ3RoKXthZChLY1swXSxhKTtmb3IodmFyIGM9MTtjPEtjLmxlbmd0aDtjKyspe3ZhciBkPUtjW2NdO2QuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpfX1udWxsIT09TGMmJmFkKExjLGEpO251bGwhPT1NYyYmYWQoTWMsYSk7bnVsbCE9PU5jJiZhZChOYyxhKTtPYy5mb3JFYWNoKGIpO1BjLmZvckVhY2goYik7Zm9yKGM9MDtjPFFjLmxlbmd0aDtjKyspZD1RY1tjXSxkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKTtmb3IoOzA8UWMubGVuZ3RoJiYoYz1RY1swXSxudWxsPT09Yy5ibG9ja2VkT24pOylWYyhjKSxudWxsPT09Yy5ibG9ja2VkT24mJlFjLnNoaWZ0KCl9dmFyIGNkPXVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLGRkPSEwO1xuZnVuY3Rpb24gZWQoYSxiLGMsZCl7dmFyIGU9QyxmPWNkLnRyYW5zaXRpb247Y2QudHJhbnNpdGlvbj1udWxsO3RyeXtDPTEsZmQoYSxiLGMsZCl9ZmluYWxseXtDPWUsY2QudHJhbnNpdGlvbj1mfX1mdW5jdGlvbiBnZChhLGIsYyxkKXt2YXIgZT1DLGY9Y2QudHJhbnNpdGlvbjtjZC50cmFuc2l0aW9uPW51bGw7dHJ5e0M9NCxmZChhLGIsYyxkKX1maW5hbGx5e0M9ZSxjZC50cmFuc2l0aW9uPWZ9fVxuZnVuY3Rpb24gZmQoYSxiLGMsZCl7aWYoZGQpe3ZhciBlPVljKGEsYixjLGQpO2lmKG51bGw9PT1lKWhkKGEsYixkLGlkLGMpLFNjKGEsZCk7ZWxzZSBpZihVYyhlLGEsYixjLGQpKWQuc3RvcFByb3BhZ2F0aW9uKCk7ZWxzZSBpZihTYyhhLGQpLGImNCYmLTE8UmMuaW5kZXhPZihhKSl7Zm9yKDtudWxsIT09ZTspe3ZhciBmPUNiKGUpO251bGwhPT1mJiZFYyhmKTtmPVljKGEsYixjLGQpO251bGw9PT1mJiZoZChhLGIsZCxpZCxjKTtpZihmPT09ZSlicmVhaztlPWZ9bnVsbCE9PWUmJmQuc3RvcFByb3BhZ2F0aW9uKCl9ZWxzZSBoZChhLGIsZCxudWxsLGMpfX12YXIgaWQ9bnVsbDtcbmZ1bmN0aW9uIFljKGEsYixjLGQpe2lkPW51bGw7YT14YihkKTthPVdjKGEpO2lmKG51bGwhPT1hKWlmKGI9VmIoYSksbnVsbD09PWIpYT1udWxsO2Vsc2UgaWYoYz1iLnRhZywxMz09PWMpe2E9V2IoYik7aWYobnVsbCE9PWEpcmV0dXJuIGE7YT1udWxsfWVsc2UgaWYoMz09PWMpe2lmKGIuc3RhdGVOb2RlLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQpcmV0dXJuIDM9PT1iLnRhZz9iLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7YT1udWxsfWVsc2UgYiE9PWEmJihhPW51bGwpO2lkPWE7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBqZChhKXtzd2l0Y2goYSl7Y2FzZSBcImNhbmNlbFwiOmNhc2UgXCJjbGlja1wiOmNhc2UgXCJjbG9zZVwiOmNhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJkcmFnZW5kXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6Y2FzZSBcImZvY3VzaW5cIjpjYXNlIFwiZm9jdXNvdXRcIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwiaW52YWxpZFwiOmNhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXByZXNzXCI6Y2FzZSBcImtleXVwXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcInBhc3RlXCI6Y2FzZSBcInBhdXNlXCI6Y2FzZSBcInBsYXlcIjpjYXNlIFwicG9pbnRlcmNhbmNlbFwiOmNhc2UgXCJwb2ludGVyZG93blwiOmNhc2UgXCJwb2ludGVydXBcIjpjYXNlIFwicmF0ZWNoYW5nZVwiOmNhc2UgXCJyZXNldFwiOmNhc2UgXCJyZXNpemVcIjpjYXNlIFwic2Vla2VkXCI6Y2FzZSBcInN1Ym1pdFwiOmNhc2UgXCJ0b3VjaGNhbmNlbFwiOmNhc2UgXCJ0b3VjaGVuZFwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6Y2FzZSBcInZvbHVtZWNoYW5nZVwiOmNhc2UgXCJjaGFuZ2VcIjpjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6Y2FzZSBcInRleHRJbnB1dFwiOmNhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6Y2FzZSBcImJlZm9yZWJsdXJcIjpjYXNlIFwiYWZ0ZXJibHVyXCI6Y2FzZSBcImJlZm9yZWlucHV0XCI6Y2FzZSBcImJsdXJcIjpjYXNlIFwiZnVsbHNjcmVlbmNoYW5nZVwiOmNhc2UgXCJmb2N1c1wiOmNhc2UgXCJoYXNoY2hhbmdlXCI6Y2FzZSBcInBvcHN0YXRlXCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJzZWxlY3RzdGFydFwiOnJldHVybiAxO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnZXhpdFwiOmNhc2UgXCJkcmFnbGVhdmVcIjpjYXNlIFwiZHJhZ292ZXJcIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNlb3V0XCI6Y2FzZSBcIm1vdXNlb3ZlclwiOmNhc2UgXCJwb2ludGVybW92ZVwiOmNhc2UgXCJwb2ludGVyb3V0XCI6Y2FzZSBcInBvaW50ZXJvdmVyXCI6Y2FzZSBcInNjcm9sbFwiOmNhc2UgXCJ0b2dnbGVcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcIndoZWVsXCI6Y2FzZSBcIm1vdXNlZW50ZXJcIjpjYXNlIFwibW91c2VsZWF2ZVwiOmNhc2UgXCJwb2ludGVyZW50ZXJcIjpjYXNlIFwicG9pbnRlcmxlYXZlXCI6cmV0dXJuIDQ7XG5jYXNlIFwibWVzc2FnZVwiOnN3aXRjaChlYygpKXtjYXNlIGZjOnJldHVybiAxO2Nhc2UgZ2M6cmV0dXJuIDQ7Y2FzZSBoYzpjYXNlIGljOnJldHVybiAxNjtjYXNlIGpjOnJldHVybiA1MzY4NzA5MTI7ZGVmYXVsdDpyZXR1cm4gMTZ9ZGVmYXVsdDpyZXR1cm4gMTZ9fXZhciBrZD1udWxsLGxkPW51bGwsbWQ9bnVsbDtmdW5jdGlvbiBuZCgpe2lmKG1kKXJldHVybiBtZDt2YXIgYSxiPWxkLGM9Yi5sZW5ndGgsZCxlPVwidmFsdWVcImluIGtkP2tkLnZhbHVlOmtkLnRleHRDb250ZW50LGY9ZS5sZW5ndGg7Zm9yKGE9MDthPGMmJmJbYV09PT1lW2FdO2ErKyk7dmFyIGc9Yy1hO2ZvcihkPTE7ZDw9ZyYmYltjLWRdPT09ZVtmLWRdO2QrKyk7cmV0dXJuIG1kPWUuc2xpY2UoYSwxPGQ/MS1kOnZvaWQgMCl9XG5mdW5jdGlvbiBvZChhKXt2YXIgYj1hLmtleUNvZGU7XCJjaGFyQ29kZVwiaW4gYT8oYT1hLmNoYXJDb2RlLDA9PT1hJiYxMz09PWImJihhPTEzKSk6YT1iOzEwPT09YSYmKGE9MTMpO3JldHVybiAzMjw9YXx8MTM9PT1hP2E6MH1mdW5jdGlvbiBwZCgpe3JldHVybiEwfWZ1bmN0aW9uIHFkKCl7cmV0dXJuITF9XG5mdW5jdGlvbiByZChhKXtmdW5jdGlvbiBiKGIsZCxlLGYsZyl7dGhpcy5fcmVhY3ROYW1lPWI7dGhpcy5fdGFyZ2V0SW5zdD1lO3RoaXMudHlwZT1kO3RoaXMubmF0aXZlRXZlbnQ9Zjt0aGlzLnRhcmdldD1nO3RoaXMuY3VycmVudFRhcmdldD1udWxsO2Zvcih2YXIgYyBpbiBhKWEuaGFzT3duUHJvcGVydHkoYykmJihiPWFbY10sdGhpc1tjXT1iP2IoZik6ZltjXSk7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9KG51bGwhPWYuZGVmYXVsdFByZXZlbnRlZD9mLmRlZmF1bHRQcmV2ZW50ZWQ6ITE9PT1mLnJldHVyblZhbHVlKT9wZDpxZDt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXFkO3JldHVybiB0aGlzfUEoYi5wcm90b3R5cGUse3ByZXZlbnREZWZhdWx0OmZ1bmN0aW9uKCl7dGhpcy5kZWZhdWx0UHJldmVudGVkPSEwO3ZhciBhPXRoaXMubmF0aXZlRXZlbnQ7YSYmKGEucHJldmVudERlZmF1bHQ/YS5wcmV2ZW50RGVmYXVsdCgpOlwidW5rbm93blwiIT09dHlwZW9mIGEucmV0dXJuVmFsdWUmJlxuKGEucmV0dXJuVmFsdWU9ITEpLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPXBkKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5zdG9wUHJvcGFnYXRpb24/YS5zdG9wUHJvcGFnYXRpb24oKTpcInVua25vd25cIiE9PXR5cGVvZiBhLmNhbmNlbEJ1YmJsZSYmKGEuY2FuY2VsQnViYmxlPSEwKSx0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPXBkKX0scGVyc2lzdDpmdW5jdGlvbigpe30saXNQZXJzaXN0ZW50OnBkfSk7cmV0dXJuIGJ9XG52YXIgc2Q9e2V2ZW50UGhhc2U6MCxidWJibGVzOjAsY2FuY2VsYWJsZTowLHRpbWVTdGFtcDpmdW5jdGlvbihhKXtyZXR1cm4gYS50aW1lU3RhbXB8fERhdGUubm93KCl9LGRlZmF1bHRQcmV2ZW50ZWQ6MCxpc1RydXN0ZWQ6MH0sdGQ9cmQoc2QpLHVkPUEoe30sc2Qse3ZpZXc6MCxkZXRhaWw6MH0pLHZkPXJkKHVkKSx3ZCx4ZCx5ZCxBZD1BKHt9LHVkLHtzY3JlZW5YOjAsc2NyZWVuWTowLGNsaWVudFg6MCxjbGllbnRZOjAscGFnZVg6MCxwYWdlWTowLGN0cmxLZXk6MCxzaGlmdEtleTowLGFsdEtleTowLG1ldGFLZXk6MCxnZXRNb2RpZmllclN0YXRlOnpkLGJ1dHRvbjowLGJ1dHRvbnM6MCxyZWxhdGVkVGFyZ2V0OmZ1bmN0aW9uKGEpe3JldHVybiB2b2lkIDA9PT1hLnJlbGF0ZWRUYXJnZXQ/YS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50OmEucmVsYXRlZFRhcmdldH0sbW92ZW1lbnRYOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRYXCJpblxuYSlyZXR1cm4gYS5tb3ZlbWVudFg7YSE9PXlkJiYoeWQmJlwibW91c2Vtb3ZlXCI9PT1hLnR5cGU/KHdkPWEuc2NyZWVuWC15ZC5zY3JlZW5YLHhkPWEuc2NyZWVuWS15ZC5zY3JlZW5ZKTp4ZD13ZD0wLHlkPWEpO3JldHVybiB3ZH0sbW92ZW1lbnRZOmZ1bmN0aW9uKGEpe3JldHVyblwibW92ZW1lbnRZXCJpbiBhP2EubW92ZW1lbnRZOnhkfX0pLEJkPXJkKEFkKSxDZD1BKHt9LEFkLHtkYXRhVHJhbnNmZXI6MH0pLERkPXJkKENkKSxFZD1BKHt9LHVkLHtyZWxhdGVkVGFyZ2V0OjB9KSxGZD1yZChFZCksR2Q9QSh7fSxzZCx7YW5pbWF0aW9uTmFtZTowLGVsYXBzZWRUaW1lOjAscHNldWRvRWxlbWVudDowfSksSGQ9cmQoR2QpLElkPUEoe30sc2Qse2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSxKZD1yZChJZCksS2Q9QSh7fSxzZCx7ZGF0YTowfSksTGQ9cmQoS2QpLE1kPXtFc2M6XCJFc2NhcGVcIixcblNwYWNlYmFyOlwiIFwiLExlZnQ6XCJBcnJvd0xlZnRcIixVcDpcIkFycm93VXBcIixSaWdodDpcIkFycm93UmlnaHRcIixEb3duOlwiQXJyb3dEb3duXCIsRGVsOlwiRGVsZXRlXCIsV2luOlwiT1NcIixNZW51OlwiQ29udGV4dE1lbnVcIixBcHBzOlwiQ29udGV4dE1lbnVcIixTY3JvbGw6XCJTY3JvbGxMb2NrXCIsTW96UHJpbnRhYmxlS2V5OlwiVW5pZGVudGlmaWVkXCJ9LE5kPXs4OlwiQmFja3NwYWNlXCIsOTpcIlRhYlwiLDEyOlwiQ2xlYXJcIiwxMzpcIkVudGVyXCIsMTY6XCJTaGlmdFwiLDE3OlwiQ29udHJvbFwiLDE4OlwiQWx0XCIsMTk6XCJQYXVzZVwiLDIwOlwiQ2Fwc0xvY2tcIiwyNzpcIkVzY2FwZVwiLDMyOlwiIFwiLDMzOlwiUGFnZVVwXCIsMzQ6XCJQYWdlRG93blwiLDM1OlwiRW5kXCIsMzY6XCJIb21lXCIsMzc6XCJBcnJvd0xlZnRcIiwzODpcIkFycm93VXBcIiwzOTpcIkFycm93UmlnaHRcIiw0MDpcIkFycm93RG93blwiLDQ1OlwiSW5zZXJ0XCIsNDY6XCJEZWxldGVcIiwxMTI6XCJGMVwiLDExMzpcIkYyXCIsMTE0OlwiRjNcIiwxMTU6XCJGNFwiLDExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLFxuMTE5OlwiRjhcIiwxMjA6XCJGOVwiLDEyMTpcIkYxMFwiLDEyMjpcIkYxMVwiLDEyMzpcIkYxMlwiLDE0NDpcIk51bUxvY2tcIiwxNDU6XCJTY3JvbGxMb2NrXCIsMjI0OlwiTWV0YVwifSxPZD17QWx0OlwiYWx0S2V5XCIsQ29udHJvbDpcImN0cmxLZXlcIixNZXRhOlwibWV0YUtleVwiLFNoaWZ0Olwic2hpZnRLZXlcIn07ZnVuY3Rpb24gUGQoYSl7dmFyIGI9dGhpcy5uYXRpdmVFdmVudDtyZXR1cm4gYi5nZXRNb2RpZmllclN0YXRlP2IuZ2V0TW9kaWZpZXJTdGF0ZShhKTooYT1PZFthXSk/ISFiW2FdOiExfWZ1bmN0aW9uIHpkKCl7cmV0dXJuIFBkfVxudmFyIFFkPUEoe30sdWQse2tleTpmdW5jdGlvbihhKXtpZihhLmtleSl7dmFyIGI9TWRbYS5rZXldfHxhLmtleTtpZihcIlVuaWRlbnRpZmllZFwiIT09YilyZXR1cm4gYn1yZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/KGE9b2QoYSksMTM9PT1hP1wiRW50ZXJcIjpTdHJpbmcuZnJvbUNoYXJDb2RlKGEpKTpcImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP05kW2Eua2V5Q29kZV18fFwiVW5pZGVudGlmaWVkXCI6XCJcIn0sY29kZTowLGxvY2F0aW9uOjAsY3RybEtleTowLHNoaWZ0S2V5OjAsYWx0S2V5OjAsbWV0YUtleTowLHJlcGVhdDowLGxvY2FsZTowLGdldE1vZGlmaWVyU3RhdGU6emQsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlP29kKGEpOjB9LGtleUNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH0sd2hpY2g6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/b2QoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSxSZD1yZChRZCksU2Q9QSh7fSxBZCx7cG9pbnRlcklkOjAsd2lkdGg6MCxoZWlnaHQ6MCxwcmVzc3VyZTowLHRhbmdlbnRpYWxQcmVzc3VyZTowLHRpbHRYOjAsdGlsdFk6MCx0d2lzdDowLHBvaW50ZXJUeXBlOjAsaXNQcmltYXJ5OjB9KSxUZD1yZChTZCksVWQ9QSh7fSx1ZCx7dG91Y2hlczowLHRhcmdldFRvdWNoZXM6MCxjaGFuZ2VkVG91Y2hlczowLGFsdEtleTowLG1ldGFLZXk6MCxjdHJsS2V5OjAsc2hpZnRLZXk6MCxnZXRNb2RpZmllclN0YXRlOnpkfSksVmQ9cmQoVWQpLFdkPUEoe30sc2Qse3Byb3BlcnR5TmFtZTowLGVsYXBzZWRUaW1lOjAscHNldWRvRWxlbWVudDowfSksWGQ9cmQoV2QpLFlkPUEoe30sQWQse2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpbiBhPy1hLndoZWVsRGVsdGFYOjB9LFxuZGVsdGFZOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFZXCJpbiBhP2EuZGVsdGFZOlwid2hlZWxEZWx0YVlcImluIGE/LWEud2hlZWxEZWx0YVk6XCJ3aGVlbERlbHRhXCJpbiBhPy1hLndoZWVsRGVsdGE6MH0sZGVsdGFaOjAsZGVsdGFNb2RlOjB9KSxaZD1yZChZZCksJGQ9WzksMTMsMjcsMzJdLGFlPWlhJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyxiZT1udWxsO2lhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJihiZT1kb2N1bWVudC5kb2N1bWVudE1vZGUpO3ZhciBjZT1pYSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIWJlLGRlPWlhJiYoIWFlfHxiZSYmODxiZSYmMTE+PWJlKSxlZT1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxmZT0hMTtcbmZ1bmN0aW9uIGdlKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJrZXl1cFwiOnJldHVybi0xIT09JGQuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJrZXlkb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcImZvY3Vzb3V0XCI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gaGUoYSl7YT1hLmRldGFpbDtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJlwiZGF0YVwiaW4gYT9hLmRhdGE6bnVsbH12YXIgaWU9ITE7ZnVuY3Rpb24gamUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIGhlKGIpO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDMyIT09Yi53aGljaClyZXR1cm4gbnVsbDtmZT0hMDtyZXR1cm4gZWU7Y2FzZSBcInRleHRJbnB1dFwiOnJldHVybiBhPWIuZGF0YSxhPT09ZWUmJmZlP251bGw6YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbmZ1bmN0aW9uIGtlKGEsYil7aWYoaWUpcmV0dXJuXCJjb21wb3NpdGlvbmVuZFwiPT09YXx8IWFlJiZnZShhLGIpPyhhPW5kKCksbWQ9bGQ9a2Q9bnVsbCxpZT0hMSxhKTpudWxsO3N3aXRjaChhKXtjYXNlIFwicGFzdGVcIjpyZXR1cm4gbnVsbDtjYXNlIFwia2V5cHJlc3NcIjppZighKGIuY3RybEtleXx8Yi5hbHRLZXl8fGIubWV0YUtleSl8fGIuY3RybEtleSYmYi5hbHRLZXkpe2lmKGIuY2hhciYmMTxiLmNoYXIubGVuZ3RoKXJldHVybiBiLmNoYXI7aWYoYi53aGljaClyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShiLndoaWNoKX1yZXR1cm4gbnVsbDtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gZGUmJlwia29cIiE9PWIubG9jYWxlP251bGw6Yi5kYXRhO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxudmFyIGxlPXtjb2xvcjohMCxkYXRlOiEwLGRhdGV0aW1lOiEwLFwiZGF0ZXRpbWUtbG9jYWxcIjohMCxlbWFpbDohMCxtb250aDohMCxudW1iZXI6ITAscGFzc3dvcmQ6ITAscmFuZ2U6ITAsc2VhcmNoOiEwLHRlbDohMCx0ZXh0OiEwLHRpbWU6ITAsdXJsOiEwLHdlZWs6ITB9O2Z1bmN0aW9uIG1lKGEpe3ZhciBiPWEmJmEubm9kZU5hbWUmJmEubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtyZXR1cm5cImlucHV0XCI9PT1iPyEhbGVbYS50eXBlXTpcInRleHRhcmVhXCI9PT1iPyEwOiExfWZ1bmN0aW9uIG5lKGEsYixjLGQpe0ViKGQpO2I9b2UoYixcIm9uQ2hhbmdlXCIpOzA8Yi5sZW5ndGgmJihjPW5ldyB0ZChcIm9uQ2hhbmdlXCIsXCJjaGFuZ2VcIixudWxsLGMsZCksYS5wdXNoKHtldmVudDpjLGxpc3RlbmVyczpifSkpfXZhciBwZT1udWxsLHFlPW51bGw7ZnVuY3Rpb24gcmUoYSl7c2UoYSwwKX1mdW5jdGlvbiB0ZShhKXt2YXIgYj11ZShhKTtpZihXYShiKSlyZXR1cm4gYX1cbmZ1bmN0aW9uIHZlKGEsYil7aWYoXCJjaGFuZ2VcIj09PWEpcmV0dXJuIGJ9dmFyIHdlPSExO2lmKGlhKXt2YXIgeGU7aWYoaWEpe3ZhciB5ZT1cIm9uaW5wdXRcImluIGRvY3VtZW50O2lmKCF5ZSl7dmFyIHplPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7emUuc2V0QXR0cmlidXRlKFwib25pbnB1dFwiLFwicmV0dXJuO1wiKTt5ZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgemUub25pbnB1dH14ZT15ZX1lbHNlIHhlPSExO3dlPXhlJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpfWZ1bmN0aW9uIEFlKCl7cGUmJihwZS5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixCZSkscWU9cGU9bnVsbCl9ZnVuY3Rpb24gQmUoYSl7aWYoXCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJnRlKHFlKSl7dmFyIGI9W107bmUoYixxZSxhLHhiKGEpKTtKYihyZSxiKX19XG5mdW5jdGlvbiBDZShhLGIsYyl7XCJmb2N1c2luXCI9PT1hPyhBZSgpLHBlPWIscWU9YyxwZS5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixCZSkpOlwiZm9jdXNvdXRcIj09PWEmJkFlKCl9ZnVuY3Rpb24gRGUoYSl7aWYoXCJzZWxlY3Rpb25jaGFuZ2VcIj09PWF8fFwia2V5dXBcIj09PWF8fFwia2V5ZG93blwiPT09YSlyZXR1cm4gdGUocWUpfWZ1bmN0aW9uIEVlKGEsYil7aWYoXCJjbGlja1wiPT09YSlyZXR1cm4gdGUoYil9ZnVuY3Rpb24gRmUoYSxiKXtpZihcImlucHV0XCI9PT1hfHxcImNoYW5nZVwiPT09YSlyZXR1cm4gdGUoYil9ZnVuY3Rpb24gR2UoYSxiKXtyZXR1cm4gYT09PWImJigwIT09YXx8MS9hPT09MS9iKXx8YSE9PWEmJmIhPT1ifXZhciBIZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgT2JqZWN0LmlzP09iamVjdC5pczpHZTtcbmZ1bmN0aW9uIEllKGEsYil7aWYoSGUoYSxiKSlyZXR1cm4hMDtpZihcIm9iamVjdFwiIT09dHlwZW9mIGF8fG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGJ8fG51bGw9PT1iKXJldHVybiExO3ZhciBjPU9iamVjdC5rZXlzKGEpLGQ9T2JqZWN0LmtleXMoYik7aWYoYy5sZW5ndGghPT1kLmxlbmd0aClyZXR1cm4hMTtmb3IoZD0wO2Q8Yy5sZW5ndGg7ZCsrKXt2YXIgZT1jW2RdO2lmKCFqYS5jYWxsKGIsZSl8fCFIZShhW2VdLGJbZV0pKXJldHVybiExfXJldHVybiEwfWZ1bmN0aW9uIEplKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIEtlKGEsYil7dmFyIGM9SmUoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9SmUoYyl9fWZ1bmN0aW9uIExlKGEsYil7cmV0dXJuIGEmJmI/YT09PWI/ITA6YSYmMz09PWEubm9kZVR5cGU/ITE6YiYmMz09PWIubm9kZVR5cGU/TGUoYSxiLnBhcmVudE5vZGUpOlwiY29udGFpbnNcImluIGE/YS5jb250YWlucyhiKTphLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uPyEhKGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikmMTYpOiExOiExfVxuZnVuY3Rpb24gTWUoKXtmb3IodmFyIGE9d2luZG93LGI9WGEoKTtiIGluc3RhbmNlb2YgYS5IVE1MSUZyYW1lRWxlbWVudDspe3RyeXt2YXIgYz1cInN0cmluZ1wiPT09dHlwZW9mIGIuY29udGVudFdpbmRvdy5sb2NhdGlvbi5ocmVmfWNhdGNoKGQpe2M9ITF9aWYoYylhPWIuY29udGVudFdpbmRvdztlbHNlIGJyZWFrO2I9WGEoYS5kb2N1bWVudCl9cmV0dXJuIGJ9ZnVuY3Rpb24gTmUoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmKFwidGV4dFwiPT09YS50eXBlfHxcInNlYXJjaFwiPT09YS50eXBlfHxcInRlbFwiPT09YS50eXBlfHxcInVybFwiPT09YS50eXBlfHxcInBhc3N3b3JkXCI9PT1hLnR5cGUpfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX1cbmZ1bmN0aW9uIE9lKGEpe3ZhciBiPU1lKCksYz1hLmZvY3VzZWRFbGVtLGQ9YS5zZWxlY3Rpb25SYW5nZTtpZihiIT09YyYmYyYmYy5vd25lckRvY3VtZW50JiZMZShjLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LGMpKXtpZihudWxsIT09ZCYmTmUoYykpaWYoYj1kLnN0YXJ0LGE9ZC5lbmQsdm9pZCAwPT09YSYmKGE9YiksXCJzZWxlY3Rpb25TdGFydFwiaW4gYyljLnNlbGVjdGlvblN0YXJ0PWIsYy5zZWxlY3Rpb25FbmQ9TWF0aC5taW4oYSxjLnZhbHVlLmxlbmd0aCk7ZWxzZSBpZihhPShiPWMub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZiLmRlZmF1bHRWaWV3fHx3aW5kb3csYS5nZXRTZWxlY3Rpb24pe2E9YS5nZXRTZWxlY3Rpb24oKTt2YXIgZT1jLnRleHRDb250ZW50Lmxlbmd0aCxmPU1hdGgubWluKGQuc3RhcnQsZSk7ZD12b2lkIDA9PT1kLmVuZD9mOk1hdGgubWluKGQuZW5kLGUpOyFhLmV4dGVuZCYmZj5kJiYoZT1kLGQ9ZixmPWUpO2U9S2UoYyxmKTt2YXIgZz1LZShjLFxuZCk7ZSYmZyYmKDEhPT1hLnJhbmdlQ291bnR8fGEuYW5jaG9yTm9kZSE9PWUubm9kZXx8YS5hbmNob3JPZmZzZXQhPT1lLm9mZnNldHx8YS5mb2N1c05vZGUhPT1nLm5vZGV8fGEuZm9jdXNPZmZzZXQhPT1nLm9mZnNldCkmJihiPWIuY3JlYXRlUmFuZ2UoKSxiLnNldFN0YXJ0KGUubm9kZSxlLm9mZnNldCksYS5yZW1vdmVBbGxSYW5nZXMoKSxmPmQ/KGEuYWRkUmFuZ2UoYiksYS5leHRlbmQoZy5ub2RlLGcub2Zmc2V0KSk6KGIuc2V0RW5kKGcubm9kZSxnLm9mZnNldCksYS5hZGRSYW5nZShiKSkpfWI9W107Zm9yKGE9YzthPWEucGFyZW50Tm9kZTspMT09PWEubm9kZVR5cGUmJmIucHVzaCh7ZWxlbWVudDphLGxlZnQ6YS5zY3JvbGxMZWZ0LHRvcDphLnNjcm9sbFRvcH0pO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmZvY3VzJiZjLmZvY3VzKCk7Zm9yKGM9MDtjPGIubGVuZ3RoO2MrKylhPWJbY10sYS5lbGVtZW50LnNjcm9sbExlZnQ9YS5sZWZ0LGEuZWxlbWVudC5zY3JvbGxUb3A9YS50b3B9fVxudmFyIFBlPWlhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJjExPj1kb2N1bWVudC5kb2N1bWVudE1vZGUsUWU9bnVsbCxSZT1udWxsLFNlPW51bGwsVGU9ITE7XG5mdW5jdGlvbiBVZShhLGIsYyl7dmFyIGQ9Yy53aW5kb3c9PT1jP2MuZG9jdW1lbnQ6OT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQ7VGV8fG51bGw9PVFlfHxRZSE9PVhhKGQpfHwoZD1RZSxcInNlbGVjdGlvblN0YXJ0XCJpbiBkJiZOZShkKT9kPXtzdGFydDpkLnNlbGVjdGlvblN0YXJ0LGVuZDpkLnNlbGVjdGlvbkVuZH06KGQ9KGQub3duZXJEb2N1bWVudCYmZC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3fHx3aW5kb3cpLmdldFNlbGVjdGlvbigpLGQ9e2FuY2hvck5vZGU6ZC5hbmNob3JOb2RlLGFuY2hvck9mZnNldDpkLmFuY2hvck9mZnNldCxmb2N1c05vZGU6ZC5mb2N1c05vZGUsZm9jdXNPZmZzZXQ6ZC5mb2N1c09mZnNldH0pLFNlJiZJZShTZSxkKXx8KFNlPWQsZD1vZShSZSxcIm9uU2VsZWN0XCIpLDA8ZC5sZW5ndGgmJihiPW5ldyB0ZChcIm9uU2VsZWN0XCIsXCJzZWxlY3RcIixudWxsLGIsYyksYS5wdXNoKHtldmVudDpiLGxpc3RlbmVyczpkfSksYi50YXJnZXQ9UWUpKSl9XG5mdW5jdGlvbiBWZShhLGIpe3ZhciBjPXt9O2NbYS50b0xvd2VyQ2FzZSgpXT1iLnRvTG93ZXJDYXNlKCk7Y1tcIldlYmtpdFwiK2FdPVwid2Via2l0XCIrYjtjW1wiTW96XCIrYV09XCJtb3pcIitiO3JldHVybiBjfXZhciBXZT17YW5pbWF0aW9uZW5kOlZlKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25FbmRcIiksYW5pbWF0aW9uaXRlcmF0aW9uOlZlKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25JdGVyYXRpb25cIiksYW5pbWF0aW9uc3RhcnQ6VmUoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvblN0YXJ0XCIpLHRyYW5zaXRpb25lbmQ6VmUoXCJUcmFuc2l0aW9uXCIsXCJUcmFuc2l0aW9uRW5kXCIpfSxYZT17fSxZZT17fTtcbmlhJiYoWWU9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZSxcIkFuaW1hdGlvbkV2ZW50XCJpbiB3aW5kb3d8fChkZWxldGUgV2UuYW5pbWF0aW9uZW5kLmFuaW1hdGlvbixkZWxldGUgV2UuYW5pbWF0aW9uaXRlcmF0aW9uLmFuaW1hdGlvbixkZWxldGUgV2UuYW5pbWF0aW9uc3RhcnQuYW5pbWF0aW9uKSxcIlRyYW5zaXRpb25FdmVudFwiaW4gd2luZG93fHxkZWxldGUgV2UudHJhbnNpdGlvbmVuZC50cmFuc2l0aW9uKTtmdW5jdGlvbiBaZShhKXtpZihYZVthXSlyZXR1cm4gWGVbYV07aWYoIVdlW2FdKXJldHVybiBhO3ZhciBiPVdlW2FdLGM7Zm9yKGMgaW4gYilpZihiLmhhc093blByb3BlcnR5KGMpJiZjIGluIFllKXJldHVybiBYZVthXT1iW2NdO3JldHVybiBhfXZhciAkZT1aZShcImFuaW1hdGlvbmVuZFwiKSxhZj1aZShcImFuaW1hdGlvbml0ZXJhdGlvblwiKSxiZj1aZShcImFuaW1hdGlvbnN0YXJ0XCIpLGNmPVplKFwidHJhbnNpdGlvbmVuZFwiKSxkZj1uZXcgTWFwLGVmPVwiYWJvcnQgYXV4Q2xpY2sgY2FuY2VsIGNhblBsYXkgY2FuUGxheVRocm91Z2ggY2xpY2sgY2xvc2UgY29udGV4dE1lbnUgY29weSBjdXQgZHJhZyBkcmFnRW5kIGRyYWdFbnRlciBkcmFnRXhpdCBkcmFnTGVhdmUgZHJhZ092ZXIgZHJhZ1N0YXJ0IGRyb3AgZHVyYXRpb25DaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgZ290UG9pbnRlckNhcHR1cmUgaW5wdXQgaW52YWxpZCBrZXlEb3duIGtleVByZXNzIGtleVVwIGxvYWQgbG9hZGVkRGF0YSBsb2FkZWRNZXRhZGF0YSBsb2FkU3RhcnQgbG9zdFBvaW50ZXJDYXB0dXJlIG1vdXNlRG93biBtb3VzZU1vdmUgbW91c2VPdXQgbW91c2VPdmVyIG1vdXNlVXAgcGFzdGUgcGF1c2UgcGxheSBwbGF5aW5nIHBvaW50ZXJDYW5jZWwgcG9pbnRlckRvd24gcG9pbnRlck1vdmUgcG9pbnRlck91dCBwb2ludGVyT3ZlciBwb2ludGVyVXAgcHJvZ3Jlc3MgcmF0ZUNoYW5nZSByZXNldCByZXNpemUgc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdWJtaXQgc3VzcGVuZCB0aW1lVXBkYXRlIHRvdWNoQ2FuY2VsIHRvdWNoRW5kIHRvdWNoU3RhcnQgdm9sdW1lQ2hhbmdlIHNjcm9sbCB0b2dnbGUgdG91Y2hNb3ZlIHdhaXRpbmcgd2hlZWxcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiBmZihhLGIpe2RmLnNldChhLGIpO2ZhKGIsW2FdKX1mb3IodmFyIGdmPTA7Z2Y8ZWYubGVuZ3RoO2dmKyspe3ZhciBoZj1lZltnZl0samY9aGYudG9Mb3dlckNhc2UoKSxrZj1oZlswXS50b1VwcGVyQ2FzZSgpK2hmLnNsaWNlKDEpO2ZmKGpmLFwib25cIitrZil9ZmYoJGUsXCJvbkFuaW1hdGlvbkVuZFwiKTtmZihhZixcIm9uQW5pbWF0aW9uSXRlcmF0aW9uXCIpO2ZmKGJmLFwib25BbmltYXRpb25TdGFydFwiKTtmZihcImRibGNsaWNrXCIsXCJvbkRvdWJsZUNsaWNrXCIpO2ZmKFwiZm9jdXNpblwiLFwib25Gb2N1c1wiKTtmZihcImZvY3Vzb3V0XCIsXCJvbkJsdXJcIik7ZmYoY2YsXCJvblRyYW5zaXRpb25FbmRcIik7aGEoXCJvbk1vdXNlRW50ZXJcIixbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdKTtoYShcIm9uTW91c2VMZWF2ZVwiLFtcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl0pO2hhKFwib25Qb2ludGVyRW50ZXJcIixbXCJwb2ludGVyb3V0XCIsXCJwb2ludGVyb3ZlclwiXSk7XG5oYShcIm9uUG9pbnRlckxlYXZlXCIsW1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl0pO2ZhKFwib25DaGFuZ2VcIixcImNoYW5nZSBjbGljayBmb2N1c2luIGZvY3Vzb3V0IGlucHV0IGtleWRvd24ga2V5dXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpKTtmYShcIm9uU2VsZWN0XCIsXCJmb2N1c291dCBjb250ZXh0bWVudSBkcmFnZW5kIGZvY3VzaW4ga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIikpO2ZhKFwib25CZWZvcmVJbnB1dFwiLFtcImNvbXBvc2l0aW9uZW5kXCIsXCJrZXlwcmVzc1wiLFwidGV4dElucHV0XCIsXCJwYXN0ZVwiXSk7ZmEoXCJvbkNvbXBvc2l0aW9uRW5kXCIsXCJjb21wb3NpdGlvbmVuZCBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7ZmEoXCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcImNvbXBvc2l0aW9uc3RhcnQgZm9jdXNvdXQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIikpO1xuZmEoXCJvbkNvbXBvc2l0aW9uVXBkYXRlXCIsXCJjb21wb3NpdGlvbnVwZGF0ZSBmb2N1c291dCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKSk7dmFyIGxmPVwiYWJvcnQgY2FucGxheSBjYW5wbGF5dGhyb3VnaCBkdXJhdGlvbmNoYW5nZSBlbXB0aWVkIGVuY3J5cHRlZCBlbmRlZCBlcnJvciBsb2FkZWRkYXRhIGxvYWRlZG1ldGFkYXRhIGxvYWRzdGFydCBwYXVzZSBwbGF5IHBsYXlpbmcgcHJvZ3Jlc3MgcmF0ZWNoYW5nZSByZXNpemUgc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIiksbWY9bmV3IFNldChcImNhbmNlbCBjbG9zZSBpbnZhbGlkIGxvYWQgc2Nyb2xsIHRvZ2dsZVwiLnNwbGl0KFwiIFwiKS5jb25jYXQobGYpKTtcbmZ1bmN0aW9uIG5mKGEsYixjKXt2YXIgZD1hLnR5cGV8fFwidW5rbm93bi1ldmVudFwiO2EuY3VycmVudFRhcmdldD1jO1ViKGQsYix2b2lkIDAsYSk7YS5jdXJyZW50VGFyZ2V0PW51bGx9XG5mdW5jdGlvbiBzZShhLGIpe2I9MCE9PShiJjQpO2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7YysrKXt2YXIgZD1hW2NdLGU9ZC5ldmVudDtkPWQubGlzdGVuZXJzO2E6e3ZhciBmPXZvaWQgMDtpZihiKWZvcih2YXIgZz1kLmxlbmd0aC0xOzA8PWc7Zy0tKXt2YXIgaD1kW2ddLGs9aC5pbnN0YW5jZSxsPWguY3VycmVudFRhcmdldDtoPWgubGlzdGVuZXI7aWYoayE9PWYmJmUuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSlicmVhayBhO25mKGUsaCxsKTtmPWt9ZWxzZSBmb3IoZz0wO2c8ZC5sZW5ndGg7ZysrKXtoPWRbZ107az1oLmluc3RhbmNlO2w9aC5jdXJyZW50VGFyZ2V0O2g9aC5saXN0ZW5lcjtpZihrIT09ZiYmZS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpKWJyZWFrIGE7bmYoZSxoLGwpO2Y9a319fWlmKFFiKXRocm93IGE9UmIsUWI9ITEsUmI9bnVsbCxhO31cbmZ1bmN0aW9uIEQoYSxiKXt2YXIgYz1iW29mXTt2b2lkIDA9PT1jJiYoYz1iW29mXT1uZXcgU2V0KTt2YXIgZD1hK1wiX19idWJibGVcIjtjLmhhcyhkKXx8KHBmKGIsYSwyLCExKSxjLmFkZChkKSl9ZnVuY3Rpb24gcWYoYSxiLGMpe3ZhciBkPTA7YiYmKGR8PTQpO3BmKGMsYSxkLGIpfXZhciByZj1cIl9yZWFjdExpc3RlbmluZ1wiK01hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpO2Z1bmN0aW9uIHNmKGEpe2lmKCFhW3JmXSl7YVtyZl09ITA7ZGEuZm9yRWFjaChmdW5jdGlvbihiKXtcInNlbGVjdGlvbmNoYW5nZVwiIT09YiYmKG1mLmhhcyhiKXx8cWYoYiwhMSxhKSxxZihiLCEwLGEpKX0pO3ZhciBiPTk9PT1hLm5vZGVUeXBlP2E6YS5vd25lckRvY3VtZW50O251bGw9PT1ifHxiW3JmXXx8KGJbcmZdPSEwLHFmKFwic2VsZWN0aW9uY2hhbmdlXCIsITEsYikpfX1cbmZ1bmN0aW9uIHBmKGEsYixjLGQpe3N3aXRjaChqZChiKSl7Y2FzZSAxOnZhciBlPWVkO2JyZWFrO2Nhc2UgNDplPWdkO2JyZWFrO2RlZmF1bHQ6ZT1mZH1jPWUuYmluZChudWxsLGIsYyxhKTtlPXZvaWQgMDshTGJ8fFwidG91Y2hzdGFydFwiIT09YiYmXCJ0b3VjaG1vdmVcIiE9PWImJlwid2hlZWxcIiE9PWJ8fChlPSEwKTtkP3ZvaWQgMCE9PWU/YS5hZGRFdmVudExpc3RlbmVyKGIsYyx7Y2FwdHVyZTohMCxwYXNzaXZlOmV9KTphLmFkZEV2ZW50TGlzdGVuZXIoYixjLCEwKTp2b2lkIDAhPT1lP2EuYWRkRXZlbnRMaXN0ZW5lcihiLGMse3Bhc3NpdmU6ZX0pOmEuYWRkRXZlbnRMaXN0ZW5lcihiLGMsITEpfVxuZnVuY3Rpb24gaGQoYSxiLGMsZCxlKXt2YXIgZj1kO2lmKDA9PT0oYiYxKSYmMD09PShiJjIpJiZudWxsIT09ZClhOmZvcig7Oyl7aWYobnVsbD09PWQpcmV0dXJuO3ZhciBnPWQudGFnO2lmKDM9PT1nfHw0PT09Zyl7dmFyIGg9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztpZihoPT09ZXx8OD09PWgubm9kZVR5cGUmJmgucGFyZW50Tm9kZT09PWUpYnJlYWs7aWYoND09PWcpZm9yKGc9ZC5yZXR1cm47bnVsbCE9PWc7KXt2YXIgaz1nLnRhZztpZigzPT09a3x8ND09PWspaWYoaz1nLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLGs9PT1lfHw4PT09ay5ub2RlVHlwZSYmay5wYXJlbnROb2RlPT09ZSlyZXR1cm47Zz1nLnJldHVybn1mb3IoO251bGwhPT1oOyl7Zz1XYyhoKTtpZihudWxsPT09ZylyZXR1cm47az1nLnRhZztpZig1PT09a3x8Nj09PWspe2Q9Zj1nO2NvbnRpbnVlIGF9aD1oLnBhcmVudE5vZGV9fWQ9ZC5yZXR1cm59SmIoZnVuY3Rpb24oKXt2YXIgZD1mLGU9eGIoYyksZz1bXTtcbmE6e3ZhciBoPWRmLmdldChhKTtpZih2b2lkIDAhPT1oKXt2YXIgaz10ZCxuPWE7c3dpdGNoKGEpe2Nhc2UgXCJrZXlwcmVzc1wiOmlmKDA9PT1vZChjKSlicmVhayBhO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6az1SZDticmVhaztjYXNlIFwiZm9jdXNpblwiOm49XCJmb2N1c1wiO2s9RmQ7YnJlYWs7Y2FzZSBcImZvY3Vzb3V0XCI6bj1cImJsdXJcIjtrPUZkO2JyZWFrO2Nhc2UgXCJiZWZvcmVibHVyXCI6Y2FzZSBcImFmdGVyYmx1clwiOms9RmQ7YnJlYWs7Y2FzZSBcImNsaWNrXCI6aWYoMj09PWMuYnV0dG9uKWJyZWFrIGE7Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjprPUJkO2JyZWFrO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOms9XG5EZDticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjprPVZkO2JyZWFrO2Nhc2UgJGU6Y2FzZSBhZjpjYXNlIGJmOms9SGQ7YnJlYWs7Y2FzZSBjZjprPVhkO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjprPXZkO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOms9WmQ7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6az1KZDticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjprPVRkfXZhciB0PTAhPT0oYiY0KSxKPSF0JiZcInNjcm9sbFwiPT09YSx4PXQ/bnVsbCE9PWg/aCtcIkNhcHR1cmVcIjpudWxsOmg7dD1bXTtmb3IodmFyIHc9ZCx1O251bGwhPT1cbnc7KXt1PXc7dmFyIEY9dS5zdGF0ZU5vZGU7NT09PXUudGFnJiZudWxsIT09RiYmKHU9RixudWxsIT09eCYmKEY9S2Iodyx4KSxudWxsIT1GJiZ0LnB1c2godGYodyxGLHUpKSkpO2lmKEopYnJlYWs7dz13LnJldHVybn0wPHQubGVuZ3RoJiYoaD1uZXcgayhoLG4sbnVsbCxjLGUpLGcucHVzaCh7ZXZlbnQ6aCxsaXN0ZW5lcnM6dH0pKX19aWYoMD09PShiJjcpKXthOntoPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hO2s9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGgmJmMhPT13YiYmKG49Yy5yZWxhdGVkVGFyZ2V0fHxjLmZyb21FbGVtZW50KSYmKFdjKG4pfHxuW3VmXSkpYnJlYWsgYTtpZihrfHxoKXtoPWUud2luZG93PT09ZT9lOihoPWUub3duZXJEb2N1bWVudCk/aC5kZWZhdWx0Vmlld3x8aC5wYXJlbnRXaW5kb3c6d2luZG93O2lmKGspe2lmKG49Yy5yZWxhdGVkVGFyZ2V0fHxjLnRvRWxlbWVudCxrPWQsbj1uP1djKG4pOm51bGwsbnVsbCE9PVxubiYmKEo9VmIobiksbiE9PUp8fDUhPT1uLnRhZyYmNiE9PW4udGFnKSluPW51bGx9ZWxzZSBrPW51bGwsbj1kO2lmKGshPT1uKXt0PUJkO0Y9XCJvbk1vdXNlTGVhdmVcIjt4PVwib25Nb3VzZUVudGVyXCI7dz1cIm1vdXNlXCI7aWYoXCJwb2ludGVyb3V0XCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hKXQ9VGQsRj1cIm9uUG9pbnRlckxlYXZlXCIseD1cIm9uUG9pbnRlckVudGVyXCIsdz1cInBvaW50ZXJcIjtKPW51bGw9PWs/aDp1ZShrKTt1PW51bGw9PW4/aDp1ZShuKTtoPW5ldyB0KEYsdytcImxlYXZlXCIsayxjLGUpO2gudGFyZ2V0PUo7aC5yZWxhdGVkVGFyZ2V0PXU7Rj1udWxsO1djKGUpPT09ZCYmKHQ9bmV3IHQoeCx3K1wiZW50ZXJcIixuLGMsZSksdC50YXJnZXQ9dSx0LnJlbGF0ZWRUYXJnZXQ9SixGPXQpO0o9RjtpZihrJiZuKWI6e3Q9azt4PW47dz0wO2Zvcih1PXQ7dTt1PXZmKHUpKXcrKzt1PTA7Zm9yKEY9eDtGO0Y9dmYoRikpdSsrO2Zvcig7MDx3LXU7KXQ9dmYodCksdy0tO2Zvcig7MDx1LXc7KXg9XG52Zih4KSx1LS07Zm9yKDt3LS07KXtpZih0PT09eHx8bnVsbCE9PXgmJnQ9PT14LmFsdGVybmF0ZSlicmVhayBiO3Q9dmYodCk7eD12Zih4KX10PW51bGx9ZWxzZSB0PW51bGw7bnVsbCE9PWsmJndmKGcsaCxrLHQsITEpO251bGwhPT1uJiZudWxsIT09SiYmd2YoZyxKLG4sdCwhMCl9fX1hOntoPWQ/dWUoZCk6d2luZG93O2s9aC5ub2RlTmFtZSYmaC5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO2lmKFwic2VsZWN0XCI9PT1rfHxcImlucHV0XCI9PT1rJiZcImZpbGVcIj09PWgudHlwZSl2YXIgbmE9dmU7ZWxzZSBpZihtZShoKSlpZih3ZSluYT1GZTtlbHNle25hPURlO3ZhciB4YT1DZX1lbHNlKGs9aC5ub2RlTmFtZSkmJlwiaW5wdXRcIj09PWsudG9Mb3dlckNhc2UoKSYmKFwiY2hlY2tib3hcIj09PWgudHlwZXx8XCJyYWRpb1wiPT09aC50eXBlKSYmKG5hPUVlKTtpZihuYSYmKG5hPW5hKGEsZCkpKXtuZShnLG5hLGMsZSk7YnJlYWsgYX14YSYmeGEoYSxoLGQpO1wiZm9jdXNvdXRcIj09PWEmJih4YT1oLl93cmFwcGVyU3RhdGUpJiZcbnhhLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1oLnR5cGUmJmNiKGgsXCJudW1iZXJcIixoLnZhbHVlKX14YT1kP3VlKGQpOndpbmRvdztzd2l0Y2goYSl7Y2FzZSBcImZvY3VzaW5cIjppZihtZSh4YSl8fFwidHJ1ZVwiPT09eGEuY29udGVudEVkaXRhYmxlKVFlPXhhLFJlPWQsU2U9bnVsbDticmVhaztjYXNlIFwiZm9jdXNvdXRcIjpTZT1SZT1RZT1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZWRvd25cIjpUZT0hMDticmVhaztjYXNlIFwiY29udGV4dG1lbnVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJkcmFnZW5kXCI6VGU9ITE7VWUoZyxjLGUpO2JyZWFrO2Nhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjppZihQZSlicmVhaztjYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOlVlKGcsYyxlKX12YXIgJGE7aWYoYWUpYjp7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6dmFyIGJhPVwib25Db21wb3NpdGlvblN0YXJ0XCI7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpiYT1cIm9uQ29tcG9zaXRpb25FbmRcIjtcbmJyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6YmE9XCJvbkNvbXBvc2l0aW9uVXBkYXRlXCI7YnJlYWsgYn1iYT12b2lkIDB9ZWxzZSBpZT9nZShhLGMpJiYoYmE9XCJvbkNvbXBvc2l0aW9uRW5kXCIpOlwia2V5ZG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoYmE9XCJvbkNvbXBvc2l0aW9uU3RhcnRcIik7YmEmJihkZSYmXCJrb1wiIT09Yy5sb2NhbGUmJihpZXx8XCJvbkNvbXBvc2l0aW9uU3RhcnRcIiE9PWJhP1wib25Db21wb3NpdGlvbkVuZFwiPT09YmEmJmllJiYoJGE9bmQoKSk6KGtkPWUsbGQ9XCJ2YWx1ZVwiaW4ga2Q/a2QudmFsdWU6a2QudGV4dENvbnRlbnQsaWU9ITApKSx4YT1vZShkLGJhKSwwPHhhLmxlbmd0aCYmKGJhPW5ldyBMZChiYSxhLG51bGwsYyxlKSxnLnB1c2goe2V2ZW50OmJhLGxpc3RlbmVyczp4YX0pLCRhP2JhLmRhdGE9JGE6KCRhPWhlKGMpLG51bGwhPT0kYSYmKGJhLmRhdGE9JGEpKSkpO2lmKCRhPWNlP2plKGEsYyk6a2UoYSxjKSlkPW9lKGQsXCJvbkJlZm9yZUlucHV0XCIpLFxuMDxkLmxlbmd0aCYmKGU9bmV3IExkKFwib25CZWZvcmVJbnB1dFwiLFwiYmVmb3JlaW5wdXRcIixudWxsLGMsZSksZy5wdXNoKHtldmVudDplLGxpc3RlbmVyczpkfSksZS5kYXRhPSRhKX1zZShnLGIpfSl9ZnVuY3Rpb24gdGYoYSxiLGMpe3JldHVybntpbnN0YW5jZTphLGxpc3RlbmVyOmIsY3VycmVudFRhcmdldDpjfX1mdW5jdGlvbiBvZShhLGIpe2Zvcih2YXIgYz1iK1wiQ2FwdHVyZVwiLGQ9W107bnVsbCE9PWE7KXt2YXIgZT1hLGY9ZS5zdGF0ZU5vZGU7NT09PWUudGFnJiZudWxsIT09ZiYmKGU9ZixmPUtiKGEsYyksbnVsbCE9ZiYmZC51bnNoaWZ0KHRmKGEsZixlKSksZj1LYihhLGIpLG51bGwhPWYmJmQucHVzaCh0ZihhLGYsZSkpKTthPWEucmV0dXJufXJldHVybiBkfWZ1bmN0aW9uIHZmKGEpe2lmKG51bGw9PT1hKXJldHVybiBudWxsO2RvIGE9YS5yZXR1cm47d2hpbGUoYSYmNSE9PWEudGFnKTtyZXR1cm4gYT9hOm51bGx9XG5mdW5jdGlvbiB3ZihhLGIsYyxkLGUpe2Zvcih2YXIgZj1iLl9yZWFjdE5hbWUsZz1bXTtudWxsIT09YyYmYyE9PWQ7KXt2YXIgaD1jLGs9aC5hbHRlcm5hdGUsbD1oLnN0YXRlTm9kZTtpZihudWxsIT09ayYmaz09PWQpYnJlYWs7NT09PWgudGFnJiZudWxsIT09bCYmKGg9bCxlPyhrPUtiKGMsZiksbnVsbCE9ayYmZy51bnNoaWZ0KHRmKGMsayxoKSkpOmV8fChrPUtiKGMsZiksbnVsbCE9ayYmZy5wdXNoKHRmKGMsayxoKSkpKTtjPWMucmV0dXJufTAhPT1nLmxlbmd0aCYmYS5wdXNoKHtldmVudDpiLGxpc3RlbmVyczpnfSl9dmFyIHhmPS9cXHJcXG4/L2cseWY9L1xcdTAwMDB8XFx1RkZGRC9nO2Z1bmN0aW9uIHpmKGEpe3JldHVybihcInN0cmluZ1wiPT09dHlwZW9mIGE/YTpcIlwiK2EpLnJlcGxhY2UoeGYsXCJcXG5cIikucmVwbGFjZSh5ZixcIlwiKX1mdW5jdGlvbiBBZihhLGIsYyl7Yj16ZihiKTtpZih6ZihhKSE9PWImJmMpdGhyb3cgRXJyb3IocCg0MjUpKTt9ZnVuY3Rpb24gQmYoKXt9XG52YXIgQ2Y9bnVsbCxEZj1udWxsO2Z1bmN0aW9uIEVmKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJub3NjcmlwdFwiPT09YXx8XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm51bWJlclwiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9PWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfVxudmFyIEZmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBzZXRUaW1lb3V0P3NldFRpbWVvdXQ6dm9pZCAwLEdmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBjbGVhclRpbWVvdXQ/Y2xlYXJUaW1lb3V0OnZvaWQgMCxIZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgUHJvbWlzZT9Qcm9taXNlOnZvaWQgMCxKZj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgcXVldWVNaWNyb3Rhc2s/cXVldWVNaWNyb3Rhc2s6XCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBIZj9mdW5jdGlvbihhKXtyZXR1cm4gSGYucmVzb2x2ZShudWxsKS50aGVuKGEpLmNhdGNoKElmKX06RmY7ZnVuY3Rpb24gSWYoYSl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGE7fSl9XG5mdW5jdGlvbiBLZihhLGIpe3ZhciBjPWIsZD0wO2Rve3ZhciBlPWMubmV4dFNpYmxpbmc7YS5yZW1vdmVDaGlsZChjKTtpZihlJiY4PT09ZS5ub2RlVHlwZSlpZihjPWUuZGF0YSxcIi8kXCI9PT1jKXtpZigwPT09ZCl7YS5yZW1vdmVDaGlsZChlKTtiZChiKTtyZXR1cm59ZC0tfWVsc2VcIiRcIiE9PWMmJlwiJD9cIiE9PWMmJlwiJCFcIiE9PWN8fGQrKztjPWV9d2hpbGUoYyk7YmQoYil9ZnVuY3Rpb24gTGYoYSl7Zm9yKDtudWxsIT1hO2E9YS5uZXh0U2libGluZyl7dmFyIGI9YS5ub2RlVHlwZTtpZigxPT09Ynx8Mz09PWIpYnJlYWs7aWYoOD09PWIpe2I9YS5kYXRhO2lmKFwiJFwiPT09Ynx8XCIkIVwiPT09Ynx8XCIkP1wiPT09YilicmVhaztpZihcIi8kXCI9PT1iKXJldHVybiBudWxsfX1yZXR1cm4gYX1cbmZ1bmN0aW9uIE1mKGEpe2E9YS5wcmV2aW91c1NpYmxpbmc7Zm9yKHZhciBiPTA7YTspe2lmKDg9PT1hLm5vZGVUeXBlKXt2YXIgYz1hLmRhdGE7aWYoXCIkXCI9PT1jfHxcIiQhXCI9PT1jfHxcIiQ/XCI9PT1jKXtpZigwPT09YilyZXR1cm4gYTtiLS19ZWxzZVwiLyRcIj09PWMmJmIrK31hPWEucHJldmlvdXNTaWJsaW5nfXJldHVybiBudWxsfXZhciBOZj1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSxPZj1cIl9fcmVhY3RGaWJlciRcIitOZixQZj1cIl9fcmVhY3RQcm9wcyRcIitOZix1Zj1cIl9fcmVhY3RDb250YWluZXIkXCIrTmYsb2Y9XCJfX3JlYWN0RXZlbnRzJFwiK05mLFFmPVwiX19yZWFjdExpc3RlbmVycyRcIitOZixSZj1cIl9fcmVhY3RIYW5kbGVzJFwiK05mO1xuZnVuY3Rpb24gV2MoYSl7dmFyIGI9YVtPZl07aWYoYilyZXR1cm4gYjtmb3IodmFyIGM9YS5wYXJlbnROb2RlO2M7KXtpZihiPWNbdWZdfHxjW09mXSl7Yz1iLmFsdGVybmF0ZTtpZihudWxsIT09Yi5jaGlsZHx8bnVsbCE9PWMmJm51bGwhPT1jLmNoaWxkKWZvcihhPU1mKGEpO251bGwhPT1hOyl7aWYoYz1hW09mXSlyZXR1cm4gYzthPU1mKGEpfXJldHVybiBifWE9YztjPWEucGFyZW50Tm9kZX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBDYihhKXthPWFbT2ZdfHxhW3VmXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWcmJjEzIT09YS50YWcmJjMhPT1hLnRhZz9udWxsOmF9ZnVuY3Rpb24gdWUoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO3Rocm93IEVycm9yKHAoMzMpKTt9ZnVuY3Rpb24gRGIoYSl7cmV0dXJuIGFbUGZdfHxudWxsfXZhciBTZj1bXSxUZj0tMTtmdW5jdGlvbiBVZihhKXtyZXR1cm57Y3VycmVudDphfX1cbmZ1bmN0aW9uIEUoYSl7MD5UZnx8KGEuY3VycmVudD1TZltUZl0sU2ZbVGZdPW51bGwsVGYtLSl9ZnVuY3Rpb24gRyhhLGIpe1RmKys7U2ZbVGZdPWEuY3VycmVudDthLmN1cnJlbnQ9Yn12YXIgVmY9e30sSD1VZihWZiksV2Y9VWYoITEpLFhmPVZmO2Z1bmN0aW9uIFlmKGEsYil7dmFyIGM9YS50eXBlLmNvbnRleHRUeXBlcztpZighYylyZXR1cm4gVmY7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoZCYmZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PT09YilyZXR1cm4gZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dDt2YXIgZT17fSxmO2ZvcihmIGluIGMpZVtmXT1iW2ZdO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1iLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9ZSk7cmV0dXJuIGV9XG5mdW5jdGlvbiBaZihhKXthPWEuY2hpbGRDb250ZXh0VHlwZXM7cmV0dXJuIG51bGwhPT1hJiZ2b2lkIDAhPT1hfWZ1bmN0aW9uICRmKCl7RShXZik7RShIKX1mdW5jdGlvbiBhZyhhLGIsYyl7aWYoSC5jdXJyZW50IT09VmYpdGhyb3cgRXJyb3IocCgxNjgpKTtHKEgsYik7RyhXZixjKX1mdW5jdGlvbiBiZyhhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7Yj1iLmNoaWxkQ29udGV4dFR5cGVzO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkLmdldENoaWxkQ29udGV4dClyZXR1cm4gYztkPWQuZ2V0Q2hpbGRDb250ZXh0KCk7Zm9yKHZhciBlIGluIGQpaWYoIShlIGluIGIpKXRocm93IEVycm9yKHAoMTA4LFJhKGEpfHxcIlVua25vd25cIixlKSk7cmV0dXJuIEEoe30sYyxkKX1cbmZ1bmN0aW9uIGNnKGEpe2E9KGE9YS5zdGF0ZU5vZGUpJiZhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0fHxWZjtYZj1ILmN1cnJlbnQ7RyhILGEpO0coV2YsV2YuY3VycmVudCk7cmV0dXJuITB9ZnVuY3Rpb24gZGcoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2lmKCFkKXRocm93IEVycm9yKHAoMTY5KSk7Yz8oYT1iZyhhLGIsWGYpLGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9YSxFKFdmKSxFKEgpLEcoSCxhKSk6RShXZik7RyhXZixjKX12YXIgZWc9bnVsbCxmZz0hMSxnZz0hMTtmdW5jdGlvbiBoZyhhKXtudWxsPT09ZWc/ZWc9W2FdOmVnLnB1c2goYSl9ZnVuY3Rpb24gaWcoYSl7Zmc9ITA7aGcoYSl9XG5mdW5jdGlvbiBqZygpe2lmKCFnZyYmbnVsbCE9PWVnKXtnZz0hMDt2YXIgYT0wLGI9Qzt0cnl7dmFyIGM9ZWc7Zm9yKEM9MTthPGMubGVuZ3RoO2ErKyl7dmFyIGQ9Y1thXTtkbyBkPWQoITApO3doaWxlKG51bGwhPT1kKX1lZz1udWxsO2ZnPSExfWNhdGNoKGUpe3Rocm93IG51bGwhPT1lZyYmKGVnPWVnLnNsaWNlKGErMSkpLGFjKGZjLGpnKSxlO31maW5hbGx5e0M9YixnZz0hMX19cmV0dXJuIG51bGx9dmFyIGtnPVtdLGxnPTAsbWc9bnVsbCxuZz0wLG9nPVtdLHBnPTAscWc9bnVsbCxyZz0xLHNnPVwiXCI7ZnVuY3Rpb24gdGcoYSxiKXtrZ1tsZysrXT1uZztrZ1tsZysrXT1tZzttZz1hO25nPWJ9XG5mdW5jdGlvbiB1ZyhhLGIsYyl7b2dbcGcrK109cmc7b2dbcGcrK109c2c7b2dbcGcrK109cWc7cWc9YTt2YXIgZD1yZzthPXNnO3ZhciBlPTMyLW9jKGQpLTE7ZCY9figxPDxlKTtjKz0xO3ZhciBmPTMyLW9jKGIpK2U7aWYoMzA8Zil7dmFyIGc9ZS1lJTU7Zj0oZCYoMTw8ZyktMSkudG9TdHJpbmcoMzIpO2Q+Pj1nO2UtPWc7cmc9MTw8MzItb2MoYikrZXxjPDxlfGQ7c2c9ZithfWVsc2Ugcmc9MTw8ZnxjPDxlfGQsc2c9YX1mdW5jdGlvbiB2ZyhhKXtudWxsIT09YS5yZXR1cm4mJih0ZyhhLDEpLHVnKGEsMSwwKSl9ZnVuY3Rpb24gd2coYSl7Zm9yKDthPT09bWc7KW1nPWtnWy0tbGddLGtnW2xnXT1udWxsLG5nPWtnWy0tbGddLGtnW2xnXT1udWxsO2Zvcig7YT09PXFnOylxZz1vZ1stLXBnXSxvZ1twZ109bnVsbCxzZz1vZ1stLXBnXSxvZ1twZ109bnVsbCxyZz1vZ1stLXBnXSxvZ1twZ109bnVsbH12YXIgeGc9bnVsbCx5Zz1udWxsLEk9ITEsemc9bnVsbDtcbmZ1bmN0aW9uIEFnKGEsYil7dmFyIGM9QmcoNSxudWxsLG51bGwsMCk7Yy5lbGVtZW50VHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2MucmV0dXJuPWE7Yj1hLmRlbGV0aW9ucztudWxsPT09Yj8oYS5kZWxldGlvbnM9W2NdLGEuZmxhZ3N8PTE2KTpiLnB1c2goYyl9XG5mdW5jdGlvbiBDZyhhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnZhciBjPWEudHlwZTtiPTEhPT1iLm5vZGVUeXBlfHxjLnRvTG93ZXJDYXNlKCkhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDpiO3JldHVybiBudWxsIT09Yj8oYS5zdGF0ZU5vZGU9Yix4Zz1hLHlnPUxmKGIuZmlyc3RDaGlsZCksITApOiExO2Nhc2UgNjpyZXR1cm4gYj1cIlwiPT09YS5wZW5kaW5nUHJvcHN8fDMhPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYS5zdGF0ZU5vZGU9Yix4Zz1hLHlnPW51bGwsITApOiExO2Nhc2UgMTM6cmV0dXJuIGI9OCE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhjPW51bGwhPT1xZz97aWQ6cmcsb3ZlcmZsb3c6c2d9Om51bGwsYS5tZW1vaXplZFN0YXRlPXtkZWh5ZHJhdGVkOmIsdHJlZUNvbnRleHQ6YyxyZXRyeUxhbmU6MTA3Mzc0MTgyNH0sYz1CZygxOCxudWxsLG51bGwsMCksYy5zdGF0ZU5vZGU9YixjLnJldHVybj1hLGEuY2hpbGQ9Yyx4Zz1hLHlnPVxubnVsbCwhMCk6ITE7ZGVmYXVsdDpyZXR1cm4hMX19ZnVuY3Rpb24gRGcoYSl7cmV0dXJuIDAhPT0oYS5tb2RlJjEpJiYwPT09KGEuZmxhZ3MmMTI4KX1mdW5jdGlvbiBFZyhhKXtpZihJKXt2YXIgYj15ZztpZihiKXt2YXIgYz1iO2lmKCFDZyhhLGIpKXtpZihEZyhhKSl0aHJvdyBFcnJvcihwKDQxOCkpO2I9TGYoYy5uZXh0U2libGluZyk7dmFyIGQ9eGc7YiYmQ2coYSxiKT9BZyhkLGMpOihhLmZsYWdzPWEuZmxhZ3MmLTQwOTd8MixJPSExLHhnPWEpfX1lbHNle2lmKERnKGEpKXRocm93IEVycm9yKHAoNDE4KSk7YS5mbGFncz1hLmZsYWdzJi00MDk3fDI7ST0hMTt4Zz1hfX19ZnVuY3Rpb24gRmcoYSl7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnJiYxMyE9PWEudGFnOylhPWEucmV0dXJuO3hnPWF9XG5mdW5jdGlvbiBHZyhhKXtpZihhIT09eGcpcmV0dXJuITE7aWYoIUkpcmV0dXJuIEZnKGEpLEk9ITAsITE7dmFyIGI7KGI9MyE9PWEudGFnKSYmIShiPTUhPT1hLnRhZykmJihiPWEudHlwZSxiPVwiaGVhZFwiIT09YiYmXCJib2R5XCIhPT1iJiYhRWYoYS50eXBlLGEubWVtb2l6ZWRQcm9wcykpO2lmKGImJihiPXlnKSl7aWYoRGcoYSkpdGhyb3cgSGcoKSxFcnJvcihwKDQxOCkpO2Zvcig7YjspQWcoYSxiKSxiPUxmKGIubmV4dFNpYmxpbmcpfUZnKGEpO2lmKDEzPT09YS50YWcpe2E9YS5tZW1vaXplZFN0YXRlO2E9bnVsbCE9PWE/YS5kZWh5ZHJhdGVkOm51bGw7aWYoIWEpdGhyb3cgRXJyb3IocCgzMTcpKTthOnthPWEubmV4dFNpYmxpbmc7Zm9yKGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihcIi8kXCI9PT1jKXtpZigwPT09Yil7eWc9TGYoYS5uZXh0U2libGluZyk7YnJlYWsgYX1iLS19ZWxzZVwiJFwiIT09YyYmXCIkIVwiIT09YyYmXCIkP1wiIT09Y3x8YisrfWE9YS5uZXh0U2libGluZ315Zz1cbm51bGx9fWVsc2UgeWc9eGc/TGYoYS5zdGF0ZU5vZGUubmV4dFNpYmxpbmcpOm51bGw7cmV0dXJuITB9ZnVuY3Rpb24gSGcoKXtmb3IodmFyIGE9eWc7YTspYT1MZihhLm5leHRTaWJsaW5nKX1mdW5jdGlvbiBJZygpe3lnPXhnPW51bGw7ST0hMX1mdW5jdGlvbiBKZyhhKXtudWxsPT09emc/emc9W2FdOnpnLnB1c2goYSl9dmFyIEtnPXVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnO2Z1bmN0aW9uIExnKGEsYil7aWYoYSYmYS5kZWZhdWx0UHJvcHMpe2I9QSh7fSxiKTthPWEuZGVmYXVsdFByb3BzO2Zvcih2YXIgYyBpbiBhKXZvaWQgMD09PWJbY10mJihiW2NdPWFbY10pO3JldHVybiBifXJldHVybiBifXZhciBNZz1VZihudWxsKSxOZz1udWxsLE9nPW51bGwsUGc9bnVsbDtmdW5jdGlvbiBRZygpe1BnPU9nPU5nPW51bGx9ZnVuY3Rpb24gUmcoYSl7dmFyIGI9TWcuY3VycmVudDtFKE1nKTthLl9jdXJyZW50VmFsdWU9Yn1cbmZ1bmN0aW9uIFNnKGEsYixjKXtmb3IoO251bGwhPT1hOyl7dmFyIGQ9YS5hbHRlcm5hdGU7KGEuY2hpbGRMYW5lcyZiKSE9PWI/KGEuY2hpbGRMYW5lc3w9YixudWxsIT09ZCYmKGQuY2hpbGRMYW5lc3w9YikpOm51bGwhPT1kJiYoZC5jaGlsZExhbmVzJmIpIT09YiYmKGQuY2hpbGRMYW5lc3w9Yik7aWYoYT09PWMpYnJlYWs7YT1hLnJldHVybn19ZnVuY3Rpb24gVGcoYSxiKXtOZz1hO1BnPU9nPW51bGw7YT1hLmRlcGVuZGVuY2llcztudWxsIT09YSYmbnVsbCE9PWEuZmlyc3RDb250ZXh0JiYoMCE9PShhLmxhbmVzJmIpJiYoVWc9ITApLGEuZmlyc3RDb250ZXh0PW51bGwpfVxuZnVuY3Rpb24gVmcoYSl7dmFyIGI9YS5fY3VycmVudFZhbHVlO2lmKFBnIT09YSlpZihhPXtjb250ZXh0OmEsbWVtb2l6ZWRWYWx1ZTpiLG5leHQ6bnVsbH0sbnVsbD09PU9nKXtpZihudWxsPT09TmcpdGhyb3cgRXJyb3IocCgzMDgpKTtPZz1hO05nLmRlcGVuZGVuY2llcz17bGFuZXM6MCxmaXJzdENvbnRleHQ6YX19ZWxzZSBPZz1PZy5uZXh0PWE7cmV0dXJuIGJ9dmFyIFdnPW51bGw7ZnVuY3Rpb24gWGcoYSl7bnVsbD09PVdnP1dnPVthXTpXZy5wdXNoKGEpfWZ1bmN0aW9uIFlnKGEsYixjLGQpe3ZhciBlPWIuaW50ZXJsZWF2ZWQ7bnVsbD09PWU/KGMubmV4dD1jLFhnKGIpKTooYy5uZXh0PWUubmV4dCxlLm5leHQ9Yyk7Yi5pbnRlcmxlYXZlZD1jO3JldHVybiBaZyhhLGQpfVxuZnVuY3Rpb24gWmcoYSxiKXthLmxhbmVzfD1iO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiYoYy5sYW5lc3w9Yik7Yz1hO2ZvcihhPWEucmV0dXJuO251bGwhPT1hOylhLmNoaWxkTGFuZXN8PWIsYz1hLmFsdGVybmF0ZSxudWxsIT09YyYmKGMuY2hpbGRMYW5lc3w9YiksYz1hLGE9YS5yZXR1cm47cmV0dXJuIDM9PT1jLnRhZz9jLnN0YXRlTm9kZTpudWxsfXZhciAkZz0hMTtmdW5jdGlvbiBhaChhKXthLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5tZW1vaXplZFN0YXRlLGZpcnN0QmFzZVVwZGF0ZTpudWxsLGxhc3RCYXNlVXBkYXRlOm51bGwsc2hhcmVkOntwZW5kaW5nOm51bGwsaW50ZXJsZWF2ZWQ6bnVsbCxsYW5lczowfSxlZmZlY3RzOm51bGx9fVxuZnVuY3Rpb24gYmgoYSxiKXthPWEudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT09PWEmJihiLnVwZGF0ZVF1ZXVlPXtiYXNlU3RhdGU6YS5iYXNlU3RhdGUsZmlyc3RCYXNlVXBkYXRlOmEuZmlyc3RCYXNlVXBkYXRlLGxhc3RCYXNlVXBkYXRlOmEubGFzdEJhc2VVcGRhdGUsc2hhcmVkOmEuc2hhcmVkLGVmZmVjdHM6YS5lZmZlY3RzfSl9ZnVuY3Rpb24gY2goYSxiKXtyZXR1cm57ZXZlbnRUaW1lOmEsbGFuZTpiLHRhZzowLHBheWxvYWQ6bnVsbCxjYWxsYmFjazpudWxsLG5leHQ6bnVsbH19XG5mdW5jdGlvbiBkaChhLGIsYyl7dmFyIGQ9YS51cGRhdGVRdWV1ZTtpZihudWxsPT09ZClyZXR1cm4gbnVsbDtkPWQuc2hhcmVkO2lmKDAhPT0oSyYyKSl7dmFyIGU9ZC5wZW5kaW5nO251bGw9PT1lP2IubmV4dD1iOihiLm5leHQ9ZS5uZXh0LGUubmV4dD1iKTtkLnBlbmRpbmc9YjtyZXR1cm4gWmcoYSxjKX1lPWQuaW50ZXJsZWF2ZWQ7bnVsbD09PWU/KGIubmV4dD1iLFhnKGQpKTooYi5uZXh0PWUubmV4dCxlLm5leHQ9Yik7ZC5pbnRlcmxlYXZlZD1iO3JldHVybiBaZyhhLGMpfWZ1bmN0aW9uIGVoKGEsYixjKXtiPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWImJihiPWIuc2hhcmVkLDAhPT0oYyY0MTk0MjQwKSkpe3ZhciBkPWIubGFuZXM7ZCY9YS5wZW5kaW5nTGFuZXM7Y3w9ZDtiLmxhbmVzPWM7Q2MoYSxjKX19XG5mdW5jdGlvbiBmaChhLGIpe3ZhciBjPWEudXBkYXRlUXVldWUsZD1hLmFsdGVybmF0ZTtpZihudWxsIT09ZCYmKGQ9ZC51cGRhdGVRdWV1ZSxjPT09ZCkpe3ZhciBlPW51bGwsZj1udWxsO2M9Yy5maXJzdEJhc2VVcGRhdGU7aWYobnVsbCE9PWMpe2Rve3ZhciBnPXtldmVudFRpbWU6Yy5ldmVudFRpbWUsbGFuZTpjLmxhbmUsdGFnOmMudGFnLHBheWxvYWQ6Yy5wYXlsb2FkLGNhbGxiYWNrOmMuY2FsbGJhY2ssbmV4dDpudWxsfTtudWxsPT09Zj9lPWY9ZzpmPWYubmV4dD1nO2M9Yy5uZXh0fXdoaWxlKG51bGwhPT1jKTtudWxsPT09Zj9lPWY9YjpmPWYubmV4dD1ifWVsc2UgZT1mPWI7Yz17YmFzZVN0YXRlOmQuYmFzZVN0YXRlLGZpcnN0QmFzZVVwZGF0ZTplLGxhc3RCYXNlVXBkYXRlOmYsc2hhcmVkOmQuc2hhcmVkLGVmZmVjdHM6ZC5lZmZlY3RzfTthLnVwZGF0ZVF1ZXVlPWM7cmV0dXJufWE9Yy5sYXN0QmFzZVVwZGF0ZTtudWxsPT09YT9jLmZpcnN0QmFzZVVwZGF0ZT1iOmEubmV4dD1cbmI7Yy5sYXN0QmFzZVVwZGF0ZT1ifVxuZnVuY3Rpb24gZ2goYSxiLGMsZCl7dmFyIGU9YS51cGRhdGVRdWV1ZTskZz0hMTt2YXIgZj1lLmZpcnN0QmFzZVVwZGF0ZSxnPWUubGFzdEJhc2VVcGRhdGUsaD1lLnNoYXJlZC5wZW5kaW5nO2lmKG51bGwhPT1oKXtlLnNoYXJlZC5wZW5kaW5nPW51bGw7dmFyIGs9aCxsPWsubmV4dDtrLm5leHQ9bnVsbDtudWxsPT09Zz9mPWw6Zy5uZXh0PWw7Zz1rO3ZhciBtPWEuYWx0ZXJuYXRlO251bGwhPT1tJiYobT1tLnVwZGF0ZVF1ZXVlLGg9bS5sYXN0QmFzZVVwZGF0ZSxoIT09ZyYmKG51bGw9PT1oP20uZmlyc3RCYXNlVXBkYXRlPWw6aC5uZXh0PWwsbS5sYXN0QmFzZVVwZGF0ZT1rKSl9aWYobnVsbCE9PWYpe3ZhciBxPWUuYmFzZVN0YXRlO2c9MDttPWw9az1udWxsO2g9Zjtkb3t2YXIgcj1oLmxhbmUseT1oLmV2ZW50VGltZTtpZigoZCZyKT09PXIpe251bGwhPT1tJiYobT1tLm5leHQ9e2V2ZW50VGltZTp5LGxhbmU6MCx0YWc6aC50YWcscGF5bG9hZDpoLnBheWxvYWQsY2FsbGJhY2s6aC5jYWxsYmFjayxcbm5leHQ6bnVsbH0pO2E6e3ZhciBuPWEsdD1oO3I9Yjt5PWM7c3dpdGNoKHQudGFnKXtjYXNlIDE6bj10LnBheWxvYWQ7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIG4pe3E9bi5jYWxsKHkscSxyKTticmVhayBhfXE9bjticmVhayBhO2Nhc2UgMzpuLmZsYWdzPW4uZmxhZ3MmLTY1NTM3fDEyODtjYXNlIDA6bj10LnBheWxvYWQ7cj1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygbj9uLmNhbGwoeSxxLHIpOm47aWYobnVsbD09PXJ8fHZvaWQgMD09PXIpYnJlYWsgYTtxPUEoe30scSxyKTticmVhayBhO2Nhc2UgMjokZz0hMH19bnVsbCE9PWguY2FsbGJhY2smJjAhPT1oLmxhbmUmJihhLmZsYWdzfD02NCxyPWUuZWZmZWN0cyxudWxsPT09cj9lLmVmZmVjdHM9W2hdOnIucHVzaChoKSl9ZWxzZSB5PXtldmVudFRpbWU6eSxsYW5lOnIsdGFnOmgudGFnLHBheWxvYWQ6aC5wYXlsb2FkLGNhbGxiYWNrOmguY2FsbGJhY2ssbmV4dDpudWxsfSxudWxsPT09bT8obD1tPXksaz1xKTptPW0ubmV4dD15LGd8PXI7XG5oPWgubmV4dDtpZihudWxsPT09aClpZihoPWUuc2hhcmVkLnBlbmRpbmcsbnVsbD09PWgpYnJlYWs7ZWxzZSByPWgsaD1yLm5leHQsci5uZXh0PW51bGwsZS5sYXN0QmFzZVVwZGF0ZT1yLGUuc2hhcmVkLnBlbmRpbmc9bnVsbH13aGlsZSgxKTtudWxsPT09bSYmKGs9cSk7ZS5iYXNlU3RhdGU9aztlLmZpcnN0QmFzZVVwZGF0ZT1sO2UubGFzdEJhc2VVcGRhdGU9bTtiPWUuc2hhcmVkLmludGVybGVhdmVkO2lmKG51bGwhPT1iKXtlPWI7ZG8gZ3w9ZS5sYW5lLGU9ZS5uZXh0O3doaWxlKGUhPT1iKX1lbHNlIG51bGw9PT1mJiYoZS5zaGFyZWQubGFuZXM9MCk7aGh8PWc7YS5sYW5lcz1nO2EubWVtb2l6ZWRTdGF0ZT1xfX1cbmZ1bmN0aW9uIGloKGEsYixjKXthPWIuZWZmZWN0cztiLmVmZmVjdHM9bnVsbDtpZihudWxsIT09YSlmb3IoYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgZD1hW2JdLGU9ZC5jYWxsYmFjaztpZihudWxsIT09ZSl7ZC5jYWxsYmFjaz1udWxsO2Q9YztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZSl0aHJvdyBFcnJvcihwKDE5MSxlKSk7ZS5jYWxsKGQpfX19dmFyIGpoPShuZXcgYWEuQ29tcG9uZW50KS5yZWZzO2Z1bmN0aW9uIGtoKGEsYixjLGQpe2I9YS5tZW1vaXplZFN0YXRlO2M9YyhkLGIpO2M9bnVsbD09PWN8fHZvaWQgMD09PWM/YjpBKHt9LGIsYyk7YS5tZW1vaXplZFN0YXRlPWM7MD09PWEubGFuZXMmJihhLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZT1jKX1cbnZhciBuaD17aXNNb3VudGVkOmZ1bmN0aW9uKGEpe3JldHVybihhPWEuX3JlYWN0SW50ZXJuYWxzKT9WYihhKT09PWE6ITF9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsczt2YXIgZD1MKCksZT1saChhKSxmPWNoKGQsZSk7Zi5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihmLmNhbGxiYWNrPWMpO2I9ZGgoYSxmLGUpO251bGwhPT1iJiYobWgoYixhLGUsZCksZWgoYixhLGUpKX0sZW5xdWV1ZVJlcGxhY2VTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsczt2YXIgZD1MKCksZT1saChhKSxmPWNoKGQsZSk7Zi50YWc9MTtmLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGYuY2FsbGJhY2s9Yyk7Yj1kaChhLGYsZSk7bnVsbCE9PWImJihtaChiLGEsZSxkKSxlaChiLGEsZSkpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxiKXthPWEuX3JlYWN0SW50ZXJuYWxzO3ZhciBjPUwoKSxkPVxubGgoYSksZT1jaChjLGQpO2UudGFnPTI7dm9pZCAwIT09YiYmbnVsbCE9PWImJihlLmNhbGxiYWNrPWIpO2I9ZGgoYSxlLGQpO251bGwhPT1iJiYobWgoYixhLGQsYyksZWgoYixhLGQpKX19O2Z1bmN0aW9uIG9oKGEsYixjLGQsZSxmLGcpe2E9YS5zdGF0ZU5vZGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuc2hvdWxkQ29tcG9uZW50VXBkYXRlP2Euc2hvdWxkQ29tcG9uZW50VXBkYXRlKGQsZixnKTpiLnByb3RvdHlwZSYmYi5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ/IUllKGMsZCl8fCFJZShlLGYpOiEwfVxuZnVuY3Rpb24gcGgoYSxiLGMpe3ZhciBkPSExLGU9VmY7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2Y9VmcoZik6KGU9WmYoYik/WGY6SC5jdXJyZW50LGQ9Yi5jb250ZXh0VHlwZXMsZj0oZD1udWxsIT09ZCYmdm9pZCAwIT09ZCk/WWYoYSxlKTpWZik7Yj1uZXcgYihjLGYpO2EubWVtb2l6ZWRTdGF0ZT1udWxsIT09Yi5zdGF0ZSYmdm9pZCAwIT09Yi5zdGF0ZT9iLnN0YXRlOm51bGw7Yi51cGRhdGVyPW5oO2Euc3RhdGVOb2RlPWI7Yi5fcmVhY3RJbnRlcm5hbHM9YTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9ZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWYpO3JldHVybiBifVxuZnVuY3Rpb24gcWgoYSxiLGMsZCl7YT1iLnN0YXRlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJm5oLmVucXVldWVSZXBsYWNlU3RhdGUoYixiLnN0YXRlLG51bGwpfVxuZnVuY3Rpb24gcmgoYSxiLGMsZCl7dmFyIGU9YS5zdGF0ZU5vZGU7ZS5wcm9wcz1jO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2UucmVmcz1qaDthaChhKTt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/ZS5jb250ZXh0PVZnKGYpOihmPVpmKGIpP1hmOkguY3VycmVudCxlLmNvbnRleHQ9WWYoYSxmKSk7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7Zj1iLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcztcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmKGtoKGEsYixmLGMpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHN8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnR8fChiPWUuc3RhdGUsXG5cImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnRXaWxsTW91bnQmJmUuY29tcG9uZW50V2lsbE1vdW50KCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50KCksYiE9PWUuc3RhdGUmJm5oLmVucXVldWVSZXBsYWNlU3RhdGUoZSxlLnN0YXRlLG51bGwpLGdoKGEsYyxlLGQpLGUuc3RhdGU9YS5tZW1vaXplZFN0YXRlKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5jb21wb25lbnREaWRNb3VudCYmKGEuZmxhZ3N8PTQxOTQzMDgpfVxuZnVuY3Rpb24gc2goYSxiLGMpe2E9Yy5yZWY7aWYobnVsbCE9PWEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZcIm9iamVjdFwiIT09dHlwZW9mIGEpe2lmKGMuX293bmVyKXtjPWMuX293bmVyO2lmKGMpe2lmKDEhPT1jLnRhZyl0aHJvdyBFcnJvcihwKDMwOSkpO3ZhciBkPWMuc3RhdGVOb2RlfWlmKCFkKXRocm93IEVycm9yKHAoMTQ3LGEpKTt2YXIgZT1kLGY9XCJcIithO2lmKG51bGwhPT1iJiZudWxsIT09Yi5yZWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnJlZiYmYi5yZWYuX3N0cmluZ1JlZj09PWYpcmV0dXJuIGIucmVmO2I9ZnVuY3Rpb24oYSl7dmFyIGI9ZS5yZWZzO2I9PT1qaCYmKGI9ZS5yZWZzPXt9KTtudWxsPT09YT9kZWxldGUgYltmXTpiW2ZdPWF9O2IuX3N0cmluZ1JlZj1mO3JldHVybiBifWlmKFwic3RyaW5nXCIhPT10eXBlb2YgYSl0aHJvdyBFcnJvcihwKDI4NCkpO2lmKCFjLl9vd25lcil0aHJvdyBFcnJvcihwKDI5MCxhKSk7fXJldHVybiBhfVxuZnVuY3Rpb24gdGgoYSxiKXthPU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKTt0aHJvdyBFcnJvcihwKDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1hP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYikuam9pbihcIiwgXCIpK1wifVwiOmEpKTt9ZnVuY3Rpb24gdWgoYSl7dmFyIGI9YS5faW5pdDtyZXR1cm4gYihhLl9wYXlsb2FkKX1cbmZ1bmN0aW9uIHZoKGEpe2Z1bmN0aW9uIGIoYixjKXtpZihhKXt2YXIgZD1iLmRlbGV0aW9ucztudWxsPT09ZD8oYi5kZWxldGlvbnM9W2NdLGIuZmxhZ3N8PTE2KTpkLnB1c2goYyl9fWZ1bmN0aW9uIGMoYyxkKXtpZighYSlyZXR1cm4gbnVsbDtmb3IoO251bGwhPT1kOyliKGMsZCksZD1kLnNpYmxpbmc7cmV0dXJuIG51bGx9ZnVuY3Rpb24gZChhLGIpe2ZvcihhPW5ldyBNYXA7bnVsbCE9PWI7KW51bGwhPT1iLmtleT9hLnNldChiLmtleSxiKTphLnNldChiLmluZGV4LGIpLGI9Yi5zaWJsaW5nO3JldHVybiBhfWZ1bmN0aW9uIGUoYSxiKXthPXdoKGEsYik7YS5pbmRleD0wO2Euc2libGluZz1udWxsO3JldHVybiBhfWZ1bmN0aW9uIGYoYixjLGQpe2IuaW5kZXg9ZDtpZighYSlyZXR1cm4gYi5mbGFnc3w9MTA0ODU3NixjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZmxhZ3N8PTIsYyk6ZDtiLmZsYWdzfD0yO3JldHVybiBjfWZ1bmN0aW9uIGcoYil7YSYmXG5udWxsPT09Yi5hbHRlcm5hdGUmJihiLmZsYWdzfD0yKTtyZXR1cm4gYn1mdW5jdGlvbiBoKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWcpcmV0dXJuIGI9eGgoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gayhhLGIsYyxkKXt2YXIgZj1jLnR5cGU7aWYoZj09PXlhKXJldHVybiBtKGEsYixjLnByb3BzLmNoaWxkcmVuLGQsYy5rZXkpO2lmKG51bGwhPT1iJiYoYi5lbGVtZW50VHlwZT09PWZ8fFwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYuJCR0eXBlb2Y9PT1IYSYmdWgoZik9PT1iLnR5cGUpKXJldHVybiBkPWUoYixjLnByb3BzKSxkLnJlZj1zaChhLGIsYyksZC5yZXR1cm49YSxkO2Q9eWgoYy50eXBlLGMua2V5LGMucHJvcHMsbnVsbCxhLm1vZGUsZCk7ZC5yZWY9c2goYSxiLGMpO2QucmV0dXJuPWE7cmV0dXJuIGR9ZnVuY3Rpb24gbChhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxcbmIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8hPT1jLmNvbnRhaW5lckluZm98fGIuc3RhdGVOb2RlLmltcGxlbWVudGF0aW9uIT09Yy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj16aChjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10pO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbShhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHw3IT09Yi50YWcpcmV0dXJuIGI9QWgoYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBxKGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGImJlwiXCIhPT1ifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9eGgoXCJcIitiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7c3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2UgdmE6cmV0dXJuIGM9eWgoYi50eXBlLGIua2V5LGIucHJvcHMsbnVsbCxhLm1vZGUsYyksXG5jLnJlZj1zaChhLG51bGwsYiksYy5yZXR1cm49YSxjO2Nhc2Ugd2E6cmV0dXJuIGI9emgoYixhLm1vZGUsYyksYi5yZXR1cm49YSxiO2Nhc2UgSGE6dmFyIGQ9Yi5faW5pdDtyZXR1cm4gcShhLGQoYi5fcGF5bG9hZCksYyl9aWYoZWIoYil8fEthKGIpKXJldHVybiBiPUFoKGIsYS5tb2RlLGMsbnVsbCksYi5yZXR1cm49YSxiO3RoKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24gcihhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgYyYmXCJcIiE9PWN8fFwibnVtYmVyXCI9PT10eXBlb2YgYylyZXR1cm4gbnVsbCE9PWU/bnVsbDpoKGEsYixcIlwiK2MsZCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7c3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2UgdmE6cmV0dXJuIGMua2V5PT09ZT9rKGEsYixjLGQpOm51bGw7Y2FzZSB3YTpyZXR1cm4gYy5rZXk9PT1lP2woYSxiLGMsZCk6bnVsbDtjYXNlIEhhOnJldHVybiBlPWMuX2luaXQscihhLFxuYixlKGMuX3BheWxvYWQpLGQpfWlmKGViKGMpfHxLYShjKSlyZXR1cm4gbnVsbCE9PWU/bnVsbDptKGEsYixjLGQsbnVsbCk7dGgoYSxjKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiB5KGEsYixjLGQsZSl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBkJiZcIlwiIT09ZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLGgoYixhLFwiXCIrZCxlKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSB2YTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsayhiLGEsZCxlKTtjYXNlIHdhOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxsKGIsYSxkLGUpO2Nhc2UgSGE6dmFyIGY9ZC5faW5pdDtyZXR1cm4geShhLGIsYyxmKGQuX3BheWxvYWQpLGUpfWlmKGViKGQpfHxLYShkKSlyZXR1cm4gYT1hLmdldChjKXx8bnVsbCxtKGIsYSxkLGUsbnVsbCk7dGgoYixkKX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIG4oZSxnLGgsayl7Zm9yKHZhciBsPW51bGwsbT1udWxsLHU9Zyx3PWc9MCx4PW51bGw7bnVsbCE9PXUmJnc8aC5sZW5ndGg7dysrKXt1LmluZGV4Pnc/KHg9dSx1PW51bGwpOng9dS5zaWJsaW5nO3ZhciBuPXIoZSx1LGhbd10sayk7aWYobnVsbD09PW4pe251bGw9PT11JiYodT14KTticmVha31hJiZ1JiZudWxsPT09bi5hbHRlcm5hdGUmJmIoZSx1KTtnPWYobixnLHcpO251bGw9PT1tP2w9bjptLnNpYmxpbmc9bjttPW47dT14fWlmKHc9PT1oLmxlbmd0aClyZXR1cm4gYyhlLHUpLEkmJnRnKGUsdyksbDtpZihudWxsPT09dSl7Zm9yKDt3PGgubGVuZ3RoO3crKyl1PXEoZSxoW3ddLGspLG51bGwhPT11JiYoZz1mKHUsZyx3KSxudWxsPT09bT9sPXU6bS5zaWJsaW5nPXUsbT11KTtJJiZ0ZyhlLHcpO3JldHVybiBsfWZvcih1PWQoZSx1KTt3PGgubGVuZ3RoO3crKyl4PXkodSxlLHcsaFt3XSxrKSxudWxsIT09eCYmKGEmJm51bGwhPT14LmFsdGVybmF0ZSYmdS5kZWxldGUobnVsbD09PVxueC5rZXk/dzp4LmtleSksZz1mKHgsZyx3KSxudWxsPT09bT9sPXg6bS5zaWJsaW5nPXgsbT14KTthJiZ1LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO0kmJnRnKGUsdyk7cmV0dXJuIGx9ZnVuY3Rpb24gdChlLGcsaCxrKXt2YXIgbD1LYShoKTtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgbCl0aHJvdyBFcnJvcihwKDE1MCkpO2g9bC5jYWxsKGgpO2lmKG51bGw9PWgpdGhyb3cgRXJyb3IocCgxNTEpKTtmb3IodmFyIHU9bD1udWxsLG09Zyx3PWc9MCx4PW51bGwsbj1oLm5leHQoKTtudWxsIT09bSYmIW4uZG9uZTt3Kyssbj1oLm5leHQoKSl7bS5pbmRleD53Pyh4PW0sbT1udWxsKTp4PW0uc2libGluZzt2YXIgdD1yKGUsbSxuLnZhbHVlLGspO2lmKG51bGw9PT10KXtudWxsPT09bSYmKG09eCk7YnJlYWt9YSYmbSYmbnVsbD09PXQuYWx0ZXJuYXRlJiZiKGUsbSk7Zz1mKHQsZyx3KTtudWxsPT09dT9sPXQ6dS5zaWJsaW5nPXQ7dT10O209eH1pZihuLmRvbmUpcmV0dXJuIGMoZSxcbm0pLEkmJnRnKGUsdyksbDtpZihudWxsPT09bSl7Zm9yKDshbi5kb25lO3crKyxuPWgubmV4dCgpKW49cShlLG4udmFsdWUsayksbnVsbCE9PW4mJihnPWYobixnLHcpLG51bGw9PT11P2w9bjp1LnNpYmxpbmc9bix1PW4pO0kmJnRnKGUsdyk7cmV0dXJuIGx9Zm9yKG09ZChlLG0pOyFuLmRvbmU7dysrLG49aC5uZXh0KCkpbj15KG0sZSx3LG4udmFsdWUsayksbnVsbCE9PW4mJihhJiZudWxsIT09bi5hbHRlcm5hdGUmJm0uZGVsZXRlKG51bGw9PT1uLmtleT93Om4ua2V5KSxnPWYobixnLHcpLG51bGw9PT11P2w9bjp1LnNpYmxpbmc9bix1PW4pO2EmJm0uZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7SSYmdGcoZSx3KTtyZXR1cm4gbH1mdW5jdGlvbiBKKGEsZCxmLGgpe1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYmJmYudHlwZT09PXlhJiZudWxsPT09Zi5rZXkmJihmPWYucHJvcHMuY2hpbGRyZW4pO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWYpe3N3aXRjaChmLiQkdHlwZW9mKXtjYXNlIHZhOmE6e2Zvcih2YXIgaz1cbmYua2V5LGw9ZDtudWxsIT09bDspe2lmKGwua2V5PT09ayl7az1mLnR5cGU7aWYoaz09PXlhKXtpZig3PT09bC50YWcpe2MoYSxsLnNpYmxpbmcpO2Q9ZShsLGYucHJvcHMuY2hpbGRyZW4pO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9fWVsc2UgaWYobC5lbGVtZW50VHlwZT09PWt8fFwib2JqZWN0XCI9PT10eXBlb2YgayYmbnVsbCE9PWsmJmsuJCR0eXBlb2Y9PT1IYSYmdWgoayk9PT1sLnR5cGUpe2MoYSxsLnNpYmxpbmcpO2Q9ZShsLGYucHJvcHMpO2QucmVmPXNoKGEsbCxmKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWMoYSxsKTticmVha31lbHNlIGIoYSxsKTtsPWwuc2libGluZ31mLnR5cGU9PT15YT8oZD1BaChmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxoLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGg9eWgoZi50eXBlLGYua2V5LGYucHJvcHMsbnVsbCxhLm1vZGUsaCksaC5yZWY9c2goYSxkLGYpLGgucmV0dXJuPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlIHdhOmE6e2ZvcihsPWYua2V5O251bGwhPT1cbmQ7KXtpZihkLmtleT09PWwpaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9ZC5zaWJsaW5nfWQ9emgoZixhLm1vZGUsaCk7ZC5yZXR1cm49YTthPWR9cmV0dXJuIGcoYSk7Y2FzZSBIYTpyZXR1cm4gbD1mLl9pbml0LEooYSxkLGwoZi5fcGF5bG9hZCksaCl9aWYoZWIoZikpcmV0dXJuIG4oYSxkLGYsaCk7aWYoS2EoZikpcmV0dXJuIHQoYSxkLGYsaCk7dGgoYSxmKX1yZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGYmJlwiXCIhPT1mfHxcIm51bWJlclwiPT09dHlwZW9mIGY/KGY9XCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYpLGQucmV0dXJuPWEsYT1kKTpcbihjKGEsZCksZD14aChmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKSk6YyhhLGQpfXJldHVybiBKfXZhciBCaD12aCghMCksQ2g9dmgoITEpLERoPXt9LEVoPVVmKERoKSxGaD1VZihEaCksR2g9VWYoRGgpO2Z1bmN0aW9uIEhoKGEpe2lmKGE9PT1EaCl0aHJvdyBFcnJvcihwKDE3NCkpO3JldHVybiBhfWZ1bmN0aW9uIEloKGEsYil7RyhHaCxiKTtHKEZoLGEpO0coRWgsRGgpO2E9Yi5ub2RlVHlwZTtzd2l0Y2goYSl7Y2FzZSA5OmNhc2UgMTE6Yj0oYj1iLmRvY3VtZW50RWxlbWVudCk/Yi5uYW1lc3BhY2VVUkk6bGIobnVsbCxcIlwiKTticmVhaztkZWZhdWx0OmE9OD09PWE/Yi5wYXJlbnROb2RlOmIsYj1hLm5hbWVzcGFjZVVSSXx8bnVsbCxhPWEudGFnTmFtZSxiPWxiKGIsYSl9RShFaCk7RyhFaCxiKX1mdW5jdGlvbiBKaCgpe0UoRWgpO0UoRmgpO0UoR2gpfVxuZnVuY3Rpb24gS2goYSl7SGgoR2guY3VycmVudCk7dmFyIGI9SGgoRWguY3VycmVudCk7dmFyIGM9bGIoYixhLnR5cGUpO2IhPT1jJiYoRyhGaCxhKSxHKEVoLGMpKX1mdW5jdGlvbiBMaChhKXtGaC5jdXJyZW50PT09YSYmKEUoRWgpLEUoRmgpKX12YXIgTT1VZigwKTtcbmZ1bmN0aW9uIE1oKGEpe2Zvcih2YXIgYj1hO251bGwhPT1iOyl7aWYoMTM9PT1iLnRhZyl7dmFyIGM9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbD09PWN8fFwiJD9cIj09PWMuZGF0YXx8XCIkIVwiPT09Yy5kYXRhKSlyZXR1cm4gYn1lbHNlIGlmKDE5PT09Yi50YWcmJnZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcil7aWYoMCE9PShiLmZsYWdzJjEyOCkpcmV0dXJuIGJ9ZWxzZSBpZihudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfXJldHVybiBudWxsfXZhciBOaD1bXTtcbmZ1bmN0aW9uIE9oKCl7Zm9yKHZhciBhPTA7YTxOaC5sZW5ndGg7YSsrKU5oW2FdLl93b3JrSW5Qcm9ncmVzc1ZlcnNpb25QcmltYXJ5PW51bGw7TmgubGVuZ3RoPTB9dmFyIFBoPXVhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsUWg9dWEuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsUmg9MCxOPW51bGwsTz1udWxsLFA9bnVsbCxTaD0hMSxUaD0hMSxVaD0wLFZoPTA7ZnVuY3Rpb24gUSgpe3Rocm93IEVycm9yKHAoMzIxKSk7fWZ1bmN0aW9uIFdoKGEsYil7aWYobnVsbD09PWIpcmV0dXJuITE7Zm9yKHZhciBjPTA7YzxiLmxlbmd0aCYmYzxhLmxlbmd0aDtjKyspaWYoIUhlKGFbY10sYltjXSkpcmV0dXJuITE7cmV0dXJuITB9XG5mdW5jdGlvbiBYaChhLGIsYyxkLGUsZil7Umg9ZjtOPWI7Yi5tZW1vaXplZFN0YXRlPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO2IubGFuZXM9MDtQaC5jdXJyZW50PW51bGw9PT1hfHxudWxsPT09YS5tZW1vaXplZFN0YXRlP1loOlpoO2E9YyhkLGUpO2lmKFRoKXtmPTA7ZG97VGg9ITE7VWg9MDtpZigyNTw9Zil0aHJvdyBFcnJvcihwKDMwMSkpO2YrPTE7UD1PPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO1BoLmN1cnJlbnQ9JGg7YT1jKGQsZSl9d2hpbGUoVGgpfVBoLmN1cnJlbnQ9YWk7Yj1udWxsIT09TyYmbnVsbCE9PU8ubmV4dDtSaD0wO1A9Tz1OPW51bGw7U2g9ITE7aWYoYil0aHJvdyBFcnJvcihwKDMwMCkpO3JldHVybiBhfWZ1bmN0aW9uIGJpKCl7dmFyIGE9MCE9PVVoO1VoPTA7cmV0dXJuIGF9XG5mdW5jdGlvbiBjaSgpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwsYmFzZVF1ZXVlOm51bGwscXVldWU6bnVsbCxuZXh0Om51bGx9O251bGw9PT1QP04ubWVtb2l6ZWRTdGF0ZT1QPWE6UD1QLm5leHQ9YTtyZXR1cm4gUH1mdW5jdGlvbiBkaSgpe2lmKG51bGw9PT1PKXt2YXIgYT1OLmFsdGVybmF0ZTthPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsfWVsc2UgYT1PLm5leHQ7dmFyIGI9bnVsbD09PVA/Ti5tZW1vaXplZFN0YXRlOlAubmV4dDtpZihudWxsIT09YilQPWIsTz1hO2Vsc2V7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IocCgzMTApKTtPPWE7YT17bWVtb2l6ZWRTdGF0ZTpPLm1lbW9pemVkU3RhdGUsYmFzZVN0YXRlOk8uYmFzZVN0YXRlLGJhc2VRdWV1ZTpPLmJhc2VRdWV1ZSxxdWV1ZTpPLnF1ZXVlLG5leHQ6bnVsbH07bnVsbD09PVA/Ti5tZW1vaXplZFN0YXRlPVA9YTpQPVAubmV4dD1hfXJldHVybiBQfVxuZnVuY3Rpb24gZWkoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiBmaShhKXt2YXIgYj1kaSgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcihwKDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPU8sZT1kLmJhc2VRdWV1ZSxmPWMucGVuZGluZztpZihudWxsIT09Zil7aWYobnVsbCE9PWUpe3ZhciBnPWUubmV4dDtlLm5leHQ9Zi5uZXh0O2YubmV4dD1nfWQuYmFzZVF1ZXVlPWU9ZjtjLnBlbmRpbmc9bnVsbH1pZihudWxsIT09ZSl7Zj1lLm5leHQ7ZD1kLmJhc2VTdGF0ZTt2YXIgaD1nPW51bGwsaz1udWxsLGw9Zjtkb3t2YXIgbT1sLmxhbmU7aWYoKFJoJm0pPT09bSludWxsIT09ayYmKGs9ay5uZXh0PXtsYW5lOjAsYWN0aW9uOmwuYWN0aW9uLGhhc0VhZ2VyU3RhdGU6bC5oYXNFYWdlclN0YXRlLGVhZ2VyU3RhdGU6bC5lYWdlclN0YXRlLG5leHQ6bnVsbH0pLGQ9bC5oYXNFYWdlclN0YXRlP2wuZWFnZXJTdGF0ZTphKGQsbC5hY3Rpb24pO2Vsc2V7dmFyIHE9e2xhbmU6bSxhY3Rpb246bC5hY3Rpb24saGFzRWFnZXJTdGF0ZTpsLmhhc0VhZ2VyU3RhdGUsXG5lYWdlclN0YXRlOmwuZWFnZXJTdGF0ZSxuZXh0Om51bGx9O251bGw9PT1rPyhoPWs9cSxnPWQpOms9ay5uZXh0PXE7Ti5sYW5lc3w9bTtoaHw9bX1sPWwubmV4dH13aGlsZShudWxsIT09bCYmbCE9PWYpO251bGw9PT1rP2c9ZDprLm5leHQ9aDtIZShkLGIubWVtb2l6ZWRTdGF0ZSl8fChVZz0hMCk7Yi5tZW1vaXplZFN0YXRlPWQ7Yi5iYXNlU3RhdGU9ZztiLmJhc2VRdWV1ZT1rO2MubGFzdFJlbmRlcmVkU3RhdGU9ZH1hPWMuaW50ZXJsZWF2ZWQ7aWYobnVsbCE9PWEpe2U9YTtkbyBmPWUubGFuZSxOLmxhbmVzfD1mLGhofD1mLGU9ZS5uZXh0O3doaWxlKGUhPT1hKX1lbHNlIG51bGw9PT1lJiYoYy5sYW5lcz0wKTtyZXR1cm5bYi5tZW1vaXplZFN0YXRlLGMuZGlzcGF0Y2hdfVxuZnVuY3Rpb24gZ2koYSl7dmFyIGI9ZGkoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IocCgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1jLmRpc3BhdGNoLGU9Yy5wZW5kaW5nLGY9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1lKXtjLnBlbmRpbmc9bnVsbDt2YXIgZz1lPWUubmV4dDtkbyBmPWEoZixnLmFjdGlvbiksZz1nLm5leHQ7d2hpbGUoZyE9PWUpO0hlKGYsYi5tZW1vaXplZFN0YXRlKXx8KFVnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZjtudWxsPT09Yi5iYXNlUXVldWUmJihiLmJhc2VTdGF0ZT1mKTtjLmxhc3RSZW5kZXJlZFN0YXRlPWZ9cmV0dXJuW2YsZF19ZnVuY3Rpb24gaGkoKXt9XG5mdW5jdGlvbiBpaShhLGIpe3ZhciBjPU4sZD1kaSgpLGU9YigpLGY9IUhlKGQubWVtb2l6ZWRTdGF0ZSxlKTtmJiYoZC5tZW1vaXplZFN0YXRlPWUsVWc9ITApO2Q9ZC5xdWV1ZTtqaShraS5iaW5kKG51bGwsYyxkLGEpLFthXSk7aWYoZC5nZXRTbmFwc2hvdCE9PWJ8fGZ8fG51bGwhPT1QJiZQLm1lbW9pemVkU3RhdGUudGFnJjEpe2MuZmxhZ3N8PTIwNDg7bGkoOSxtaS5iaW5kKG51bGwsYyxkLGUsYiksdm9pZCAwLG51bGwpO2lmKG51bGw9PT1SKXRocm93IEVycm9yKHAoMzQ5KSk7MCE9PShSaCYzMCl8fG5pKGMsYixlKX1yZXR1cm4gZX1mdW5jdGlvbiBuaShhLGIsYyl7YS5mbGFnc3w9MTYzODQ7YT17Z2V0U25hcHNob3Q6Yix2YWx1ZTpjfTtiPU4udXBkYXRlUXVldWU7bnVsbD09PWI/KGI9e2xhc3RFZmZlY3Q6bnVsbCxzdG9yZXM6bnVsbH0sTi51cGRhdGVRdWV1ZT1iLGIuc3RvcmVzPVthXSk6KGM9Yi5zdG9yZXMsbnVsbD09PWM/Yi5zdG9yZXM9W2FdOmMucHVzaChhKSl9XG5mdW5jdGlvbiBtaShhLGIsYyxkKXtiLnZhbHVlPWM7Yi5nZXRTbmFwc2hvdD1kO29pKGIpJiZwaShhKX1mdW5jdGlvbiBraShhLGIsYyl7cmV0dXJuIGMoZnVuY3Rpb24oKXtvaShiKSYmcGkoYSl9KX1mdW5jdGlvbiBvaShhKXt2YXIgYj1hLmdldFNuYXBzaG90O2E9YS52YWx1ZTt0cnl7dmFyIGM9YigpO3JldHVybiFIZShhLGMpfWNhdGNoKGQpe3JldHVybiEwfX1mdW5jdGlvbiBwaShhKXt2YXIgYj1aZyhhLDEpO251bGwhPT1iJiZtaChiLGEsMSwtMSl9XG5mdW5jdGlvbiBxaShhKXt2YXIgYj1jaSgpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBhJiYoYT1hKCkpO2IubWVtb2l6ZWRTdGF0ZT1iLmJhc2VTdGF0ZT1hO2E9e3BlbmRpbmc6bnVsbCxpbnRlcmxlYXZlZDpudWxsLGxhbmVzOjAsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOmVpLGxhc3RSZW5kZXJlZFN0YXRlOmF9O2IucXVldWU9YTthPWEuZGlzcGF0Y2g9cmkuYmluZChudWxsLE4sYSk7cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxhXX1cbmZ1bmN0aW9uIGxpKGEsYixjLGQpe2E9e3RhZzphLGNyZWF0ZTpiLGRlc3Ryb3k6YyxkZXBzOmQsbmV4dDpudWxsfTtiPU4udXBkYXRlUXVldWU7bnVsbD09PWI/KGI9e2xhc3RFZmZlY3Q6bnVsbCxzdG9yZXM6bnVsbH0sTi51cGRhdGVRdWV1ZT1iLGIubGFzdEVmZmVjdD1hLm5leHQ9YSk6KGM9Yi5sYXN0RWZmZWN0LG51bGw9PT1jP2IubGFzdEVmZmVjdD1hLm5leHQ9YTooZD1jLm5leHQsYy5uZXh0PWEsYS5uZXh0PWQsYi5sYXN0RWZmZWN0PWEpKTtyZXR1cm4gYX1mdW5jdGlvbiBzaSgpe3JldHVybiBkaSgpLm1lbW9pemVkU3RhdGV9ZnVuY3Rpb24gdGkoYSxiLGMsZCl7dmFyIGU9Y2koKTtOLmZsYWdzfD1hO2UubWVtb2l6ZWRTdGF0ZT1saSgxfGIsYyx2b2lkIDAsdm9pZCAwPT09ZD9udWxsOmQpfVxuZnVuY3Rpb24gdWkoYSxiLGMsZCl7dmFyIGU9ZGkoKTtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBmPXZvaWQgMDtpZihudWxsIT09Tyl7dmFyIGc9Ty5tZW1vaXplZFN0YXRlO2Y9Zy5kZXN0cm95O2lmKG51bGwhPT1kJiZXaChkLGcuZGVwcykpe2UubWVtb2l6ZWRTdGF0ZT1saShiLGMsZixkKTtyZXR1cm59fU4uZmxhZ3N8PWE7ZS5tZW1vaXplZFN0YXRlPWxpKDF8YixjLGYsZCl9ZnVuY3Rpb24gdmkoYSxiKXtyZXR1cm4gdGkoODM5MDY1Niw4LGEsYil9ZnVuY3Rpb24gamkoYSxiKXtyZXR1cm4gdWkoMjA0OCw4LGEsYil9ZnVuY3Rpb24gd2koYSxiKXtyZXR1cm4gdWkoNCwyLGEsYil9ZnVuY3Rpb24geGkoYSxiKXtyZXR1cm4gdWkoNCw0LGEsYil9XG5mdW5jdGlvbiB5aShhLGIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXJldHVybiBhPWEoKSxiKGEpLGZ1bmN0aW9uKCl7YihudWxsKX07aWYobnVsbCE9PWImJnZvaWQgMCE9PWIpcmV0dXJuIGE9YSgpLGIuY3VycmVudD1hLGZ1bmN0aW9uKCl7Yi5jdXJyZW50PW51bGx9fWZ1bmN0aW9uIHppKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gdWkoNCw0LHlpLmJpbmQobnVsbCxiLGEpLGMpfWZ1bmN0aW9uIEFpKCl7fWZ1bmN0aW9uIEJpKGEsYil7dmFyIGM9ZGkoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJldoKGIsZFsxXSkpcmV0dXJuIGRbMF07Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfVxuZnVuY3Rpb24gQ2koYSxiKXt2YXIgYz1kaSgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmV2goYixkWzFdKSlyZXR1cm4gZFswXTthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9ZnVuY3Rpb24gRGkoYSxiLGMpe2lmKDA9PT0oUmgmMjEpKXJldHVybiBhLmJhc2VTdGF0ZSYmKGEuYmFzZVN0YXRlPSExLFVnPSEwKSxhLm1lbW9pemVkU3RhdGU9YztIZShjLGIpfHwoYz15YygpLE4ubGFuZXN8PWMsaGh8PWMsYS5iYXNlU3RhdGU9ITApO3JldHVybiBifWZ1bmN0aW9uIEVpKGEsYil7dmFyIGM9QztDPTAhPT1jJiY0PmM/Yzo0O2EoITApO3ZhciBkPVFoLnRyYW5zaXRpb247UWgudHJhbnNpdGlvbj17fTt0cnl7YSghMSksYigpfWZpbmFsbHl7Qz1jLFFoLnRyYW5zaXRpb249ZH19ZnVuY3Rpb24gRmkoKXtyZXR1cm4gZGkoKS5tZW1vaXplZFN0YXRlfVxuZnVuY3Rpb24gR2koYSxiLGMpe3ZhciBkPWxoKGEpO2M9e2xhbmU6ZCxhY3Rpb246YyxoYXNFYWdlclN0YXRlOiExLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9O2lmKEhpKGEpKUlpKGIsYyk7ZWxzZSBpZihjPVlnKGEsYixjLGQpLG51bGwhPT1jKXt2YXIgZT1MKCk7bWgoYyxhLGQsZSk7SmkoYyxiLGQpfX1cbmZ1bmN0aW9uIHJpKGEsYixjKXt2YXIgZD1saChhKSxlPXtsYW5lOmQsYWN0aW9uOmMsaGFzRWFnZXJTdGF0ZTohMSxlYWdlclN0YXRlOm51bGwsbmV4dDpudWxsfTtpZihIaShhKSlJaShiLGUpO2Vsc2V7dmFyIGY9YS5hbHRlcm5hdGU7aWYoMD09PWEubGFuZXMmJihudWxsPT09Znx8MD09PWYubGFuZXMpJiYoZj1iLmxhc3RSZW5kZXJlZFJlZHVjZXIsbnVsbCE9PWYpKXRyeXt2YXIgZz1iLmxhc3RSZW5kZXJlZFN0YXRlLGg9ZihnLGMpO2UuaGFzRWFnZXJTdGF0ZT0hMDtlLmVhZ2VyU3RhdGU9aDtpZihIZShoLGcpKXt2YXIgaz1iLmludGVybGVhdmVkO251bGw9PT1rPyhlLm5leHQ9ZSxYZyhiKSk6KGUubmV4dD1rLm5leHQsay5uZXh0PWUpO2IuaW50ZXJsZWF2ZWQ9ZTtyZXR1cm59fWNhdGNoKGwpe31maW5hbGx5e31jPVlnKGEsYixlLGQpO251bGwhPT1jJiYoZT1MKCksbWgoYyxhLGQsZSksSmkoYyxiLGQpKX19XG5mdW5jdGlvbiBIaShhKXt2YXIgYj1hLmFsdGVybmF0ZTtyZXR1cm4gYT09PU58fG51bGwhPT1iJiZiPT09Tn1mdW5jdGlvbiBJaShhLGIpe1RoPVNoPSEwO3ZhciBjPWEucGVuZGluZztudWxsPT09Yz9iLm5leHQ9YjooYi5uZXh0PWMubmV4dCxjLm5leHQ9Yik7YS5wZW5kaW5nPWJ9ZnVuY3Rpb24gSmkoYSxiLGMpe2lmKDAhPT0oYyY0MTk0MjQwKSl7dmFyIGQ9Yi5sYW5lcztkJj1hLnBlbmRpbmdMYW5lcztjfD1kO2IubGFuZXM9YztDYyhhLGMpfX1cbnZhciBhaT17cmVhZENvbnRleHQ6VmcsdXNlQ2FsbGJhY2s6USx1c2VDb250ZXh0OlEsdXNlRWZmZWN0OlEsdXNlSW1wZXJhdGl2ZUhhbmRsZTpRLHVzZUluc2VydGlvbkVmZmVjdDpRLHVzZUxheW91dEVmZmVjdDpRLHVzZU1lbW86USx1c2VSZWR1Y2VyOlEsdXNlUmVmOlEsdXNlU3RhdGU6USx1c2VEZWJ1Z1ZhbHVlOlEsdXNlRGVmZXJyZWRWYWx1ZTpRLHVzZVRyYW5zaXRpb246USx1c2VNdXRhYmxlU291cmNlOlEsdXNlU3luY0V4dGVybmFsU3RvcmU6USx1c2VJZDpRLHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sWWg9e3JlYWRDb250ZXh0OlZnLHVzZUNhbGxiYWNrOmZ1bmN0aW9uKGEsYil7Y2koKS5tZW1vaXplZFN0YXRlPVthLHZvaWQgMD09PWI/bnVsbDpiXTtyZXR1cm4gYX0sdXNlQ29udGV4dDpWZyx1c2VFZmZlY3Q6dmksdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIHRpKDQxOTQzMDgsXG40LHlpLmJpbmQobnVsbCxiLGEpLGMpfSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gdGkoNDE5NDMwOCw0LGEsYil9LHVzZUluc2VydGlvbkVmZmVjdDpmdW5jdGlvbihhLGIpe3JldHVybiB0aSg0LDIsYSxiKX0sdXNlTWVtbzpmdW5jdGlvbihhLGIpe3ZhciBjPWNpKCk7Yj12b2lkIDA9PT1iP251bGw6YjthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWNpKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPXtwZW5kaW5nOm51bGwsaW50ZXJsZWF2ZWQ6bnVsbCxsYW5lczowLGRpc3BhdGNoOm51bGwsbGFzdFJlbmRlcmVkUmVkdWNlcjphLGxhc3RSZW5kZXJlZFN0YXRlOmJ9O2QucXVldWU9YTthPWEuZGlzcGF0Y2g9R2kuYmluZChudWxsLE4sYSk7cmV0dXJuW2QubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlUmVmOmZ1bmN0aW9uKGEpe3ZhciBiPVxuY2koKTthPXtjdXJyZW50OmF9O3JldHVybiBiLm1lbW9pemVkU3RhdGU9YX0sdXNlU3RhdGU6cWksdXNlRGVidWdWYWx1ZTpBaSx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEpe3JldHVybiBjaSgpLm1lbW9pemVkU3RhdGU9YX0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPXFpKCExKSxiPWFbMF07YT1FaS5iaW5kKG51bGwsYVsxXSk7Y2koKS5tZW1vaXplZFN0YXRlPWE7cmV0dXJuW2IsYV19LHVzZU11dGFibGVTb3VyY2U6ZnVuY3Rpb24oKXt9LHVzZVN5bmNFeHRlcm5hbFN0b3JlOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD1OLGU9Y2koKTtpZihJKXtpZih2b2lkIDA9PT1jKXRocm93IEVycm9yKHAoNDA3KSk7Yz1jKCl9ZWxzZXtjPWIoKTtpZihudWxsPT09Uil0aHJvdyBFcnJvcihwKDM0OSkpOzAhPT0oUmgmMzApfHxuaShkLGIsYyl9ZS5tZW1vaXplZFN0YXRlPWM7dmFyIGY9e3ZhbHVlOmMsZ2V0U25hcHNob3Q6Yn07ZS5xdWV1ZT1mO3ZpKGtpLmJpbmQobnVsbCxkLFxuZixhKSxbYV0pO2QuZmxhZ3N8PTIwNDg7bGkoOSxtaS5iaW5kKG51bGwsZCxmLGMsYiksdm9pZCAwLG51bGwpO3JldHVybiBjfSx1c2VJZDpmdW5jdGlvbigpe3ZhciBhPWNpKCksYj1SLmlkZW50aWZpZXJQcmVmaXg7aWYoSSl7dmFyIGM9c2c7dmFyIGQ9cmc7Yz0oZCZ+KDE8PDMyLW9jKGQpLTEpKS50b1N0cmluZygzMikrYztiPVwiOlwiK2IrXCJSXCIrYztjPVVoKys7MDxjJiYoYis9XCJIXCIrYy50b1N0cmluZygzMikpO2IrPVwiOlwifWVsc2UgYz1WaCsrLGI9XCI6XCIrYitcInJcIitjLnRvU3RyaW5nKDMyKStcIjpcIjtyZXR1cm4gYS5tZW1vaXplZFN0YXRlPWJ9LHVuc3RhYmxlX2lzTmV3UmVjb25jaWxlcjohMX0sWmg9e3JlYWRDb250ZXh0OlZnLHVzZUNhbGxiYWNrOkJpLHVzZUNvbnRleHQ6VmcsdXNlRWZmZWN0OmppLHVzZUltcGVyYXRpdmVIYW5kbGU6emksdXNlSW5zZXJ0aW9uRWZmZWN0OndpLHVzZUxheW91dEVmZmVjdDp4aSx1c2VNZW1vOkNpLHVzZVJlZHVjZXI6ZmksdXNlUmVmOnNpLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIGZpKGVpKX0sXG51c2VEZWJ1Z1ZhbHVlOkFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9ZGkoKTtyZXR1cm4gRGkoYixPLm1lbW9pemVkU3RhdGUsYSl9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oKXt2YXIgYT1maShlaSlbMF0sYj1kaSgpLm1lbW9pemVkU3RhdGU7cmV0dXJuW2EsYl19LHVzZU11dGFibGVTb3VyY2U6aGksdXNlU3luY0V4dGVybmFsU3RvcmU6aWksdXNlSWQ6RmksdW5zdGFibGVfaXNOZXdSZWNvbmNpbGVyOiExfSwkaD17cmVhZENvbnRleHQ6VmcsdXNlQ2FsbGJhY2s6QmksdXNlQ29udGV4dDpWZyx1c2VFZmZlY3Q6amksdXNlSW1wZXJhdGl2ZUhhbmRsZTp6aSx1c2VJbnNlcnRpb25FZmZlY3Q6d2ksdXNlTGF5b3V0RWZmZWN0OnhpLHVzZU1lbW86Q2ksdXNlUmVkdWNlcjpnaSx1c2VSZWY6c2ksdXNlU3RhdGU6ZnVuY3Rpb24oKXtyZXR1cm4gZ2koZWkpfSx1c2VEZWJ1Z1ZhbHVlOkFpLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSl7dmFyIGI9ZGkoKTtyZXR1cm4gbnVsbD09PVxuTz9iLm1lbW9pemVkU3RhdGU9YTpEaShiLE8ubWVtb2l6ZWRTdGF0ZSxhKX0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbigpe3ZhciBhPWdpKGVpKVswXSxiPWRpKCkubWVtb2l6ZWRTdGF0ZTtyZXR1cm5bYSxiXX0sdXNlTXV0YWJsZVNvdXJjZTpoaSx1c2VTeW5jRXh0ZXJuYWxTdG9yZTppaSx1c2VJZDpGaSx1bnN0YWJsZV9pc05ld1JlY29uY2lsZXI6ITF9O2Z1bmN0aW9uIEtpKGEsYil7dHJ5e3ZhciBjPVwiXCIsZD1iO2RvIGMrPVBhKGQpLGQ9ZC5yZXR1cm47d2hpbGUoZCk7dmFyIGU9Y31jYXRjaChmKXtlPVwiXFxuRXJyb3IgZ2VuZXJhdGluZyBzdGFjazogXCIrZi5tZXNzYWdlK1wiXFxuXCIrZi5zdGFja31yZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazplLGRpZ2VzdDpudWxsfX1mdW5jdGlvbiBMaShhLGIsYyl7cmV0dXJue3ZhbHVlOmEsc291cmNlOm51bGwsc3RhY2s6bnVsbCE9Yz9jOm51bGwsZGlnZXN0Om51bGwhPWI/YjpudWxsfX1cbmZ1bmN0aW9uIE1pKGEsYil7dHJ5e2NvbnNvbGUuZXJyb3IoYi52YWx1ZSl9Y2F0Y2goYyl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGM7fSl9fXZhciBOaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcDtmdW5jdGlvbiBPaShhLGIsYyl7Yz1jaCgtMSxjKTtjLnRhZz0zO2MucGF5bG9hZD17ZWxlbWVudDpudWxsfTt2YXIgZD1iLnZhbHVlO2MuY2FsbGJhY2s9ZnVuY3Rpb24oKXtQaXx8KFBpPSEwLFFpPWQpO01pKGEsYil9O3JldHVybiBjfVxuZnVuY3Rpb24gUmkoYSxiLGMpe2M9Y2goLTEsYyk7Yy50YWc9Mzt2YXIgZD1hLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZT1iLnZhbHVlO2MucGF5bG9hZD1mdW5jdGlvbigpe3JldHVybiBkKGUpfTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7TWkoYSxiKX19dmFyIGY9YS5zdGF0ZU5vZGU7bnVsbCE9PWYmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLmNvbXBvbmVudERpZENhdGNoJiYoYy5jYWxsYmFjaz1mdW5jdGlvbigpe01pKGEsYik7XCJmdW5jdGlvblwiIT09dHlwZW9mIGQmJihudWxsPT09U2k/U2k9bmV3IFNldChbdGhpc10pOlNpLmFkZCh0aGlzKSk7dmFyIGM9Yi5zdGFjazt0aGlzLmNvbXBvbmVudERpZENhdGNoKGIudmFsdWUse2NvbXBvbmVudFN0YWNrOm51bGwhPT1jP2M6XCJcIn0pfSk7cmV0dXJuIGN9XG5mdW5jdGlvbiBUaShhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7aWYobnVsbD09PWQpe2Q9YS5waW5nQ2FjaGU9bmV3IE5pO3ZhciBlPW5ldyBTZXQ7ZC5zZXQoYixlKX1lbHNlIGU9ZC5nZXQoYiksdm9pZCAwPT09ZSYmKGU9bmV3IFNldCxkLnNldChiLGUpKTtlLmhhcyhjKXx8KGUuYWRkKGMpLGE9VWkuYmluZChudWxsLGEsYixjKSxiLnRoZW4oYSxhKSl9ZnVuY3Rpb24gVmkoYSl7ZG97dmFyIGI7aWYoYj0xMz09PWEudGFnKWI9YS5tZW1vaXplZFN0YXRlLGI9bnVsbCE9PWI/bnVsbCE9PWIuZGVoeWRyYXRlZD8hMDohMTohMDtpZihiKXJldHVybiBhO2E9YS5yZXR1cm59d2hpbGUobnVsbCE9PWEpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gV2koYSxiLGMsZCxlKXtpZigwPT09KGEubW9kZSYxKSlyZXR1cm4gYT09PWI/YS5mbGFnc3w9NjU1MzY6KGEuZmxhZ3N8PTEyOCxjLmZsYWdzfD0xMzEwNzIsYy5mbGFncyY9LTUyODA1LDE9PT1jLnRhZyYmKG51bGw9PT1jLmFsdGVybmF0ZT9jLnRhZz0xNzooYj1jaCgtMSwxKSxiLnRhZz0yLGRoKGMsYiwxKSkpLGMubGFuZXN8PTEpLGE7YS5mbGFnc3w9NjU1MzY7YS5sYW5lcz1lO3JldHVybiBhfXZhciBYaT11YS5SZWFjdEN1cnJlbnRPd25lcixVZz0hMTtmdW5jdGlvbiBZaShhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP0NoKGIsbnVsbCxjLGQpOkJoKGIsYS5jaGlsZCxjLGQpfVxuZnVuY3Rpb24gWmkoYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO1RnKGIsZSk7ZD1YaChhLGIsYyxkLGYsZSk7Yz1iaSgpO2lmKG51bGwhPT1hJiYhVWcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmZsYWdzJj0tMjA1MyxhLmxhbmVzJj1+ZSwkaShhLGIsZSk7SSYmYyYmdmcoYik7Yi5mbGFnc3w9MTtZaShhLGIsZCxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGFqKGEsYixjLGQsZSl7aWYobnVsbD09PWEpe3ZhciBmPWMudHlwZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZiYmIWJqKGYpJiZ2b2lkIDA9PT1mLmRlZmF1bHRQcm9wcyYmbnVsbD09PWMuY29tcGFyZSYmdm9pZCAwPT09Yy5kZWZhdWx0UHJvcHMpcmV0dXJuIGIudGFnPTE1LGIudHlwZT1mLGNqKGEsYixmLGQsZSk7YT15aChjLnR5cGUsbnVsbCxkLGIsYi5tb2RlLGUpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1mPWEuY2hpbGQ7aWYoMD09PShhLmxhbmVzJmUpKXt2YXIgZz1mLm1lbW9pemVkUHJvcHM7Yz1jLmNvbXBhcmU7Yz1udWxsIT09Yz9jOkllO2lmKGMoZyxkKSYmYS5yZWY9PT1iLnJlZilyZXR1cm4gJGkoYSxiLGUpfWIuZmxhZ3N8PTE7YT13aChmLGQpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1cbmZ1bmN0aW9uIGNqKGEsYixjLGQsZSl7aWYobnVsbCE9PWEpe3ZhciBmPWEubWVtb2l6ZWRQcm9wcztpZihJZShmLGQpJiZhLnJlZj09PWIucmVmKWlmKFVnPSExLGIucGVuZGluZ1Byb3BzPWQ9ZiwwIT09KGEubGFuZXMmZSkpMCE9PShhLmZsYWdzJjEzMTA3MikmJihVZz0hMCk7ZWxzZSByZXR1cm4gYi5sYW5lcz1hLmxhbmVzLCRpKGEsYixlKX1yZXR1cm4gZGooYSxiLGMsZCxlKX1cbmZ1bmN0aW9uIGVqKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcyxlPWQuY2hpbGRyZW4sZj1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbDtpZihcImhpZGRlblwiPT09ZC5tb2RlKWlmKDA9PT0oYi5tb2RlJjEpKWIubWVtb2l6ZWRTdGF0ZT17YmFzZUxhbmVzOjAsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6bnVsbH0sRyhmaixnaiksZ2p8PWM7ZWxzZXtpZigwPT09KGMmMTA3Mzc0MTgyNCkpcmV0dXJuIGE9bnVsbCE9PWY/Zi5iYXNlTGFuZXN8YzpjLGIubGFuZXM9Yi5jaGlsZExhbmVzPTEwNzM3NDE4MjQsYi5tZW1vaXplZFN0YXRlPXtiYXNlTGFuZXM6YSxjYWNoZVBvb2w6bnVsbCx0cmFuc2l0aW9uczpudWxsfSxiLnVwZGF0ZVF1ZXVlPW51bGwsRyhmaixnaiksZ2p8PWEsbnVsbDtiLm1lbW9pemVkU3RhdGU9e2Jhc2VMYW5lczowLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOm51bGx9O2Q9bnVsbCE9PWY/Zi5iYXNlTGFuZXM6YztHKGZqLGdqKTtnanw9ZH1lbHNlIG51bGwhPT1cbmY/KGQ9Zi5iYXNlTGFuZXN8YyxiLm1lbW9pemVkU3RhdGU9bnVsbCk6ZD1jLEcoZmosZ2opLGdqfD1kO1lpKGEsYixlLGMpO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIGhqKGEsYil7dmFyIGM9Yi5yZWY7aWYobnVsbD09PWEmJm51bGwhPT1jfHxudWxsIT09YSYmYS5yZWYhPT1jKWIuZmxhZ3N8PTUxMixiLmZsYWdzfD0yMDk3MTUyfWZ1bmN0aW9uIGRqKGEsYixjLGQsZSl7dmFyIGY9WmYoYyk/WGY6SC5jdXJyZW50O2Y9WWYoYixmKTtUZyhiLGUpO2M9WGgoYSxiLGMsZCxmLGUpO2Q9YmkoKTtpZihudWxsIT09YSYmIVVnKXJldHVybiBiLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWUsYi5mbGFncyY9LTIwNTMsYS5sYW5lcyY9fmUsJGkoYSxiLGUpO0kmJmQmJnZnKGIpO2IuZmxhZ3N8PTE7WWkoYSxiLGMsZSk7cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiBpaihhLGIsYyxkLGUpe2lmKFpmKGMpKXt2YXIgZj0hMDtjZyhiKX1lbHNlIGY9ITE7VGcoYixlKTtpZihudWxsPT09Yi5zdGF0ZU5vZGUpamooYSxiKSxwaChiLGMsZCkscmgoYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcztnLnByb3BzPWg7dmFyIGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9VmcobCk6KGw9WmYoYyk/WGY6SC5jdXJyZW50LGw9WWYoYixsKSk7dmFyIG09Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMscT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgbXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGU7cXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fFxuKGghPT1kfHxrIT09bCkmJnFoKGIsZyxkLGwpOyRnPSExO3ZhciByPWIubWVtb2l6ZWRTdGF0ZTtnLnN0YXRlPXI7Z2goYixkLGcsZSk7az1iLm1lbW9pemVkU3RhdGU7aCE9PWR8fHIhPT1rfHxXZi5jdXJyZW50fHwkZz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG0mJihraChiLGMsbSxkKSxrPWIubWVtb2l6ZWRTdGF0ZSksKGg9JGd8fG9oKGIsYyxoLGQscixrLGwpKT8ocXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50JiZnLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQxOTQzMDgpKTpcbihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZmxhZ3N8PTQxOTQzMDgpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1rKSxnLnByb3BzPWQsZy5zdGF0ZT1rLGcuY29udGV4dD1sLGQ9aCk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5mbGFnc3w9NDE5NDMwOCksZD0hMSl9ZWxzZXtnPWIuc3RhdGVOb2RlO2JoKGEsYik7aD1iLm1lbW9pemVkUHJvcHM7bD1iLnR5cGU9PT1iLmVsZW1lbnRUeXBlP2g6TGcoYi50eXBlLGgpO2cucHJvcHM9bDtxPWIucGVuZGluZ1Byb3BzO3I9Zy5jb250ZXh0O2s9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGsmJm51bGwhPT1rP2s9Vmcoayk6KGs9WmYoYyk/WGY6SC5jdXJyZW50LGs9WWYoYixrKSk7dmFyIHk9Yy5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7KG09XCJmdW5jdGlvblwiPT09dHlwZW9mIHl8fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wc3x8KGghPT1xfHxyIT09aykmJnFoKGIsZyxkLGspOyRnPSExO3I9Yi5tZW1vaXplZFN0YXRlO2cuc3RhdGU9cjtnaChiLGQsZyxlKTt2YXIgbj1iLm1lbW9pemVkU3RhdGU7aCE9PXF8fHIhPT1ufHxXZi5jdXJyZW50fHwkZz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIHkmJihraChiLGMseSxkKSxuPWIubWVtb2l6ZWRTdGF0ZSksKGw9JGd8fG9oKGIsYyxsLGQscixuLGspfHwhMSk/KG18fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlfHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5jb21wb25lbnRXaWxsVXBkYXRlKGQsbixrKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXG5nLlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlKGQsbixrKSksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlJiYoYi5mbGFnc3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmZsYWdzfD0xMDI0KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcj09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZyPT09YS5tZW1vaXplZFN0YXRlfHwoYi5mbGFnc3w9MTAyNCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPW4pLGcucHJvcHM9ZCxnLnN0YXRlPW4sZy5jb250ZXh0PWssZD1sKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZyPT09XG5hLm1lbW9pemVkU3RhdGV8fChiLmZsYWdzfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmcj09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZmxhZ3N8PTEwMjQpLGQ9ITEpfXJldHVybiBraihhLGIsYyxkLGYsZSl9XG5mdW5jdGlvbiBraihhLGIsYyxkLGUsZil7aGooYSxiKTt2YXIgZz0wIT09KGIuZmxhZ3MmMTI4KTtpZighZCYmIWcpcmV0dXJuIGUmJmRnKGIsYywhMSksJGkoYSxiLGYpO2Q9Yi5zdGF0ZU5vZGU7WGkuY3VycmVudD1iO3ZhciBoPWcmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcj9udWxsOmQucmVuZGVyKCk7Yi5mbGFnc3w9MTtudWxsIT09YSYmZz8oYi5jaGlsZD1CaChiLGEuY2hpbGQsbnVsbCxmKSxiLmNoaWxkPUJoKGIsbnVsbCxoLGYpKTpZaShhLGIsaCxmKTtiLm1lbW9pemVkU3RhdGU9ZC5zdGF0ZTtlJiZkZyhiLGMsITApO3JldHVybiBiLmNoaWxkfWZ1bmN0aW9uIGxqKGEpe3ZhciBiPWEuc3RhdGVOb2RlO2IucGVuZGluZ0NvbnRleHQ/YWcoYSxiLnBlbmRpbmdDb250ZXh0LGIucGVuZGluZ0NvbnRleHQhPT1iLmNvbnRleHQpOmIuY29udGV4dCYmYWcoYSxiLmNvbnRleHQsITEpO0loKGEsYi5jb250YWluZXJJbmZvKX1cbmZ1bmN0aW9uIG1qKGEsYixjLGQsZSl7SWcoKTtKZyhlKTtiLmZsYWdzfD0yNTY7WWkoYSxiLGMsZCk7cmV0dXJuIGIuY2hpbGR9dmFyIG5qPXtkZWh5ZHJhdGVkOm51bGwsdHJlZUNvbnRleHQ6bnVsbCxyZXRyeUxhbmU6MH07ZnVuY3Rpb24gb2ooYSl7cmV0dXJue2Jhc2VMYW5lczphLGNhY2hlUG9vbDpudWxsLHRyYW5zaXRpb25zOm51bGx9fVxuZnVuY3Rpb24gcGooYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9TS5jdXJyZW50LGY9ITEsZz0wIT09KGIuZmxhZ3MmMTI4KSxoOyhoPWcpfHwoaD1udWxsIT09YSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZT8hMTowIT09KGUmMikpO2lmKGgpZj0hMCxiLmZsYWdzJj0tMTI5O2Vsc2UgaWYobnVsbD09PWF8fG51bGwhPT1hLm1lbW9pemVkU3RhdGUpZXw9MTtHKE0sZSYxKTtpZihudWxsPT09YSl7RWcoYik7YT1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJihhPWEuZGVoeWRyYXRlZCxudWxsIT09YSkpcmV0dXJuIDA9PT0oYi5tb2RlJjEpP2IubGFuZXM9MTpcIiQhXCI9PT1hLmRhdGE/Yi5sYW5lcz04OmIubGFuZXM9MTA3Mzc0MTgyNCxudWxsO2c9ZC5jaGlsZHJlbjthPWQuZmFsbGJhY2s7cmV0dXJuIGY/KGQ9Yi5tb2RlLGY9Yi5jaGlsZCxnPXttb2RlOlwiaGlkZGVuXCIsY2hpbGRyZW46Z30sMD09PShkJjEpJiZudWxsIT09Zj8oZi5jaGlsZExhbmVzPTAsZi5wZW5kaW5nUHJvcHM9XG5nKTpmPXFqKGcsZCwwLG51bGwpLGE9QWgoYSxkLGMsbnVsbCksZi5yZXR1cm49YixhLnJldHVybj1iLGYuc2libGluZz1hLGIuY2hpbGQ9ZixiLmNoaWxkLm1lbW9pemVkU3RhdGU9b2ooYyksYi5tZW1vaXplZFN0YXRlPW5qLGEpOnJqKGIsZyl9ZT1hLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWUmJihoPWUuZGVoeWRyYXRlZCxudWxsIT09aCkpcmV0dXJuIHNqKGEsYixnLGQsaCxlLGMpO2lmKGYpe2Y9ZC5mYWxsYmFjaztnPWIubW9kZTtlPWEuY2hpbGQ7aD1lLnNpYmxpbmc7dmFyIGs9e21vZGU6XCJoaWRkZW5cIixjaGlsZHJlbjpkLmNoaWxkcmVufTswPT09KGcmMSkmJmIuY2hpbGQhPT1lPyhkPWIuY2hpbGQsZC5jaGlsZExhbmVzPTAsZC5wZW5kaW5nUHJvcHM9ayxiLmRlbGV0aW9ucz1udWxsKTooZD13aChlLGspLGQuc3VidHJlZUZsYWdzPWUuc3VidHJlZUZsYWdzJjE0NjgwMDY0KTtudWxsIT09aD9mPXdoKGgsZik6KGY9QWgoZixnLGMsbnVsbCksZi5mbGFnc3w9Mik7Zi5yZXR1cm49XG5iO2QucmV0dXJuPWI7ZC5zaWJsaW5nPWY7Yi5jaGlsZD1kO2Q9ZjtmPWIuY2hpbGQ7Zz1hLmNoaWxkLm1lbW9pemVkU3RhdGU7Zz1udWxsPT09Zz9vaihjKTp7YmFzZUxhbmVzOmcuYmFzZUxhbmVzfGMsY2FjaGVQb29sOm51bGwsdHJhbnNpdGlvbnM6Zy50cmFuc2l0aW9uc307Zi5tZW1vaXplZFN0YXRlPWc7Zi5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcyZ+YztiLm1lbW9pemVkU3RhdGU9bmo7cmV0dXJuIGR9Zj1hLmNoaWxkO2E9Zi5zaWJsaW5nO2Q9d2goZix7bW9kZTpcInZpc2libGVcIixjaGlsZHJlbjpkLmNoaWxkcmVufSk7MD09PShiLm1vZGUmMSkmJihkLmxhbmVzPWMpO2QucmV0dXJuPWI7ZC5zaWJsaW5nPW51bGw7bnVsbCE9PWEmJihjPWIuZGVsZXRpb25zLG51bGw9PT1jPyhiLmRlbGV0aW9ucz1bYV0sYi5mbGFnc3w9MTYpOmMucHVzaChhKSk7Yi5jaGlsZD1kO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBkfVxuZnVuY3Rpb24gcmooYSxiKXtiPXFqKHttb2RlOlwidmlzaWJsZVwiLGNoaWxkcmVuOmJ9LGEubW9kZSwwLG51bGwpO2IucmV0dXJuPWE7cmV0dXJuIGEuY2hpbGQ9Yn1mdW5jdGlvbiB0aihhLGIsYyxkKXtudWxsIT09ZCYmSmcoZCk7QmgoYixhLmNoaWxkLG51bGwsYyk7YT1yaihiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuKTthLmZsYWdzfD0yO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBhfVxuZnVuY3Rpb24gc2ooYSxiLGMsZCxlLGYsZyl7aWYoYyl7aWYoYi5mbGFncyYyNTYpcmV0dXJuIGIuZmxhZ3MmPS0yNTcsZD1MaShFcnJvcihwKDQyMikpKSx0aihhLGIsZyxkKTtpZihudWxsIT09Yi5tZW1vaXplZFN0YXRlKXJldHVybiBiLmNoaWxkPWEuY2hpbGQsYi5mbGFnc3w9MTI4LG51bGw7Zj1kLmZhbGxiYWNrO2U9Yi5tb2RlO2Q9cWooe21vZGU6XCJ2aXNpYmxlXCIsY2hpbGRyZW46ZC5jaGlsZHJlbn0sZSwwLG51bGwpO2Y9QWgoZixlLGcsbnVsbCk7Zi5mbGFnc3w9MjtkLnJldHVybj1iO2YucmV0dXJuPWI7ZC5zaWJsaW5nPWY7Yi5jaGlsZD1kOzAhPT0oYi5tb2RlJjEpJiZCaChiLGEuY2hpbGQsbnVsbCxnKTtiLmNoaWxkLm1lbW9pemVkU3RhdGU9b2ooZyk7Yi5tZW1vaXplZFN0YXRlPW5qO3JldHVybiBmfWlmKDA9PT0oYi5tb2RlJjEpKXJldHVybiB0aihhLGIsZyxudWxsKTtpZihcIiQhXCI9PT1lLmRhdGEpe2Q9ZS5uZXh0U2libGluZyYmZS5uZXh0U2libGluZy5kYXRhc2V0O1xuaWYoZCl2YXIgaD1kLmRnc3Q7ZD1oO2Y9RXJyb3IocCg0MTkpKTtkPUxpKGYsZCx2b2lkIDApO3JldHVybiB0aihhLGIsZyxkKX1oPTAhPT0oZyZhLmNoaWxkTGFuZXMpO2lmKFVnfHxoKXtkPVI7aWYobnVsbCE9PWQpe3N3aXRjaChnJi1nKXtjYXNlIDQ6ZT0yO2JyZWFrO2Nhc2UgMTY6ZT04O2JyZWFrO2Nhc2UgNjQ6Y2FzZSAxMjg6Y2FzZSAyNTY6Y2FzZSA1MTI6Y2FzZSAxMDI0OmNhc2UgMjA0ODpjYXNlIDQwOTY6Y2FzZSA4MTkyOmNhc2UgMTYzODQ6Y2FzZSAzMjc2ODpjYXNlIDY1NTM2OmNhc2UgMTMxMDcyOmNhc2UgMjYyMTQ0OmNhc2UgNTI0Mjg4OmNhc2UgMTA0ODU3NjpjYXNlIDIwOTcxNTI6Y2FzZSA0MTk0MzA0OmNhc2UgODM4ODYwODpjYXNlIDE2Nzc3MjE2OmNhc2UgMzM1NTQ0MzI6Y2FzZSA2NzEwODg2NDplPTMyO2JyZWFrO2Nhc2UgNTM2ODcwOTEyOmU9MjY4NDM1NDU2O2JyZWFrO2RlZmF1bHQ6ZT0wfWU9MCE9PShlJihkLnN1c3BlbmRlZExhbmVzfGcpKT8wOmU7XG4wIT09ZSYmZSE9PWYucmV0cnlMYW5lJiYoZi5yZXRyeUxhbmU9ZSxaZyhhLGUpLG1oKGQsYSxlLC0xKSl9dWooKTtkPUxpKEVycm9yKHAoNDIxKSkpO3JldHVybiB0aihhLGIsZyxkKX1pZihcIiQ/XCI9PT1lLmRhdGEpcmV0dXJuIGIuZmxhZ3N8PTEyOCxiLmNoaWxkPWEuY2hpbGQsYj12ai5iaW5kKG51bGwsYSksZS5fcmVhY3RSZXRyeT1iLG51bGw7YT1mLnRyZWVDb250ZXh0O3lnPUxmKGUubmV4dFNpYmxpbmcpO3hnPWI7ST0hMDt6Zz1udWxsO251bGwhPT1hJiYob2dbcGcrK109cmcsb2dbcGcrK109c2csb2dbcGcrK109cWcscmc9YS5pZCxzZz1hLm92ZXJmbG93LHFnPWIpO2I9cmooYixkLmNoaWxkcmVuKTtiLmZsYWdzfD00MDk2O3JldHVybiBifWZ1bmN0aW9uIHdqKGEsYixjKXthLmxhbmVzfD1iO3ZhciBkPWEuYWx0ZXJuYXRlO251bGwhPT1kJiYoZC5sYW5lc3w9Yik7U2coYS5yZXR1cm4sYixjKX1cbmZ1bmN0aW9uIHhqKGEsYixjLGQsZSl7dmFyIGY9YS5tZW1vaXplZFN0YXRlO251bGw9PT1mP2EubWVtb2l6ZWRTdGF0ZT17aXNCYWNrd2FyZHM6YixyZW5kZXJpbmc6bnVsbCxyZW5kZXJpbmdTdGFydFRpbWU6MCxsYXN0OmQsdGFpbDpjLHRhaWxNb2RlOmV9OihmLmlzQmFja3dhcmRzPWIsZi5yZW5kZXJpbmc9bnVsbCxmLnJlbmRlcmluZ1N0YXJ0VGltZT0wLGYubGFzdD1kLGYudGFpbD1jLGYudGFpbE1vZGU9ZSl9XG5mdW5jdGlvbiB5aihhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLnJldmVhbE9yZGVyLGY9ZC50YWlsO1lpKGEsYixkLmNoaWxkcmVuLGMpO2Q9TS5jdXJyZW50O2lmKDAhPT0oZCYyKSlkPWQmMXwyLGIuZmxhZ3N8PTEyODtlbHNle2lmKG51bGwhPT1hJiYwIT09KGEuZmxhZ3MmMTI4KSlhOmZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtpZigxMz09PWEudGFnKW51bGwhPT1hLm1lbW9pemVkU3RhdGUmJndqKGEsYyxiKTtlbHNlIGlmKDE5PT09YS50YWcpd2ooYSxjLGIpO2Vsc2UgaWYobnVsbCE9PWEuY2hpbGQpe2EuY2hpbGQucmV0dXJuPWE7YT1hLmNoaWxkO2NvbnRpbnVlfWlmKGE9PT1iKWJyZWFrIGE7Zm9yKDtudWxsPT09YS5zaWJsaW5nOyl7aWYobnVsbD09PWEucmV0dXJufHxhLnJldHVybj09PWIpYnJlYWsgYTthPWEucmV0dXJufWEuc2libGluZy5yZXR1cm49YS5yZXR1cm47YT1hLnNpYmxpbmd9ZCY9MX1HKE0sZCk7aWYoMD09PShiLm1vZGUmMSkpYi5tZW1vaXplZFN0YXRlPVxubnVsbDtlbHNlIHN3aXRjaChlKXtjYXNlIFwiZm9yd2FyZHNcIjpjPWIuY2hpbGQ7Zm9yKGU9bnVsbDtudWxsIT09YzspYT1jLmFsdGVybmF0ZSxudWxsIT09YSYmbnVsbD09PU1oKGEpJiYoZT1jKSxjPWMuc2libGluZztjPWU7bnVsbD09PWM/KGU9Yi5jaGlsZCxiLmNoaWxkPW51bGwpOihlPWMuc2libGluZyxjLnNpYmxpbmc9bnVsbCk7eGooYiwhMSxlLGMsZik7YnJlYWs7Y2FzZSBcImJhY2t3YXJkc1wiOmM9bnVsbDtlPWIuY2hpbGQ7Zm9yKGIuY2hpbGQ9bnVsbDtudWxsIT09ZTspe2E9ZS5hbHRlcm5hdGU7aWYobnVsbCE9PWEmJm51bGw9PT1NaChhKSl7Yi5jaGlsZD1lO2JyZWFrfWE9ZS5zaWJsaW5nO2Uuc2libGluZz1jO2M9ZTtlPWF9eGooYiwhMCxjLG51bGwsZik7YnJlYWs7Y2FzZSBcInRvZ2V0aGVyXCI6eGooYiwhMSxudWxsLG51bGwsdm9pZCAwKTticmVhaztkZWZhdWx0OmIubWVtb2l6ZWRTdGF0ZT1udWxsfXJldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gamooYSxiKXswPT09KGIubW9kZSYxKSYmbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5mbGFnc3w9Mil9ZnVuY3Rpb24gJGkoYSxiLGMpe251bGwhPT1hJiYoYi5kZXBlbmRlbmNpZXM9YS5kZXBlbmRlbmNpZXMpO2hofD1iLmxhbmVzO2lmKDA9PT0oYyZiLmNoaWxkTGFuZXMpKXJldHVybiBudWxsO2lmKG51bGwhPT1hJiZiLmNoaWxkIT09YS5jaGlsZCl0aHJvdyBFcnJvcihwKDE1MykpO2lmKG51bGwhPT1iLmNoaWxkKXthPWIuY2hpbGQ7Yz13aChhLGEucGVuZGluZ1Byb3BzKTtiLmNoaWxkPWM7Zm9yKGMucmV0dXJuPWI7bnVsbCE9PWEuc2libGluZzspYT1hLnNpYmxpbmcsYz1jLnNpYmxpbmc9d2goYSxhLnBlbmRpbmdQcm9wcyksYy5yZXR1cm49YjtjLnNpYmxpbmc9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIHpqKGEsYixjKXtzd2l0Y2goYi50YWcpe2Nhc2UgMzpsaihiKTtJZygpO2JyZWFrO2Nhc2UgNTpLaChiKTticmVhaztjYXNlIDE6WmYoYi50eXBlKSYmY2coYik7YnJlYWs7Y2FzZSA0OkloKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDp2YXIgZD1iLnR5cGUuX2NvbnRleHQsZT1iLm1lbW9pemVkUHJvcHMudmFsdWU7RyhNZyxkLl9jdXJyZW50VmFsdWUpO2QuX2N1cnJlbnRWYWx1ZT1lO2JyZWFrO2Nhc2UgMTM6ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQpe2lmKG51bGwhPT1kLmRlaHlkcmF0ZWQpcmV0dXJuIEcoTSxNLmN1cnJlbnQmMSksYi5mbGFnc3w9MTI4LG51bGw7aWYoMCE9PShjJmIuY2hpbGQuY2hpbGRMYW5lcykpcmV0dXJuIHBqKGEsYixjKTtHKE0sTS5jdXJyZW50JjEpO2E9JGkoYSxiLGMpO3JldHVybiBudWxsIT09YT9hLnNpYmxpbmc6bnVsbH1HKE0sTS5jdXJyZW50JjEpO2JyZWFrO2Nhc2UgMTk6ZD0wIT09KGMmXG5iLmNoaWxkTGFuZXMpO2lmKDAhPT0oYS5mbGFncyYxMjgpKXtpZihkKXJldHVybiB5aihhLGIsYyk7Yi5mbGFnc3w9MTI4fWU9Yi5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoZS5yZW5kZXJpbmc9bnVsbCxlLnRhaWw9bnVsbCxlLmxhc3RFZmZlY3Q9bnVsbCk7RyhNLE0uY3VycmVudCk7aWYoZClicmVhaztlbHNlIHJldHVybiBudWxsO2Nhc2UgMjI6Y2FzZSAyMzpyZXR1cm4gYi5sYW5lcz0wLGVqKGEsYixjKX1yZXR1cm4gJGkoYSxiLGMpfXZhciBBaixCaixDaixEajtcbkFqPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWIuY2hpbGQ7bnVsbCE9PWM7KXtpZig1PT09Yy50YWd8fDY9PT1jLnRhZylhLmFwcGVuZENoaWxkKGMuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1jLnRhZyYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fTtCaj1mdW5jdGlvbigpe307XG5Daj1mdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1hLm1lbW9pemVkUHJvcHM7aWYoZSE9PWQpe2E9Yi5zdGF0ZU5vZGU7SGgoRWguY3VycmVudCk7dmFyIGY9bnVsbDtzd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6ZT1ZYShhLGUpO2Q9WWEoYSxkKTtmPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjplPUEoe30sZSx7dmFsdWU6dm9pZCAwfSk7ZD1BKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2Y9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6ZT1nYihhLGUpO2Q9Z2IoYSxkKTtmPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGUub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGEub25jbGljaz1CZil9dWIoYyxkKTt2YXIgZztjPW51bGw7Zm9yKGwgaW4gZSlpZighZC5oYXNPd25Qcm9wZXJ0eShsKSYmZS5oYXNPd25Qcm9wZXJ0eShsKSYmbnVsbCE9ZVtsXSlpZihcInN0eWxlXCI9PT1sKXt2YXIgaD1lW2xdO2ZvcihnIGluIGgpaC5oYXNPd25Qcm9wZXJ0eShnKSYmXG4oY3x8KGM9e30pLGNbZ109XCJcIil9ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWwmJlwiY2hpbGRyZW5cIiE9PWwmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1sJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09bCYmXCJhdXRvRm9jdXNcIiE9PWwmJihlYS5oYXNPd25Qcm9wZXJ0eShsKT9mfHwoZj1bXSk6KGY9Znx8W10pLnB1c2gobCxudWxsKSk7Zm9yKGwgaW4gZCl7dmFyIGs9ZFtsXTtoPW51bGwhPWU/ZVtsXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShsKSYmayE9PWgmJihudWxsIT1rfHxudWxsIT1oKSlpZihcInN0eWxlXCI9PT1sKWlmKGgpe2ZvcihnIGluIGgpIWguaGFzT3duUHJvcGVydHkoZyl8fGsmJmsuaGFzT3duUHJvcGVydHkoZyl8fChjfHwoYz17fSksY1tnXT1cIlwiKTtmb3IoZyBpbiBrKWsuaGFzT3duUHJvcGVydHkoZykmJmhbZ10hPT1rW2ddJiYoY3x8KGM9e30pLGNbZ109a1tnXSl9ZWxzZSBjfHwoZnx8KGY9W10pLGYucHVzaChsLFxuYykpLGM9aztlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09bD8oaz1rP2suX19odG1sOnZvaWQgMCxoPWg/aC5fX2h0bWw6dm9pZCAwLG51bGwhPWsmJmghPT1rJiYoZj1mfHxbXSkucHVzaChsLGspKTpcImNoaWxkcmVuXCI9PT1sP1wic3RyaW5nXCIhPT10eXBlb2YgayYmXCJudW1iZXJcIiE9PXR5cGVvZiBrfHwoZj1mfHxbXSkucHVzaChsLFwiXCIrayk6XCJzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmdcIiE9PWwmJlwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nXCIhPT1sJiYoZWEuaGFzT3duUHJvcGVydHkobCk/KG51bGwhPWsmJlwib25TY3JvbGxcIj09PWwmJkQoXCJzY3JvbGxcIixhKSxmfHxoPT09a3x8KGY9W10pKTooZj1mfHxbXSkucHVzaChsLGspKX1jJiYoZj1mfHxbXSkucHVzaChcInN0eWxlXCIsYyk7dmFyIGw9ZjtpZihiLnVwZGF0ZVF1ZXVlPWwpYi5mbGFnc3w9NH19O0RqPWZ1bmN0aW9uKGEsYixjLGQpe2MhPT1kJiYoYi5mbGFnc3w9NCl9O1xuZnVuY3Rpb24gRWooYSxiKXtpZighSSlzd2l0Y2goYS50YWlsTW9kZSl7Y2FzZSBcImhpZGRlblwiOmI9YS50YWlsO2Zvcih2YXIgYz1udWxsO251bGwhPT1iOyludWxsIT09Yi5hbHRlcm5hdGUmJihjPWIpLGI9Yi5zaWJsaW5nO251bGw9PT1jP2EudGFpbD1udWxsOmMuc2libGluZz1udWxsO2JyZWFrO2Nhc2UgXCJjb2xsYXBzZWRcIjpjPWEudGFpbDtmb3IodmFyIGQ9bnVsbDtudWxsIT09YzspbnVsbCE9PWMuYWx0ZXJuYXRlJiYoZD1jKSxjPWMuc2libGluZztudWxsPT09ZD9ifHxudWxsPT09YS50YWlsP2EudGFpbD1udWxsOmEudGFpbC5zaWJsaW5nPW51bGw6ZC5zaWJsaW5nPW51bGx9fVxuZnVuY3Rpb24gUyhhKXt2YXIgYj1udWxsIT09YS5hbHRlcm5hdGUmJmEuYWx0ZXJuYXRlLmNoaWxkPT09YS5jaGlsZCxjPTAsZD0wO2lmKGIpZm9yKHZhciBlPWEuY2hpbGQ7bnVsbCE9PWU7KWN8PWUubGFuZXN8ZS5jaGlsZExhbmVzLGR8PWUuc3VidHJlZUZsYWdzJjE0NjgwMDY0LGR8PWUuZmxhZ3MmMTQ2ODAwNjQsZS5yZXR1cm49YSxlPWUuc2libGluZztlbHNlIGZvcihlPWEuY2hpbGQ7bnVsbCE9PWU7KWN8PWUubGFuZXN8ZS5jaGlsZExhbmVzLGR8PWUuc3VidHJlZUZsYWdzLGR8PWUuZmxhZ3MsZS5yZXR1cm49YSxlPWUuc2libGluZzthLnN1YnRyZWVGbGFnc3w9ZDthLmNoaWxkTGFuZXM9YztyZXR1cm4gYn1cbmZ1bmN0aW9uIEZqKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wczt3ZyhiKTtzd2l0Y2goYi50YWcpe2Nhc2UgMjpjYXNlIDE2OmNhc2UgMTU6Y2FzZSAwOmNhc2UgMTE6Y2FzZSA3OmNhc2UgODpjYXNlIDEyOmNhc2UgOTpjYXNlIDE0OnJldHVybiBTKGIpLG51bGw7Y2FzZSAxOnJldHVybiBaZihiLnR5cGUpJiYkZigpLFMoYiksbnVsbDtjYXNlIDM6ZD1iLnN0YXRlTm9kZTtKaCgpO0UoV2YpO0UoSCk7T2goKTtkLnBlbmRpbmdDb250ZXh0JiYoZC5jb250ZXh0PWQucGVuZGluZ0NvbnRleHQsZC5wZW5kaW5nQ29udGV4dD1udWxsKTtpZihudWxsPT09YXx8bnVsbD09PWEuY2hpbGQpR2coYik/Yi5mbGFnc3w9NDpudWxsPT09YXx8YS5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCYmMD09PShiLmZsYWdzJjI1Nil8fChiLmZsYWdzfD0xMDI0LG51bGwhPT16ZyYmKEdqKHpnKSx6Zz1udWxsKSk7QmooYSxiKTtTKGIpO3JldHVybiBudWxsO2Nhc2UgNTpMaChiKTt2YXIgZT1IaChHaC5jdXJyZW50KTtcbmM9Yi50eXBlO2lmKG51bGwhPT1hJiZudWxsIT1iLnN0YXRlTm9kZSlDaihhLGIsYyxkLGUpLGEucmVmIT09Yi5yZWYmJihiLmZsYWdzfD01MTIsYi5mbGFnc3w9MjA5NzE1Mik7ZWxzZXtpZighZCl7aWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHAoMTY2KSk7UyhiKTtyZXR1cm4gbnVsbH1hPUhoKEVoLmN1cnJlbnQpO2lmKEdnKGIpKXtkPWIuc3RhdGVOb2RlO2M9Yi50eXBlO3ZhciBmPWIubWVtb2l6ZWRQcm9wcztkW09mXT1iO2RbUGZdPWY7YT0wIT09KGIubW9kZSYxKTtzd2l0Y2goYyl7Y2FzZSBcImRpYWxvZ1wiOkQoXCJjYW5jZWxcIixkKTtEKFwiY2xvc2VcIixkKTticmVhaztjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkQoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGU9MDtlPGxmLmxlbmd0aDtlKyspRChsZltlXSxkKTticmVhaztjYXNlIFwic291cmNlXCI6RChcImVycm9yXCIsZCk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RChcImVycm9yXCIsXG5kKTtEKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RChcInRvZ2dsZVwiLGQpO2JyZWFrO2Nhc2UgXCJpbnB1dFwiOlphKGQsZik7RChcImludmFsaWRcIixkKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZC5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIWYubXVsdGlwbGV9O0QoXCJpbnZhbGlkXCIsZCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoZCxmKSxEKFwiaW52YWxpZFwiLGQpfXViKGMsZik7ZT1udWxsO2Zvcih2YXIgZyBpbiBmKWlmKGYuaGFzT3duUHJvcGVydHkoZykpe3ZhciBoPWZbZ107XCJjaGlsZHJlblwiPT09Zz9cInN0cmluZ1wiPT09dHlwZW9mIGg/ZC50ZXh0Q29udGVudCE9PWgmJighMCE9PWYuc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nJiZBZihkLnRleHRDb250ZW50LGgsYSksZT1bXCJjaGlsZHJlblwiLGhdKTpcIm51bWJlclwiPT09dHlwZW9mIGgmJmQudGV4dENvbnRlbnQhPT1cIlwiK2gmJighMCE9PWYuc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nJiZBZihkLnRleHRDb250ZW50LFxuaCxhKSxlPVtcImNoaWxkcmVuXCIsXCJcIitoXSk6ZWEuaGFzT3duUHJvcGVydHkoZykmJm51bGwhPWgmJlwib25TY3JvbGxcIj09PWcmJkQoXCJzY3JvbGxcIixkKX1zd2l0Y2goYyl7Y2FzZSBcImlucHV0XCI6VmEoZCk7ZGIoZCxmLCEwKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpWYShkKTtqYihkKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGYub25DbGljayYmKGQub25jbGljaz1CZil9ZD1lO2IudXBkYXRlUXVldWU9ZDtudWxsIT09ZCYmKGIuZmxhZ3N8PTQpfWVsc2V7Zz05PT09ZS5ub2RlVHlwZT9lOmUub3duZXJEb2N1bWVudDtcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWEmJihhPWtiKGMpKTtcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWE/XCJzY3JpcHRcIj09PWM/KGE9Zy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGEuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsYT1hLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCkpOlxuXCJzdHJpbmdcIj09PXR5cGVvZiBkLmlzP2E9Zy5jcmVhdGVFbGVtZW50KGMse2lzOmQuaXN9KTooYT1nLmNyZWF0ZUVsZW1lbnQoYyksXCJzZWxlY3RcIj09PWMmJihnPWEsZC5tdWx0aXBsZT9nLm11bHRpcGxlPSEwOmQuc2l6ZSYmKGcuc2l6ZT1kLnNpemUpKSk6YT1nLmNyZWF0ZUVsZW1lbnROUyhhLGMpO2FbT2ZdPWI7YVtQZl09ZDtBaihhLGIsITEsITEpO2Iuc3RhdGVOb2RlPWE7YTp7Zz12YihjLGQpO3N3aXRjaChjKXtjYXNlIFwiZGlhbG9nXCI6RChcImNhbmNlbFwiLGEpO0QoXCJjbG9zZVwiLGEpO2U9ZDticmVhaztjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkQoXCJsb2FkXCIsYSk7ZT1kO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihlPTA7ZTxsZi5sZW5ndGg7ZSsrKUQobGZbZV0sYSk7ZT1kO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpEKFwiZXJyb3JcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RChcImVycm9yXCIsXG5hKTtEKFwibG9hZFwiLGEpO2U9ZDticmVhaztjYXNlIFwiZGV0YWlsc1wiOkQoXCJ0b2dnbGVcIixhKTtlPWQ7YnJlYWs7Y2FzZSBcImlucHV0XCI6WmEoYSxkKTtlPVlhKGEsZCk7RChcImludmFsaWRcIixhKTticmVhaztjYXNlIFwib3B0aW9uXCI6ZT1kO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZC5tdWx0aXBsZX07ZT1BKHt9LGQse3ZhbHVlOnZvaWQgMH0pO0QoXCJpbnZhbGlkXCIsYSk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aGIoYSxkKTtlPWdiKGEsZCk7RChcImludmFsaWRcIixhKTticmVhaztkZWZhdWx0OmU9ZH11YihjLGUpO2g9ZTtmb3IoZiBpbiBoKWlmKGguaGFzT3duUHJvcGVydHkoZikpe3ZhciBrPWhbZl07XCJzdHlsZVwiPT09Zj9zYihhLGspOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWY/KGs9az9rLl9faHRtbDp2b2lkIDAsbnVsbCE9ayYmbmIoYSxrKSk6XCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGs/KFwidGV4dGFyZWFcIiE9PVxuY3x8XCJcIiE9PWspJiZvYihhLGspOlwibnVtYmVyXCI9PT10eXBlb2YgayYmb2IoYSxcIlwiK2spOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1mJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09ZiYmXCJhdXRvRm9jdXNcIiE9PWYmJihlYS5oYXNPd25Qcm9wZXJ0eShmKT9udWxsIT1rJiZcIm9uU2Nyb2xsXCI9PT1mJiZEKFwic2Nyb2xsXCIsYSk6bnVsbCE9ayYmdGEoYSxmLGssZykpfXN3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpWYShhKTtkYihhLGQsITEpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOlZhKGEpO2piKGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1kLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIitTYShkLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFkLm11bHRpcGxlO2Y9ZC52YWx1ZTtudWxsIT1mP2ZiKGEsISFkLm11bHRpcGxlLGYsITEpOm51bGwhPWQuZGVmYXVsdFZhbHVlJiZmYihhLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSxcbiEwKTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLm9uQ2xpY2smJihhLm9uY2xpY2s9QmYpfXN3aXRjaChjKXtjYXNlIFwiYnV0dG9uXCI6Y2FzZSBcImlucHV0XCI6Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJ0ZXh0YXJlYVwiOmQ9ISFkLmF1dG9Gb2N1czticmVhayBhO2Nhc2UgXCJpbWdcIjpkPSEwO2JyZWFrIGE7ZGVmYXVsdDpkPSExfX1kJiYoYi5mbGFnc3w9NCl9bnVsbCE9PWIucmVmJiYoYi5mbGFnc3w9NTEyLGIuZmxhZ3N8PTIwOTcxNTIpfVMoYik7cmV0dXJuIG51bGw7Y2FzZSA2OmlmKGEmJm51bGwhPWIuc3RhdGVOb2RlKURqKGEsYixhLm1lbW9pemVkUHJvcHMsZCk7ZWxzZXtpZihcInN0cmluZ1wiIT09dHlwZW9mIGQmJm51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcihwKDE2NikpO2M9SGgoR2guY3VycmVudCk7SGgoRWguY3VycmVudCk7aWYoR2coYikpe2Q9Yi5zdGF0ZU5vZGU7Yz1iLm1lbW9pemVkUHJvcHM7ZFtPZl09YjtpZihmPWQubm9kZVZhbHVlIT09YylpZihhPVxueGcsbnVsbCE9PWEpc3dpdGNoKGEudGFnKXtjYXNlIDM6QWYoZC5ub2RlVmFsdWUsYywwIT09KGEubW9kZSYxKSk7YnJlYWs7Y2FzZSA1OiEwIT09YS5tZW1vaXplZFByb3BzLnN1cHByZXNzSHlkcmF0aW9uV2FybmluZyYmQWYoZC5ub2RlVmFsdWUsYywwIT09KGEubW9kZSYxKSl9ZiYmKGIuZmxhZ3N8PTQpfWVsc2UgZD0oOT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGQpLGRbT2ZdPWIsYi5zdGF0ZU5vZGU9ZH1TKGIpO3JldHVybiBudWxsO2Nhc2UgMTM6RShNKTtkPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsPT09YXx8bnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZS5kZWh5ZHJhdGVkKXtpZihJJiZudWxsIT09eWcmJjAhPT0oYi5tb2RlJjEpJiYwPT09KGIuZmxhZ3MmMTI4KSlIZygpLElnKCksYi5mbGFnc3w9OTg1NjAsZj0hMTtlbHNlIGlmKGY9R2coYiksbnVsbCE9PWQmJm51bGwhPT1kLmRlaHlkcmF0ZWQpe2lmKG51bGw9PT1cbmEpe2lmKCFmKXRocm93IEVycm9yKHAoMzE4KSk7Zj1iLm1lbW9pemVkU3RhdGU7Zj1udWxsIT09Zj9mLmRlaHlkcmF0ZWQ6bnVsbDtpZighZil0aHJvdyBFcnJvcihwKDMxNykpO2ZbT2ZdPWJ9ZWxzZSBJZygpLDA9PT0oYi5mbGFncyYxMjgpJiYoYi5tZW1vaXplZFN0YXRlPW51bGwpLGIuZmxhZ3N8PTQ7UyhiKTtmPSExfWVsc2UgbnVsbCE9PXpnJiYoR2ooemcpLHpnPW51bGwpLGY9ITA7aWYoIWYpcmV0dXJuIGIuZmxhZ3MmNjU1MzY/YjpudWxsfWlmKDAhPT0oYi5mbGFncyYxMjgpKXJldHVybiBiLmxhbmVzPWMsYjtkPW51bGwhPT1kO2QhPT0obnVsbCE9PWEmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUpJiZkJiYoYi5jaGlsZC5mbGFnc3w9ODE5MiwwIT09KGIubW9kZSYxKSYmKG51bGw9PT1hfHwwIT09KE0uY3VycmVudCYxKT8wPT09VCYmKFQ9Myk6dWooKSkpO251bGwhPT1iLnVwZGF0ZVF1ZXVlJiYoYi5mbGFnc3w9NCk7UyhiKTtyZXR1cm4gbnVsbDtjYXNlIDQ6cmV0dXJuIEpoKCksXG5CaihhLGIpLG51bGw9PT1hJiZzZihiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxTKGIpLG51bGw7Y2FzZSAxMDpyZXR1cm4gUmcoYi50eXBlLl9jb250ZXh0KSxTKGIpLG51bGw7Y2FzZSAxNzpyZXR1cm4gWmYoYi50eXBlKSYmJGYoKSxTKGIpLG51bGw7Y2FzZSAxOTpFKE0pO2Y9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGw9PT1mKXJldHVybiBTKGIpLG51bGw7ZD0wIT09KGIuZmxhZ3MmMTI4KTtnPWYucmVuZGVyaW5nO2lmKG51bGw9PT1nKWlmKGQpRWooZiwhMSk7ZWxzZXtpZigwIT09VHx8bnVsbCE9PWEmJjAhPT0oYS5mbGFncyYxMjgpKWZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtnPU1oKGEpO2lmKG51bGwhPT1nKXtiLmZsYWdzfD0xMjg7RWooZiwhMSk7ZD1nLnVwZGF0ZVF1ZXVlO251bGwhPT1kJiYoYi51cGRhdGVRdWV1ZT1kLGIuZmxhZ3N8PTQpO2Iuc3VidHJlZUZsYWdzPTA7ZD1jO2ZvcihjPWIuY2hpbGQ7bnVsbCE9PWM7KWY9YyxhPWQsZi5mbGFncyY9MTQ2ODAwNjYsXG5nPWYuYWx0ZXJuYXRlLG51bGw9PT1nPyhmLmNoaWxkTGFuZXM9MCxmLmxhbmVzPWEsZi5jaGlsZD1udWxsLGYuc3VidHJlZUZsYWdzPTAsZi5tZW1vaXplZFByb3BzPW51bGwsZi5tZW1vaXplZFN0YXRlPW51bGwsZi51cGRhdGVRdWV1ZT1udWxsLGYuZGVwZW5kZW5jaWVzPW51bGwsZi5zdGF0ZU5vZGU9bnVsbCk6KGYuY2hpbGRMYW5lcz1nLmNoaWxkTGFuZXMsZi5sYW5lcz1nLmxhbmVzLGYuY2hpbGQ9Zy5jaGlsZCxmLnN1YnRyZWVGbGFncz0wLGYuZGVsZXRpb25zPW51bGwsZi5tZW1vaXplZFByb3BzPWcubWVtb2l6ZWRQcm9wcyxmLm1lbW9pemVkU3RhdGU9Zy5tZW1vaXplZFN0YXRlLGYudXBkYXRlUXVldWU9Zy51cGRhdGVRdWV1ZSxmLnR5cGU9Zy50eXBlLGE9Zy5kZXBlbmRlbmNpZXMsZi5kZXBlbmRlbmNpZXM9bnVsbD09PWE/bnVsbDp7bGFuZXM6YS5sYW5lcyxmaXJzdENvbnRleHQ6YS5maXJzdENvbnRleHR9KSxjPWMuc2libGluZztHKE0sTS5jdXJyZW50JjF8Mik7cmV0dXJuIGIuY2hpbGR9YT1cbmEuc2libGluZ31udWxsIT09Zi50YWlsJiZCKCk+SGomJihiLmZsYWdzfD0xMjgsZD0hMCxFaihmLCExKSxiLmxhbmVzPTQxOTQzMDQpfWVsc2V7aWYoIWQpaWYoYT1NaChnKSxudWxsIT09YSl7aWYoYi5mbGFnc3w9MTI4LGQ9ITAsYz1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1jJiYoYi51cGRhdGVRdWV1ZT1jLGIuZmxhZ3N8PTQpLEVqKGYsITApLG51bGw9PT1mLnRhaWwmJlwiaGlkZGVuXCI9PT1mLnRhaWxNb2RlJiYhZy5hbHRlcm5hdGUmJiFJKXJldHVybiBTKGIpLG51bGx9ZWxzZSAyKkIoKS1mLnJlbmRlcmluZ1N0YXJ0VGltZT5IaiYmMTA3Mzc0MTgyNCE9PWMmJihiLmZsYWdzfD0xMjgsZD0hMCxFaihmLCExKSxiLmxhbmVzPTQxOTQzMDQpO2YuaXNCYWNrd2FyZHM/KGcuc2libGluZz1iLmNoaWxkLGIuY2hpbGQ9Zyk6KGM9Zi5sYXN0LG51bGwhPT1jP2Muc2libGluZz1nOmIuY2hpbGQ9ZyxmLmxhc3Q9Zyl9aWYobnVsbCE9PWYudGFpbClyZXR1cm4gYj1mLnRhaWwsZi5yZW5kZXJpbmc9XG5iLGYudGFpbD1iLnNpYmxpbmcsZi5yZW5kZXJpbmdTdGFydFRpbWU9QigpLGIuc2libGluZz1udWxsLGM9TS5jdXJyZW50LEcoTSxkP2MmMXwyOmMmMSksYjtTKGIpO3JldHVybiBudWxsO2Nhc2UgMjI6Y2FzZSAyMzpyZXR1cm4gSWooKSxkPW51bGwhPT1iLm1lbW9pemVkU3RhdGUsbnVsbCE9PWEmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUhPT1kJiYoYi5mbGFnc3w9ODE5MiksZCYmMCE9PShiLm1vZGUmMSk/MCE9PShnaiYxMDczNzQxODI0KSYmKFMoYiksYi5zdWJ0cmVlRmxhZ3MmNiYmKGIuZmxhZ3N8PTgxOTIpKTpTKGIpLG51bGw7Y2FzZSAyNDpyZXR1cm4gbnVsbDtjYXNlIDI1OnJldHVybiBudWxsfXRocm93IEVycm9yKHAoMTU2LGIudGFnKSk7fVxuZnVuY3Rpb24gSmooYSxiKXt3ZyhiKTtzd2l0Y2goYi50YWcpe2Nhc2UgMTpyZXR1cm4gWmYoYi50eXBlKSYmJGYoKSxhPWIuZmxhZ3MsYSY2NTUzNj8oYi5mbGFncz1hJi02NTUzN3wxMjgsYik6bnVsbDtjYXNlIDM6cmV0dXJuIEpoKCksRShXZiksRShIKSxPaCgpLGE9Yi5mbGFncywwIT09KGEmNjU1MzYpJiYwPT09KGEmMTI4KT8oYi5mbGFncz1hJi02NTUzN3wxMjgsYik6bnVsbDtjYXNlIDU6cmV0dXJuIExoKGIpLG51bGw7Y2FzZSAxMzpFKE0pO2E9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1hJiZudWxsIT09YS5kZWh5ZHJhdGVkKXtpZihudWxsPT09Yi5hbHRlcm5hdGUpdGhyb3cgRXJyb3IocCgzNDApKTtJZygpfWE9Yi5mbGFncztyZXR1cm4gYSY2NTUzNj8oYi5mbGFncz1hJi02NTUzN3wxMjgsYik6bnVsbDtjYXNlIDE5OnJldHVybiBFKE0pLG51bGw7Y2FzZSA0OnJldHVybiBKaCgpLG51bGw7Y2FzZSAxMDpyZXR1cm4gUmcoYi50eXBlLl9jb250ZXh0KSxudWxsO2Nhc2UgMjI6Y2FzZSAyMzpyZXR1cm4gSWooKSxcbm51bGw7Y2FzZSAyNDpyZXR1cm4gbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX12YXIgS2o9ITEsVT0hMSxMaj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha1NldD9XZWFrU2V0OlNldCxWPW51bGw7ZnVuY3Rpb24gTWooYSxiKXt2YXIgYz1hLnJlZjtpZihudWxsIT09YylpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYyl0cnl7YyhudWxsKX1jYXRjaChkKXtXKGEsYixkKX1lbHNlIGMuY3VycmVudD1udWxsfWZ1bmN0aW9uIE5qKGEsYixjKXt0cnl7YygpfWNhdGNoKGQpe1coYSxiLGQpfX12YXIgT2o9ITE7XG5mdW5jdGlvbiBQaihhLGIpe0NmPWRkO2E9TWUoKTtpZihOZShhKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gYSl2YXIgYz17c3RhcnQ6YS5zZWxlY3Rpb25TdGFydCxlbmQ6YS5zZWxlY3Rpb25FbmR9O2Vsc2UgYTp7Yz0oYz1hLm93bmVyRG9jdW1lbnQpJiZjLmRlZmF1bHRWaWV3fHx3aW5kb3c7dmFyIGQ9Yy5nZXRTZWxlY3Rpb24mJmMuZ2V0U2VsZWN0aW9uKCk7aWYoZCYmMCE9PWQucmFuZ2VDb3VudCl7Yz1kLmFuY2hvck5vZGU7dmFyIGU9ZC5hbmNob3JPZmZzZXQsZj1kLmZvY3VzTm9kZTtkPWQuZm9jdXNPZmZzZXQ7dHJ5e2Mubm9kZVR5cGUsZi5ub2RlVHlwZX1jYXRjaChGKXtjPW51bGw7YnJlYWsgYX12YXIgZz0wLGg9LTEsaz0tMSxsPTAsbT0wLHE9YSxyPW51bGw7Yjpmb3IoOzspe2Zvcih2YXIgeTs7KXtxIT09Y3x8MCE9PWUmJjMhPT1xLm5vZGVUeXBlfHwoaD1nK2UpO3EhPT1mfHwwIT09ZCYmMyE9PXEubm9kZVR5cGV8fChrPWcrZCk7Mz09PXEubm9kZVR5cGUmJihnKz1cbnEubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PSh5PXEuZmlyc3RDaGlsZCkpYnJlYWs7cj1xO3E9eX1mb3IoOzspe2lmKHE9PT1hKWJyZWFrIGI7cj09PWMmJisrbD09PWUmJihoPWcpO3I9PT1mJiYrK209PT1kJiYoaz1nKTtpZihudWxsIT09KHk9cS5uZXh0U2libGluZykpYnJlYWs7cT1yO3I9cS5wYXJlbnROb2RlfXE9eX1jPS0xPT09aHx8LTE9PT1rP251bGw6e3N0YXJ0OmgsZW5kOmt9fWVsc2UgYz1udWxsfWM9Y3x8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgYz1udWxsO0RmPXtmb2N1c2VkRWxlbTphLHNlbGVjdGlvblJhbmdlOmN9O2RkPSExO2ZvcihWPWI7bnVsbCE9PVY7KWlmKGI9VixhPWIuY2hpbGQsMCE9PShiLnN1YnRyZWVGbGFncyYxMDI4KSYmbnVsbCE9PWEpYS5yZXR1cm49YixWPWE7ZWxzZSBmb3IoO251bGwhPT1WOyl7Yj1WO3RyeXt2YXIgbj1iLmFsdGVybmF0ZTtpZigwIT09KGIuZmxhZ3MmMTAyNCkpc3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmJyZWFrO1xuY2FzZSAxOmlmKG51bGwhPT1uKXt2YXIgdD1uLm1lbW9pemVkUHJvcHMsSj1uLm1lbW9pemVkU3RhdGUseD1iLnN0YXRlTm9kZSx3PXguZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoYi5lbGVtZW50VHlwZT09PWIudHlwZT90OkxnKGIudHlwZSx0KSxKKTt4Ll9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPXd9YnJlYWs7Y2FzZSAzOnZhciB1PWIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87MT09PXUubm9kZVR5cGU/dS50ZXh0Q29udGVudD1cIlwiOjk9PT11Lm5vZGVUeXBlJiZ1LmRvY3VtZW50RWxlbWVudCYmdS5yZW1vdmVDaGlsZCh1LmRvY3VtZW50RWxlbWVudCk7YnJlYWs7Y2FzZSA1OmNhc2UgNjpjYXNlIDQ6Y2FzZSAxNzpicmVhaztkZWZhdWx0OnRocm93IEVycm9yKHAoMTYzKSk7fX1jYXRjaChGKXtXKGIsYi5yZXR1cm4sRil9YT1iLnNpYmxpbmc7aWYobnVsbCE9PWEpe2EucmV0dXJuPWIucmV0dXJuO1Y9YTticmVha31WPWIucmV0dXJufW49T2o7T2o9ITE7cmV0dXJuIG59XG5mdW5jdGlvbiBRaihhLGIsYyl7dmFyIGQ9Yi51cGRhdGVRdWV1ZTtkPW51bGwhPT1kP2QubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1kKXt2YXIgZT1kPWQubmV4dDtkb3tpZigoZS50YWcmYSk9PT1hKXt2YXIgZj1lLmRlc3Ryb3k7ZS5kZXN0cm95PXZvaWQgMDt2b2lkIDAhPT1mJiZOaihiLGMsZil9ZT1lLm5leHR9d2hpbGUoZSE9PWQpfX1mdW5jdGlvbiBSaihhLGIpe2I9Yi51cGRhdGVRdWV1ZTtiPW51bGwhPT1iP2IubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1iKXt2YXIgYz1iPWIubmV4dDtkb3tpZigoYy50YWcmYSk9PT1hKXt2YXIgZD1jLmNyZWF0ZTtjLmRlc3Ryb3k9ZCgpfWM9Yy5uZXh0fXdoaWxlKGMhPT1iKX19ZnVuY3Rpb24gU2ooYSl7dmFyIGI9YS5yZWY7aWYobnVsbCE9PWIpe3ZhciBjPWEuc3RhdGVOb2RlO3N3aXRjaChhLnRhZyl7Y2FzZSA1OmE9YzticmVhaztkZWZhdWx0OmE9Y31cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmIuY3VycmVudD1hfX1cbmZ1bmN0aW9uIFRqKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO251bGwhPT1iJiYoYS5hbHRlcm5hdGU9bnVsbCxUaihiKSk7YS5jaGlsZD1udWxsO2EuZGVsZXRpb25zPW51bGw7YS5zaWJsaW5nPW51bGw7NT09PWEudGFnJiYoYj1hLnN0YXRlTm9kZSxudWxsIT09YiYmKGRlbGV0ZSBiW09mXSxkZWxldGUgYltQZl0sZGVsZXRlIGJbb2ZdLGRlbGV0ZSBiW1FmXSxkZWxldGUgYltSZl0pKTthLnN0YXRlTm9kZT1udWxsO2EucmV0dXJuPW51bGw7YS5kZXBlbmRlbmNpZXM9bnVsbDthLm1lbW9pemVkUHJvcHM9bnVsbDthLm1lbW9pemVkU3RhdGU9bnVsbDthLnBlbmRpbmdQcm9wcz1udWxsO2Euc3RhdGVOb2RlPW51bGw7YS51cGRhdGVRdWV1ZT1udWxsfWZ1bmN0aW9uIFVqKGEpe3JldHVybiA1PT09YS50YWd8fDM9PT1hLnRhZ3x8ND09PWEudGFnfVxuZnVuY3Rpb24gVmooYSl7YTpmb3IoOzspe2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8VWooYS5yZXR1cm4pKXJldHVybiBudWxsO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjtmb3IoYT1hLnNpYmxpbmc7NSE9PWEudGFnJiY2IT09YS50YWcmJjE4IT09YS50YWc7KXtpZihhLmZsYWdzJjIpY29udGludWUgYTtpZihudWxsPT09YS5jaGlsZHx8ND09PWEudGFnKWNvbnRpbnVlIGE7ZWxzZSBhLmNoaWxkLnJldHVybj1hLGE9YS5jaGlsZH1pZighKGEuZmxhZ3MmMikpcmV0dXJuIGEuc3RhdGVOb2RlfX1cbmZ1bmN0aW9uIFdqKGEsYixjKXt2YXIgZD1hLnRhZztpZig1PT09ZHx8Nj09PWQpYT1hLnN0YXRlTm9kZSxiPzg9PT1jLm5vZGVUeXBlP2MucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUoYSxiKTpjLmluc2VydEJlZm9yZShhLGIpOig4PT09Yy5ub2RlVHlwZT8oYj1jLnBhcmVudE5vZGUsYi5pbnNlcnRCZWZvcmUoYSxjKSk6KGI9YyxiLmFwcGVuZENoaWxkKGEpKSxjPWMuX3JlYWN0Um9vdENvbnRhaW5lcixudWxsIT09YyYmdm9pZCAwIT09Y3x8bnVsbCE9PWIub25jbGlja3x8KGIub25jbGljaz1CZikpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihXaihhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KVdqKGEsYixjKSxhPWEuc2libGluZ31cbmZ1bmN0aW9uIFhqKGEsYixjKXt2YXIgZD1hLnRhZztpZig1PT09ZHx8Nj09PWQpYT1hLnN0YXRlTm9kZSxiP2MuaW5zZXJ0QmVmb3JlKGEsYik6Yy5hcHBlbmRDaGlsZChhKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoWGooYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylYaihhLGIsYyksYT1hLnNpYmxpbmd9dmFyIFg9bnVsbCxZaj0hMTtmdW5jdGlvbiBaaihhLGIsYyl7Zm9yKGM9Yy5jaGlsZDtudWxsIT09YzspYWsoYSxiLGMpLGM9Yy5zaWJsaW5nfVxuZnVuY3Rpb24gYWsoYSxiLGMpe2lmKGxjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgbGMub25Db21taXRGaWJlclVubW91bnQpdHJ5e2xjLm9uQ29tbWl0RmliZXJVbm1vdW50KGtjLGMpfWNhdGNoKGgpe31zd2l0Y2goYy50YWcpe2Nhc2UgNTpVfHxNaihjLGIpO2Nhc2UgNjp2YXIgZD1YLGU9WWo7WD1udWxsO1pqKGEsYixjKTtYPWQ7WWo9ZTtudWxsIT09WCYmKFlqPyhhPVgsYz1jLnN0YXRlTm9kZSw4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoYyk6YS5yZW1vdmVDaGlsZChjKSk6WC5yZW1vdmVDaGlsZChjLnN0YXRlTm9kZSkpO2JyZWFrO2Nhc2UgMTg6bnVsbCE9PVgmJihZaj8oYT1YLGM9Yy5zdGF0ZU5vZGUsOD09PWEubm9kZVR5cGU/S2YoYS5wYXJlbnROb2RlLGMpOjE9PT1hLm5vZGVUeXBlJiZLZihhLGMpLGJkKGEpKTpLZihYLGMuc3RhdGVOb2RlKSk7YnJlYWs7Y2FzZSA0OmQ9WDtlPVlqO1g9Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztZaj0hMDtcblpqKGEsYixjKTtYPWQ7WWo9ZTticmVhaztjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6aWYoIVUmJihkPWMudXBkYXRlUXVldWUsbnVsbCE9PWQmJihkPWQubGFzdEVmZmVjdCxudWxsIT09ZCkpKXtlPWQ9ZC5uZXh0O2Rve3ZhciBmPWUsZz1mLmRlc3Ryb3k7Zj1mLnRhZzt2b2lkIDAhPT1nJiYoMCE9PShmJjIpP05qKGMsYixnKTowIT09KGYmNCkmJk5qKGMsYixnKSk7ZT1lLm5leHR9d2hpbGUoZSE9PWQpfVpqKGEsYixjKTticmVhaztjYXNlIDE6aWYoIVUmJihNaihjLGIpLGQ9Yy5zdGF0ZU5vZGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50V2lsbFVubW91bnQpKXRyeXtkLnByb3BzPWMubWVtb2l6ZWRQcm9wcyxkLnN0YXRlPWMubWVtb2l6ZWRTdGF0ZSxkLmNvbXBvbmVudFdpbGxVbm1vdW50KCl9Y2F0Y2goaCl7VyhjLGIsaCl9WmooYSxiLGMpO2JyZWFrO2Nhc2UgMjE6WmooYSxiLGMpO2JyZWFrO2Nhc2UgMjI6Yy5tb2RlJjE/KFU9KGQ9VSl8fG51bGwhPT1cbmMubWVtb2l6ZWRTdGF0ZSxaaihhLGIsYyksVT1kKTpaaihhLGIsYyk7YnJlYWs7ZGVmYXVsdDpaaihhLGIsYyl9fWZ1bmN0aW9uIGJrKGEpe3ZhciBiPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWIpe2EudXBkYXRlUXVldWU9bnVsbDt2YXIgYz1hLnN0YXRlTm9kZTtudWxsPT09YyYmKGM9YS5zdGF0ZU5vZGU9bmV3IExqKTtiLmZvckVhY2goZnVuY3Rpb24oYil7dmFyIGQ9Y2suYmluZChudWxsLGEsYik7Yy5oYXMoYil8fChjLmFkZChiKSxiLnRoZW4oZCxkKSl9KX19XG5mdW5jdGlvbiBkayhhLGIpe3ZhciBjPWIuZGVsZXRpb25zO2lmKG51bGwhPT1jKWZvcih2YXIgZD0wO2Q8Yy5sZW5ndGg7ZCsrKXt2YXIgZT1jW2RdO3RyeXt2YXIgZj1hLGc9YixoPWc7YTpmb3IoO251bGwhPT1oOyl7c3dpdGNoKGgudGFnKXtjYXNlIDU6WD1oLnN0YXRlTm9kZTtZaj0hMTticmVhayBhO2Nhc2UgMzpYPWguc3RhdGVOb2RlLmNvbnRhaW5lckluZm87WWo9ITA7YnJlYWsgYTtjYXNlIDQ6WD1oLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO1lqPSEwO2JyZWFrIGF9aD1oLnJldHVybn1pZihudWxsPT09WCl0aHJvdyBFcnJvcihwKDE2MCkpO2FrKGYsZyxlKTtYPW51bGw7WWo9ITE7dmFyIGs9ZS5hbHRlcm5hdGU7bnVsbCE9PWsmJihrLnJldHVybj1udWxsKTtlLnJldHVybj1udWxsfWNhdGNoKGwpe1coZSxiLGwpfX1pZihiLnN1YnRyZWVGbGFncyYxMjg1NClmb3IoYj1iLmNoaWxkO251bGwhPT1iOyllayhiLGEpLGI9Yi5zaWJsaW5nfVxuZnVuY3Rpb24gZWsoYSxiKXt2YXIgYz1hLmFsdGVybmF0ZSxkPWEuZmxhZ3M7c3dpdGNoKGEudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6ZGsoYixhKTtmayhhKTtpZihkJjQpe3RyeXtRaigzLGEsYS5yZXR1cm4pLFJqKDMsYSl9Y2F0Y2godCl7VyhhLGEucmV0dXJuLHQpfXRyeXtRaig1LGEsYS5yZXR1cm4pfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19YnJlYWs7Y2FzZSAxOmRrKGIsYSk7ZmsoYSk7ZCY1MTImJm51bGwhPT1jJiZNaihjLGMucmV0dXJuKTticmVhaztjYXNlIDU6ZGsoYixhKTtmayhhKTtkJjUxMiYmbnVsbCE9PWMmJk1qKGMsYy5yZXR1cm4pO2lmKGEuZmxhZ3MmMzIpe3ZhciBlPWEuc3RhdGVOb2RlO3RyeXtvYihlLFwiXCIpfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19aWYoZCY0JiYoZT1hLnN0YXRlTm9kZSxudWxsIT1lKSl7dmFyIGY9YS5tZW1vaXplZFByb3BzLGc9bnVsbCE9PWM/Yy5tZW1vaXplZFByb3BzOmYsaD1hLnR5cGUsaz1hLnVwZGF0ZVF1ZXVlO1xuYS51cGRhdGVRdWV1ZT1udWxsO2lmKG51bGwhPT1rKXRyeXtcImlucHV0XCI9PT1oJiZcInJhZGlvXCI9PT1mLnR5cGUmJm51bGwhPWYubmFtZSYmYWIoZSxmKTt2YihoLGcpO3ZhciBsPXZiKGgsZik7Zm9yKGc9MDtnPGsubGVuZ3RoO2crPTIpe3ZhciBtPWtbZ10scT1rW2crMV07XCJzdHlsZVwiPT09bT9zYihlLHEpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PW0/bmIoZSxxKTpcImNoaWxkcmVuXCI9PT1tP29iKGUscSk6dGEoZSxtLHEsbCl9c3dpdGNoKGgpe2Nhc2UgXCJpbnB1dFwiOmJiKGUsZik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6aWIoZSxmKTticmVhaztjYXNlIFwic2VsZWN0XCI6dmFyIHI9ZS5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlO2UuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWYubXVsdGlwbGU7dmFyIHk9Zi52YWx1ZTtudWxsIT15P2ZiKGUsISFmLm11bHRpcGxlLHksITEpOnIhPT0hIWYubXVsdGlwbGUmJihudWxsIT1mLmRlZmF1bHRWYWx1ZT9mYihlLCEhZi5tdWx0aXBsZSxcbmYuZGVmYXVsdFZhbHVlLCEwKTpmYihlLCEhZi5tdWx0aXBsZSxmLm11bHRpcGxlP1tdOlwiXCIsITEpKX1lW1BmXT1mfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19YnJlYWs7Y2FzZSA2OmRrKGIsYSk7ZmsoYSk7aWYoZCY0KXtpZihudWxsPT09YS5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IocCgxNjIpKTtlPWEuc3RhdGVOb2RlO2Y9YS5tZW1vaXplZFByb3BzO3RyeXtlLm5vZGVWYWx1ZT1mfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19YnJlYWs7Y2FzZSAzOmRrKGIsYSk7ZmsoYSk7aWYoZCY0JiZudWxsIT09YyYmYy5tZW1vaXplZFN0YXRlLmlzRGVoeWRyYXRlZCl0cnl7YmQoYi5jb250YWluZXJJbmZvKX1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9YnJlYWs7Y2FzZSA0OmRrKGIsYSk7ZmsoYSk7YnJlYWs7Y2FzZSAxMzpkayhiLGEpO2ZrKGEpO2U9YS5jaGlsZDtlLmZsYWdzJjgxOTImJihmPW51bGwhPT1lLm1lbW9pemVkU3RhdGUsZS5zdGF0ZU5vZGUuaXNIaWRkZW49ZiwhZnx8XG5udWxsIT09ZS5hbHRlcm5hdGUmJm51bGwhPT1lLmFsdGVybmF0ZS5tZW1vaXplZFN0YXRlfHwoZ2s9QigpKSk7ZCY0JiZiayhhKTticmVhaztjYXNlIDIyOm09bnVsbCE9PWMmJm51bGwhPT1jLm1lbW9pemVkU3RhdGU7YS5tb2RlJjE/KFU9KGw9VSl8fG0sZGsoYixhKSxVPWwpOmRrKGIsYSk7ZmsoYSk7aWYoZCY4MTkyKXtsPW51bGwhPT1hLm1lbW9pemVkU3RhdGU7aWYoKGEuc3RhdGVOb2RlLmlzSGlkZGVuPWwpJiYhbSYmMCE9PShhLm1vZGUmMSkpZm9yKFY9YSxtPWEuY2hpbGQ7bnVsbCE9PW07KXtmb3IocT1WPW07bnVsbCE9PVY7KXtyPVY7eT1yLmNoaWxkO3N3aXRjaChyLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OlFqKDQscixyLnJldHVybik7YnJlYWs7Y2FzZSAxOk1qKHIsci5yZXR1cm4pO3ZhciBuPXIuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBuLmNvbXBvbmVudFdpbGxVbm1vdW50KXtkPXI7Yz1yLnJldHVybjt0cnl7Yj1kLG4ucHJvcHM9XG5iLm1lbW9pemVkUHJvcHMsbi5zdGF0ZT1iLm1lbW9pemVkU3RhdGUsbi5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKHQpe1coZCxjLHQpfX1icmVhaztjYXNlIDU6TWoocixyLnJldHVybik7YnJlYWs7Y2FzZSAyMjppZihudWxsIT09ci5tZW1vaXplZFN0YXRlKXtoayhxKTtjb250aW51ZX19bnVsbCE9PXk/KHkucmV0dXJuPXIsVj15KTpoayhxKX1tPW0uc2libGluZ31hOmZvcihtPW51bGwscT1hOzspe2lmKDU9PT1xLnRhZyl7aWYobnVsbD09PW0pe209cTt0cnl7ZT1xLnN0YXRlTm9kZSxsPyhmPWUuc3R5bGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuc2V0UHJvcGVydHk/Zi5zZXRQcm9wZXJ0eShcImRpc3BsYXlcIixcIm5vbmVcIixcImltcG9ydGFudFwiKTpmLmRpc3BsYXk9XCJub25lXCIpOihoPXEuc3RhdGVOb2RlLGs9cS5tZW1vaXplZFByb3BzLnN0eWxlLGc9dm9pZCAwIT09ayYmbnVsbCE9PWsmJmsuaGFzT3duUHJvcGVydHkoXCJkaXNwbGF5XCIpP2suZGlzcGxheTpudWxsLGguc3R5bGUuZGlzcGxheT1cbnJiKFwiZGlzcGxheVwiLGcpKX1jYXRjaCh0KXtXKGEsYS5yZXR1cm4sdCl9fX1lbHNlIGlmKDY9PT1xLnRhZyl7aWYobnVsbD09PW0pdHJ5e3Euc3RhdGVOb2RlLm5vZGVWYWx1ZT1sP1wiXCI6cS5tZW1vaXplZFByb3BzfWNhdGNoKHQpe1coYSxhLnJldHVybix0KX19ZWxzZSBpZigoMjIhPT1xLnRhZyYmMjMhPT1xLnRhZ3x8bnVsbD09PXEubWVtb2l6ZWRTdGF0ZXx8cT09PWEpJiZudWxsIT09cS5jaGlsZCl7cS5jaGlsZC5yZXR1cm49cTtxPXEuY2hpbGQ7Y29udGludWV9aWYocT09PWEpYnJlYWsgYTtmb3IoO251bGw9PT1xLnNpYmxpbmc7KXtpZihudWxsPT09cS5yZXR1cm58fHEucmV0dXJuPT09YSlicmVhayBhO209PT1xJiYobT1udWxsKTtxPXEucmV0dXJufW09PT1xJiYobT1udWxsKTtxLnNpYmxpbmcucmV0dXJuPXEucmV0dXJuO3E9cS5zaWJsaW5nfX1icmVhaztjYXNlIDE5OmRrKGIsYSk7ZmsoYSk7ZCY0JiZiayhhKTticmVhaztjYXNlIDIxOmJyZWFrO2RlZmF1bHQ6ZGsoYixcbmEpLGZrKGEpfX1mdW5jdGlvbiBmayhhKXt2YXIgYj1hLmZsYWdzO2lmKGImMil7dHJ5e2E6e2Zvcih2YXIgYz1hLnJldHVybjtudWxsIT09Yzspe2lmKFVqKGMpKXt2YXIgZD1jO2JyZWFrIGF9Yz1jLnJldHVybn10aHJvdyBFcnJvcihwKDE2MCkpO31zd2l0Y2goZC50YWcpe2Nhc2UgNTp2YXIgZT1kLnN0YXRlTm9kZTtkLmZsYWdzJjMyJiYob2IoZSxcIlwiKSxkLmZsYWdzJj0tMzMpO3ZhciBmPVZqKGEpO1hqKGEsZixlKTticmVhaztjYXNlIDM6Y2FzZSA0OnZhciBnPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8saD1WaihhKTtXaihhLGgsZyk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDE2MSkpO319Y2F0Y2goayl7VyhhLGEucmV0dXJuLGspfWEuZmxhZ3MmPS0zfWImNDA5NiYmKGEuZmxhZ3MmPS00MDk3KX1mdW5jdGlvbiBpayhhLGIsYyl7Vj1hO2prKGEsYixjKX1cbmZ1bmN0aW9uIGprKGEsYixjKXtmb3IodmFyIGQ9MCE9PShhLm1vZGUmMSk7bnVsbCE9PVY7KXt2YXIgZT1WLGY9ZS5jaGlsZDtpZigyMj09PWUudGFnJiZkKXt2YXIgZz1udWxsIT09ZS5tZW1vaXplZFN0YXRlfHxLajtpZighZyl7dmFyIGg9ZS5hbHRlcm5hdGUsaz1udWxsIT09aCYmbnVsbCE9PWgubWVtb2l6ZWRTdGF0ZXx8VTtoPUtqO3ZhciBsPVU7S2o9ZztpZigoVT1rKSYmIWwpZm9yKFY9ZTtudWxsIT09VjspZz1WLGs9Zy5jaGlsZCwyMj09PWcudGFnJiZudWxsIT09Zy5tZW1vaXplZFN0YXRlP2trKGUpOm51bGwhPT1rPyhrLnJldHVybj1nLFY9ayk6a2soZSk7Zm9yKDtudWxsIT09ZjspVj1mLGprKGYsYixjKSxmPWYuc2libGluZztWPWU7S2o9aDtVPWx9bGsoYSxiLGMpfWVsc2UgMCE9PShlLnN1YnRyZWVGbGFncyY4NzcyKSYmbnVsbCE9PWY/KGYucmV0dXJuPWUsVj1mKTpsayhhLGIsYyl9fVxuZnVuY3Rpb24gbGsoYSl7Zm9yKDtudWxsIT09Vjspe3ZhciBiPVY7aWYoMCE9PShiLmZsYWdzJjg3NzIpKXt2YXIgYz1iLmFsdGVybmF0ZTt0cnl7aWYoMCE9PShiLmZsYWdzJjg3NzIpKXN3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpVfHxSaig1LGIpO2JyZWFrO2Nhc2UgMTp2YXIgZD1iLnN0YXRlTm9kZTtpZihiLmZsYWdzJjQmJiFVKWlmKG51bGw9PT1jKWQuY29tcG9uZW50RGlkTW91bnQoKTtlbHNle3ZhciBlPWIuZWxlbWVudFR5cGU9PT1iLnR5cGU/Yy5tZW1vaXplZFByb3BzOkxnKGIudHlwZSxjLm1lbW9pemVkUHJvcHMpO2QuY29tcG9uZW50RGlkVXBkYXRlKGUsYy5tZW1vaXplZFN0YXRlLGQuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpfXZhciBmPWIudXBkYXRlUXVldWU7bnVsbCE9PWYmJmloKGIsZixkKTticmVhaztjYXNlIDM6dmFyIGc9Yi51cGRhdGVRdWV1ZTtpZihudWxsIT09Zyl7Yz1udWxsO2lmKG51bGwhPT1iLmNoaWxkKXN3aXRjaChiLmNoaWxkLnRhZyl7Y2FzZSA1OmM9XG5iLmNoaWxkLnN0YXRlTm9kZTticmVhaztjYXNlIDE6Yz1iLmNoaWxkLnN0YXRlTm9kZX1paChiLGcsYyl9YnJlYWs7Y2FzZSA1OnZhciBoPWIuc3RhdGVOb2RlO2lmKG51bGw9PT1jJiZiLmZsYWdzJjQpe2M9aDt2YXIgaz1iLm1lbW9pemVkUHJvcHM7c3dpdGNoKGIudHlwZSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjprLmF1dG9Gb2N1cyYmYy5mb2N1cygpO2JyZWFrO2Nhc2UgXCJpbWdcIjprLnNyYyYmKGMuc3JjPWsuc3JjKX19YnJlYWs7Y2FzZSA2OmJyZWFrO2Nhc2UgNDpicmVhaztjYXNlIDEyOmJyZWFrO2Nhc2UgMTM6aWYobnVsbD09PWIubWVtb2l6ZWRTdGF0ZSl7dmFyIGw9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWwpe3ZhciBtPWwubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09bSl7dmFyIHE9bS5kZWh5ZHJhdGVkO251bGwhPT1xJiZiZChxKX19fWJyZWFrO2Nhc2UgMTk6Y2FzZSAxNzpjYXNlIDIxOmNhc2UgMjI6Y2FzZSAyMzpjYXNlIDI1OmJyZWFrO1xuZGVmYXVsdDp0aHJvdyBFcnJvcihwKDE2MykpO31VfHxiLmZsYWdzJjUxMiYmU2ooYil9Y2F0Y2gocil7VyhiLGIucmV0dXJuLHIpfX1pZihiPT09YSl7Vj1udWxsO2JyZWFrfWM9Yi5zaWJsaW5nO2lmKG51bGwhPT1jKXtjLnJldHVybj1iLnJldHVybjtWPWM7YnJlYWt9Vj1iLnJldHVybn19ZnVuY3Rpb24gaGsoYSl7Zm9yKDtudWxsIT09Vjspe3ZhciBiPVY7aWYoYj09PWEpe1Y9bnVsbDticmVha312YXIgYz1iLnNpYmxpbmc7aWYobnVsbCE9PWMpe2MucmV0dXJuPWIucmV0dXJuO1Y9YzticmVha31WPWIucmV0dXJufX1cbmZ1bmN0aW9uIGtrKGEpe2Zvcig7bnVsbCE9PVY7KXt2YXIgYj1WO3RyeXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6dmFyIGM9Yi5yZXR1cm47dHJ5e1JqKDQsYil9Y2F0Y2goayl7VyhiLGMsayl9YnJlYWs7Y2FzZSAxOnZhciBkPWIuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLmNvbXBvbmVudERpZE1vdW50KXt2YXIgZT1iLnJldHVybjt0cnl7ZC5jb21wb25lbnREaWRNb3VudCgpfWNhdGNoKGspe1coYixlLGspfX12YXIgZj1iLnJldHVybjt0cnl7U2ooYil9Y2F0Y2goayl7VyhiLGYsayl9YnJlYWs7Y2FzZSA1OnZhciBnPWIucmV0dXJuO3RyeXtTaihiKX1jYXRjaChrKXtXKGIsZyxrKX19fWNhdGNoKGspe1coYixiLnJldHVybixrKX1pZihiPT09YSl7Vj1udWxsO2JyZWFrfXZhciBoPWIuc2libGluZztpZihudWxsIT09aCl7aC5yZXR1cm49Yi5yZXR1cm47Vj1oO2JyZWFrfVY9Yi5yZXR1cm59fVxudmFyIG1rPU1hdGguY2VpbCxuaz11YS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLG9rPXVhLlJlYWN0Q3VycmVudE93bmVyLHBrPXVhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLEs9MCxSPW51bGwsWT1udWxsLFo9MCxnaj0wLGZqPVVmKDApLFQ9MCxxaz1udWxsLGhoPTAscms9MCxzaz0wLHRrPW51bGwsdWs9bnVsbCxnaz0wLEhqPUluZmluaXR5LHZrPW51bGwsUGk9ITEsUWk9bnVsbCxTaT1udWxsLHdrPSExLHhrPW51bGwseWs9MCx6az0wLEFrPW51bGwsQms9LTEsQ2s9MDtmdW5jdGlvbiBMKCl7cmV0dXJuIDAhPT0oSyY2KT9CKCk6LTEhPT1Caz9CazpCaz1CKCl9XG5mdW5jdGlvbiBsaChhKXtpZigwPT09KGEubW9kZSYxKSlyZXR1cm4gMTtpZigwIT09KEsmMikmJjAhPT1aKXJldHVybiBaJi1aO2lmKG51bGwhPT1LZy50cmFuc2l0aW9uKXJldHVybiAwPT09Q2smJihDaz15YygpKSxDazthPUM7aWYoMCE9PWEpcmV0dXJuIGE7YT13aW5kb3cuZXZlbnQ7YT12b2lkIDA9PT1hPzE2OmpkKGEudHlwZSk7cmV0dXJuIGF9ZnVuY3Rpb24gbWgoYSxiLGMsZCl7aWYoNTA8emspdGhyb3cgems9MCxBaz1udWxsLEVycm9yKHAoMTg1KSk7QWMoYSxjLGQpO2lmKDA9PT0oSyYyKXx8YSE9PVIpYT09PVImJigwPT09KEsmMikmJihya3w9YyksND09PVQmJkRrKGEsWikpLEVrKGEsZCksMT09PWMmJjA9PT1LJiYwPT09KGIubW9kZSYxKSYmKEhqPUIoKSs1MDAsZmcmJmpnKCkpfVxuZnVuY3Rpb24gRWsoYSxiKXt2YXIgYz1hLmNhbGxiYWNrTm9kZTt3YyhhLGIpO3ZhciBkPXVjKGEsYT09PVI/WjowKTtpZigwPT09ZCludWxsIT09YyYmYmMoYyksYS5jYWxsYmFja05vZGU9bnVsbCxhLmNhbGxiYWNrUHJpb3JpdHk9MDtlbHNlIGlmKGI9ZCYtZCxhLmNhbGxiYWNrUHJpb3JpdHkhPT1iKXtudWxsIT1jJiZiYyhjKTtpZigxPT09YikwPT09YS50YWc/aWcoRmsuYmluZChudWxsLGEpKTpoZyhGay5iaW5kKG51bGwsYSkpLEpmKGZ1bmN0aW9uKCl7MD09PShLJjYpJiZqZygpfSksYz1udWxsO2Vsc2V7c3dpdGNoKERjKGQpKXtjYXNlIDE6Yz1mYzticmVhaztjYXNlIDQ6Yz1nYzticmVhaztjYXNlIDE2OmM9aGM7YnJlYWs7Y2FzZSA1MzY4NzA5MTI6Yz1qYzticmVhaztkZWZhdWx0OmM9aGN9Yz1HayhjLEhrLmJpbmQobnVsbCxhKSl9YS5jYWxsYmFja1ByaW9yaXR5PWI7YS5jYWxsYmFja05vZGU9Y319XG5mdW5jdGlvbiBIayhhLGIpe0JrPS0xO0NrPTA7aWYoMCE9PShLJjYpKXRocm93IEVycm9yKHAoMzI3KSk7dmFyIGM9YS5jYWxsYmFja05vZGU7aWYoSWsoKSYmYS5jYWxsYmFja05vZGUhPT1jKXJldHVybiBudWxsO3ZhciBkPXVjKGEsYT09PVI/WjowKTtpZigwPT09ZClyZXR1cm4gbnVsbDtpZigwIT09KGQmMzApfHwwIT09KGQmYS5leHBpcmVkTGFuZXMpfHxiKWI9SmsoYSxkKTtlbHNle2I9ZDt2YXIgZT1LO0t8PTI7dmFyIGY9S2soKTtpZihSIT09YXx8WiE9PWIpdms9bnVsbCxIaj1CKCkrNTAwLExrKGEsYik7ZG8gdHJ5e01rKCk7YnJlYWt9Y2F0Y2goaCl7TmsoYSxoKX13aGlsZSgxKTtRZygpO25rLmN1cnJlbnQ9ZjtLPWU7bnVsbCE9PVk/Yj0wOihSPW51bGwsWj0wLGI9VCl9aWYoMCE9PWIpezI9PT1iJiYoZT14YyhhKSwwIT09ZSYmKGQ9ZSxiPU9rKGEsZSkpKTtpZigxPT09Yil0aHJvdyBjPXFrLExrKGEsMCksRGsoYSxkKSxFayhhLEIoKSksYztpZig2PT09YilEayhhLGQpO1xuZWxzZXtlPWEuY3VycmVudC5hbHRlcm5hdGU7aWYoMD09PShkJjMwKSYmIVBrKGUpJiYoYj1KayhhLGQpLDI9PT1iJiYoZj14YyhhKSwwIT09ZiYmKGQ9ZixiPU9rKGEsZikpKSwxPT09YikpdGhyb3cgYz1xayxMayhhLDApLERrKGEsZCksRWsoYSxCKCkpLGM7YS5maW5pc2hlZFdvcms9ZTthLmZpbmlzaGVkTGFuZXM9ZDtzd2l0Y2goYil7Y2FzZSAwOmNhc2UgMTp0aHJvdyBFcnJvcihwKDM0NSkpO2Nhc2UgMjpRayhhLHVrLHZrKTticmVhaztjYXNlIDM6RGsoYSxkKTtpZigoZCYxMzAwMjM0MjQpPT09ZCYmKGI9Z2srNTAwLUIoKSwxMDxiKSl7aWYoMCE9PXVjKGEsMCkpYnJlYWs7ZT1hLnN1c3BlbmRlZExhbmVzO2lmKChlJmQpIT09ZCl7TCgpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmZTticmVha31hLnRpbWVvdXRIYW5kbGU9RmYoUWsuYmluZChudWxsLGEsdWssdmspLGIpO2JyZWFrfVFrKGEsdWssdmspO2JyZWFrO2Nhc2UgNDpEayhhLGQpO2lmKChkJjQxOTQyNDApPT09XG5kKWJyZWFrO2I9YS5ldmVudFRpbWVzO2ZvcihlPS0xOzA8ZDspe3ZhciBnPTMxLW9jKGQpO2Y9MTw8ZztnPWJbZ107Zz5lJiYoZT1nKTtkJj1+Zn1kPWU7ZD1CKCktZDtkPSgxMjA+ZD8xMjA6NDgwPmQ/NDgwOjEwODA+ZD8xMDgwOjE5MjA+ZD8xOTIwOjNFMz5kPzNFMzo0MzIwPmQ/NDMyMDoxOTYwKm1rKGQvMTk2MCkpLWQ7aWYoMTA8ZCl7YS50aW1lb3V0SGFuZGxlPUZmKFFrLmJpbmQobnVsbCxhLHVrLHZrKSxkKTticmVha31RayhhLHVrLHZrKTticmVhaztjYXNlIDU6UWsoYSx1ayx2ayk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcihwKDMyOSkpO319fUVrKGEsQigpKTtyZXR1cm4gYS5jYWxsYmFja05vZGU9PT1jP0hrLmJpbmQobnVsbCxhKTpudWxsfVxuZnVuY3Rpb24gT2soYSxiKXt2YXIgYz10azthLmN1cnJlbnQubWVtb2l6ZWRTdGF0ZS5pc0RlaHlkcmF0ZWQmJihMayhhLGIpLmZsYWdzfD0yNTYpO2E9SmsoYSxiKTsyIT09YSYmKGI9dWssdWs9YyxudWxsIT09YiYmR2ooYikpO3JldHVybiBhfWZ1bmN0aW9uIEdqKGEpe251bGw9PT11az91az1hOnVrLnB1c2guYXBwbHkodWssYSl9XG5mdW5jdGlvbiBQayhhKXtmb3IodmFyIGI9YTs7KXtpZihiLmZsYWdzJjE2Mzg0KXt2YXIgYz1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1jJiYoYz1jLnN0b3JlcyxudWxsIT09YykpZm9yKHZhciBkPTA7ZDxjLmxlbmd0aDtkKyspe3ZhciBlPWNbZF0sZj1lLmdldFNuYXBzaG90O2U9ZS52YWx1ZTt0cnl7aWYoIUhlKGYoKSxlKSlyZXR1cm4hMX1jYXRjaChnKXtyZXR1cm4hMX19fWM9Yi5jaGlsZDtpZihiLnN1YnRyZWVGbGFncyYxNjM4NCYmbnVsbCE9PWMpYy5yZXR1cm49YixiPWM7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoO251bGw9PT1iLnNpYmxpbmc7KXtpZihudWxsPT09Yi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4hMDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiEwfVxuZnVuY3Rpb24gRGsoYSxiKXtiJj1+c2s7YiY9fnJrO2Euc3VzcGVuZGVkTGFuZXN8PWI7YS5waW5nZWRMYW5lcyY9fmI7Zm9yKGE9YS5leHBpcmF0aW9uVGltZXM7MDxiOyl7dmFyIGM9MzEtb2MoYiksZD0xPDxjO2FbY109LTE7YiY9fmR9fWZ1bmN0aW9uIEZrKGEpe2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMyNykpO0lrKCk7dmFyIGI9dWMoYSwwKTtpZigwPT09KGImMSkpcmV0dXJuIEVrKGEsQigpKSxudWxsO3ZhciBjPUprKGEsYik7aWYoMCE9PWEudGFnJiYyPT09Yyl7dmFyIGQ9eGMoYSk7MCE9PWQmJihiPWQsYz1PayhhLGQpKX1pZigxPT09Yyl0aHJvdyBjPXFrLExrKGEsMCksRGsoYSxiKSxFayhhLEIoKSksYztpZig2PT09Yyl0aHJvdyBFcnJvcihwKDM0NSkpO2EuZmluaXNoZWRXb3JrPWEuY3VycmVudC5hbHRlcm5hdGU7YS5maW5pc2hlZExhbmVzPWI7UWsoYSx1ayx2ayk7RWsoYSxCKCkpO3JldHVybiBudWxsfVxuZnVuY3Rpb24gUmsoYSxiKXt2YXIgYz1LO0t8PTE7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7Sz1jLDA9PT1LJiYoSGo9QigpKzUwMCxmZyYmamcoKSl9fWZ1bmN0aW9uIFNrKGEpe251bGwhPT14ayYmMD09PXhrLnRhZyYmMD09PShLJjYpJiZJaygpO3ZhciBiPUs7S3w9MTt2YXIgYz1way50cmFuc2l0aW9uLGQ9Qzt0cnl7aWYocGsudHJhbnNpdGlvbj1udWxsLEM9MSxhKXJldHVybiBhKCl9ZmluYWxseXtDPWQscGsudHJhbnNpdGlvbj1jLEs9YiwwPT09KEsmNikmJmpnKCl9fWZ1bmN0aW9uIElqKCl7Z2o9ZmouY3VycmVudDtFKGZqKX1cbmZ1bmN0aW9uIExrKGEsYil7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkTGFuZXM9MDt2YXIgYz1hLnRpbWVvdXRIYW5kbGU7LTEhPT1jJiYoYS50aW1lb3V0SGFuZGxlPS0xLEdmKGMpKTtpZihudWxsIT09WSlmb3IoYz1ZLnJldHVybjtudWxsIT09Yzspe3ZhciBkPWM7d2coZCk7c3dpdGNoKGQudGFnKXtjYXNlIDE6ZD1kLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWQmJnZvaWQgMCE9PWQmJiRmKCk7YnJlYWs7Y2FzZSAzOkpoKCk7RShXZik7RShIKTtPaCgpO2JyZWFrO2Nhc2UgNTpMaChkKTticmVhaztjYXNlIDQ6SmgoKTticmVhaztjYXNlIDEzOkUoTSk7YnJlYWs7Y2FzZSAxOTpFKE0pO2JyZWFrO2Nhc2UgMTA6UmcoZC50eXBlLl9jb250ZXh0KTticmVhaztjYXNlIDIyOmNhc2UgMjM6SWooKX1jPWMucmV0dXJufVI9YTtZPWE9d2goYS5jdXJyZW50LG51bGwpO1o9Z2o9YjtUPTA7cWs9bnVsbDtzaz1yaz1oaD0wO3VrPXRrPW51bGw7aWYobnVsbCE9PVdnKXtmb3IoYj1cbjA7YjxXZy5sZW5ndGg7YisrKWlmKGM9V2dbYl0sZD1jLmludGVybGVhdmVkLG51bGwhPT1kKXtjLmludGVybGVhdmVkPW51bGw7dmFyIGU9ZC5uZXh0LGY9Yy5wZW5kaW5nO2lmKG51bGwhPT1mKXt2YXIgZz1mLm5leHQ7Zi5uZXh0PWU7ZC5uZXh0PWd9Yy5wZW5kaW5nPWR9V2c9bnVsbH1yZXR1cm4gYX1cbmZ1bmN0aW9uIE5rKGEsYil7ZG97dmFyIGM9WTt0cnl7UWcoKTtQaC5jdXJyZW50PWFpO2lmKFNoKXtmb3IodmFyIGQ9Ti5tZW1vaXplZFN0YXRlO251bGwhPT1kOyl7dmFyIGU9ZC5xdWV1ZTtudWxsIT09ZSYmKGUucGVuZGluZz1udWxsKTtkPWQubmV4dH1TaD0hMX1SaD0wO1A9Tz1OPW51bGw7VGg9ITE7VWg9MDtvay5jdXJyZW50PW51bGw7aWYobnVsbD09PWN8fG51bGw9PT1jLnJldHVybil7VD0xO3FrPWI7WT1udWxsO2JyZWFrfWE6e3ZhciBmPWEsZz1jLnJldHVybixoPWMsaz1iO2I9WjtoLmZsYWdzfD0zMjc2ODtpZihudWxsIT09ayYmXCJvYmplY3RcIj09PXR5cGVvZiBrJiZcImZ1bmN0aW9uXCI9PT10eXBlb2Ygay50aGVuKXt2YXIgbD1rLG09aCxxPW0udGFnO2lmKDA9PT0obS5tb2RlJjEpJiYoMD09PXF8fDExPT09cXx8MTU9PT1xKSl7dmFyIHI9bS5hbHRlcm5hdGU7cj8obS51cGRhdGVRdWV1ZT1yLnVwZGF0ZVF1ZXVlLG0ubWVtb2l6ZWRTdGF0ZT1yLm1lbW9pemVkU3RhdGUsXG5tLmxhbmVzPXIubGFuZXMpOihtLnVwZGF0ZVF1ZXVlPW51bGwsbS5tZW1vaXplZFN0YXRlPW51bGwpfXZhciB5PVZpKGcpO2lmKG51bGwhPT15KXt5LmZsYWdzJj0tMjU3O1dpKHksZyxoLGYsYik7eS5tb2RlJjEmJlRpKGYsbCxiKTtiPXk7az1sO3ZhciBuPWIudXBkYXRlUXVldWU7aWYobnVsbD09PW4pe3ZhciB0PW5ldyBTZXQ7dC5hZGQoayk7Yi51cGRhdGVRdWV1ZT10fWVsc2Ugbi5hZGQoayk7YnJlYWsgYX1lbHNle2lmKDA9PT0oYiYxKSl7VGkoZixsLGIpO3VqKCk7YnJlYWsgYX1rPUVycm9yKHAoNDI2KSl9fWVsc2UgaWYoSSYmaC5tb2RlJjEpe3ZhciBKPVZpKGcpO2lmKG51bGwhPT1KKXswPT09KEouZmxhZ3MmNjU1MzYpJiYoSi5mbGFnc3w9MjU2KTtXaShKLGcsaCxmLGIpO0pnKEtpKGssaCkpO2JyZWFrIGF9fWY9az1LaShrLGgpOzQhPT1UJiYoVD0yKTtudWxsPT09dGs/dGs9W2ZdOnRrLnB1c2goZik7Zj1nO2Rve3N3aXRjaChmLnRhZyl7Y2FzZSAzOmYuZmxhZ3N8PTY1NTM2O1xuYiY9LWI7Zi5sYW5lc3w9Yjt2YXIgeD1PaShmLGssYik7ZmgoZix4KTticmVhayBhO2Nhc2UgMTpoPWs7dmFyIHc9Zi50eXBlLHU9Zi5zdGF0ZU5vZGU7aWYoMD09PShmLmZsYWdzJjEyOCkmJihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygdy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3J8fG51bGwhPT11JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgdS5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1TaXx8IVNpLmhhcyh1KSkpKXtmLmZsYWdzfD02NTUzNjtiJj0tYjtmLmxhbmVzfD1iO3ZhciBGPVJpKGYsaCxiKTtmaChmLEYpO2JyZWFrIGF9fWY9Zi5yZXR1cm59d2hpbGUobnVsbCE9PWYpfVRrKGMpfWNhdGNoKG5hKXtiPW5hO1k9PT1jJiZudWxsIT09YyYmKFk9Yz1jLnJldHVybik7Y29udGludWV9YnJlYWt9d2hpbGUoMSl9ZnVuY3Rpb24gS2soKXt2YXIgYT1uay5jdXJyZW50O25rLmN1cnJlbnQ9YWk7cmV0dXJuIG51bGw9PT1hP2FpOmF9XG5mdW5jdGlvbiB1aigpe2lmKDA9PT1UfHwzPT09VHx8Mj09PVQpVD00O251bGw9PT1SfHwwPT09KGhoJjI2ODQzNTQ1NSkmJjA9PT0ocmsmMjY4NDM1NDU1KXx8RGsoUixaKX1mdW5jdGlvbiBKayhhLGIpe3ZhciBjPUs7S3w9Mjt2YXIgZD1LaygpO2lmKFIhPT1hfHxaIT09Yil2az1udWxsLExrKGEsYik7ZG8gdHJ5e1VrKCk7YnJlYWt9Y2F0Y2goZSl7TmsoYSxlKX13aGlsZSgxKTtRZygpO0s9Yztuay5jdXJyZW50PWQ7aWYobnVsbCE9PVkpdGhyb3cgRXJyb3IocCgyNjEpKTtSPW51bGw7Wj0wO3JldHVybiBUfWZ1bmN0aW9uIFVrKCl7Zm9yKDtudWxsIT09WTspVmsoWSl9ZnVuY3Rpb24gTWsoKXtmb3IoO251bGwhPT1ZJiYhY2MoKTspVmsoWSl9ZnVuY3Rpb24gVmsoYSl7dmFyIGI9V2soYS5hbHRlcm5hdGUsYSxnaik7YS5tZW1vaXplZFByb3BzPWEucGVuZGluZ1Byb3BzO251bGw9PT1iP1RrKGEpOlk9Yjtvay5jdXJyZW50PW51bGx9XG5mdW5jdGlvbiBUayhhKXt2YXIgYj1hO2Rve3ZhciBjPWIuYWx0ZXJuYXRlO2E9Yi5yZXR1cm47aWYoMD09PShiLmZsYWdzJjMyNzY4KSl7aWYoYz1GaihjLGIsZ2opLG51bGwhPT1jKXtZPWM7cmV0dXJufX1lbHNle2M9SmooYyxiKTtpZihudWxsIT09Yyl7Yy5mbGFncyY9MzI3Njc7WT1jO3JldHVybn1pZihudWxsIT09YSlhLmZsYWdzfD0zMjc2OCxhLnN1YnRyZWVGbGFncz0wLGEuZGVsZXRpb25zPW51bGw7ZWxzZXtUPTY7WT1udWxsO3JldHVybn19Yj1iLnNpYmxpbmc7aWYobnVsbCE9PWIpe1k9YjtyZXR1cm59WT1iPWF9d2hpbGUobnVsbCE9PWIpOzA9PT1UJiYoVD01KX1mdW5jdGlvbiBRayhhLGIsYyl7dmFyIGQ9QyxlPXBrLnRyYW5zaXRpb247dHJ5e3BrLnRyYW5zaXRpb249bnVsbCxDPTEsWGsoYSxiLGMsZCl9ZmluYWxseXtway50cmFuc2l0aW9uPWUsQz1kfXJldHVybiBudWxsfVxuZnVuY3Rpb24gWGsoYSxiLGMsZCl7ZG8gSWsoKTt3aGlsZShudWxsIT09eGspO2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMyNykpO2M9YS5maW5pc2hlZFdvcms7dmFyIGU9YS5maW5pc2hlZExhbmVzO2lmKG51bGw9PT1jKXJldHVybiBudWxsO2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZExhbmVzPTA7aWYoYz09PWEuY3VycmVudCl0aHJvdyBFcnJvcihwKDE3NykpO2EuY2FsbGJhY2tOb2RlPW51bGw7YS5jYWxsYmFja1ByaW9yaXR5PTA7dmFyIGY9Yy5sYW5lc3xjLmNoaWxkTGFuZXM7QmMoYSxmKTthPT09UiYmKFk9Uj1udWxsLFo9MCk7MD09PShjLnN1YnRyZWVGbGFncyYyMDY0KSYmMD09PShjLmZsYWdzJjIwNjQpfHx3a3x8KHdrPSEwLEdrKGhjLGZ1bmN0aW9uKCl7SWsoKTtyZXR1cm4gbnVsbH0pKTtmPTAhPT0oYy5mbGFncyYxNTk5MCk7aWYoMCE9PShjLnN1YnRyZWVGbGFncyYxNTk5MCl8fGYpe2Y9cGsudHJhbnNpdGlvbjtway50cmFuc2l0aW9uPW51bGw7XG52YXIgZz1DO0M9MTt2YXIgaD1LO0t8PTQ7b2suY3VycmVudD1udWxsO1BqKGEsYyk7ZWsoYyxhKTtPZShEZik7ZGQ9ISFDZjtEZj1DZj1udWxsO2EuY3VycmVudD1jO2lrKGMsYSxlKTtkYygpO0s9aDtDPWc7cGsudHJhbnNpdGlvbj1mfWVsc2UgYS5jdXJyZW50PWM7d2smJih3az0hMSx4az1hLHlrPWUpO2Y9YS5wZW5kaW5nTGFuZXM7MD09PWYmJihTaT1udWxsKTttYyhjLnN0YXRlTm9kZSxkKTtFayhhLEIoKSk7aWYobnVsbCE9PWIpZm9yKGQ9YS5vblJlY292ZXJhYmxlRXJyb3IsYz0wO2M8Yi5sZW5ndGg7YysrKWU9YltjXSxkKGUudmFsdWUse2NvbXBvbmVudFN0YWNrOmUuc3RhY2ssZGlnZXN0OmUuZGlnZXN0fSk7aWYoUGkpdGhyb3cgUGk9ITEsYT1RaSxRaT1udWxsLGE7MCE9PSh5ayYxKSYmMCE9PWEudGFnJiZJaygpO2Y9YS5wZW5kaW5nTGFuZXM7MCE9PShmJjEpP2E9PT1Baz96aysrOih6az0wLEFrPWEpOnprPTA7amcoKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIElrKCl7aWYobnVsbCE9PXhrKXt2YXIgYT1EYyh5ayksYj1way50cmFuc2l0aW9uLGM9Qzt0cnl7cGsudHJhbnNpdGlvbj1udWxsO0M9MTY+YT8xNjphO2lmKG51bGw9PT14ayl2YXIgZD0hMTtlbHNle2E9eGs7eGs9bnVsbDt5az0wO2lmKDAhPT0oSyY2KSl0aHJvdyBFcnJvcihwKDMzMSkpO3ZhciBlPUs7S3w9NDtmb3IoVj1hLmN1cnJlbnQ7bnVsbCE9PVY7KXt2YXIgZj1WLGc9Zi5jaGlsZDtpZigwIT09KFYuZmxhZ3MmMTYpKXt2YXIgaD1mLmRlbGV0aW9ucztpZihudWxsIT09aCl7Zm9yKHZhciBrPTA7azxoLmxlbmd0aDtrKyspe3ZhciBsPWhba107Zm9yKFY9bDtudWxsIT09Vjspe3ZhciBtPVY7c3dpdGNoKG0udGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OlFqKDgsbSxmKX12YXIgcT1tLmNoaWxkO2lmKG51bGwhPT1xKXEucmV0dXJuPW0sVj1xO2Vsc2UgZm9yKDtudWxsIT09Vjspe209Vjt2YXIgcj1tLnNpYmxpbmcseT1tLnJldHVybjtUaihtKTtpZihtPT09XG5sKXtWPW51bGw7YnJlYWt9aWYobnVsbCE9PXIpe3IucmV0dXJuPXk7Vj1yO2JyZWFrfVY9eX19fXZhciBuPWYuYWx0ZXJuYXRlO2lmKG51bGwhPT1uKXt2YXIgdD1uLmNoaWxkO2lmKG51bGwhPT10KXtuLmNoaWxkPW51bGw7ZG97dmFyIEo9dC5zaWJsaW5nO3Quc2libGluZz1udWxsO3Q9Sn13aGlsZShudWxsIT09dCl9fVY9Zn19aWYoMCE9PShmLnN1YnRyZWVGbGFncyYyMDY0KSYmbnVsbCE9PWcpZy5yZXR1cm49ZixWPWc7ZWxzZSBiOmZvcig7bnVsbCE9PVY7KXtmPVY7aWYoMCE9PShmLmZsYWdzJjIwNDgpKXN3aXRjaChmLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpRaig5LGYsZi5yZXR1cm4pfXZhciB4PWYuc2libGluZztpZihudWxsIT09eCl7eC5yZXR1cm49Zi5yZXR1cm47Vj14O2JyZWFrIGJ9Vj1mLnJldHVybn19dmFyIHc9YS5jdXJyZW50O2ZvcihWPXc7bnVsbCE9PVY7KXtnPVY7dmFyIHU9Zy5jaGlsZDtpZigwIT09KGcuc3VidHJlZUZsYWdzJjIwNjQpJiZudWxsIT09XG51KXUucmV0dXJuPWcsVj11O2Vsc2UgYjpmb3IoZz13O251bGwhPT1WOyl7aD1WO2lmKDAhPT0oaC5mbGFncyYyMDQ4KSl0cnl7c3dpdGNoKGgudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OlJqKDksaCl9fWNhdGNoKG5hKXtXKGgsaC5yZXR1cm4sbmEpfWlmKGg9PT1nKXtWPW51bGw7YnJlYWsgYn12YXIgRj1oLnNpYmxpbmc7aWYobnVsbCE9PUYpe0YucmV0dXJuPWgucmV0dXJuO1Y9RjticmVhayBifVY9aC5yZXR1cm59fUs9ZTtqZygpO2lmKGxjJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgbGMub25Qb3N0Q29tbWl0RmliZXJSb290KXRyeXtsYy5vblBvc3RDb21taXRGaWJlclJvb3Qoa2MsYSl9Y2F0Y2gobmEpe31kPSEwfXJldHVybiBkfWZpbmFsbHl7Qz1jLHBrLnRyYW5zaXRpb249Yn19cmV0dXJuITF9ZnVuY3Rpb24gWWsoYSxiLGMpe2I9S2koYyxiKTtiPU9pKGEsYiwxKTthPWRoKGEsYiwxKTtiPUwoKTtudWxsIT09YSYmKEFjKGEsMSxiKSxFayhhLGIpKX1cbmZ1bmN0aW9uIFcoYSxiLGMpe2lmKDM9PT1hLnRhZylZayhhLGEsYyk7ZWxzZSBmb3IoO251bGwhPT1iOyl7aWYoMz09PWIudGFnKXtZayhiLGEsYyk7YnJlYWt9ZWxzZSBpZigxPT09Yi50YWcpe3ZhciBkPWIuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1TaXx8IVNpLmhhcyhkKSkpe2E9S2koYyxhKTthPVJpKGIsYSwxKTtiPWRoKGIsYSwxKTthPUwoKTtudWxsIT09YiYmKEFjKGIsMSxhKSxFayhiLGEpKTticmVha319Yj1iLnJldHVybn19XG5mdW5jdGlvbiBVaShhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7bnVsbCE9PWQmJmQuZGVsZXRlKGIpO2I9TCgpO2EucGluZ2VkTGFuZXN8PWEuc3VzcGVuZGVkTGFuZXMmYztSPT09YSYmKFomYyk9PT1jJiYoND09PVR8fDM9PT1UJiYoWiYxMzAwMjM0MjQpPT09WiYmNTAwPkIoKS1naz9MayhhLDApOnNrfD1jKTtFayhhLGIpfWZ1bmN0aW9uIFprKGEsYil7MD09PWImJigwPT09KGEubW9kZSYxKT9iPTE6KGI9c2Msc2M8PD0xLDA9PT0oc2MmMTMwMDIzNDI0KSYmKHNjPTQxOTQzMDQpKSk7dmFyIGM9TCgpO2E9WmcoYSxiKTtudWxsIT09YSYmKEFjKGEsYixjKSxFayhhLGMpKX1mdW5jdGlvbiB2aihhKXt2YXIgYj1hLm1lbW9pemVkU3RhdGUsYz0wO251bGwhPT1iJiYoYz1iLnJldHJ5TGFuZSk7WmsoYSxjKX1cbmZ1bmN0aW9uIGNrKGEsYil7dmFyIGM9MDtzd2l0Y2goYS50YWcpe2Nhc2UgMTM6dmFyIGQ9YS5zdGF0ZU5vZGU7dmFyIGU9YS5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoYz1lLnJldHJ5TGFuZSk7YnJlYWs7Y2FzZSAxOTpkPWEuc3RhdGVOb2RlO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IocCgzMTQpKTt9bnVsbCE9PWQmJmQuZGVsZXRlKGIpO1prKGEsYyl9dmFyIFdrO1xuV2s9ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGwhPT1hKWlmKGEubWVtb2l6ZWRQcm9wcyE9PWIucGVuZGluZ1Byb3BzfHxXZi5jdXJyZW50KVVnPSEwO2Vsc2V7aWYoMD09PShhLmxhbmVzJmMpJiYwPT09KGIuZmxhZ3MmMTI4KSlyZXR1cm4gVWc9ITEsemooYSxiLGMpO1VnPTAhPT0oYS5mbGFncyYxMzEwNzIpPyEwOiExfWVsc2UgVWc9ITEsSSYmMCE9PShiLmZsYWdzJjEwNDg1NzYpJiZ1ZyhiLG5nLGIuaW5kZXgpO2IubGFuZXM9MDtzd2l0Y2goYi50YWcpe2Nhc2UgMjp2YXIgZD1iLnR5cGU7amooYSxiKTthPWIucGVuZGluZ1Byb3BzO3ZhciBlPVlmKGIsSC5jdXJyZW50KTtUZyhiLGMpO2U9WGgobnVsbCxiLGQsYSxlLGMpO3ZhciBmPWJpKCk7Yi5mbGFnc3w9MTtcIm9iamVjdFwiPT09dHlwZW9mIGUmJm51bGwhPT1lJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5yZW5kZXImJnZvaWQgMD09PWUuJCR0eXBlb2Y/KGIudGFnPTEsYi5tZW1vaXplZFN0YXRlPW51bGwsYi51cGRhdGVRdWV1ZT1cbm51bGwsWmYoZCk/KGY9ITAsY2coYikpOmY9ITEsYi5tZW1vaXplZFN0YXRlPW51bGwhPT1lLnN0YXRlJiZ2b2lkIDAhPT1lLnN0YXRlP2Uuc3RhdGU6bnVsbCxhaChiKSxlLnVwZGF0ZXI9bmgsYi5zdGF0ZU5vZGU9ZSxlLl9yZWFjdEludGVybmFscz1iLHJoKGIsZCxhLGMpLGI9a2oobnVsbCxiLGQsITAsZixjKSk6KGIudGFnPTAsSSYmZiYmdmcoYiksWWkobnVsbCxiLGUsYyksYj1iLmNoaWxkKTtyZXR1cm4gYjtjYXNlIDE2OmQ9Yi5lbGVtZW50VHlwZTthOntqaihhLGIpO2E9Yi5wZW5kaW5nUHJvcHM7ZT1kLl9pbml0O2Q9ZShkLl9wYXlsb2FkKTtiLnR5cGU9ZDtlPWIudGFnPSRrKGQpO2E9TGcoZCxhKTtzd2l0Y2goZSl7Y2FzZSAwOmI9ZGoobnVsbCxiLGQsYSxjKTticmVhayBhO2Nhc2UgMTpiPWlqKG51bGwsYixkLGEsYyk7YnJlYWsgYTtjYXNlIDExOmI9WmkobnVsbCxiLGQsYSxjKTticmVhayBhO2Nhc2UgMTQ6Yj1haihudWxsLGIsZCxMZyhkLnR5cGUsYSksYyk7YnJlYWsgYX10aHJvdyBFcnJvcihwKDMwNixcbmQsXCJcIikpO31yZXR1cm4gYjtjYXNlIDA6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkxnKGQsZSksZGooYSxiLGQsZSxjKTtjYXNlIDE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkxnKGQsZSksaWooYSxiLGQsZSxjKTtjYXNlIDM6YTp7bGooYik7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IocCgzODcpKTtkPWIucGVuZGluZ1Byb3BzO2Y9Yi5tZW1vaXplZFN0YXRlO2U9Zi5lbGVtZW50O2JoKGEsYik7Z2goYixkLG51bGwsYyk7dmFyIGc9Yi5tZW1vaXplZFN0YXRlO2Q9Zy5lbGVtZW50O2lmKGYuaXNEZWh5ZHJhdGVkKWlmKGY9e2VsZW1lbnQ6ZCxpc0RlaHlkcmF0ZWQ6ITEsY2FjaGU6Zy5jYWNoZSxwZW5kaW5nU3VzcGVuc2VCb3VuZGFyaWVzOmcucGVuZGluZ1N1c3BlbnNlQm91bmRhcmllcyx0cmFuc2l0aW9uczpnLnRyYW5zaXRpb25zfSxiLnVwZGF0ZVF1ZXVlLmJhc2VTdGF0ZT1cbmYsYi5tZW1vaXplZFN0YXRlPWYsYi5mbGFncyYyNTYpe2U9S2koRXJyb3IocCg0MjMpKSxiKTtiPW1qKGEsYixkLGMsZSk7YnJlYWsgYX1lbHNlIGlmKGQhPT1lKXtlPUtpKEVycm9yKHAoNDI0KSksYik7Yj1taihhLGIsZCxjLGUpO2JyZWFrIGF9ZWxzZSBmb3IoeWc9TGYoYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mby5maXJzdENoaWxkKSx4Zz1iLEk9ITAsemc9bnVsbCxjPUNoKGIsbnVsbCxkLGMpLGIuY2hpbGQ9YztjOyljLmZsYWdzPWMuZmxhZ3MmLTN8NDA5NixjPWMuc2libGluZztlbHNle0lnKCk7aWYoZD09PWUpe2I9JGkoYSxiLGMpO2JyZWFrIGF9WWkoYSxiLGQsYyl9Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgNTpyZXR1cm4gS2goYiksbnVsbD09PWEmJkVnKGIpLGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6bnVsbCxnPWUuY2hpbGRyZW4sRWYoZCxlKT9nPW51bGw6bnVsbCE9PWYmJkVmKGQsZikmJihiLmZsYWdzfD0zMiksXG5oaihhLGIpLFlpKGEsYixnLGMpLGIuY2hpbGQ7Y2FzZSA2OnJldHVybiBudWxsPT09YSYmRWcoYiksbnVsbDtjYXNlIDEzOnJldHVybiBwaihhLGIsYyk7Y2FzZSA0OnJldHVybiBJaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pLGQ9Yi5wZW5kaW5nUHJvcHMsbnVsbD09PWE/Yi5jaGlsZD1CaChiLG51bGwsZCxjKTpZaShhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOkxnKGQsZSksWmkoYSxiLGQsZSxjKTtjYXNlIDc6cmV0dXJuIFlpKGEsYixiLnBlbmRpbmdQcm9wcyxjKSxiLmNoaWxkO2Nhc2UgODpyZXR1cm4gWWkoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMjpyZXR1cm4gWWkoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMDphOntkPWIudHlwZS5fY29udGV4dDtlPWIucGVuZGluZ1Byb3BzO2Y9Yi5tZW1vaXplZFByb3BzO1xuZz1lLnZhbHVlO0coTWcsZC5fY3VycmVudFZhbHVlKTtkLl9jdXJyZW50VmFsdWU9ZztpZihudWxsIT09ZilpZihIZShmLnZhbHVlLGcpKXtpZihmLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmIVdmLmN1cnJlbnQpe2I9JGkoYSxiLGMpO2JyZWFrIGF9fWVsc2UgZm9yKGY9Yi5jaGlsZCxudWxsIT09ZiYmKGYucmV0dXJuPWIpO251bGwhPT1mOyl7dmFyIGg9Zi5kZXBlbmRlbmNpZXM7aWYobnVsbCE9PWgpe2c9Zi5jaGlsZDtmb3IodmFyIGs9aC5maXJzdENvbnRleHQ7bnVsbCE9PWs7KXtpZihrLmNvbnRleHQ9PT1kKXtpZigxPT09Zi50YWcpe2s9Y2goLTEsYyYtYyk7ay50YWc9Mjt2YXIgbD1mLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1sKXtsPWwuc2hhcmVkO3ZhciBtPWwucGVuZGluZztudWxsPT09bT9rLm5leHQ9azooay5uZXh0PW0ubmV4dCxtLm5leHQ9ayk7bC5wZW5kaW5nPWt9fWYubGFuZXN8PWM7az1mLmFsdGVybmF0ZTtudWxsIT09ayYmKGsubGFuZXN8PWMpO1NnKGYucmV0dXJuLFxuYyxiKTtoLmxhbmVzfD1jO2JyZWFrfWs9ay5uZXh0fX1lbHNlIGlmKDEwPT09Zi50YWcpZz1mLnR5cGU9PT1iLnR5cGU/bnVsbDpmLmNoaWxkO2Vsc2UgaWYoMTg9PT1mLnRhZyl7Zz1mLnJldHVybjtpZihudWxsPT09Zyl0aHJvdyBFcnJvcihwKDM0MSkpO2cubGFuZXN8PWM7aD1nLmFsdGVybmF0ZTtudWxsIT09aCYmKGgubGFuZXN8PWMpO1NnKGcsYyxiKTtnPWYuc2libGluZ31lbHNlIGc9Zi5jaGlsZDtpZihudWxsIT09ZylnLnJldHVybj1mO2Vsc2UgZm9yKGc9ZjtudWxsIT09Zzspe2lmKGc9PT1iKXtnPW51bGw7YnJlYWt9Zj1nLnNpYmxpbmc7aWYobnVsbCE9PWYpe2YucmV0dXJuPWcucmV0dXJuO2c9ZjticmVha31nPWcucmV0dXJufWY9Z31ZaShhLGIsZS5jaGlsZHJlbixjKTtiPWIuY2hpbGR9cmV0dXJuIGI7Y2FzZSA5OnJldHVybiBlPWIudHlwZSxkPWIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLFRnKGIsYyksZT1WZyhlKSxkPWQoZSksYi5mbGFnc3w9MSxZaShhLGIsZCxjKSxcbmIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZD1iLnR5cGUsZT1MZyhkLGIucGVuZGluZ1Byb3BzKSxlPUxnKGQudHlwZSxlKSxhaihhLGIsZCxlLGMpO2Nhc2UgMTU6cmV0dXJuIGNqKGEsYixiLnR5cGUsYi5wZW5kaW5nUHJvcHMsYyk7Y2FzZSAxNzpyZXR1cm4gZD1iLnR5cGUsZT1iLnBlbmRpbmdQcm9wcyxlPWIuZWxlbWVudFR5cGU9PT1kP2U6TGcoZCxlKSxqaihhLGIpLGIudGFnPTEsWmYoZCk/KGE9ITAsY2coYikpOmE9ITEsVGcoYixjKSxwaChiLGQsZSkscmgoYixkLGUsYyksa2oobnVsbCxiLGQsITAsYSxjKTtjYXNlIDE5OnJldHVybiB5aihhLGIsYyk7Y2FzZSAyMjpyZXR1cm4gZWooYSxiLGMpfXRocm93IEVycm9yKHAoMTU2LGIudGFnKSk7fTtmdW5jdGlvbiBHayhhLGIpe3JldHVybiBhYyhhLGIpfVxuZnVuY3Rpb24gYWwoYSxiLGMsZCl7dGhpcy50YWc9YTt0aGlzLmtleT1jO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXMucmV0dXJuPXRoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT10aGlzLmVsZW1lbnRUeXBlPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLmRlcGVuZGVuY2llcz10aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLnN1YnRyZWVGbGFncz10aGlzLmZsYWdzPTA7dGhpcy5kZWxldGlvbnM9bnVsbDt0aGlzLmNoaWxkTGFuZXM9dGhpcy5sYW5lcz0wO3RoaXMuYWx0ZXJuYXRlPW51bGx9ZnVuY3Rpb24gQmcoYSxiLGMsZCl7cmV0dXJuIG5ldyBhbChhLGIsYyxkKX1mdW5jdGlvbiBiaihhKXthPWEucHJvdG90eXBlO3JldHVybiEoIWF8fCFhLmlzUmVhY3RDb21wb25lbnQpfVxuZnVuY3Rpb24gJGsoYSl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGJqKGEpPzE6MDtpZih2b2lkIDAhPT1hJiZudWxsIT09YSl7YT1hLiQkdHlwZW9mO2lmKGE9PT1EYSlyZXR1cm4gMTE7aWYoYT09PUdhKXJldHVybiAxNH1yZXR1cm4gMn1cbmZ1bmN0aW9uIHdoKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbD09PWM/KGM9QmcoYS50YWcsYixhLmtleSxhLm1vZGUpLGMuZWxlbWVudFR5cGU9YS5lbGVtZW50VHlwZSxjLnR5cGU9YS50eXBlLGMuc3RhdGVOb2RlPWEuc3RhdGVOb2RlLGMuYWx0ZXJuYXRlPWEsYS5hbHRlcm5hdGU9Yyk6KGMucGVuZGluZ1Byb3BzPWIsYy50eXBlPWEudHlwZSxjLmZsYWdzPTAsYy5zdWJ0cmVlRmxhZ3M9MCxjLmRlbGV0aW9ucz1udWxsKTtjLmZsYWdzPWEuZmxhZ3MmMTQ2ODAwNjQ7Yy5jaGlsZExhbmVzPWEuY2hpbGRMYW5lcztjLmxhbmVzPWEubGFuZXM7Yy5jaGlsZD1hLmNoaWxkO2MubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7Yy5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtjLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7Yj1hLmRlcGVuZGVuY2llcztjLmRlcGVuZGVuY2llcz1udWxsPT09Yj9udWxsOntsYW5lczpiLmxhbmVzLGZpcnN0Q29udGV4dDpiLmZpcnN0Q29udGV4dH07XG5jLnNpYmxpbmc9YS5zaWJsaW5nO2MuaW5kZXg9YS5pbmRleDtjLnJlZj1hLnJlZjtyZXR1cm4gY31cbmZ1bmN0aW9uIHloKGEsYixjLGQsZSxmKXt2YXIgZz0yO2Q9YTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSliaihhKSYmKGc9MSk7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpZz01O2Vsc2UgYTpzd2l0Y2goYSl7Y2FzZSB5YTpyZXR1cm4gQWgoYy5jaGlsZHJlbixlLGYsYik7Y2FzZSB6YTpnPTg7ZXw9ODticmVhaztjYXNlIEFhOnJldHVybiBhPUJnKDEyLGMsYixlfDIpLGEuZWxlbWVudFR5cGU9QWEsYS5sYW5lcz1mLGE7Y2FzZSBFYTpyZXR1cm4gYT1CZygxMyxjLGIsZSksYS5lbGVtZW50VHlwZT1FYSxhLmxhbmVzPWYsYTtjYXNlIEZhOnJldHVybiBhPUJnKDE5LGMsYixlKSxhLmVsZW1lbnRUeXBlPUZhLGEubGFuZXM9ZixhO2Nhc2UgSWE6cmV0dXJuIHFqKGMsZSxmLGIpO2RlZmF1bHQ6aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSlzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBCYTpnPTEwO2JyZWFrIGE7Y2FzZSBDYTpnPTk7YnJlYWsgYTtjYXNlIERhOmc9MTE7XG5icmVhayBhO2Nhc2UgR2E6Zz0xNDticmVhayBhO2Nhc2UgSGE6Zz0xNjtkPW51bGw7YnJlYWsgYX10aHJvdyBFcnJvcihwKDEzMCxudWxsPT1hP2E6dHlwZW9mIGEsXCJcIikpO31iPUJnKGcsYyxiLGUpO2IuZWxlbWVudFR5cGU9YTtiLnR5cGU9ZDtiLmxhbmVzPWY7cmV0dXJuIGJ9ZnVuY3Rpb24gQWgoYSxiLGMsZCl7YT1CZyg3LGEsZCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9ZnVuY3Rpb24gcWooYSxiLGMsZCl7YT1CZygyMixhLGQsYik7YS5lbGVtZW50VHlwZT1JYTthLmxhbmVzPWM7YS5zdGF0ZU5vZGU9e2lzSGlkZGVuOiExfTtyZXR1cm4gYX1mdW5jdGlvbiB4aChhLGIsYyl7YT1CZyg2LGEsbnVsbCxiKTthLmxhbmVzPWM7cmV0dXJuIGF9XG5mdW5jdGlvbiB6aChhLGIsYyl7Yj1CZyg0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5sYW5lcz1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGJsKGEsYixjLGQsZSl7dGhpcy50YWc9Yjt0aGlzLmNvbnRhaW5lckluZm89YTt0aGlzLmZpbmlzaGVkV29yaz10aGlzLnBpbmdDYWNoZT10aGlzLmN1cnJlbnQ9dGhpcy5wZW5kaW5nQ2hpbGRyZW49bnVsbDt0aGlzLnRpbWVvdXRIYW5kbGU9LTE7dGhpcy5jYWxsYmFja05vZGU9dGhpcy5wZW5kaW5nQ29udGV4dD10aGlzLmNvbnRleHQ9bnVsbDt0aGlzLmNhbGxiYWNrUHJpb3JpdHk9MDt0aGlzLmV2ZW50VGltZXM9emMoMCk7dGhpcy5leHBpcmF0aW9uVGltZXM9emMoLTEpO3RoaXMuZW50YW5nbGVkTGFuZXM9dGhpcy5maW5pc2hlZExhbmVzPXRoaXMubXV0YWJsZVJlYWRMYW5lcz10aGlzLmV4cGlyZWRMYW5lcz10aGlzLnBpbmdlZExhbmVzPXRoaXMuc3VzcGVuZGVkTGFuZXM9dGhpcy5wZW5kaW5nTGFuZXM9MDt0aGlzLmVudGFuZ2xlbWVudHM9emMoMCk7dGhpcy5pZGVudGlmaWVyUHJlZml4PWQ7dGhpcy5vblJlY292ZXJhYmxlRXJyb3I9ZTt0aGlzLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGE9XG5udWxsfWZ1bmN0aW9uIGNsKGEsYixjLGQsZSxmLGcsaCxrKXthPW5ldyBibChhLGIsYyxoLGspOzE9PT1iPyhiPTEsITA9PT1mJiYoYnw9OCkpOmI9MDtmPUJnKDMsbnVsbCxudWxsLGIpO2EuY3VycmVudD1mO2Yuc3RhdGVOb2RlPWE7Zi5tZW1vaXplZFN0YXRlPXtlbGVtZW50OmQsaXNEZWh5ZHJhdGVkOmMsY2FjaGU6bnVsbCx0cmFuc2l0aW9uczpudWxsLHBlbmRpbmdTdXNwZW5zZUJvdW5kYXJpZXM6bnVsbH07YWgoZik7cmV0dXJuIGF9ZnVuY3Rpb24gZGwoYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjp3YSxrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1cbmZ1bmN0aW9uIGVsKGEpe2lmKCFhKXJldHVybiBWZjthPWEuX3JlYWN0SW50ZXJuYWxzO2E6e2lmKFZiKGEpIT09YXx8MSE9PWEudGFnKXRocm93IEVycm9yKHAoMTcwKSk7dmFyIGI9YTtkb3tzd2l0Y2goYi50YWcpe2Nhc2UgMzpiPWIuc3RhdGVOb2RlLmNvbnRleHQ7YnJlYWsgYTtjYXNlIDE6aWYoWmYoYi50eXBlKSl7Yj1iLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDticmVhayBhfX1iPWIucmV0dXJufXdoaWxlKG51bGwhPT1iKTt0aHJvdyBFcnJvcihwKDE3MSkpO31pZigxPT09YS50YWcpe3ZhciBjPWEudHlwZTtpZihaZihjKSlyZXR1cm4gYmcoYSxjLGIpfXJldHVybiBifVxuZnVuY3Rpb24gZmwoYSxiLGMsZCxlLGYsZyxoLGspe2E9Y2woYyxkLCEwLGEsZSxmLGcsaCxrKTthLmNvbnRleHQ9ZWwobnVsbCk7Yz1hLmN1cnJlbnQ7ZD1MKCk7ZT1saChjKTtmPWNoKGQsZSk7Zi5jYWxsYmFjaz12b2lkIDAhPT1iJiZudWxsIT09Yj9iOm51bGw7ZGgoYyxmLGUpO2EuY3VycmVudC5sYW5lcz1lO0FjKGEsZSxkKTtFayhhLGQpO3JldHVybiBhfWZ1bmN0aW9uIGdsKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPUwoKSxnPWxoKGUpO2M9ZWwoYyk7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj1jaChmLGcpO2IucGF5bG9hZD17ZWxlbWVudDphfTtkPXZvaWQgMD09PWQ/bnVsbDpkO251bGwhPT1kJiYoYi5jYWxsYmFjaz1kKTthPWRoKGUsYixnKTtudWxsIT09YSYmKG1oKGEsZSxnLGYpLGVoKGEsZSxnKSk7cmV0dXJuIGd9XG5mdW5jdGlvbiBobChhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uIGlsKGEsYil7YT1hLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQpe3ZhciBjPWEucmV0cnlMYW5lO2EucmV0cnlMYW5lPTAhPT1jJiZjPGI/YzpifX1mdW5jdGlvbiBqbChhLGIpe2lsKGEsYik7KGE9YS5hbHRlcm5hdGUpJiZpbChhLGIpfWZ1bmN0aW9uIGtsKCl7cmV0dXJuIG51bGx9dmFyIGxsPVwiZnVuY3Rpb25cIj09PXR5cGVvZiByZXBvcnRFcnJvcj9yZXBvcnRFcnJvcjpmdW5jdGlvbihhKXtjb25zb2xlLmVycm9yKGEpfTtmdW5jdGlvbiBtbChhKXt0aGlzLl9pbnRlcm5hbFJvb3Q9YX1cbm5sLnByb3RvdHlwZS5yZW5kZXI9bWwucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhKXt2YXIgYj10aGlzLl9pbnRlcm5hbFJvb3Q7aWYobnVsbD09PWIpdGhyb3cgRXJyb3IocCg0MDkpKTtnbChhLGIsbnVsbCxudWxsKX07bmwucHJvdG90eXBlLnVubW91bnQ9bWwucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9pbnRlcm5hbFJvb3Q7aWYobnVsbCE9PWEpe3RoaXMuX2ludGVybmFsUm9vdD1udWxsO3ZhciBiPWEuY29udGFpbmVySW5mbztTayhmdW5jdGlvbigpe2dsKG51bGwsYSxudWxsLG51bGwpfSk7Ylt1Zl09bnVsbH19O2Z1bmN0aW9uIG5sKGEpe3RoaXMuX2ludGVybmFsUm9vdD1hfVxubmwucHJvdG90eXBlLnVuc3RhYmxlX3NjaGVkdWxlSHlkcmF0aW9uPWZ1bmN0aW9uKGEpe2lmKGEpe3ZhciBiPUhjKCk7YT17YmxvY2tlZE9uOm51bGwsdGFyZ2V0OmEscHJpb3JpdHk6Yn07Zm9yKHZhciBjPTA7YzxRYy5sZW5ndGgmJjAhPT1iJiZiPFFjW2NdLnByaW9yaXR5O2MrKyk7UWMuc3BsaWNlKGMsMCxhKTswPT09YyYmVmMoYSl9fTtmdW5jdGlvbiBvbChhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSl9ZnVuY3Rpb24gcGwoYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfWZ1bmN0aW9uIHFsKCl7fVxuZnVuY3Rpb24gcmwoYSxiLGMsZCxlKXtpZihlKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGY9ZDtkPWZ1bmN0aW9uKCl7dmFyIGE9aGwoZyk7Zi5jYWxsKGEpfX12YXIgZz1mbChiLGQsYSwwLG51bGwsITEsITEsXCJcIixxbCk7YS5fcmVhY3RSb290Q29udGFpbmVyPWc7YVt1Zl09Zy5jdXJyZW50O3NmKDg9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphKTtTaygpO3JldHVybiBnfWZvcig7ZT1hLmxhc3RDaGlsZDspYS5yZW1vdmVDaGlsZChlKTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGg9ZDtkPWZ1bmN0aW9uKCl7dmFyIGE9aGwoayk7aC5jYWxsKGEpfX12YXIgaz1jbChhLDAsITEsbnVsbCxudWxsLCExLCExLFwiXCIscWwpO2EuX3JlYWN0Um9vdENvbnRhaW5lcj1rO2FbdWZdPWsuY3VycmVudDtzZig4PT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YSk7U2soZnVuY3Rpb24oKXtnbChiLGssYyxkKX0pO3JldHVybiBrfVxuZnVuY3Rpb24gc2woYSxiLGMsZCxlKXt2YXIgZj1jLl9yZWFjdFJvb3RDb250YWluZXI7aWYoZil7dmFyIGc9ZjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGg9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9aGwoZyk7aC5jYWxsKGEpfX1nbChiLGcsYSxlKX1lbHNlIGc9cmwoYyxiLGEsZSxkKTtyZXR1cm4gaGwoZyl9RWM9ZnVuY3Rpb24oYSl7c3dpdGNoKGEudGFnKXtjYXNlIDM6dmFyIGI9YS5zdGF0ZU5vZGU7aWYoYi5jdXJyZW50Lm1lbW9pemVkU3RhdGUuaXNEZWh5ZHJhdGVkKXt2YXIgYz10YyhiLnBlbmRpbmdMYW5lcyk7MCE9PWMmJihDYyhiLGN8MSksRWsoYixCKCkpLDA9PT0oSyY2KSYmKEhqPUIoKSs1MDAsamcoKSkpfWJyZWFrO2Nhc2UgMTM6U2soZnVuY3Rpb24oKXt2YXIgYj1aZyhhLDEpO2lmKG51bGwhPT1iKXt2YXIgYz1MKCk7bWgoYixhLDEsYyl9fSksamwoYSwxKX19O1xuRmM9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9WmcoYSwxMzQyMTc3MjgpO2lmKG51bGwhPT1iKXt2YXIgYz1MKCk7bWgoYixhLDEzNDIxNzcyOCxjKX1qbChhLDEzNDIxNzcyOCl9fTtHYz1mdW5jdGlvbihhKXtpZigxMz09PWEudGFnKXt2YXIgYj1saChhKSxjPVpnKGEsYik7aWYobnVsbCE9PWMpe3ZhciBkPUwoKTttaChjLGEsYixkKX1qbChhLGIpfX07SGM9ZnVuY3Rpb24oKXtyZXR1cm4gQ307SWM9ZnVuY3Rpb24oYSxiKXt2YXIgYz1DO3RyeXtyZXR1cm4gQz1hLGIoKX1maW5hbGx5e0M9Y319O1xueWI9ZnVuY3Rpb24oYSxiLGMpe3N3aXRjaChiKXtjYXNlIFwiaW5wdXRcIjpiYihhLGMpO2I9Yy5uYW1lO2lmKFwicmFkaW9cIj09PWMudHlwZSYmbnVsbCE9Yil7Zm9yKGM9YTtjLnBhcmVudE5vZGU7KWM9Yy5wYXJlbnROb2RlO2M9Yy5xdWVyeVNlbGVjdG9yQWxsKFwiaW5wdXRbbmFtZT1cIitKU09OLnN0cmluZ2lmeShcIlwiK2IpKyddW3R5cGU9XCJyYWRpb1wiXScpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspe3ZhciBkPWNbYl07aWYoZCE9PWEmJmQuZm9ybT09PWEuZm9ybSl7dmFyIGU9RGIoZCk7aWYoIWUpdGhyb3cgRXJyb3IocCg5MCkpO1dhKGQpO2JiKGQsZSl9fX1icmVhaztjYXNlIFwidGV4dGFyZWFcIjppYihhLGMpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpiPWMudmFsdWUsbnVsbCE9YiYmZmIoYSwhIWMubXVsdGlwbGUsYiwhMSl9fTtHYj1SaztIYj1TaztcbnZhciB0bD17dXNpbmdDbGllbnRFbnRyeVBvaW50OiExLEV2ZW50czpbQ2IsdWUsRGIsRWIsRmIsUmtdfSx1bD17ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6V2MsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxOC4yLjBcIixyZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9O1xudmFyIHZsPXtidW5kbGVUeXBlOnVsLmJ1bmRsZVR5cGUsdmVyc2lvbjp1bC52ZXJzaW9uLHJlbmRlcmVyUGFja2FnZU5hbWU6dWwucmVuZGVyZXJQYWNrYWdlTmFtZSxyZW5kZXJlckNvbmZpZzp1bC5yZW5kZXJlckNvbmZpZyxvdmVycmlkZUhvb2tTdGF0ZTpudWxsLG92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aDpudWxsLG92ZXJyaWRlUHJvcHM6bnVsbCxvdmVycmlkZVByb3BzRGVsZXRlUGF0aDpudWxsLG92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoOm51bGwsc2V0RXJyb3JIYW5kbGVyOm51bGwsc2V0U3VzcGVuc2VIYW5kbGVyOm51bGwsc2NoZWR1bGVVcGRhdGU6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjp1YS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9WmIoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOnVsLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlfHxcbmtsLGZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaDpudWxsLHNjaGVkdWxlUmVmcmVzaDpudWxsLHNjaGVkdWxlUm9vdDpudWxsLHNldFJlZnJlc2hIYW5kbGVyOm51bGwsZ2V0Q3VycmVudEZpYmVyOm51bGwscmVjb25jaWxlclZlcnNpb246XCIxOC4yLjAtbmV4dC05ZTNiNzcyYjgtMjAyMjA2MDhcIn07aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18pe3ZhciB3bD1fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187aWYoIXdsLmlzRGlzYWJsZWQmJndsLnN1cHBvcnRzRmliZXIpdHJ5e2tjPXdsLmluamVjdCh2bCksbGM9d2x9Y2F0Y2goYSl7fX1leHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPXRsO1xuZXhwb3J0cy5jcmVhdGVQb3J0YWw9ZnVuY3Rpb24oYSxiKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDtpZighb2woYikpdGhyb3cgRXJyb3IocCgyMDApKTtyZXR1cm4gZGwoYSxiLG51bGwsYyl9O2V4cG9ydHMuY3JlYXRlUm9vdD1mdW5jdGlvbihhLGIpe2lmKCFvbChhKSl0aHJvdyBFcnJvcihwKDI5OSkpO3ZhciBjPSExLGQ9XCJcIixlPWxsO251bGwhPT1iJiZ2b2lkIDAhPT1iJiYoITA9PT1iLnVuc3RhYmxlX3N0cmljdE1vZGUmJihjPSEwKSx2b2lkIDAhPT1iLmlkZW50aWZpZXJQcmVmaXgmJihkPWIuaWRlbnRpZmllclByZWZpeCksdm9pZCAwIT09Yi5vblJlY292ZXJhYmxlRXJyb3ImJihlPWIub25SZWNvdmVyYWJsZUVycm9yKSk7Yj1jbChhLDEsITEsbnVsbCxudWxsLGMsITEsZCxlKTthW3VmXT1iLmN1cnJlbnQ7c2YoOD09PWEubm9kZVR5cGU/YS5wYXJlbnROb2RlOmEpO3JldHVybiBuZXcgbWwoYil9O1xuZXhwb3J0cy5maW5kRE9NTm9kZT1mdW5jdGlvbihhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKDE9PT1hLm5vZGVUeXBlKXJldHVybiBhO3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxzO2lmKHZvaWQgMD09PWIpe2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhLnJlbmRlcil0aHJvdyBFcnJvcihwKDE4OCkpO2E9T2JqZWN0LmtleXMoYSkuam9pbihcIixcIik7dGhyb3cgRXJyb3IocCgyNjgsYSkpO31hPVpiKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX07ZXhwb3J0cy5mbHVzaFN5bmM9ZnVuY3Rpb24oYSl7cmV0dXJuIFNrKGEpfTtleHBvcnRzLmh5ZHJhdGU9ZnVuY3Rpb24oYSxiLGMpe2lmKCFwbChiKSl0aHJvdyBFcnJvcihwKDIwMCkpO3JldHVybiBzbChudWxsLGEsYiwhMCxjKX07XG5leHBvcnRzLmh5ZHJhdGVSb290PWZ1bmN0aW9uKGEsYixjKXtpZighb2woYSkpdGhyb3cgRXJyb3IocCg0MDUpKTt2YXIgZD1udWxsIT1jJiZjLmh5ZHJhdGVkU291cmNlc3x8bnVsbCxlPSExLGY9XCJcIixnPWxsO251bGwhPT1jJiZ2b2lkIDAhPT1jJiYoITA9PT1jLnVuc3RhYmxlX3N0cmljdE1vZGUmJihlPSEwKSx2b2lkIDAhPT1jLmlkZW50aWZpZXJQcmVmaXgmJihmPWMuaWRlbnRpZmllclByZWZpeCksdm9pZCAwIT09Yy5vblJlY292ZXJhYmxlRXJyb3ImJihnPWMub25SZWNvdmVyYWJsZUVycm9yKSk7Yj1mbChiLG51bGwsYSwxLG51bGwhPWM/YzpudWxsLGUsITEsZixnKTthW3VmXT1iLmN1cnJlbnQ7c2YoYSk7aWYoZClmb3IoYT0wO2E8ZC5sZW5ndGg7YSsrKWM9ZFthXSxlPWMuX2dldFZlcnNpb24sZT1lKGMuX3NvdXJjZSksbnVsbD09Yi5tdXRhYmxlU291cmNlRWFnZXJIeWRyYXRpb25EYXRhP2IubXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YT1bYyxlXTpiLm11dGFibGVTb3VyY2VFYWdlckh5ZHJhdGlvbkRhdGEucHVzaChjLFxuZSk7cmV0dXJuIG5ldyBubChiKX07ZXhwb3J0cy5yZW5kZXI9ZnVuY3Rpb24oYSxiLGMpe2lmKCFwbChiKSl0aHJvdyBFcnJvcihwKDIwMCkpO3JldHVybiBzbChudWxsLGEsYiwhMSxjKX07ZXhwb3J0cy51bm1vdW50Q29tcG9uZW50QXROb2RlPWZ1bmN0aW9uKGEpe2lmKCFwbChhKSl0aHJvdyBFcnJvcihwKDQwKSk7cmV0dXJuIGEuX3JlYWN0Um9vdENvbnRhaW5lcj8oU2soZnVuY3Rpb24oKXtzbChudWxsLG51bGwsYSwhMSxmdW5jdGlvbigpe2EuX3JlYWN0Um9vdENvbnRhaW5lcj1udWxsO2FbdWZdPW51bGx9KX0pLCEwKTohMX07ZXhwb3J0cy51bnN0YWJsZV9iYXRjaGVkVXBkYXRlcz1SaztcbmV4cG9ydHMudW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI9ZnVuY3Rpb24oYSxiLGMsZCl7aWYoIXBsKGMpKXRocm93IEVycm9yKHAoMjAwKSk7aWYobnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbHMpdGhyb3cgRXJyb3IocCgzOCkpO3JldHVybiBzbChhLGIsYywhMSxkKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTguMi4wLW5leHQtOWUzYjc3MmI4LTIwMjIwNjA4XCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBtID0gcmVxdWlyZSgncmVhY3QtZG9tJyk7XG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBleHBvcnRzLmNyZWF0ZVJvb3QgPSBtLmNyZWF0ZVJvb3Q7XG4gIGV4cG9ydHMuaHlkcmF0ZVJvb3QgPSBtLmh5ZHJhdGVSb290O1xufSBlbHNlIHtcbiAgdmFyIGkgPSBtLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEO1xuICBleHBvcnRzLmNyZWF0ZVJvb3QgPSBmdW5jdGlvbihjLCBvKSB7XG4gICAgaS51c2luZ0NsaWVudEVudHJ5UG9pbnQgPSB0cnVlO1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gbS5jcmVhdGVSb290KGMsIG8pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IGZhbHNlO1xuICAgIH1cbiAgfTtcbiAgZXhwb3J0cy5oeWRyYXRlUm9vdCA9IGZ1bmN0aW9uKGMsIGgsIG8pIHtcbiAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IHRydWU7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBtLmh5ZHJhdGVSb290KGMsIGgsIG8pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpLnVzaW5nQ2xpZW50RW50cnlQb2ludCA9IGZhbHNlO1xuICAgIH1cbiAgfTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHJlYWN0LWpzeC1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cbid1c2Ugc3RyaWN0Jzt2YXIgZj1yZXF1aXJlKFwicmVhY3RcIiksaz1TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKSxsPVN5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKSxtPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksbj1mLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVELlJlYWN0Q3VycmVudE93bmVyLHA9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIHEoYyxhLGcpe3ZhciBiLGQ9e30sZT1udWxsLGg9bnVsbDt2b2lkIDAhPT1nJiYoZT1cIlwiK2cpO3ZvaWQgMCE9PWEua2V5JiYoZT1cIlwiK2Eua2V5KTt2b2lkIDAhPT1hLnJlZiYmKGg9YS5yZWYpO2ZvcihiIGluIGEpbS5jYWxsKGEsYikmJiFwLmhhc093blByb3BlcnR5KGIpJiYoZFtiXT1hW2JdKTtpZihjJiZjLmRlZmF1bHRQcm9wcylmb3IoYiBpbiBhPWMuZGVmYXVsdFByb3BzLGEpdm9pZCAwPT09ZFtiXSYmKGRbYl09YVtiXSk7cmV0dXJueyQkdHlwZW9mOmssdHlwZTpjLGtleTplLHJlZjpoLHByb3BzOmQsX293bmVyOm4uY3VycmVudH19ZXhwb3J0cy5GcmFnbWVudD1sO2V4cG9ydHMuanN4PXE7ZXhwb3J0cy5qc3hzPXE7XG4iLCIvKipcbiAqIEBsaWNlbnNlIFJlYWN0XG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7dmFyIGw9U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIiksbj1TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpLHA9U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpLHE9U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpLHI9U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpLHQ9U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpLHU9U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIiksdj1TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIiksdz1TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIikseD1TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKSx5PVN5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpLHo9U3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIEEoYSl7aWYobnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYSlyZXR1cm4gbnVsbDthPXomJmFbel18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1cbnZhciBCPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxDPU9iamVjdC5hc3NpZ24sRD17fTtmdW5jdGlvbiBFKGEsYixlKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUQ7dGhpcy51cGRhdGVyPWV8fEJ9RS5wcm90b3R5cGUuaXNSZWFjdENvbXBvbmVudD17fTtcbkUucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YSl0aHJvdyBFcnJvcihcInNldFN0YXRlKC4uLik6IHRha2VzIGFuIG9iamVjdCBvZiBzdGF0ZSB2YXJpYWJsZXMgdG8gdXBkYXRlIG9yIGEgZnVuY3Rpb24gd2hpY2ggcmV0dXJucyBhbiBvYmplY3Qgb2Ygc3RhdGUgdmFyaWFibGVzLlwiKTt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0UucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O2Z1bmN0aW9uIEYoKXt9Ri5wcm90b3R5cGU9RS5wcm90b3R5cGU7ZnVuY3Rpb24gRyhhLGIsZSl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1EO3RoaXMudXBkYXRlcj1lfHxCfXZhciBIPUcucHJvdG90eXBlPW5ldyBGO1xuSC5jb25zdHJ1Y3Rvcj1HO0MoSCxFLnByb3RvdHlwZSk7SC5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgST1BcnJheS5pc0FycmF5LEo9T2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eSxLPXtjdXJyZW50Om51bGx9LEw9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIE0oYSxiLGUpe3ZhciBkLGM9e30saz1udWxsLGg9bnVsbDtpZihudWxsIT1iKWZvcihkIGluIHZvaWQgMCE9PWIucmVmJiYoaD1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihrPVwiXCIrYi5rZXkpLGIpSi5jYWxsKGIsZCkmJiFMLmhhc093blByb3BlcnR5KGQpJiYoY1tkXT1iW2RdKTt2YXIgZz1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWcpYy5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxnKXtmb3IodmFyIGY9QXJyYXkoZyksbT0wO208ZzttKyspZlttXT1hcmd1bWVudHNbbSsyXTtjLmNoaWxkcmVuPWZ9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGQgaW4gZz1hLmRlZmF1bHRQcm9wcyxnKXZvaWQgMD09PWNbZF0mJihjW2RdPWdbZF0pO3JldHVybnskJHR5cGVvZjpsLHR5cGU6YSxrZXk6ayxyZWY6aCxwcm9wczpjLF9vd25lcjpLLmN1cnJlbnR9fVxuZnVuY3Rpb24gTihhLGIpe3JldHVybnskJHR5cGVvZjpsLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTyhhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09bH1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiK2EucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIFA9L1xcLysvZztmdW5jdGlvbiBRKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKFwiXCIrYS5rZXkpOmIudG9TdHJpbmcoMzYpfVxuZnVuY3Rpb24gUihhLGIsZSxkLGMpe3ZhciBrPXR5cGVvZiBhO2lmKFwidW5kZWZpbmVkXCI9PT1rfHxcImJvb2xlYW5cIj09PWspYT1udWxsO3ZhciBoPSExO2lmKG51bGw9PT1hKWg9ITA7ZWxzZSBzd2l0Y2goayl7Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJudW1iZXJcIjpoPSEwO2JyZWFrO2Nhc2UgXCJvYmplY3RcIjpzd2l0Y2goYS4kJHR5cGVvZil7Y2FzZSBsOmNhc2UgbjpoPSEwfX1pZihoKXJldHVybiBoPWEsYz1jKGgpLGE9XCJcIj09PWQ/XCIuXCIrUShoLDApOmQsSShjKT8oZT1cIlwiLG51bGwhPWEmJihlPWEucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKSxSKGMsYixlLFwiXCIsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KSk6bnVsbCE9YyYmKE8oYykmJihjPU4oYyxlKyghYy5rZXl8fGgmJmgua2V5PT09Yy5rZXk/XCJcIjooXCJcIitjLmtleSkucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKSthKSksYi5wdXNoKGMpKSwxO2g9MDtkPVwiXCI9PT1kP1wiLlwiOmQrXCI6XCI7aWYoSShhKSlmb3IodmFyIGc9MDtnPGEubGVuZ3RoO2crKyl7az1cbmFbZ107dmFyIGY9ZCtRKGssZyk7aCs9UihrLGIsZSxmLGMpfWVsc2UgaWYoZj1BKGEpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmKWZvcihhPWYuY2FsbChhKSxnPTA7IShrPWEubmV4dCgpKS5kb25lOylrPWsudmFsdWUsZj1kK1EoayxnKyspLGgrPVIoayxiLGUsZixjKTtlbHNlIGlmKFwib2JqZWN0XCI9PT1rKXRocm93IGI9U3RyaW5nKGEpLEVycm9yKFwiT2JqZWN0cyBhcmUgbm90IHZhbGlkIGFzIGEgUmVhY3QgY2hpbGQgKGZvdW5kOiBcIisoXCJbb2JqZWN0IE9iamVjdF1cIj09PWI/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhhKS5qb2luKFwiLCBcIikrXCJ9XCI6YikrXCIpLiBJZiB5b3UgbWVhbnQgdG8gcmVuZGVyIGEgY29sbGVjdGlvbiBvZiBjaGlsZHJlbiwgdXNlIGFuIGFycmF5IGluc3RlYWQuXCIpO3JldHVybiBofVxuZnVuY3Rpb24gUyhhLGIsZSl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgZD1bXSxjPTA7UihhLGQsXCJcIixcIlwiLGZ1bmN0aW9uKGEpe3JldHVybiBiLmNhbGwoZSxhLGMrKyl9KTtyZXR1cm4gZH1mdW5jdGlvbiBUKGEpe2lmKC0xPT09YS5fc3RhdHVzKXt2YXIgYj1hLl9yZXN1bHQ7Yj1iKCk7Yi50aGVuKGZ1bmN0aW9uKGIpe2lmKDA9PT1hLl9zdGF0dXN8fC0xPT09YS5fc3RhdHVzKWEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1ifSxmdW5jdGlvbihiKXtpZigwPT09YS5fc3RhdHVzfHwtMT09PWEuX3N0YXR1cylhLl9zdGF0dXM9MixhLl9yZXN1bHQ9Yn0pOy0xPT09YS5fc3RhdHVzJiYoYS5fc3RhdHVzPTAsYS5fcmVzdWx0PWIpfWlmKDE9PT1hLl9zdGF0dXMpcmV0dXJuIGEuX3Jlc3VsdC5kZWZhdWx0O3Rocm93IGEuX3Jlc3VsdDt9XG52YXIgVT17Y3VycmVudDpudWxsfSxWPXt0cmFuc2l0aW9uOm51bGx9LFc9e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6VSxSZWFjdEN1cnJlbnRCYXRjaENvbmZpZzpWLFJlYWN0Q3VycmVudE93bmVyOkt9O2V4cG9ydHMuQ2hpbGRyZW49e21hcDpTLGZvckVhY2g6ZnVuY3Rpb24oYSxiLGUpe1MoYSxmdW5jdGlvbigpe2IuYXBwbHkodGhpcyxhcmd1bWVudHMpfSxlKX0sY291bnQ6ZnVuY3Rpb24oYSl7dmFyIGI9MDtTKGEsZnVuY3Rpb24oKXtiKyt9KTtyZXR1cm4gYn0sdG9BcnJheTpmdW5jdGlvbihhKXtyZXR1cm4gUyhhLGZ1bmN0aW9uKGEpe3JldHVybiBhfSl8fFtdfSxvbmx5OmZ1bmN0aW9uKGEpe2lmKCFPKGEpKXRocm93IEVycm9yKFwiUmVhY3QuQ2hpbGRyZW4ub25seSBleHBlY3RlZCB0byByZWNlaXZlIGEgc2luZ2xlIFJlYWN0IGVsZW1lbnQgY2hpbGQuXCIpO3JldHVybiBhfX07ZXhwb3J0cy5Db21wb25lbnQ9RTtleHBvcnRzLkZyYWdtZW50PXA7XG5leHBvcnRzLlByb2ZpbGVyPXI7ZXhwb3J0cy5QdXJlQ29tcG9uZW50PUc7ZXhwb3J0cy5TdHJpY3RNb2RlPXE7ZXhwb3J0cy5TdXNwZW5zZT13O2V4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9VztcbmV4cG9ydHMuY2xvbmVFbGVtZW50PWZ1bmN0aW9uKGEsYixlKXtpZihudWxsPT09YXx8dm9pZCAwPT09YSl0aHJvdyBFcnJvcihcIlJlYWN0LmNsb25lRWxlbWVudCguLi4pOiBUaGUgYXJndW1lbnQgbXVzdCBiZSBhIFJlYWN0IGVsZW1lbnQsIGJ1dCB5b3UgcGFzc2VkIFwiK2ErXCIuXCIpO3ZhciBkPUMoe30sYS5wcm9wcyksYz1hLmtleSxrPWEucmVmLGg9YS5fb3duZXI7aWYobnVsbCE9Yil7dm9pZCAwIT09Yi5yZWYmJihrPWIucmVmLGg9Sy5jdXJyZW50KTt2b2lkIDAhPT1iLmtleSYmKGM9XCJcIitiLmtleSk7aWYoYS50eXBlJiZhLnR5cGUuZGVmYXVsdFByb3BzKXZhciBnPWEudHlwZS5kZWZhdWx0UHJvcHM7Zm9yKGYgaW4gYilKLmNhbGwoYixmKSYmIUwuaGFzT3duUHJvcGVydHkoZikmJihkW2ZdPXZvaWQgMD09PWJbZl0mJnZvaWQgMCE9PWc/Z1tmXTpiW2ZdKX12YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZC5jaGlsZHJlbj1lO2Vsc2UgaWYoMTxmKXtnPUFycmF5KGYpO1xuZm9yKHZhciBtPTA7bTxmO20rKylnW21dPWFyZ3VtZW50c1ttKzJdO2QuY2hpbGRyZW49Z31yZXR1cm57JCR0eXBlb2Y6bCx0eXBlOmEudHlwZSxrZXk6YyxyZWY6ayxwcm9wczpkLF9vd25lcjpofX07ZXhwb3J0cy5jcmVhdGVDb250ZXh0PWZ1bmN0aW9uKGEpe2E9eyQkdHlwZW9mOnUsX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX3RocmVhZENvdW50OjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsLF9kZWZhdWx0VmFsdWU6bnVsbCxfZ2xvYmFsTmFtZTpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjp0LF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9O2V4cG9ydHMuY3JlYXRlRWxlbWVudD1NO2V4cG9ydHMuY3JlYXRlRmFjdG9yeT1mdW5jdGlvbihhKXt2YXIgYj1NLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn07ZXhwb3J0cy5jcmVhdGVSZWY9ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX07XG5leHBvcnRzLmZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJueyQkdHlwZW9mOnYscmVuZGVyOmF9fTtleHBvcnRzLmlzVmFsaWRFbGVtZW50PU87ZXhwb3J0cy5sYXp5PWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp5LF9wYXlsb2FkOntfc3RhdHVzOi0xLF9yZXN1bHQ6YX0sX2luaXQ6VH19O2V4cG9ydHMubWVtbz1mdW5jdGlvbihhLGIpe3JldHVybnskJHR5cGVvZjp4LHR5cGU6YSxjb21wYXJlOnZvaWQgMD09PWI/bnVsbDpifX07ZXhwb3J0cy5zdGFydFRyYW5zaXRpb249ZnVuY3Rpb24oYSl7dmFyIGI9Vi50cmFuc2l0aW9uO1YudHJhbnNpdGlvbj17fTt0cnl7YSgpfWZpbmFsbHl7Vi50cmFuc2l0aW9uPWJ9fTtleHBvcnRzLnVuc3RhYmxlX2FjdD1mdW5jdGlvbigpe3Rocm93IEVycm9yKFwiYWN0KC4uLikgaXMgbm90IHN1cHBvcnRlZCBpbiBwcm9kdWN0aW9uIGJ1aWxkcyBvZiBSZWFjdC5cIik7fTtcbmV4cG9ydHMudXNlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUNhbGxiYWNrKGEsYil9O2V4cG9ydHMudXNlQ29udGV4dD1mdW5jdGlvbihhKXtyZXR1cm4gVS5jdXJyZW50LnVzZUNvbnRleHQoYSl9O2V4cG9ydHMudXNlRGVidWdWYWx1ZT1mdW5jdGlvbigpe307ZXhwb3J0cy51c2VEZWZlcnJlZFZhbHVlPWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlRGVmZXJyZWRWYWx1ZShhKX07ZXhwb3J0cy51c2VFZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUlkPWZ1bmN0aW9uKCl7cmV0dXJuIFUuY3VycmVudC51c2VJZCgpfTtleHBvcnRzLnVzZUltcGVyYXRpdmVIYW5kbGU9ZnVuY3Rpb24oYSxiLGUpe3JldHVybiBVLmN1cnJlbnQudXNlSW1wZXJhdGl2ZUhhbmRsZShhLGIsZSl9O1xuZXhwb3J0cy51c2VJbnNlcnRpb25FZmZlY3Q9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gVS5jdXJyZW50LnVzZUluc2VydGlvbkVmZmVjdChhLGIpfTtleHBvcnRzLnVzZUxheW91dEVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlTGF5b3V0RWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTWVtbz1mdW5jdGlvbihhLGIpe3JldHVybiBVLmN1cnJlbnQudXNlTWVtbyhhLGIpfTtleHBvcnRzLnVzZVJlZHVjZXI9ZnVuY3Rpb24oYSxiLGUpe3JldHVybiBVLmN1cnJlbnQudXNlUmVkdWNlcihhLGIsZSl9O2V4cG9ydHMudXNlUmVmPWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlUmVmKGEpfTtleHBvcnRzLnVzZVN0YXRlPWZ1bmN0aW9uKGEpe3JldHVybiBVLmN1cnJlbnQudXNlU3RhdGUoYSl9O2V4cG9ydHMudXNlU3luY0V4dGVybmFsU3RvcmU9ZnVuY3Rpb24oYSxiLGUpe3JldHVybiBVLmN1cnJlbnQudXNlU3luY0V4dGVybmFsU3RvcmUoYSxiLGUpfTtcbmV4cG9ydHMudXNlVHJhbnNpdGlvbj1mdW5jdGlvbigpe3JldHVybiBVLmN1cnJlbnQudXNlVHJhbnNpdGlvbigpfTtleHBvcnRzLnZlcnNpb249XCIxOC4yLjBcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1ydW50aW1lLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWpzeC1ydW50aW1lLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxNC1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbnZhciBydW50aW1lID0gKGZ1bmN0aW9uIChleHBvcnRzKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuXG4gIHZhciBPcCA9IE9iamVjdC5wcm90b3R5cGU7XG4gIHZhciBoYXNPd24gPSBPcC5oYXNPd25Qcm9wZXJ0eTtcbiAgdmFyIGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5IHx8IGZ1bmN0aW9uIChvYmosIGtleSwgZGVzYykgeyBvYmpba2V5XSA9IGRlc2MudmFsdWU7IH07XG4gIHZhciB1bmRlZmluZWQ7IC8vIE1vcmUgY29tcHJlc3NpYmxlIHRoYW4gdm9pZCAwLlxuICB2YXIgJFN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiA/IFN5bWJvbCA6IHt9O1xuICB2YXIgaXRlcmF0b3JTeW1ib2wgPSAkU3ltYm9sLml0ZXJhdG9yIHx8IFwiQEBpdGVyYXRvclwiO1xuICB2YXIgYXN5bmNJdGVyYXRvclN5bWJvbCA9ICRTeW1ib2wuYXN5bmNJdGVyYXRvciB8fCBcIkBAYXN5bmNJdGVyYXRvclwiO1xuICB2YXIgdG9TdHJpbmdUYWdTeW1ib2wgPSAkU3ltYm9sLnRvU3RyaW5nVGFnIHx8IFwiQEB0b1N0cmluZ1RhZ1wiO1xuXG4gIGZ1bmN0aW9uIGRlZmluZShvYmosIGtleSwgdmFsdWUpIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIHJldHVybiBvYmpba2V5XTtcbiAgfVxuICB0cnkge1xuICAgIC8vIElFIDggaGFzIGEgYnJva2VuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSB0aGF0IG9ubHkgd29ya3Mgb24gRE9NIG9iamVjdHMuXG4gICAgZGVmaW5lKHt9LCBcIlwiKTtcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZGVmaW5lID0gZnVuY3Rpb24ob2JqLCBrZXksIHZhbHVlKSB7XG4gICAgICByZXR1cm4gb2JqW2tleV0gPSB2YWx1ZTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gd3JhcChpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCkge1xuICAgIC8vIElmIG91dGVyRm4gcHJvdmlkZWQgYW5kIG91dGVyRm4ucHJvdG90eXBlIGlzIGEgR2VuZXJhdG9yLCB0aGVuIG91dGVyRm4ucHJvdG90eXBlIGluc3RhbmNlb2YgR2VuZXJhdG9yLlxuICAgIHZhciBwcm90b0dlbmVyYXRvciA9IG91dGVyRm4gJiYgb3V0ZXJGbi5wcm90b3R5cGUgaW5zdGFuY2VvZiBHZW5lcmF0b3IgPyBvdXRlckZuIDogR2VuZXJhdG9yO1xuICAgIHZhciBnZW5lcmF0b3IgPSBPYmplY3QuY3JlYXRlKHByb3RvR2VuZXJhdG9yLnByb3RvdHlwZSk7XG4gICAgdmFyIGNvbnRleHQgPSBuZXcgQ29udGV4dCh0cnlMb2NzTGlzdCB8fCBbXSk7XG5cbiAgICAvLyBUaGUgLl9pbnZva2UgbWV0aG9kIHVuaWZpZXMgdGhlIGltcGxlbWVudGF0aW9ucyBvZiB0aGUgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzLlxuICAgIGRlZmluZVByb3BlcnR5KGdlbmVyYXRvciwgXCJfaW52b2tlXCIsIHsgdmFsdWU6IG1ha2VJbnZva2VNZXRob2QoaW5uZXJGbiwgc2VsZiwgY29udGV4dCkgfSk7XG5cbiAgICByZXR1cm4gZ2VuZXJhdG9yO1xuICB9XG4gIGV4cG9ydHMud3JhcCA9IHdyYXA7XG5cbiAgLy8gVHJ5L2NhdGNoIGhlbHBlciB0byBtaW5pbWl6ZSBkZW9wdGltaXphdGlvbnMuIFJldHVybnMgYSBjb21wbGV0aW9uXG4gIC8vIHJlY29yZCBsaWtlIGNvbnRleHQudHJ5RW50cmllc1tpXS5jb21wbGV0aW9uLiBUaGlzIGludGVyZmFjZSBjb3VsZFxuICAvLyBoYXZlIGJlZW4gKGFuZCB3YXMgcHJldmlvdXNseSkgZGVzaWduZWQgdG8gdGFrZSBhIGNsb3N1cmUgdG8gYmVcbiAgLy8gaW52b2tlZCB3aXRob3V0IGFyZ3VtZW50cywgYnV0IGluIGFsbCB0aGUgY2FzZXMgd2UgY2FyZSBhYm91dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYW4gZXhpc3RpbmcgbWV0aG9kIHdlIHdhbnQgdG8gY2FsbCwgc28gdGhlcmUncyBubyBuZWVkXG4gIC8vIHRvIGNyZWF0ZSBhIG5ldyBmdW5jdGlvbiBvYmplY3QuIFdlIGNhbiBldmVuIGdldCBhd2F5IHdpdGggYXNzdW1pbmdcbiAgLy8gdGhlIG1ldGhvZCB0YWtlcyBleGFjdGx5IG9uZSBhcmd1bWVudCwgc2luY2UgdGhhdCBoYXBwZW5zIHRvIGJlIHRydWVcbiAgLy8gaW4gZXZlcnkgY2FzZSwgc28gd2UgZG9uJ3QgaGF2ZSB0byB0b3VjaCB0aGUgYXJndW1lbnRzIG9iamVjdC4gVGhlXG4gIC8vIG9ubHkgYWRkaXRpb25hbCBhbGxvY2F0aW9uIHJlcXVpcmVkIGlzIHRoZSBjb21wbGV0aW9uIHJlY29yZCwgd2hpY2hcbiAgLy8gaGFzIGEgc3RhYmxlIHNoYXBlIGFuZCBzbyBob3BlZnVsbHkgc2hvdWxkIGJlIGNoZWFwIHRvIGFsbG9jYXRlLlxuICBmdW5jdGlvbiB0cnlDYXRjaChmbiwgb2JqLCBhcmcpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJub3JtYWxcIiwgYXJnOiBmbi5jYWxsKG9iaiwgYXJnKSB9O1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgcmV0dXJuIHsgdHlwZTogXCJ0aHJvd1wiLCBhcmc6IGVyciB9O1xuICAgIH1cbiAgfVxuXG4gIHZhciBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0ID0gXCJzdXNwZW5kZWRTdGFydFwiO1xuICB2YXIgR2VuU3RhdGVTdXNwZW5kZWRZaWVsZCA9IFwic3VzcGVuZGVkWWllbGRcIjtcbiAgdmFyIEdlblN0YXRlRXhlY3V0aW5nID0gXCJleGVjdXRpbmdcIjtcbiAgdmFyIEdlblN0YXRlQ29tcGxldGVkID0gXCJjb21wbGV0ZWRcIjtcblxuICAvLyBSZXR1cm5pbmcgdGhpcyBvYmplY3QgZnJvbSB0aGUgaW5uZXJGbiBoYXMgdGhlIHNhbWUgZWZmZWN0IGFzXG4gIC8vIGJyZWFraW5nIG91dCBvZiB0aGUgZGlzcGF0Y2ggc3dpdGNoIHN0YXRlbWVudC5cbiAgdmFyIENvbnRpbnVlU2VudGluZWwgPSB7fTtcblxuICAvLyBEdW1teSBjb25zdHJ1Y3RvciBmdW5jdGlvbnMgdGhhdCB3ZSB1c2UgYXMgdGhlIC5jb25zdHJ1Y3RvciBhbmRcbiAgLy8gLmNvbnN0cnVjdG9yLnByb3RvdHlwZSBwcm9wZXJ0aWVzIGZvciBmdW5jdGlvbnMgdGhhdCByZXR1cm4gR2VuZXJhdG9yXG4gIC8vIG9iamVjdHMuIEZvciBmdWxsIHNwZWMgY29tcGxpYW5jZSwgeW91IG1heSB3aXNoIHRvIGNvbmZpZ3VyZSB5b3VyXG4gIC8vIG1pbmlmaWVyIG5vdCB0byBtYW5nbGUgdGhlIG5hbWVzIG9mIHRoZXNlIHR3byBmdW5jdGlvbnMuXG4gIGZ1bmN0aW9uIEdlbmVyYXRvcigpIHt9XG4gIGZ1bmN0aW9uIEdlbmVyYXRvckZ1bmN0aW9uKCkge31cbiAgZnVuY3Rpb24gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUoKSB7fVxuXG4gIC8vIFRoaXMgaXMgYSBwb2x5ZmlsbCBmb3IgJUl0ZXJhdG9yUHJvdG90eXBlJSBmb3IgZW52aXJvbm1lbnRzIHRoYXRcbiAgLy8gZG9uJ3QgbmF0aXZlbHkgc3VwcG9ydCBpdC5cbiAgdmFyIEl0ZXJhdG9yUHJvdG90eXBlID0ge307XG4gIGRlZmluZShJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSk7XG5cbiAgdmFyIGdldFByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuICB2YXIgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90byAmJiBnZXRQcm90byhnZXRQcm90byh2YWx1ZXMoW10pKSk7XG4gIGlmIChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSAmJlxuICAgICAgTmF0aXZlSXRlcmF0b3JQcm90b3R5cGUgIT09IE9wICYmXG4gICAgICBoYXNPd24uY2FsbChOYXRpdmVJdGVyYXRvclByb3RvdHlwZSwgaXRlcmF0b3JTeW1ib2wpKSB7XG4gICAgLy8gVGhpcyBlbnZpcm9ubWVudCBoYXMgYSBuYXRpdmUgJUl0ZXJhdG9yUHJvdG90eXBlJTsgdXNlIGl0IGluc3RlYWRcbiAgICAvLyBvZiB0aGUgcG9seWZpbGwuXG4gICAgSXRlcmF0b3JQcm90b3R5cGUgPSBOYXRpdmVJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxuXG4gIHZhciBHcCA9IEdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlLnByb3RvdHlwZSA9XG4gICAgR2VuZXJhdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUpO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5wcm90b3R5cGUgPSBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZTtcbiAgZGVmaW5lUHJvcGVydHkoR3AsIFwiY29uc3RydWN0b3JcIiwgeyB2YWx1ZTogR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9KTtcbiAgZGVmaW5lUHJvcGVydHkoXG4gICAgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUsXG4gICAgXCJjb25zdHJ1Y3RvclwiLFxuICAgIHsgdmFsdWU6IEdlbmVyYXRvckZ1bmN0aW9uLCBjb25maWd1cmFibGU6IHRydWUgfVxuICApO1xuICBHZW5lcmF0b3JGdW5jdGlvbi5kaXNwbGF5TmFtZSA9IGRlZmluZShcbiAgICBHZW5lcmF0b3JGdW5jdGlvblByb3RvdHlwZSxcbiAgICB0b1N0cmluZ1RhZ1N5bWJvbCxcbiAgICBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgKTtcblxuICAvLyBIZWxwZXIgZm9yIGRlZmluaW5nIHRoZSAubmV4dCwgLnRocm93LCBhbmQgLnJldHVybiBtZXRob2RzIG9mIHRoZVxuICAvLyBJdGVyYXRvciBpbnRlcmZhY2UgaW4gdGVybXMgb2YgYSBzaW5nbGUgLl9pbnZva2UgbWV0aG9kLlxuICBmdW5jdGlvbiBkZWZpbmVJdGVyYXRvck1ldGhvZHMocHJvdG90eXBlKSB7XG4gICAgW1wibmV4dFwiLCBcInRocm93XCIsIFwicmV0dXJuXCJdLmZvckVhY2goZnVuY3Rpb24obWV0aG9kKSB7XG4gICAgICBkZWZpbmUocHJvdG90eXBlLCBtZXRob2QsIGZ1bmN0aW9uKGFyZykge1xuICAgICAgICByZXR1cm4gdGhpcy5faW52b2tlKG1ldGhvZCwgYXJnKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9XG5cbiAgZXhwb3J0cy5pc0dlbmVyYXRvckZ1bmN0aW9uID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgdmFyIGN0b3IgPSB0eXBlb2YgZ2VuRnVuID09PSBcImZ1bmN0aW9uXCIgJiYgZ2VuRnVuLmNvbnN0cnVjdG9yO1xuICAgIHJldHVybiBjdG9yXG4gICAgICA/IGN0b3IgPT09IEdlbmVyYXRvckZ1bmN0aW9uIHx8XG4gICAgICAgIC8vIEZvciB0aGUgbmF0aXZlIEdlbmVyYXRvckZ1bmN0aW9uIGNvbnN0cnVjdG9yLCB0aGUgYmVzdCB3ZSBjYW5cbiAgICAgICAgLy8gZG8gaXMgdG8gY2hlY2sgaXRzIC5uYW1lIHByb3BlcnR5LlxuICAgICAgICAoY3Rvci5kaXNwbGF5TmFtZSB8fCBjdG9yLm5hbWUpID09PSBcIkdlbmVyYXRvckZ1bmN0aW9uXCJcbiAgICAgIDogZmFsc2U7XG4gIH07XG5cbiAgZXhwb3J0cy5tYXJrID0gZnVuY3Rpb24oZ2VuRnVuKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgT2JqZWN0LnNldFByb3RvdHlwZU9mKGdlbkZ1biwgR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW5GdW4uX19wcm90b19fID0gR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGU7XG4gICAgICBkZWZpbmUoZ2VuRnVuLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JGdW5jdGlvblwiKTtcbiAgICB9XG4gICAgZ2VuRnVuLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoR3ApO1xuICAgIHJldHVybiBnZW5GdW47XG4gIH07XG5cbiAgLy8gV2l0aGluIHRoZSBib2R5IG9mIGFueSBhc3luYyBmdW5jdGlvbiwgYGF3YWl0IHhgIGlzIHRyYW5zZm9ybWVkIHRvXG4gIC8vIGB5aWVsZCByZWdlbmVyYXRvclJ1bnRpbWUuYXdyYXAoeClgLCBzbyB0aGF0IHRoZSBydW50aW1lIGNhbiB0ZXN0XG4gIC8vIGBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpYCB0byBkZXRlcm1pbmUgaWYgdGhlIHlpZWxkZWQgdmFsdWUgaXNcbiAgLy8gbWVhbnQgdG8gYmUgYXdhaXRlZC5cbiAgZXhwb3J0cy5hd3JhcCA9IGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiB7IF9fYXdhaXQ6IGFyZyB9O1xuICB9O1xuXG4gIGZ1bmN0aW9uIEFzeW5jSXRlcmF0b3IoZ2VuZXJhdG9yLCBQcm9taXNlSW1wbCkge1xuICAgIGZ1bmN0aW9uIGludm9rZShtZXRob2QsIGFyZywgcmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICB2YXIgcmVjb3JkID0gdHJ5Q2F0Y2goZ2VuZXJhdG9yW21ldGhvZF0sIGdlbmVyYXRvciwgYXJnKTtcbiAgICAgIGlmIChyZWNvcmQudHlwZSA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgIHJlamVjdChyZWNvcmQuYXJnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciByZXN1bHQgPSByZWNvcmQuYXJnO1xuICAgICAgICB2YXIgdmFsdWUgPSByZXN1bHQudmFsdWU7XG4gICAgICAgIGlmICh2YWx1ZSAmJlxuICAgICAgICAgICAgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiICYmXG4gICAgICAgICAgICBoYXNPd24uY2FsbCh2YWx1ZSwgXCJfX2F3YWl0XCIpKSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2VJbXBsLnJlc29sdmUodmFsdWUuX19hd2FpdCkudGhlbihmdW5jdGlvbih2YWx1ZSkge1xuICAgICAgICAgICAgaW52b2tlKFwibmV4dFwiLCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9LCBmdW5jdGlvbihlcnIpIHtcbiAgICAgICAgICAgIGludm9rZShcInRocm93XCIsIGVyciwgcmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBQcm9taXNlSW1wbC5yZXNvbHZlKHZhbHVlKS50aGVuKGZ1bmN0aW9uKHVud3JhcHBlZCkge1xuICAgICAgICAgIC8vIFdoZW4gYSB5aWVsZGVkIFByb21pc2UgaXMgcmVzb2x2ZWQsIGl0cyBmaW5hbCB2YWx1ZSBiZWNvbWVzXG4gICAgICAgICAgLy8gdGhlIC52YWx1ZSBvZiB0aGUgUHJvbWlzZTx7dmFsdWUsZG9uZX0+IHJlc3VsdCBmb3IgdGhlXG4gICAgICAgICAgLy8gY3VycmVudCBpdGVyYXRpb24uXG4gICAgICAgICAgcmVzdWx0LnZhbHVlID0gdW53cmFwcGVkO1xuICAgICAgICAgIHJlc29sdmUocmVzdWx0KTtcbiAgICAgICAgfSwgZnVuY3Rpb24oZXJyb3IpIHtcbiAgICAgICAgICAvLyBJZiBhIHJlamVjdGVkIFByb21pc2Ugd2FzIHlpZWxkZWQsIHRocm93IHRoZSByZWplY3Rpb24gYmFja1xuICAgICAgICAgIC8vIGludG8gdGhlIGFzeW5jIGdlbmVyYXRvciBmdW5jdGlvbiBzbyBpdCBjYW4gYmUgaGFuZGxlZCB0aGVyZS5cbiAgICAgICAgICByZXR1cm4gaW52b2tlKFwidGhyb3dcIiwgZXJyb3IsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBwcmV2aW91c1Byb21pc2U7XG5cbiAgICBmdW5jdGlvbiBlbnF1ZXVlKG1ldGhvZCwgYXJnKSB7XG4gICAgICBmdW5jdGlvbiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlSW1wbChmdW5jdGlvbihyZXNvbHZlLCByZWplY3QpIHtcbiAgICAgICAgICBpbnZva2UobWV0aG9kLCBhcmcsIHJlc29sdmUsIHJlamVjdCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gcHJldmlvdXNQcm9taXNlID1cbiAgICAgICAgLy8gSWYgZW5xdWV1ZSBoYXMgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIHdlIHdhbnQgdG8gd2FpdCB1bnRpbFxuICAgICAgICAvLyBhbGwgcHJldmlvdXMgUHJvbWlzZXMgaGF2ZSBiZWVuIHJlc29sdmVkIGJlZm9yZSBjYWxsaW5nIGludm9rZSxcbiAgICAgICAgLy8gc28gdGhhdCByZXN1bHRzIGFyZSBhbHdheXMgZGVsaXZlcmVkIGluIHRoZSBjb3JyZWN0IG9yZGVyLiBJZlxuICAgICAgICAvLyBlbnF1ZXVlIGhhcyBub3QgYmVlbiBjYWxsZWQgYmVmb3JlLCB0aGVuIGl0IGlzIGltcG9ydGFudCB0b1xuICAgICAgICAvLyBjYWxsIGludm9rZSBpbW1lZGlhdGVseSwgd2l0aG91dCB3YWl0aW5nIG9uIGEgY2FsbGJhY2sgdG8gZmlyZSxcbiAgICAgICAgLy8gc28gdGhhdCB0aGUgYXN5bmMgZ2VuZXJhdG9yIGZ1bmN0aW9uIGhhcyB0aGUgb3Bwb3J0dW5pdHkgdG8gZG9cbiAgICAgICAgLy8gYW55IG5lY2Vzc2FyeSBzZXR1cCBpbiBhIHByZWRpY3RhYmxlIHdheS4gVGhpcyBwcmVkaWN0YWJpbGl0eVxuICAgICAgICAvLyBpcyB3aHkgdGhlIFByb21pc2UgY29uc3RydWN0b3Igc3luY2hyb25vdXNseSBpbnZva2VzIGl0c1xuICAgICAgICAvLyBleGVjdXRvciBjYWxsYmFjaywgYW5kIHdoeSBhc3luYyBmdW5jdGlvbnMgc3luY2hyb25vdXNseVxuICAgICAgICAvLyBleGVjdXRlIGNvZGUgYmVmb3JlIHRoZSBmaXJzdCBhd2FpdC4gU2luY2Ugd2UgaW1wbGVtZW50IHNpbXBsZVxuICAgICAgICAvLyBhc3luYyBmdW5jdGlvbnMgaW4gdGVybXMgb2YgYXN5bmMgZ2VuZXJhdG9ycywgaXQgaXMgZXNwZWNpYWxseVxuICAgICAgICAvLyBpbXBvcnRhbnQgdG8gZ2V0IHRoaXMgcmlnaHQsIGV2ZW4gdGhvdWdoIGl0IHJlcXVpcmVzIGNhcmUuXG4gICAgICAgIHByZXZpb3VzUHJvbWlzZSA/IHByZXZpb3VzUHJvbWlzZS50aGVuKFxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnLFxuICAgICAgICAgIC8vIEF2b2lkIHByb3BhZ2F0aW5nIGZhaWx1cmVzIHRvIFByb21pc2VzIHJldHVybmVkIGJ5IGxhdGVyXG4gICAgICAgICAgLy8gaW52b2NhdGlvbnMgb2YgdGhlIGl0ZXJhdG9yLlxuICAgICAgICAgIGNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnXG4gICAgICAgICkgOiBjYWxsSW52b2tlV2l0aE1ldGhvZEFuZEFyZygpO1xuICAgIH1cblxuICAgIC8vIERlZmluZSB0aGUgdW5pZmllZCBoZWxwZXIgbWV0aG9kIHRoYXQgaXMgdXNlZCB0byBpbXBsZW1lbnQgLm5leHQsXG4gICAgLy8gLnRocm93LCBhbmQgLnJldHVybiAoc2VlIGRlZmluZUl0ZXJhdG9yTWV0aG9kcykuXG4gICAgZGVmaW5lUHJvcGVydHkodGhpcywgXCJfaW52b2tlXCIsIHsgdmFsdWU6IGVucXVldWUgfSk7XG4gIH1cblxuICBkZWZpbmVJdGVyYXRvck1ldGhvZHMoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUpO1xuICBkZWZpbmUoQXN5bmNJdGVyYXRvci5wcm90b3R5cGUsIGFzeW5jSXRlcmF0b3JTeW1ib2wsIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSk7XG4gIGV4cG9ydHMuQXN5bmNJdGVyYXRvciA9IEFzeW5jSXRlcmF0b3I7XG5cbiAgLy8gTm90ZSB0aGF0IHNpbXBsZSBhc3luYyBmdW5jdGlvbnMgYXJlIGltcGxlbWVudGVkIG9uIHRvcCBvZlxuICAvLyBBc3luY0l0ZXJhdG9yIG9iamVjdHM7IHRoZXkganVzdCByZXR1cm4gYSBQcm9taXNlIGZvciB0aGUgdmFsdWUgb2ZcbiAgLy8gdGhlIGZpbmFsIHJlc3VsdCBwcm9kdWNlZCBieSB0aGUgaXRlcmF0b3IuXG4gIGV4cG9ydHMuYXN5bmMgPSBmdW5jdGlvbihpbm5lckZuLCBvdXRlckZuLCBzZWxmLCB0cnlMb2NzTGlzdCwgUHJvbWlzZUltcGwpIHtcbiAgICBpZiAoUHJvbWlzZUltcGwgPT09IHZvaWQgMCkgUHJvbWlzZUltcGwgPSBQcm9taXNlO1xuXG4gICAgdmFyIGl0ZXIgPSBuZXcgQXN5bmNJdGVyYXRvcihcbiAgICAgIHdyYXAoaW5uZXJGbiwgb3V0ZXJGbiwgc2VsZiwgdHJ5TG9jc0xpc3QpLFxuICAgICAgUHJvbWlzZUltcGxcbiAgICApO1xuXG4gICAgcmV0dXJuIGV4cG9ydHMuaXNHZW5lcmF0b3JGdW5jdGlvbihvdXRlckZuKVxuICAgICAgPyBpdGVyIC8vIElmIG91dGVyRm4gaXMgYSBnZW5lcmF0b3IsIHJldHVybiB0aGUgZnVsbCBpdGVyYXRvci5cbiAgICAgIDogaXRlci5uZXh0KCkudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0LmRvbmUgPyByZXN1bHQudmFsdWUgOiBpdGVyLm5leHQoKTtcbiAgICAgICAgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gbWFrZUludm9rZU1ldGhvZChpbm5lckZuLCBzZWxmLCBjb250ZXh0KSB7XG4gICAgdmFyIHN0YXRlID0gR2VuU3RhdGVTdXNwZW5kZWRTdGFydDtcblxuICAgIHJldHVybiBmdW5jdGlvbiBpbnZva2UobWV0aG9kLCBhcmcpIHtcbiAgICAgIGlmIChzdGF0ZSA9PT0gR2VuU3RhdGVFeGVjdXRpbmcpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgcnVubmluZ1wiKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZUNvbXBsZXRlZCkge1xuICAgICAgICBpZiAobWV0aG9kID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICB0aHJvdyBhcmc7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBCZSBmb3JnaXZpbmcsIHBlciAyNS4zLjMuMy4zIG9mIHRoZSBzcGVjOlxuICAgICAgICAvLyBodHRwczovL3Blb3BsZS5tb3ppbGxhLm9yZy9+am9yZW5kb3JmZi9lczYtZHJhZnQuaHRtbCNzZWMtZ2VuZXJhdG9ycmVzdW1lXG4gICAgICAgIHJldHVybiBkb25lUmVzdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGNvbnRleHQubWV0aG9kID0gbWV0aG9kO1xuICAgICAgY29udGV4dC5hcmcgPSBhcmc7XG5cbiAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgIHZhciBkZWxlZ2F0ZSA9IGNvbnRleHQuZGVsZWdhdGU7XG4gICAgICAgIGlmIChkZWxlZ2F0ZSkge1xuICAgICAgICAgIHZhciBkZWxlZ2F0ZVJlc3VsdCA9IG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuICAgICAgICAgIGlmIChkZWxlZ2F0ZVJlc3VsdCkge1xuICAgICAgICAgICAgaWYgKGRlbGVnYXRlUmVzdWx0ID09PSBDb250aW51ZVNlbnRpbmVsKSBjb250aW51ZTtcbiAgICAgICAgICAgIHJldHVybiBkZWxlZ2F0ZVJlc3VsdDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY29udGV4dC5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgICAgLy8gU2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAgICAgLy8gZnVuY3Rpb24uc2VudCBpbXBsZW1lbnRhdGlvbi5cbiAgICAgICAgICBjb250ZXh0LnNlbnQgPSBjb250ZXh0Ll9zZW50ID0gY29udGV4dC5hcmc7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgaWYgKHN0YXRlID09PSBHZW5TdGF0ZVN1c3BlbmRlZFN0YXJ0KSB7XG4gICAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgICAgdGhyb3cgY29udGV4dC5hcmc7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY29udGV4dC5kaXNwYXRjaEV4Y2VwdGlvbihjb250ZXh0LmFyZyk7XG5cbiAgICAgICAgfSBlbHNlIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJyZXR1cm5cIikge1xuICAgICAgICAgIGNvbnRleHQuYWJydXB0KFwicmV0dXJuXCIsIGNvbnRleHQuYXJnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHN0YXRlID0gR2VuU3RhdGVFeGVjdXRpbmc7XG5cbiAgICAgICAgdmFyIHJlY29yZCA9IHRyeUNhdGNoKGlubmVyRm4sIHNlbGYsIGNvbnRleHQpO1xuICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwibm9ybWFsXCIpIHtcbiAgICAgICAgICAvLyBJZiBhbiBleGNlcHRpb24gaXMgdGhyb3duIGZyb20gaW5uZXJGbiwgd2UgbGVhdmUgc3RhdGUgPT09XG4gICAgICAgICAgLy8gR2VuU3RhdGVFeGVjdXRpbmcgYW5kIGxvb3AgYmFjayBmb3IgYW5vdGhlciBpbnZvY2F0aW9uLlxuICAgICAgICAgIHN0YXRlID0gY29udGV4dC5kb25lXG4gICAgICAgICAgICA/IEdlblN0YXRlQ29tcGxldGVkXG4gICAgICAgICAgICA6IEdlblN0YXRlU3VzcGVuZGVkWWllbGQ7XG5cbiAgICAgICAgICBpZiAocmVjb3JkLmFyZyA9PT0gQ29udGludWVTZW50aW5lbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHZhbHVlOiByZWNvcmQuYXJnLFxuICAgICAgICAgICAgZG9uZTogY29udGV4dC5kb25lXG4gICAgICAgICAgfTtcblxuICAgICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgICBzdGF0ZSA9IEdlblN0YXRlQ29tcGxldGVkO1xuICAgICAgICAgIC8vIERpc3BhdGNoIHRoZSBleGNlcHRpb24gYnkgbG9vcGluZyBiYWNrIGFyb3VuZCB0byB0aGVcbiAgICAgICAgICAvLyBjb250ZXh0LmRpc3BhdGNoRXhjZXB0aW9uKGNvbnRleHQuYXJnKSBjYWxsIGFib3ZlLlxuICAgICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgICAgIGNvbnRleHQuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvLyBDYWxsIGRlbGVnYXRlLml0ZXJhdG9yW2NvbnRleHQubWV0aG9kXShjb250ZXh0LmFyZykgYW5kIGhhbmRsZSB0aGVcbiAgLy8gcmVzdWx0LCBlaXRoZXIgYnkgcmV0dXJuaW5nIGEgeyB2YWx1ZSwgZG9uZSB9IHJlc3VsdCBmcm9tIHRoZVxuICAvLyBkZWxlZ2F0ZSBpdGVyYXRvciwgb3IgYnkgbW9kaWZ5aW5nIGNvbnRleHQubWV0aG9kIGFuZCBjb250ZXh0LmFyZyxcbiAgLy8gc2V0dGluZyBjb250ZXh0LmRlbGVnYXRlIHRvIG51bGwsIGFuZCByZXR1cm5pbmcgdGhlIENvbnRpbnVlU2VudGluZWwuXG4gIGZ1bmN0aW9uIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpIHtcbiAgICB2YXIgbWV0aG9kTmFtZSA9IGNvbnRleHQubWV0aG9kO1xuICAgIHZhciBtZXRob2QgPSBkZWxlZ2F0ZS5pdGVyYXRvclttZXRob2ROYW1lXTtcbiAgICBpZiAobWV0aG9kID09PSB1bmRlZmluZWQpIHtcbiAgICAgIC8vIEEgLnRocm93IG9yIC5yZXR1cm4gd2hlbiB0aGUgZGVsZWdhdGUgaXRlcmF0b3IgaGFzIG5vIC50aHJvd1xuICAgICAgLy8gbWV0aG9kLCBvciBhIG1pc3NpbmcgLm5leHQgbWVodG9kLCBhbHdheXMgdGVybWluYXRlIHRoZVxuICAgICAgLy8geWllbGQqIGxvb3AuXG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcblxuICAgICAgLy8gTm90ZTogW1wicmV0dXJuXCJdIG11c3QgYmUgdXNlZCBmb3IgRVMzIHBhcnNpbmcgY29tcGF0aWJpbGl0eS5cbiAgICAgIGlmIChtZXRob2ROYW1lID09PSBcInRocm93XCIgJiYgZGVsZWdhdGUuaXRlcmF0b3JbXCJyZXR1cm5cIl0pIHtcbiAgICAgICAgLy8gSWYgdGhlIGRlbGVnYXRlIGl0ZXJhdG9yIGhhcyBhIHJldHVybiBtZXRob2QsIGdpdmUgaXQgYVxuICAgICAgICAvLyBjaGFuY2UgdG8gY2xlYW4gdXAuXG4gICAgICAgIGNvbnRleHQubWV0aG9kID0gXCJyZXR1cm5cIjtcbiAgICAgICAgY29udGV4dC5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICAgIG1heWJlSW52b2tlRGVsZWdhdGUoZGVsZWdhdGUsIGNvbnRleHQpO1xuXG4gICAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCA9PT0gXCJ0aHJvd1wiKSB7XG4gICAgICAgICAgLy8gSWYgbWF5YmVJbnZva2VEZWxlZ2F0ZShjb250ZXh0KSBjaGFuZ2VkIGNvbnRleHQubWV0aG9kIGZyb21cbiAgICAgICAgICAvLyBcInJldHVyblwiIHRvIFwidGhyb3dcIiwgbGV0IHRoYXQgb3ZlcnJpZGUgdGhlIFR5cGVFcnJvciBiZWxvdy5cbiAgICAgICAgICByZXR1cm4gQ29udGludWVTZW50aW5lbDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG1ldGhvZE5hbWUgIT09IFwicmV0dXJuXCIpIHtcbiAgICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICAgIGNvbnRleHQuYXJnID0gbmV3IFR5cGVFcnJvcihcbiAgICAgICAgICBcIlRoZSBpdGVyYXRvciBkb2VzIG5vdCBwcm92aWRlIGEgJ1wiICsgbWV0aG9kTmFtZSArIFwiJyBtZXRob2RcIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciByZWNvcmQgPSB0cnlDYXRjaChtZXRob2QsIGRlbGVnYXRlLml0ZXJhdG9yLCBjb250ZXh0LmFyZyk7XG5cbiAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgY29udGV4dC5tZXRob2QgPSBcInRocm93XCI7XG4gICAgICBjb250ZXh0LmFyZyA9IHJlY29yZC5hcmc7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIHZhciBpbmZvID0gcmVjb3JkLmFyZztcblxuICAgIGlmICghIGluZm8pIHtcbiAgICAgIGNvbnRleHQubWV0aG9kID0gXCJ0aHJvd1wiO1xuICAgICAgY29udGV4dC5hcmcgPSBuZXcgVHlwZUVycm9yKFwiaXRlcmF0b3IgcmVzdWx0IGlzIG5vdCBhbiBvYmplY3RcIik7XG4gICAgICBjb250ZXh0LmRlbGVnYXRlID0gbnVsbDtcbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cblxuICAgIGlmIChpbmZvLmRvbmUpIHtcbiAgICAgIC8vIEFzc2lnbiB0aGUgcmVzdWx0IG9mIHRoZSBmaW5pc2hlZCBkZWxlZ2F0ZSB0byB0aGUgdGVtcG9yYXJ5XG4gICAgICAvLyB2YXJpYWJsZSBzcGVjaWZpZWQgYnkgZGVsZWdhdGUucmVzdWx0TmFtZSAoc2VlIGRlbGVnYXRlWWllbGQpLlxuICAgICAgY29udGV4dFtkZWxlZ2F0ZS5yZXN1bHROYW1lXSA9IGluZm8udmFsdWU7XG5cbiAgICAgIC8vIFJlc3VtZSBleGVjdXRpb24gYXQgdGhlIGRlc2lyZWQgbG9jYXRpb24gKHNlZSBkZWxlZ2F0ZVlpZWxkKS5cbiAgICAgIGNvbnRleHQubmV4dCA9IGRlbGVnYXRlLm5leHRMb2M7XG5cbiAgICAgIC8vIElmIGNvbnRleHQubWV0aG9kIHdhcyBcInRocm93XCIgYnV0IHRoZSBkZWxlZ2F0ZSBoYW5kbGVkIHRoZVxuICAgICAgLy8gZXhjZXB0aW9uLCBsZXQgdGhlIG91dGVyIGdlbmVyYXRvciBwcm9jZWVkIG5vcm1hbGx5LiBJZlxuICAgICAgLy8gY29udGV4dC5tZXRob2Qgd2FzIFwibmV4dFwiLCBmb3JnZXQgY29udGV4dC5hcmcgc2luY2UgaXQgaGFzIGJlZW5cbiAgICAgIC8vIFwiY29uc3VtZWRcIiBieSB0aGUgZGVsZWdhdGUgaXRlcmF0b3IuIElmIGNvbnRleHQubWV0aG9kIHdhc1xuICAgICAgLy8gXCJyZXR1cm5cIiwgYWxsb3cgdGhlIG9yaWdpbmFsIC5yZXR1cm4gY2FsbCB0byBjb250aW51ZSBpbiB0aGVcbiAgICAgIC8vIG91dGVyIGdlbmVyYXRvci5cbiAgICAgIGlmIChjb250ZXh0Lm1ldGhvZCAhPT0gXCJyZXR1cm5cIikge1xuICAgICAgICBjb250ZXh0Lm1ldGhvZCA9IFwibmV4dFwiO1xuICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBSZS15aWVsZCB0aGUgcmVzdWx0IHJldHVybmVkIGJ5IHRoZSBkZWxlZ2F0ZSBtZXRob2QuXG4gICAgICByZXR1cm4gaW5mbztcbiAgICB9XG5cbiAgICAvLyBUaGUgZGVsZWdhdGUgaXRlcmF0b3IgaXMgZmluaXNoZWQsIHNvIGZvcmdldCBpdCBhbmQgY29udGludWUgd2l0aFxuICAgIC8vIHRoZSBvdXRlciBnZW5lcmF0b3IuXG4gICAgY29udGV4dC5kZWxlZ2F0ZSA9IG51bGw7XG4gICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gIH1cblxuICAvLyBEZWZpbmUgR2VuZXJhdG9yLnByb3RvdHlwZS57bmV4dCx0aHJvdyxyZXR1cm59IGluIHRlcm1zIG9mIHRoZVxuICAvLyB1bmlmaWVkIC5faW52b2tlIGhlbHBlciBtZXRob2QuXG4gIGRlZmluZUl0ZXJhdG9yTWV0aG9kcyhHcCk7XG5cbiAgZGVmaW5lKEdwLCB0b1N0cmluZ1RhZ1N5bWJvbCwgXCJHZW5lcmF0b3JcIik7XG5cbiAgLy8gQSBHZW5lcmF0b3Igc2hvdWxkIGFsd2F5cyByZXR1cm4gaXRzZWxmIGFzIHRoZSBpdGVyYXRvciBvYmplY3Qgd2hlbiB0aGVcbiAgLy8gQEBpdGVyYXRvciBmdW5jdGlvbiBpcyBjYWxsZWQgb24gaXQuIFNvbWUgYnJvd3NlcnMnIGltcGxlbWVudGF0aW9ucyBvZiB0aGVcbiAgLy8gaXRlcmF0b3IgcHJvdG90eXBlIGNoYWluIGluY29ycmVjdGx5IGltcGxlbWVudCB0aGlzLCBjYXVzaW5nIHRoZSBHZW5lcmF0b3JcbiAgLy8gb2JqZWN0IHRvIG5vdCBiZSByZXR1cm5lZCBmcm9tIHRoaXMgY2FsbC4gVGhpcyBlbnN1cmVzIHRoYXQgZG9lc24ndCBoYXBwZW4uXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVnZW5lcmF0b3IvaXNzdWVzLzI3NCBmb3IgbW9yZSBkZXRhaWxzLlxuICBkZWZpbmUoR3AsIGl0ZXJhdG9yU3ltYm9sLCBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfSk7XG5cbiAgZGVmaW5lKEdwLCBcInRvU3RyaW5nXCIsIGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBcIltvYmplY3QgR2VuZXJhdG9yXVwiO1xuICB9KTtcblxuICBmdW5jdGlvbiBwdXNoVHJ5RW50cnkobG9jcykge1xuICAgIHZhciBlbnRyeSA9IHsgdHJ5TG9jOiBsb2NzWzBdIH07XG5cbiAgICBpZiAoMSBpbiBsb2NzKSB7XG4gICAgICBlbnRyeS5jYXRjaExvYyA9IGxvY3NbMV07XG4gICAgfVxuXG4gICAgaWYgKDIgaW4gbG9jcykge1xuICAgICAgZW50cnkuZmluYWxseUxvYyA9IGxvY3NbMl07XG4gICAgICBlbnRyeS5hZnRlckxvYyA9IGxvY3NbM107XG4gICAgfVxuXG4gICAgdGhpcy50cnlFbnRyaWVzLnB1c2goZW50cnkpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVzZXRUcnlFbnRyeShlbnRyeSkge1xuICAgIHZhciByZWNvcmQgPSBlbnRyeS5jb21wbGV0aW9uIHx8IHt9O1xuICAgIHJlY29yZC50eXBlID0gXCJub3JtYWxcIjtcbiAgICBkZWxldGUgcmVjb3JkLmFyZztcbiAgICBlbnRyeS5jb21wbGV0aW9uID0gcmVjb3JkO1xuICB9XG5cbiAgZnVuY3Rpb24gQ29udGV4dCh0cnlMb2NzTGlzdCkge1xuICAgIC8vIFRoZSByb290IGVudHJ5IG9iamVjdCAoZWZmZWN0aXZlbHkgYSB0cnkgc3RhdGVtZW50IHdpdGhvdXQgYSBjYXRjaFxuICAgIC8vIG9yIGEgZmluYWxseSBibG9jaykgZ2l2ZXMgdXMgYSBwbGFjZSB0byBzdG9yZSB2YWx1ZXMgdGhyb3duIGZyb21cbiAgICAvLyBsb2NhdGlvbnMgd2hlcmUgdGhlcmUgaXMgbm8gZW5jbG9zaW5nIHRyeSBzdGF0ZW1lbnQuXG4gICAgdGhpcy50cnlFbnRyaWVzID0gW3sgdHJ5TG9jOiBcInJvb3RcIiB9XTtcbiAgICB0cnlMb2NzTGlzdC5mb3JFYWNoKHB1c2hUcnlFbnRyeSwgdGhpcyk7XG4gICAgdGhpcy5yZXNldCh0cnVlKTtcbiAgfVxuXG4gIGV4cG9ydHMua2V5cyA9IGZ1bmN0aW9uKHZhbCkge1xuICAgIHZhciBvYmplY3QgPSBPYmplY3QodmFsKTtcbiAgICB2YXIga2V5cyA9IFtdO1xuICAgIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgIH1cbiAgICBrZXlzLnJldmVyc2UoKTtcblxuICAgIC8vIFJhdGhlciB0aGFuIHJldHVybmluZyBhbiBvYmplY3Qgd2l0aCBhIG5leHQgbWV0aG9kLCB3ZSBrZWVwXG4gICAgLy8gdGhpbmdzIHNpbXBsZSBhbmQgcmV0dXJuIHRoZSBuZXh0IGZ1bmN0aW9uIGl0c2VsZi5cbiAgICByZXR1cm4gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgIHdoaWxlIChrZXlzLmxlbmd0aCkge1xuICAgICAgICB2YXIga2V5ID0ga2V5cy5wb3AoKTtcbiAgICAgICAgaWYgKGtleSBpbiBvYmplY3QpIHtcbiAgICAgICAgICBuZXh0LnZhbHVlID0ga2V5O1xuICAgICAgICAgIG5leHQuZG9uZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIFRvIGF2b2lkIGNyZWF0aW5nIGFuIGFkZGl0aW9uYWwgb2JqZWN0LCB3ZSBqdXN0IGhhbmcgdGhlIC52YWx1ZVxuICAgICAgLy8gYW5kIC5kb25lIHByb3BlcnRpZXMgb2ZmIHRoZSBuZXh0IGZ1bmN0aW9uIG9iamVjdCBpdHNlbGYuIFRoaXNcbiAgICAgIC8vIGFsc28gZW5zdXJlcyB0aGF0IHRoZSBtaW5pZmllciB3aWxsIG5vdCBhbm9ueW1pemUgdGhlIGZ1bmN0aW9uLlxuICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcbiAgICAgIHJldHVybiBuZXh0O1xuICAgIH07XG4gIH07XG5cbiAgZnVuY3Rpb24gdmFsdWVzKGl0ZXJhYmxlKSB7XG4gICAgaWYgKGl0ZXJhYmxlKSB7XG4gICAgICB2YXIgaXRlcmF0b3JNZXRob2QgPSBpdGVyYWJsZVtpdGVyYXRvclN5bWJvbF07XG4gICAgICBpZiAoaXRlcmF0b3JNZXRob2QpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yTWV0aG9kLmNhbGwoaXRlcmFibGUpO1xuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIGl0ZXJhYmxlLm5leHQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gaXRlcmFibGU7XG4gICAgICB9XG5cbiAgICAgIGlmICghaXNOYU4oaXRlcmFibGUubGVuZ3RoKSkge1xuICAgICAgICB2YXIgaSA9IC0xLCBuZXh0ID0gZnVuY3Rpb24gbmV4dCgpIHtcbiAgICAgICAgICB3aGlsZSAoKytpIDwgaXRlcmFibGUubGVuZ3RoKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duLmNhbGwoaXRlcmFibGUsIGkpKSB7XG4gICAgICAgICAgICAgIG5leHQudmFsdWUgPSBpdGVyYWJsZVtpXTtcbiAgICAgICAgICAgICAgbmV4dC5kb25lID0gZmFsc2U7XG4gICAgICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIG5leHQudmFsdWUgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgbmV4dC5kb25lID0gdHJ1ZTtcblxuICAgICAgICAgIHJldHVybiBuZXh0O1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBuZXh0Lm5leHQgPSBuZXh0O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJldHVybiBhbiBpdGVyYXRvciB3aXRoIG5vIHZhbHVlcy5cbiAgICByZXR1cm4geyBuZXh0OiBkb25lUmVzdWx0IH07XG4gIH1cbiAgZXhwb3J0cy52YWx1ZXMgPSB2YWx1ZXM7XG5cbiAgZnVuY3Rpb24gZG9uZVJlc3VsdCgpIHtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cblxuICBDb250ZXh0LnByb3RvdHlwZSA9IHtcbiAgICBjb25zdHJ1Y3RvcjogQ29udGV4dCxcblxuICAgIHJlc2V0OiBmdW5jdGlvbihza2lwVGVtcFJlc2V0KSB7XG4gICAgICB0aGlzLnByZXYgPSAwO1xuICAgICAgdGhpcy5uZXh0ID0gMDtcbiAgICAgIC8vIFJlc2V0dGluZyBjb250ZXh0Ll9zZW50IGZvciBsZWdhY3kgc3VwcG9ydCBvZiBCYWJlbCdzXG4gICAgICAvLyBmdW5jdGlvbi5zZW50IGltcGxlbWVudGF0aW9uLlxuICAgICAgdGhpcy5zZW50ID0gdGhpcy5fc2VudCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuZG9uZSA9IGZhbHNlO1xuICAgICAgdGhpcy5kZWxlZ2F0ZSA9IG51bGw7XG5cbiAgICAgIHRoaXMubWV0aG9kID0gXCJuZXh0XCI7XG4gICAgICB0aGlzLmFyZyA9IHVuZGVmaW5lZDtcblxuICAgICAgdGhpcy50cnlFbnRyaWVzLmZvckVhY2gocmVzZXRUcnlFbnRyeSk7XG5cbiAgICAgIGlmICghc2tpcFRlbXBSZXNldCkge1xuICAgICAgICBmb3IgKHZhciBuYW1lIGluIHRoaXMpIHtcbiAgICAgICAgICAvLyBOb3Qgc3VyZSBhYm91dCB0aGUgb3B0aW1hbCBvcmRlciBvZiB0aGVzZSBjb25kaXRpb25zOlxuICAgICAgICAgIGlmIChuYW1lLmNoYXJBdCgwKSA9PT0gXCJ0XCIgJiZcbiAgICAgICAgICAgICAgaGFzT3duLmNhbGwodGhpcywgbmFtZSkgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKCtuYW1lLnNsaWNlKDEpKSkge1xuICAgICAgICAgICAgdGhpc1tuYW1lXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgc3RvcDogZnVuY3Rpb24oKSB7XG4gICAgICB0aGlzLmRvbmUgPSB0cnVlO1xuXG4gICAgICB2YXIgcm9vdEVudHJ5ID0gdGhpcy50cnlFbnRyaWVzWzBdO1xuICAgICAgdmFyIHJvb3RSZWNvcmQgPSByb290RW50cnkuY29tcGxldGlvbjtcbiAgICAgIGlmIChyb290UmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICB0aHJvdyByb290UmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXMucnZhbDtcbiAgICB9LFxuXG4gICAgZGlzcGF0Y2hFeGNlcHRpb246IGZ1bmN0aW9uKGV4Y2VwdGlvbikge1xuICAgICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgICB0aHJvdyBleGNlcHRpb247XG4gICAgICB9XG5cbiAgICAgIHZhciBjb250ZXh0ID0gdGhpcztcbiAgICAgIGZ1bmN0aW9uIGhhbmRsZShsb2MsIGNhdWdodCkge1xuICAgICAgICByZWNvcmQudHlwZSA9IFwidGhyb3dcIjtcbiAgICAgICAgcmVjb3JkLmFyZyA9IGV4Y2VwdGlvbjtcbiAgICAgICAgY29udGV4dC5uZXh0ID0gbG9jO1xuXG4gICAgICAgIGlmIChjYXVnaHQpIHtcbiAgICAgICAgICAvLyBJZiB0aGUgZGlzcGF0Y2hlZCBleGNlcHRpb24gd2FzIGNhdWdodCBieSBhIGNhdGNoIGJsb2NrLFxuICAgICAgICAgIC8vIHRoZW4gbGV0IHRoYXQgY2F0Y2ggYmxvY2sgaGFuZGxlIHRoZSBleGNlcHRpb24gbm9ybWFsbHkuXG4gICAgICAgICAgY29udGV4dC5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgICBjb250ZXh0LmFyZyA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAhISBjYXVnaHQ7XG4gICAgICB9XG5cbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcblxuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSBcInJvb3RcIikge1xuICAgICAgICAgIC8vIEV4Y2VwdGlvbiB0aHJvd24gb3V0c2lkZSBvZiBhbnkgdHJ5IGJsb2NrIHRoYXQgY291bGQgaGFuZGxlXG4gICAgICAgICAgLy8gaXQsIHNvIHNldCB0aGUgY29tcGxldGlvbiB2YWx1ZSBvZiB0aGUgZW50aXJlIGZ1bmN0aW9uIHRvXG4gICAgICAgICAgLy8gdGhyb3cgdGhlIGV4Y2VwdGlvbi5cbiAgICAgICAgICByZXR1cm4gaGFuZGxlKFwiZW5kXCIpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYpIHtcbiAgICAgICAgICB2YXIgaGFzQ2F0Y2ggPSBoYXNPd24uY2FsbChlbnRyeSwgXCJjYXRjaExvY1wiKTtcbiAgICAgICAgICB2YXIgaGFzRmluYWxseSA9IGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIik7XG5cbiAgICAgICAgICBpZiAoaGFzQ2F0Y2ggJiYgaGFzRmluYWxseSkge1xuICAgICAgICAgICAgaWYgKHRoaXMucHJldiA8IGVudHJ5LmNhdGNoTG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuY2F0Y2hMb2MsIHRydWUpO1xuICAgICAgICAgICAgfSBlbHNlIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0NhdGNoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5wcmV2IDwgZW50cnkuY2F0Y2hMb2MpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGhhbmRsZShlbnRyeS5jYXRjaExvYywgdHJ1ZSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2UgaWYgKGhhc0ZpbmFsbHkpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZXYgPCBlbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgICAgICAgIHJldHVybiBoYW5kbGUoZW50cnkuZmluYWxseUxvYyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwidHJ5IHN0YXRlbWVudCB3aXRob3V0IGNhdGNoIG9yIGZpbmFsbHlcIik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcblxuICAgIGFicnVwdDogZnVuY3Rpb24odHlwZSwgYXJnKSB7XG4gICAgICBmb3IgKHZhciBpID0gdGhpcy50cnlFbnRyaWVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICAgIHZhciBlbnRyeSA9IHRoaXMudHJ5RW50cmllc1tpXTtcbiAgICAgICAgaWYgKGVudHJ5LnRyeUxvYyA8PSB0aGlzLnByZXYgJiZcbiAgICAgICAgICAgIGhhc093bi5jYWxsKGVudHJ5LCBcImZpbmFsbHlMb2NcIikgJiZcbiAgICAgICAgICAgIHRoaXMucHJldiA8IGVudHJ5LmZpbmFsbHlMb2MpIHtcbiAgICAgICAgICB2YXIgZmluYWxseUVudHJ5ID0gZW50cnk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGZpbmFsbHlFbnRyeSAmJlxuICAgICAgICAgICh0eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICAgdHlwZSA9PT0gXCJjb250aW51ZVwiKSAmJlxuICAgICAgICAgIGZpbmFsbHlFbnRyeS50cnlMb2MgPD0gYXJnICYmXG4gICAgICAgICAgYXJnIDw9IGZpbmFsbHlFbnRyeS5maW5hbGx5TG9jKSB7XG4gICAgICAgIC8vIElnbm9yZSB0aGUgZmluYWxseSBlbnRyeSBpZiBjb250cm9sIGlzIG5vdCBqdW1waW5nIHRvIGFcbiAgICAgICAgLy8gbG9jYXRpb24gb3V0c2lkZSB0aGUgdHJ5L2NhdGNoIGJsb2NrLlxuICAgICAgICBmaW5hbGx5RW50cnkgPSBudWxsO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmVjb3JkID0gZmluYWxseUVudHJ5ID8gZmluYWxseUVudHJ5LmNvbXBsZXRpb24gOiB7fTtcbiAgICAgIHJlY29yZC50eXBlID0gdHlwZTtcbiAgICAgIHJlY29yZC5hcmcgPSBhcmc7XG5cbiAgICAgIGlmIChmaW5hbGx5RW50cnkpIHtcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcIm5leHRcIjtcbiAgICAgICAgdGhpcy5uZXh0ID0gZmluYWxseUVudHJ5LmZpbmFsbHlMb2M7XG4gICAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcy5jb21wbGV0ZShyZWNvcmQpO1xuICAgIH0sXG5cbiAgICBjb21wbGV0ZTogZnVuY3Rpb24ocmVjb3JkLCBhZnRlckxvYykge1xuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcInRocm93XCIpIHtcbiAgICAgICAgdGhyb3cgcmVjb3JkLmFyZztcbiAgICAgIH1cblxuICAgICAgaWYgKHJlY29yZC50eXBlID09PSBcImJyZWFrXCIgfHxcbiAgICAgICAgICByZWNvcmQudHlwZSA9PT0gXCJjb250aW51ZVwiKSB7XG4gICAgICAgIHRoaXMubmV4dCA9IHJlY29yZC5hcmc7XG4gICAgICB9IGVsc2UgaWYgKHJlY29yZC50eXBlID09PSBcInJldHVyblwiKSB7XG4gICAgICAgIHRoaXMucnZhbCA9IHRoaXMuYXJnID0gcmVjb3JkLmFyZztcbiAgICAgICAgdGhpcy5tZXRob2QgPSBcInJldHVyblwiO1xuICAgICAgICB0aGlzLm5leHQgPSBcImVuZFwiO1xuICAgICAgfSBlbHNlIGlmIChyZWNvcmQudHlwZSA9PT0gXCJub3JtYWxcIiAmJiBhZnRlckxvYykge1xuICAgICAgICB0aGlzLm5leHQgPSBhZnRlckxvYztcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgfSxcblxuICAgIGZpbmlzaDogZnVuY3Rpb24oZmluYWxseUxvYykge1xuICAgICAgZm9yICh2YXIgaSA9IHRoaXMudHJ5RW50cmllcy5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuICAgICAgICB2YXIgZW50cnkgPSB0aGlzLnRyeUVudHJpZXNbaV07XG4gICAgICAgIGlmIChlbnRyeS5maW5hbGx5TG9jID09PSBmaW5hbGx5TG9jKSB7XG4gICAgICAgICAgdGhpcy5jb21wbGV0ZShlbnRyeS5jb21wbGV0aW9uLCBlbnRyeS5hZnRlckxvYyk7XG4gICAgICAgICAgcmVzZXRUcnlFbnRyeShlbnRyeSk7XG4gICAgICAgICAgcmV0dXJuIENvbnRpbnVlU2VudGluZWw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgXCJjYXRjaFwiOiBmdW5jdGlvbih0cnlMb2MpIHtcbiAgICAgIGZvciAodmFyIGkgPSB0aGlzLnRyeUVudHJpZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyAtLWkpIHtcbiAgICAgICAgdmFyIGVudHJ5ID0gdGhpcy50cnlFbnRyaWVzW2ldO1xuICAgICAgICBpZiAoZW50cnkudHJ5TG9jID09PSB0cnlMb2MpIHtcbiAgICAgICAgICB2YXIgcmVjb3JkID0gZW50cnkuY29tcGxldGlvbjtcbiAgICAgICAgICBpZiAocmVjb3JkLnR5cGUgPT09IFwidGhyb3dcIikge1xuICAgICAgICAgICAgdmFyIHRocm93biA9IHJlY29yZC5hcmc7XG4gICAgICAgICAgICByZXNldFRyeUVudHJ5KGVudHJ5KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHRocm93bjtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBUaGUgY29udGV4dC5jYXRjaCBtZXRob2QgbXVzdCBvbmx5IGJlIGNhbGxlZCB3aXRoIGEgbG9jYXRpb25cbiAgICAgIC8vIGFyZ3VtZW50IHRoYXQgY29ycmVzcG9uZHMgdG8gYSBrbm93biBjYXRjaCBibG9jay5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcImlsbGVnYWwgY2F0Y2ggYXR0ZW1wdFwiKTtcbiAgICB9LFxuXG4gICAgZGVsZWdhdGVZaWVsZDogZnVuY3Rpb24oaXRlcmFibGUsIHJlc3VsdE5hbWUsIG5leHRMb2MpIHtcbiAgICAgIHRoaXMuZGVsZWdhdGUgPSB7XG4gICAgICAgIGl0ZXJhdG9yOiB2YWx1ZXMoaXRlcmFibGUpLFxuICAgICAgICByZXN1bHROYW1lOiByZXN1bHROYW1lLFxuICAgICAgICBuZXh0TG9jOiBuZXh0TG9jXG4gICAgICB9O1xuXG4gICAgICBpZiAodGhpcy5tZXRob2QgPT09IFwibmV4dFwiKSB7XG4gICAgICAgIC8vIERlbGliZXJhdGVseSBmb3JnZXQgdGhlIGxhc3Qgc2VudCB2YWx1ZSBzbyB0aGF0IHdlIGRvbid0XG4gICAgICAgIC8vIGFjY2lkZW50YWxseSBwYXNzIGl0IG9uIHRvIHRoZSBkZWxlZ2F0ZS5cbiAgICAgICAgdGhpcy5hcmcgPSB1bmRlZmluZWQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBDb250aW51ZVNlbnRpbmVsO1xuICAgIH1cbiAgfTtcblxuICAvLyBSZWdhcmRsZXNzIG9mIHdoZXRoZXIgdGhpcyBzY3JpcHQgaXMgZXhlY3V0aW5nIGFzIGEgQ29tbW9uSlMgbW9kdWxlXG4gIC8vIG9yIG5vdCwgcmV0dXJuIHRoZSBydW50aW1lIG9iamVjdCBzbyB0aGF0IHdlIGNhbiBkZWNsYXJlIHRoZSB2YXJpYWJsZVxuICAvLyByZWdlbmVyYXRvclJ1bnRpbWUgaW4gdGhlIG91dGVyIHNjb3BlLCB3aGljaCBhbGxvd3MgdGhpcyBtb2R1bGUgdG8gYmVcbiAgLy8gaW5qZWN0ZWQgZWFzaWx5IGJ5IGBiaW4vcmVnZW5lcmF0b3IgLS1pbmNsdWRlLXJ1bnRpbWUgc2NyaXB0LmpzYC5cbiAgcmV0dXJuIGV4cG9ydHM7XG5cbn0oXG4gIC8vIElmIHRoaXMgc2NyaXB0IGlzIGV4ZWN1dGluZyBhcyBhIENvbW1vbkpTIG1vZHVsZSwgdXNlIG1vZHVsZS5leHBvcnRzXG4gIC8vIGFzIHRoZSByZWdlbmVyYXRvclJ1bnRpbWUgbmFtZXNwYWNlLiBPdGhlcndpc2UgY3JlYXRlIGEgbmV3IGVtcHR5XG4gIC8vIG9iamVjdC4gRWl0aGVyIHdheSwgdGhlIHJlc3VsdGluZyBvYmplY3Qgd2lsbCBiZSB1c2VkIHRvIGluaXRpYWxpemVcbiAgLy8gdGhlIHJlZ2VuZXJhdG9yUnVudGltZSB2YXJpYWJsZSBhdCB0aGUgdG9wIG9mIHRoaXMgZmlsZS5cbiAgdHlwZW9mIG1vZHVsZSA9PT0gXCJvYmplY3RcIiA/IG1vZHVsZS5leHBvcnRzIDoge31cbikpO1xuXG50cnkge1xuICByZWdlbmVyYXRvclJ1bnRpbWUgPSBydW50aW1lO1xufSBjYXRjaCAoYWNjaWRlbnRhbFN0cmljdE1vZGUpIHtcbiAgLy8gVGhpcyBtb2R1bGUgc2hvdWxkIG5vdCBiZSBydW5uaW5nIGluIHN0cmljdCBtb2RlLCBzbyB0aGUgYWJvdmVcbiAgLy8gYXNzaWdubWVudCBzaG91bGQgYWx3YXlzIHdvcmsgdW5sZXNzIHNvbWV0aGluZyBpcyBtaXNjb25maWd1cmVkLiBKdXN0XG4gIC8vIGluIGNhc2UgcnVudGltZS5qcyBhY2NpZGVudGFsbHkgcnVucyBpbiBzdHJpY3QgbW9kZSwgaW4gbW9kZXJuIGVuZ2luZXNcbiAgLy8gd2UgY2FuIGV4cGxpY2l0bHkgYWNjZXNzIGdsb2JhbFRoaXMuIEluIG9sZGVyIGVuZ2luZXMgd2UgY2FuIGVzY2FwZVxuICAvLyBzdHJpY3QgbW9kZSB1c2luZyBhIGdsb2JhbCBGdW5jdGlvbiBjYWxsLiBUaGlzIGNvdWxkIGNvbmNlaXZhYmx5IGZhaWxcbiAgLy8gaWYgYSBDb250ZW50IFNlY3VyaXR5IFBvbGljeSBmb3JiaWRzIHVzaW5nIEZ1bmN0aW9uLCBidXQgaW4gdGhhdCBjYXNlXG4gIC8vIHRoZSBwcm9wZXIgc29sdXRpb24gaXMgdG8gZml4IHRoZSBhY2NpZGVudGFsIHN0cmljdCBtb2RlIHByb2JsZW0uIElmXG4gIC8vIHlvdSd2ZSBtaXNjb25maWd1cmVkIHlvdXIgYnVuZGxlciB0byBmb3JjZSBzdHJpY3QgbW9kZSBhbmQgYXBwbGllZCBhXG4gIC8vIENTUCB0byBmb3JiaWQgRnVuY3Rpb24sIGFuZCB5b3UncmUgbm90IHdpbGxpbmcgdG8gZml4IGVpdGhlciBvZiB0aG9zZVxuICAvLyBwcm9ibGVtcywgcGxlYXNlIGRldGFpbCB5b3VyIHVuaXF1ZSBwcmVkaWNhbWVudCBpbiBhIEdpdEh1YiBpc3N1ZS5cbiAgaWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSBcIm9iamVjdFwiKSB7XG4gICAgZ2xvYmFsVGhpcy5yZWdlbmVyYXRvclJ1bnRpbWUgPSBydW50aW1lO1xuICB9IGVsc2Uge1xuICAgIEZ1bmN0aW9uKFwiclwiLCBcInJlZ2VuZXJhdG9yUnVudGltZSA9IHJcIikocnVudGltZSk7XG4gIH1cbn1cbiIsIi8qKlxuICogQGxpY2Vuc2UgUmVhY3RcbiAqIHNjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG4ndXNlIHN0cmljdCc7ZnVuY3Rpb24gZihhLGIpe3ZhciBjPWEubGVuZ3RoO2EucHVzaChiKTthOmZvcig7MDxjOyl7dmFyIGQ9Yy0xPj4+MSxlPWFbZF07aWYoMDxnKGUsYikpYVtkXT1iLGFbY109ZSxjPWQ7ZWxzZSBicmVhayBhfX1mdW5jdGlvbiBoKGEpe3JldHVybiAwPT09YS5sZW5ndGg/bnVsbDphWzBdfWZ1bmN0aW9uIGsoYSl7aWYoMD09PWEubGVuZ3RoKXJldHVybiBudWxsO3ZhciBiPWFbMF0sYz1hLnBvcCgpO2lmKGMhPT1iKXthWzBdPWM7YTpmb3IodmFyIGQ9MCxlPWEubGVuZ3RoLHc9ZT4+PjE7ZDx3Oyl7dmFyIG09MiooZCsxKS0xLEM9YVttXSxuPW0rMSx4PWFbbl07aWYoMD5nKEMsYykpbjxlJiYwPmcoeCxDKT8oYVtkXT14LGFbbl09YyxkPW4pOihhW2RdPUMsYVttXT1jLGQ9bSk7ZWxzZSBpZihuPGUmJjA+Zyh4LGMpKWFbZF09eCxhW25dPWMsZD1uO2Vsc2UgYnJlYWsgYX19cmV0dXJuIGJ9XG5mdW5jdGlvbiBnKGEsYil7dmFyIGM9YS5zb3J0SW5kZXgtYi5zb3J0SW5kZXg7cmV0dXJuIDAhPT1jP2M6YS5pZC1iLmlkfWlmKFwib2JqZWN0XCI9PT10eXBlb2YgcGVyZm9ybWFuY2UmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBwZXJmb3JtYW5jZS5ub3cpe3ZhciBsPXBlcmZvcm1hbmNlO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIGwubm93KCl9fWVsc2V7dmFyIHA9RGF0ZSxxPXAubm93KCk7ZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gcC5ub3coKS1xfX12YXIgcj1bXSx0PVtdLHU9MSx2PW51bGwseT0zLHo9ITEsQT0hMSxCPSExLEQ9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDpudWxsLEU9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6bnVsbCxGPVwidW5kZWZpbmVkXCIhPT10eXBlb2Ygc2V0SW1tZWRpYXRlP3NldEltbWVkaWF0ZTpudWxsO1xuXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBuYXZpZ2F0b3ImJnZvaWQgMCE9PW5hdmlnYXRvci5zY2hlZHVsaW5nJiZ2b2lkIDAhPT1uYXZpZ2F0b3Iuc2NoZWR1bGluZy5pc0lucHV0UGVuZGluZyYmbmF2aWdhdG9yLnNjaGVkdWxpbmcuaXNJbnB1dFBlbmRpbmcuYmluZChuYXZpZ2F0b3Iuc2NoZWR1bGluZyk7ZnVuY3Rpb24gRyhhKXtmb3IodmFyIGI9aCh0KTtudWxsIT09Yjspe2lmKG51bGw9PT1iLmNhbGxiYWNrKWsodCk7ZWxzZSBpZihiLnN0YXJ0VGltZTw9YSlrKHQpLGIuc29ydEluZGV4PWIuZXhwaXJhdGlvblRpbWUsZihyLGIpO2Vsc2UgYnJlYWs7Yj1oKHQpfX1mdW5jdGlvbiBIKGEpe0I9ITE7RyhhKTtpZighQSlpZihudWxsIT09aChyKSlBPSEwLEkoSik7ZWxzZXt2YXIgYj1oKHQpO251bGwhPT1iJiZLKEgsYi5zdGFydFRpbWUtYSl9fVxuZnVuY3Rpb24gSihhLGIpe0E9ITE7QiYmKEI9ITEsRShMKSxMPS0xKTt6PSEwO3ZhciBjPXk7dHJ5e0coYik7Zm9yKHY9aChyKTtudWxsIT09diYmKCEodi5leHBpcmF0aW9uVGltZT5iKXx8YSYmIU0oKSk7KXt2YXIgZD12LmNhbGxiYWNrO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2LmNhbGxiYWNrPW51bGw7eT12LnByaW9yaXR5TGV2ZWw7dmFyIGU9ZCh2LmV4cGlyYXRpb25UaW1lPD1iKTtiPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGU/di5jYWxsYmFjaz1lOnY9PT1oKHIpJiZrKHIpO0coYil9ZWxzZSBrKHIpO3Y9aChyKX1pZihudWxsIT09dil2YXIgdz0hMDtlbHNle3ZhciBtPWgodCk7bnVsbCE9PW0mJksoSCxtLnN0YXJ0VGltZS1iKTt3PSExfXJldHVybiB3fWZpbmFsbHl7dj1udWxsLHk9Yyx6PSExfX12YXIgTj0hMSxPPW51bGwsTD0tMSxQPTUsUT0tMTtcbmZ1bmN0aW9uIE0oKXtyZXR1cm4gZXhwb3J0cy51bnN0YWJsZV9ub3coKS1RPFA/ITE6ITB9ZnVuY3Rpb24gUigpe2lmKG51bGwhPT1PKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO1E9YTt2YXIgYj0hMDt0cnl7Yj1PKCEwLGEpfWZpbmFsbHl7Yj9TKCk6KE49ITEsTz1udWxsKX19ZWxzZSBOPSExfXZhciBTO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBGKVM9ZnVuY3Rpb24oKXtGKFIpfTtlbHNlIGlmKFwidW5kZWZpbmVkXCIhPT10eXBlb2YgTWVzc2FnZUNoYW5uZWwpe3ZhciBUPW5ldyBNZXNzYWdlQ2hhbm5lbCxVPVQucG9ydDI7VC5wb3J0MS5vbm1lc3NhZ2U9UjtTPWZ1bmN0aW9uKCl7VS5wb3N0TWVzc2FnZShudWxsKX19ZWxzZSBTPWZ1bmN0aW9uKCl7RChSLDApfTtmdW5jdGlvbiBJKGEpe089YTtOfHwoTj0hMCxTKCkpfWZ1bmN0aW9uIEsoYSxiKXtMPUQoZnVuY3Rpb24oKXthKGV4cG9ydHMudW5zdGFibGVfbm93KCkpfSxiKX1cbmV4cG9ydHMudW5zdGFibGVfSWRsZVByaW9yaXR5PTU7ZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eT0xO2V4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHk9NDtleHBvcnRzLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5PTM7ZXhwb3J0cy51bnN0YWJsZV9Qcm9maWxpbmc9bnVsbDtleHBvcnRzLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5PTI7ZXhwb3J0cy51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaz1mdW5jdGlvbihhKXthLmNhbGxiYWNrPW51bGx9O2V4cG9ydHMudW5zdGFibGVfY29udGludWVFeGVjdXRpb249ZnVuY3Rpb24oKXtBfHx6fHwoQT0hMCxJKEopKX07XG5leHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPWZ1bmN0aW9uKGEpezA+YXx8MTI1PGE/Y29uc29sZS5lcnJvcihcImZvcmNlRnJhbWVSYXRlIHRha2VzIGEgcG9zaXRpdmUgaW50IGJldHdlZW4gMCBhbmQgMTI1LCBmb3JjaW5nIGZyYW1lIHJhdGVzIGhpZ2hlciB0aGFuIDEyNSBmcHMgaXMgbm90IHN1cHBvcnRlZFwiKTpQPTA8YT9NYXRoLmZsb29yKDFFMy9hKTo1fTtleHBvcnRzLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsPWZ1bmN0aW9uKCl7cmV0dXJuIHl9O2V4cG9ydHMudW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gaChyKX07ZXhwb3J0cy51bnN0YWJsZV9uZXh0PWZ1bmN0aW9uKGEpe3N3aXRjaCh5KXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzp2YXIgYj0zO2JyZWFrO2RlZmF1bHQ6Yj15fXZhciBjPXk7eT1iO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7eT1jfX07ZXhwb3J0cy51bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbj1mdW5jdGlvbigpe307XG5leHBvcnRzLnVuc3RhYmxlX3JlcXVlc3RQYWludD1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHk9ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6Y2FzZSA0OmNhc2UgNTpicmVhaztkZWZhdWx0OmE9M312YXIgYz15O3k9YTt0cnl7cmV0dXJuIGIoKX1maW5hbGx5e3k9Y319O1xuZXhwb3J0cy51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWM/KGM9Yy5kZWxheSxjPVwibnVtYmVyXCI9PT10eXBlb2YgYyYmMDxjP2QrYzpkKTpjPWQ7c3dpdGNoKGEpe2Nhc2UgMTp2YXIgZT0tMTticmVhaztjYXNlIDI6ZT0yNTA7YnJlYWs7Y2FzZSA1OmU9MTA3Mzc0MTgyMzticmVhaztjYXNlIDQ6ZT0xRTQ7YnJlYWs7ZGVmYXVsdDplPTVFM31lPWMrZTthPXtpZDp1KyssY2FsbGJhY2s6Yixwcmlvcml0eUxldmVsOmEsc3RhcnRUaW1lOmMsZXhwaXJhdGlvblRpbWU6ZSxzb3J0SW5kZXg6LTF9O2M+ZD8oYS5zb3J0SW5kZXg9YyxmKHQsYSksbnVsbD09PWgocikmJmE9PT1oKHQpJiYoQj8oRShMKSxMPS0xKTpCPSEwLEsoSCxjLWQpKSk6KGEuc29ydEluZGV4PWUsZihyLGEpLEF8fHp8fChBPSEwLEkoSikpKTtyZXR1cm4gYX07XG5leHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPU07ZXhwb3J0cy51bnN0YWJsZV93cmFwQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7dmFyIGI9eTtyZXR1cm4gZnVuY3Rpb24oKXt2YXIgYz15O3k9Yjt0cnl7cmV0dXJuIGEuYXBwbHkodGhpcyxhcmd1bWVudHMpfWZpbmFsbHl7eT1jfX19O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIEdldEludHJpbnNpYyA9IHJlcXVpcmUoJ2dldC1pbnRyaW5zaWMnKTtcbnZhciBjYWxsQm91bmQgPSByZXF1aXJlKCdjYWxsLWJpbmQvY2FsbEJvdW5kJyk7XG52YXIgaW5zcGVjdCA9IHJlcXVpcmUoJ29iamVjdC1pbnNwZWN0Jyk7XG5cbnZhciAkVHlwZUVycm9yID0gR2V0SW50cmluc2ljKCclVHlwZUVycm9yJScpO1xudmFyICRXZWFrTWFwID0gR2V0SW50cmluc2ljKCclV2Vha01hcCUnLCB0cnVlKTtcbnZhciAkTWFwID0gR2V0SW50cmluc2ljKCclTWFwJScsIHRydWUpO1xuXG52YXIgJHdlYWtNYXBHZXQgPSBjYWxsQm91bmQoJ1dlYWtNYXAucHJvdG90eXBlLmdldCcsIHRydWUpO1xudmFyICR3ZWFrTWFwU2V0ID0gY2FsbEJvdW5kKCdXZWFrTWFwLnByb3RvdHlwZS5zZXQnLCB0cnVlKTtcbnZhciAkd2Vha01hcEhhcyA9IGNhbGxCb3VuZCgnV2Vha01hcC5wcm90b3R5cGUuaGFzJywgdHJ1ZSk7XG52YXIgJG1hcEdldCA9IGNhbGxCb3VuZCgnTWFwLnByb3RvdHlwZS5nZXQnLCB0cnVlKTtcbnZhciAkbWFwU2V0ID0gY2FsbEJvdW5kKCdNYXAucHJvdG90eXBlLnNldCcsIHRydWUpO1xudmFyICRtYXBIYXMgPSBjYWxsQm91bmQoJ01hcC5wcm90b3R5cGUuaGFzJywgdHJ1ZSk7XG5cbi8qXG4gKiBUaGlzIGZ1bmN0aW9uIHRyYXZlcnNlcyB0aGUgbGlzdCByZXR1cm5pbmcgdGhlIG5vZGUgY29ycmVzcG9uZGluZyB0byB0aGVcbiAqIGdpdmVuIGtleS5cbiAqXG4gKiBUaGF0IG5vZGUgaXMgYWxzbyBtb3ZlZCB0byB0aGUgaGVhZCBvZiB0aGUgbGlzdCwgc28gdGhhdCBpZiBpdCdzIGFjY2Vzc2VkXG4gKiBhZ2FpbiB3ZSBkb24ndCBuZWVkIHRvIHRyYXZlcnNlIHRoZSB3aG9sZSBsaXN0LiBCeSBkb2luZyBzbywgYWxsIHRoZSByZWNlbnRseVxuICogdXNlZCBub2RlcyBjYW4gYmUgYWNjZXNzZWQgcmVsYXRpdmVseSBxdWlja2x5LlxuICovXG52YXIgbGlzdEdldE5vZGUgPSBmdW5jdGlvbiAobGlzdCwga2V5KSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY29uc2lzdGVudC1yZXR1cm5cblx0Zm9yICh2YXIgcHJldiA9IGxpc3QsIGN1cnI7IChjdXJyID0gcHJldi5uZXh0KSAhPT0gbnVsbDsgcHJldiA9IGN1cnIpIHtcblx0XHRpZiAoY3Vyci5rZXkgPT09IGtleSkge1xuXHRcdFx0cHJldi5uZXh0ID0gY3Vyci5uZXh0O1xuXHRcdFx0Y3Vyci5uZXh0ID0gbGlzdC5uZXh0O1xuXHRcdFx0bGlzdC5uZXh0ID0gY3VycjsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuXHRcdFx0cmV0dXJuIGN1cnI7XG5cdFx0fVxuXHR9XG59O1xuXG52YXIgbGlzdEdldCA9IGZ1bmN0aW9uIChvYmplY3RzLCBrZXkpIHtcblx0dmFyIG5vZGUgPSBsaXN0R2V0Tm9kZShvYmplY3RzLCBrZXkpO1xuXHRyZXR1cm4gbm9kZSAmJiBub2RlLnZhbHVlO1xufTtcbnZhciBsaXN0U2V0ID0gZnVuY3Rpb24gKG9iamVjdHMsIGtleSwgdmFsdWUpIHtcblx0dmFyIG5vZGUgPSBsaXN0R2V0Tm9kZShvYmplY3RzLCBrZXkpO1xuXHRpZiAobm9kZSkge1xuXHRcdG5vZGUudmFsdWUgPSB2YWx1ZTtcblx0fSBlbHNlIHtcblx0XHQvLyBQcmVwZW5kIHRoZSBuZXcgbm9kZSB0byB0aGUgYmVnaW5uaW5nIG9mIHRoZSBsaXN0XG5cdFx0b2JqZWN0cy5uZXh0ID0geyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG5cdFx0XHRrZXk6IGtleSxcblx0XHRcdG5leHQ6IG9iamVjdHMubmV4dCxcblx0XHRcdHZhbHVlOiB2YWx1ZVxuXHRcdH07XG5cdH1cbn07XG52YXIgbGlzdEhhcyA9IGZ1bmN0aW9uIChvYmplY3RzLCBrZXkpIHtcblx0cmV0dXJuICEhbGlzdEdldE5vZGUob2JqZWN0cywga2V5KTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gZ2V0U2lkZUNoYW5uZWwoKSB7XG5cdHZhciAkd207XG5cdHZhciAkbTtcblx0dmFyICRvO1xuXHR2YXIgY2hhbm5lbCA9IHtcblx0XHRhc3NlcnQ6IGZ1bmN0aW9uIChrZXkpIHtcblx0XHRcdGlmICghY2hhbm5lbC5oYXMoa2V5KSkge1xuXHRcdFx0XHR0aHJvdyBuZXcgJFR5cGVFcnJvcignU2lkZSBjaGFubmVsIGRvZXMgbm90IGNvbnRhaW4gJyArIGluc3BlY3Qoa2V5KSk7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRnZXQ6IGZ1bmN0aW9uIChrZXkpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjb25zaXN0ZW50LXJldHVyblxuXHRcdFx0aWYgKCRXZWFrTWFwICYmIGtleSAmJiAodHlwZW9mIGtleSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIGtleSA9PT0gJ2Z1bmN0aW9uJykpIHtcblx0XHRcdFx0aWYgKCR3bSkge1xuXHRcdFx0XHRcdHJldHVybiAkd2Vha01hcEdldCgkd20sIGtleSk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAoJE1hcCkge1xuXHRcdFx0XHRpZiAoJG0pIHtcblx0XHRcdFx0XHRyZXR1cm4gJG1hcEdldCgkbSwga2V5KTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYgKCRvKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbG9uZWx5LWlmXG5cdFx0XHRcdFx0cmV0dXJuIGxpc3RHZXQoJG8sIGtleSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXHRcdGhhczogZnVuY3Rpb24gKGtleSkge1xuXHRcdFx0aWYgKCRXZWFrTWFwICYmIGtleSAmJiAodHlwZW9mIGtleSA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIGtleSA9PT0gJ2Z1bmN0aW9uJykpIHtcblx0XHRcdFx0aWYgKCR3bSkge1xuXHRcdFx0XHRcdHJldHVybiAkd2Vha01hcEhhcygkd20sIGtleSk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAoJE1hcCkge1xuXHRcdFx0XHRpZiAoJG0pIHtcblx0XHRcdFx0XHRyZXR1cm4gJG1hcEhhcygkbSwga2V5KTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYgKCRvKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tbG9uZWx5LWlmXG5cdFx0XHRcdFx0cmV0dXJuIGxpc3RIYXMoJG8sIGtleSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9LFxuXHRcdHNldDogZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcblx0XHRcdGlmICgkV2Vha01hcCAmJiBrZXkgJiYgKHR5cGVvZiBrZXkgPT09ICdvYmplY3QnIHx8IHR5cGVvZiBrZXkgPT09ICdmdW5jdGlvbicpKSB7XG5cdFx0XHRcdGlmICghJHdtKSB7XG5cdFx0XHRcdFx0JHdtID0gbmV3ICRXZWFrTWFwKCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0JHdlYWtNYXBTZXQoJHdtLCBrZXksIHZhbHVlKTtcblx0XHRcdH0gZWxzZSBpZiAoJE1hcCkge1xuXHRcdFx0XHRpZiAoISRtKSB7XG5cdFx0XHRcdFx0JG0gPSBuZXcgJE1hcCgpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdCRtYXBTZXQoJG0sIGtleSwgdmFsdWUpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYgKCEkbykge1xuXHRcdFx0XHRcdC8qXG5cdFx0XHRcdFx0ICogSW5pdGlhbGl6ZSB0aGUgbGlua2VkIGxpc3QgYXMgYW4gZW1wdHkgbm9kZSwgc28gdGhhdCB3ZSBkb24ndCBoYXZlXG5cdFx0XHRcdFx0ICogdG8gc3BlY2lhbC1jYXNlIGhhbmRsaW5nIG9mIHRoZSBmaXJzdCBub2RlOiB3ZSBjYW4gYWx3YXlzIHJlZmVyIHRvXG5cdFx0XHRcdFx0ICogaXQgYXMgKHByZXZpb3VzIG5vZGUpLm5leHQsIGluc3RlYWQgb2Ygc29tZXRoaW5nIGxpa2UgKGxpc3QpLmhlYWRcblx0XHRcdFx0XHQgKi9cblx0XHRcdFx0XHQkbyA9IHsga2V5OiB7fSwgbmV4dDogbnVsbCB9O1xuXHRcdFx0XHR9XG5cdFx0XHRcdGxpc3RTZXQoJG8sIGtleSwgdmFsdWUpO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0cmV0dXJuIGNoYW5uZWw7XG59O1xuIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0bG9hZGVkOiBmYWxzZSxcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG5cdG1vZHVsZS5sb2FkZWQgPSB0cnVlO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiX193ZWJwYWNrX3JlcXVpcmVfXy5hbWRPID0ge307IiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCIvLyBkZWZpbmUgX19lc01vZHVsZSBvbiBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLnIgPSAoZXhwb3J0cykgPT4ge1xuXHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcblx0fVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5tZCA9IChtb2R1bGUpID0+IHtcblx0bW9kdWxlLnBhdGhzID0gW107XG5cdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0cmV0dXJuIG1vZHVsZTtcbn07IiwidmFyIHNjcmlwdFVybDtcbmlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmcuaW1wb3J0U2NyaXB0cykgc2NyaXB0VXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmxvY2F0aW9uICsgXCJcIjtcbnZhciBkb2N1bWVudCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5kb2N1bWVudDtcbmlmICghc2NyaXB0VXJsICYmIGRvY3VtZW50KSB7XG5cdGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0KVxuXHRcdHNjcmlwdFVybCA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjXG5cdGlmICghc2NyaXB0VXJsKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRpZihzY3JpcHRzLmxlbmd0aCkgc2NyaXB0VXJsID0gc2NyaXB0c1tzY3JpcHRzLmxlbmd0aCAtIDFdLnNyY1xuXHR9XG59XG4vLyBXaGVuIHN1cHBvcnRpbmcgYnJvd3NlcnMgd2hlcmUgYW4gYXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCB5b3UgbXVzdCBzcGVjaWZ5IGFuIG91dHB1dC5wdWJsaWNQYXRoIG1hbnVhbGx5IHZpYSBjb25maWd1cmF0aW9uXG4vLyBvciBwYXNzIGFuIGVtcHR5IHN0cmluZyAoXCJcIikgYW5kIHNldCB0aGUgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gdmFyaWFibGUgZnJvbSB5b3VyIGNvZGUgdG8gdXNlIHlvdXIgb3duIGxvZ2ljLlxuaWYgKCFzY3JpcHRVcmwpIHRocm93IG5ldyBFcnJvcihcIkF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyXCIpO1xuc2NyaXB0VXJsID0gc2NyaXB0VXJsLnJlcGxhY2UoLyMuKiQvLCBcIlwiKS5yZXBsYWNlKC9cXD8uKiQvLCBcIlwiKS5yZXBsYWNlKC9cXC9bXlxcL10rJC8sIFwiL1wiKTtcbl9fd2VicGFja19yZXF1aXJlX18ucCA9IHNjcmlwdFVybDsiLCIvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIFR5cGVzIGFuZCBDb25zdGFudHNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKlxuICogQWN0aW9ucyByZXByZXNlbnQgdGhlIHR5cGUgb2YgY2hhbmdlIHRvIGEgbG9jYXRpb24gdmFsdWUuXG4gKi9cbmV4cG9ydCBlbnVtIEFjdGlvbiB7XG4gIC8qKlxuICAgKiBBIFBPUCBpbmRpY2F0ZXMgYSBjaGFuZ2UgdG8gYW4gYXJiaXRyYXJ5IGluZGV4IGluIHRoZSBoaXN0b3J5IHN0YWNrLCBzdWNoXG4gICAqIGFzIGEgYmFjayBvciBmb3J3YXJkIG5hdmlnYXRpb24uIEl0IGRvZXMgbm90IGRlc2NyaWJlIHRoZSBkaXJlY3Rpb24gb2YgdGhlXG4gICAqIG5hdmlnYXRpb24sIG9ubHkgdGhhdCB0aGUgY3VycmVudCBpbmRleCBjaGFuZ2VkLlxuICAgKlxuICAgKiBOb3RlOiBUaGlzIGlzIHRoZSBkZWZhdWx0IGFjdGlvbiBmb3IgbmV3bHkgY3JlYXRlZCBoaXN0b3J5IG9iamVjdHMuXG4gICAqL1xuICBQb3AgPSBcIlBPUFwiLFxuXG4gIC8qKlxuICAgKiBBIFBVU0ggaW5kaWNhdGVzIGEgbmV3IGVudHJ5IGJlaW5nIGFkZGVkIHRvIHRoZSBoaXN0b3J5IHN0YWNrLCBzdWNoIGFzIHdoZW5cbiAgICogYSBsaW5rIGlzIGNsaWNrZWQgYW5kIGEgbmV3IHBhZ2UgbG9hZHMuIFdoZW4gdGhpcyBoYXBwZW5zLCBhbGwgc3Vic2VxdWVudFxuICAgKiBlbnRyaWVzIGluIHRoZSBzdGFjayBhcmUgbG9zdC5cbiAgICovXG4gIFB1c2ggPSBcIlBVU0hcIixcblxuICAvKipcbiAgICogQSBSRVBMQUNFIGluZGljYXRlcyB0aGUgZW50cnkgYXQgdGhlIGN1cnJlbnQgaW5kZXggaW4gdGhlIGhpc3Rvcnkgc3RhY2tcbiAgICogYmVpbmcgcmVwbGFjZWQgYnkgYSBuZXcgb25lLlxuICAgKi9cbiAgUmVwbGFjZSA9IFwiUkVQTEFDRVwiLFxufVxuXG4vKipcbiAqIFRoZSBwYXRobmFtZSwgc2VhcmNoLCBhbmQgaGFzaCB2YWx1ZXMgb2YgYSBVUkwuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUGF0aCB7XG4gIC8qKlxuICAgKiBBIFVSTCBwYXRobmFtZSwgYmVnaW5uaW5nIHdpdGggYSAvLlxuICAgKi9cbiAgcGF0aG5hbWU6IHN0cmluZztcblxuICAvKipcbiAgICogQSBVUkwgc2VhcmNoIHN0cmluZywgYmVnaW5uaW5nIHdpdGggYSA/LlxuICAgKi9cbiAgc2VhcmNoOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEEgVVJMIGZyYWdtZW50IGlkZW50aWZpZXIsIGJlZ2lubmluZyB3aXRoIGEgIy5cbiAgICovXG4gIGhhc2g6IHN0cmluZztcbn1cblxuLyoqXG4gKiBBbiBlbnRyeSBpbiBhIGhpc3Rvcnkgc3RhY2suIEEgbG9jYXRpb24gY29udGFpbnMgaW5mb3JtYXRpb24gYWJvdXQgdGhlXG4gKiBVUkwgcGF0aCwgYXMgd2VsbCBhcyBwb3NzaWJseSBzb21lIGFyYml0cmFyeSBzdGF0ZSBhbmQgYSBrZXkuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTG9jYXRpb24gZXh0ZW5kcyBQYXRoIHtcbiAgLyoqXG4gICAqIEEgdmFsdWUgb2YgYXJiaXRyYXJ5IGRhdGEgYXNzb2NpYXRlZCB3aXRoIHRoaXMgbG9jYXRpb24uXG4gICAqL1xuICBzdGF0ZTogYW55O1xuXG4gIC8qKlxuICAgKiBBIHVuaXF1ZSBzdHJpbmcgYXNzb2NpYXRlZCB3aXRoIHRoaXMgbG9jYXRpb24uIE1heSBiZSB1c2VkIHRvIHNhZmVseSBzdG9yZVxuICAgKiBhbmQgcmV0cmlldmUgZGF0YSBpbiBzb21lIG90aGVyIHN0b3JhZ2UgQVBJLCBsaWtlIGBsb2NhbFN0b3JhZ2VgLlxuICAgKlxuICAgKiBOb3RlOiBUaGlzIHZhbHVlIGlzIGFsd2F5cyBcImRlZmF1bHRcIiBvbiB0aGUgaW5pdGlhbCBsb2NhdGlvbi5cbiAgICovXG4gIGtleTogc3RyaW5nO1xufVxuXG4vKipcbiAqIEEgY2hhbmdlIHRvIHRoZSBjdXJyZW50IGxvY2F0aW9uLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFVwZGF0ZSB7XG4gIC8qKlxuICAgKiBUaGUgYWN0aW9uIHRoYXQgdHJpZ2dlcmVkIHRoZSBjaGFuZ2UuXG4gICAqL1xuICBhY3Rpb246IEFjdGlvbjtcblxuICAvKipcbiAgICogVGhlIG5ldyBsb2NhdGlvbi5cbiAgICovXG4gIGxvY2F0aW9uOiBMb2NhdGlvbjtcblxuICAvKipcbiAgICogVGhlIGRlbHRhIGJldHdlZW4gdGhpcyBsb2NhdGlvbiBhbmQgdGhlIGZvcm1lciBsb2NhdGlvbiBpbiB0aGUgaGlzdG9yeSBzdGFja1xuICAgKi9cbiAgZGVsdGE6IG51bWJlciB8IG51bGw7XG59XG5cbi8qKlxuICogQSBmdW5jdGlvbiB0aGF0IHJlY2VpdmVzIG5vdGlmaWNhdGlvbnMgYWJvdXQgbG9jYXRpb24gY2hhbmdlcy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBMaXN0ZW5lciB7XG4gICh1cGRhdGU6IFVwZGF0ZSk6IHZvaWQ7XG59XG5cbi8qKlxuICogRGVzY3JpYmVzIGEgbG9jYXRpb24gdGhhdCBpcyB0aGUgZGVzdGluYXRpb24gb2Ygc29tZSBuYXZpZ2F0aW9uLCBlaXRoZXIgdmlhXG4gKiBgaGlzdG9yeS5wdXNoYCBvciBgaGlzdG9yeS5yZXBsYWNlYC4gTWF5IGJlIGVpdGhlciBhIFVSTCBvciB0aGUgcGllY2VzIG9mIGFcbiAqIFVSTCBwYXRoLlxuICovXG5leHBvcnQgdHlwZSBUbyA9IHN0cmluZyB8IFBhcnRpYWw8UGF0aD47XG5cbi8qKlxuICogQSBoaXN0b3J5IGlzIGFuIGludGVyZmFjZSB0byB0aGUgbmF2aWdhdGlvbiBzdGFjay4gVGhlIGhpc3Rvcnkgc2VydmVzIGFzIHRoZVxuICogc291cmNlIG9mIHRydXRoIGZvciB0aGUgY3VycmVudCBsb2NhdGlvbiwgYXMgd2VsbCBhcyBwcm92aWRlcyBhIHNldCBvZlxuICogbWV0aG9kcyB0aGF0IG1heSBiZSB1c2VkIHRvIGNoYW5nZSBpdC5cbiAqXG4gKiBJdCBpcyBzaW1pbGFyIHRvIHRoZSBET00ncyBgd2luZG93Lmhpc3RvcnlgIG9iamVjdCwgYnV0IHdpdGggYSBzbWFsbGVyLCBtb3JlXG4gKiBmb2N1c2VkIEFQSS5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBIaXN0b3J5IHtcbiAgLyoqXG4gICAqIFRoZSBsYXN0IGFjdGlvbiB0aGF0IG1vZGlmaWVkIHRoZSBjdXJyZW50IGxvY2F0aW9uLiBUaGlzIHdpbGwgYWx3YXlzIGJlXG4gICAqIEFjdGlvbi5Qb3Agd2hlbiBhIGhpc3RvcnkgaW5zdGFuY2UgaXMgZmlyc3QgY3JlYXRlZC4gVGhpcyB2YWx1ZSBpcyBtdXRhYmxlLlxuICAgKi9cbiAgcmVhZG9ubHkgYWN0aW9uOiBBY3Rpb247XG5cbiAgLyoqXG4gICAqIFRoZSBjdXJyZW50IGxvY2F0aW9uLiBUaGlzIHZhbHVlIGlzIG11dGFibGUuXG4gICAqL1xuICByZWFkb25seSBsb2NhdGlvbjogTG9jYXRpb247XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSB2YWxpZCBocmVmIGZvciB0aGUgZ2l2ZW4gYHRvYCB2YWx1ZSB0aGF0IG1heSBiZSB1c2VkIGFzXG4gICAqIHRoZSB2YWx1ZSBvZiBhbiA8YSBocmVmPiBhdHRyaWJ1dGUuXG4gICAqXG4gICAqIEBwYXJhbSB0byAtIFRoZSBkZXN0aW5hdGlvbiBVUkxcbiAgICovXG4gIGNyZWF0ZUhyZWYodG86IFRvKTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgVVJMIGZvciB0aGUgZ2l2ZW4gYHRvYCB2YWx1ZVxuICAgKlxuICAgKiBAcGFyYW0gdG8gLSBUaGUgZGVzdGluYXRpb24gVVJMXG4gICAqL1xuICBjcmVhdGVVUkwodG86IFRvKTogVVJMO1xuXG4gIC8qKlxuICAgKiBFbmNvZGUgYSBsb2NhdGlvbiB0aGUgc2FtZSB3YXkgd2luZG93Lmhpc3Rvcnkgd291bGQgZG8gKG5vLW9wIGZvciBtZW1vcnlcbiAgICogaGlzdG9yeSkgc28gd2UgZW5zdXJlIG91ciBQVVNIL1JFUExBQ0UgbmF2aWdhdGlvbnMgZm9yIGRhdGEgcm91dGVyc1xuICAgKiBiZWhhdmUgdGhlIHNhbWUgYXMgUE9QXG4gICAqXG4gICAqIEBwYXJhbSB0byBVbmVuY29kZWQgcGF0aFxuICAgKi9cbiAgZW5jb2RlTG9jYXRpb24odG86IFRvKTogUGF0aDtcblxuICAvKipcbiAgICogUHVzaGVzIGEgbmV3IGxvY2F0aW9uIG9udG8gdGhlIGhpc3Rvcnkgc3RhY2ssIGluY3JlYXNpbmcgaXRzIGxlbmd0aCBieSBvbmUuXG4gICAqIElmIHRoZXJlIHdlcmUgYW55IGVudHJpZXMgaW4gdGhlIHN0YWNrIGFmdGVyIHRoZSBjdXJyZW50IG9uZSwgdGhleSBhcmVcbiAgICogbG9zdC5cbiAgICpcbiAgICogQHBhcmFtIHRvIC0gVGhlIG5ldyBVUkxcbiAgICogQHBhcmFtIHN0YXRlIC0gRGF0YSB0byBhc3NvY2lhdGUgd2l0aCB0aGUgbmV3IGxvY2F0aW9uXG4gICAqL1xuICBwdXNoKHRvOiBUbywgc3RhdGU/OiBhbnkpOiB2b2lkO1xuXG4gIC8qKlxuICAgKiBSZXBsYWNlcyB0aGUgY3VycmVudCBsb2NhdGlvbiBpbiB0aGUgaGlzdG9yeSBzdGFjayB3aXRoIGEgbmV3IG9uZS4gIFRoZVxuICAgKiBsb2NhdGlvbiB0aGF0IHdhcyByZXBsYWNlZCB3aWxsIG5vIGxvbmdlciBiZSBhdmFpbGFibGUuXG4gICAqXG4gICAqIEBwYXJhbSB0byAtIFRoZSBuZXcgVVJMXG4gICAqIEBwYXJhbSBzdGF0ZSAtIERhdGEgdG8gYXNzb2NpYXRlIHdpdGggdGhlIG5ldyBsb2NhdGlvblxuICAgKi9cbiAgcmVwbGFjZSh0bzogVG8sIHN0YXRlPzogYW55KTogdm9pZDtcblxuICAvKipcbiAgICogTmF2aWdhdGVzIGBuYCBlbnRyaWVzIGJhY2t3YXJkL2ZvcndhcmQgaW4gdGhlIGhpc3Rvcnkgc3RhY2sgcmVsYXRpdmUgdG8gdGhlXG4gICAqIGN1cnJlbnQgaW5kZXguIEZvciBleGFtcGxlLCBhIFwiYmFja1wiIG5hdmlnYXRpb24gd291bGQgdXNlIGdvKC0xKS5cbiAgICpcbiAgICogQHBhcmFtIGRlbHRhIC0gVGhlIGRlbHRhIGluIHRoZSBzdGFjayBpbmRleFxuICAgKi9cbiAgZ28oZGVsdGE6IG51bWJlcik6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIFNldHMgdXAgYSBsaXN0ZW5lciB0aGF0IHdpbGwgYmUgY2FsbGVkIHdoZW5ldmVyIHRoZSBjdXJyZW50IGxvY2F0aW9uXG4gICAqIGNoYW5nZXMuXG4gICAqXG4gICAqIEBwYXJhbSBsaXN0ZW5lciAtIEEgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCB3aGVuIHRoZSBsb2NhdGlvbiBjaGFuZ2VzXG4gICAqIEByZXR1cm5zIHVubGlzdGVuIC0gQSBmdW5jdGlvbiB0aGF0IG1heSBiZSB1c2VkIHRvIHN0b3AgbGlzdGVuaW5nXG4gICAqL1xuICBsaXN0ZW4obGlzdGVuZXI6IExpc3RlbmVyKTogKCkgPT4gdm9pZDtcbn1cblxudHlwZSBIaXN0b3J5U3RhdGUgPSB7XG4gIHVzcjogYW55O1xuICBrZXk/OiBzdHJpbmc7XG4gIGlkeDogbnVtYmVyO1xufTtcblxuY29uc3QgUG9wU3RhdGVFdmVudFR5cGUgPSBcInBvcHN0YXRlXCI7XG4vLyNlbmRyZWdpb25cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vI3JlZ2lvbiBNZW1vcnkgSGlzdG9yeVxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBBIHVzZXItc3VwcGxpZWQgb2JqZWN0IHRoYXQgZGVzY3JpYmVzIGEgbG9jYXRpb24uIFVzZWQgd2hlbiBwcm92aWRpbmdcbiAqIGVudHJpZXMgdG8gYGNyZWF0ZU1lbW9yeUhpc3RvcnlgIHZpYSBpdHMgYGluaXRpYWxFbnRyaWVzYCBvcHRpb24uXG4gKi9cbmV4cG9ydCB0eXBlIEluaXRpYWxFbnRyeSA9IHN0cmluZyB8IFBhcnRpYWw8TG9jYXRpb24+O1xuXG5leHBvcnQgdHlwZSBNZW1vcnlIaXN0b3J5T3B0aW9ucyA9IHtcbiAgaW5pdGlhbEVudHJpZXM/OiBJbml0aWFsRW50cnlbXTtcbiAgaW5pdGlhbEluZGV4PzogbnVtYmVyO1xuICB2NUNvbXBhdD86IGJvb2xlYW47XG59O1xuXG4vKipcbiAqIEEgbWVtb3J5IGhpc3Rvcnkgc3RvcmVzIGxvY2F0aW9ucyBpbiBtZW1vcnkuIFRoaXMgaXMgdXNlZnVsIGluIHN0YXRlZnVsXG4gKiBlbnZpcm9ubWVudHMgd2hlcmUgdGhlcmUgaXMgbm8gd2ViIGJyb3dzZXIsIHN1Y2ggYXMgbm9kZSB0ZXN0cyBvciBSZWFjdFxuICogTmF0aXZlLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIE1lbW9yeUhpc3RvcnkgZXh0ZW5kcyBIaXN0b3J5IHtcbiAgLyoqXG4gICAqIFRoZSBjdXJyZW50IGluZGV4IGluIHRoZSBoaXN0b3J5IHN0YWNrLlxuICAgKi9cbiAgcmVhZG9ubHkgaW5kZXg6IG51bWJlcjtcbn1cblxuLyoqXG4gKiBNZW1vcnkgaGlzdG9yeSBzdG9yZXMgdGhlIGN1cnJlbnQgbG9jYXRpb24gaW4gbWVtb3J5LiBJdCBpcyBkZXNpZ25lZCBmb3IgdXNlXG4gKiBpbiBzdGF0ZWZ1bCBub24tYnJvd3NlciBlbnZpcm9ubWVudHMgbGlrZSB0ZXN0cyBhbmQgUmVhY3QgTmF0aXZlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTWVtb3J5SGlzdG9yeShcbiAgb3B0aW9uczogTWVtb3J5SGlzdG9yeU9wdGlvbnMgPSB7fVxuKTogTWVtb3J5SGlzdG9yeSB7XG4gIGxldCB7IGluaXRpYWxFbnRyaWVzID0gW1wiL1wiXSwgaW5pdGlhbEluZGV4LCB2NUNvbXBhdCA9IGZhbHNlIH0gPSBvcHRpb25zO1xuICBsZXQgZW50cmllczogTG9jYXRpb25bXTsgLy8gRGVjbGFyZSBzbyB3ZSBjYW4gYWNjZXNzIGZyb20gY3JlYXRlTWVtb3J5TG9jYXRpb25cbiAgZW50cmllcyA9IGluaXRpYWxFbnRyaWVzLm1hcCgoZW50cnksIGluZGV4KSA9PlxuICAgIGNyZWF0ZU1lbW9yeUxvY2F0aW9uKFxuICAgICAgZW50cnksXG4gICAgICB0eXBlb2YgZW50cnkgPT09IFwic3RyaW5nXCIgPyBudWxsIDogZW50cnkuc3RhdGUsXG4gICAgICBpbmRleCA9PT0gMCA/IFwiZGVmYXVsdFwiIDogdW5kZWZpbmVkXG4gICAgKVxuICApO1xuICBsZXQgaW5kZXggPSBjbGFtcEluZGV4KFxuICAgIGluaXRpYWxJbmRleCA9PSBudWxsID8gZW50cmllcy5sZW5ndGggLSAxIDogaW5pdGlhbEluZGV4XG4gICk7XG4gIGxldCBhY3Rpb24gPSBBY3Rpb24uUG9wO1xuICBsZXQgbGlzdGVuZXI6IExpc3RlbmVyIHwgbnVsbCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gY2xhbXBJbmRleChuOiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCAwKSwgZW50cmllcy5sZW5ndGggLSAxKTtcbiAgfVxuICBmdW5jdGlvbiBnZXRDdXJyZW50TG9jYXRpb24oKTogTG9jYXRpb24ge1xuICAgIHJldHVybiBlbnRyaWVzW2luZGV4XTtcbiAgfVxuICBmdW5jdGlvbiBjcmVhdGVNZW1vcnlMb2NhdGlvbihcbiAgICB0bzogVG8sXG4gICAgc3RhdGU6IGFueSA9IG51bGwsXG4gICAga2V5Pzogc3RyaW5nXG4gICk6IExvY2F0aW9uIHtcbiAgICBsZXQgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihcbiAgICAgIGVudHJpZXMgPyBnZXRDdXJyZW50TG9jYXRpb24oKS5wYXRobmFtZSA6IFwiL1wiLFxuICAgICAgdG8sXG4gICAgICBzdGF0ZSxcbiAgICAgIGtleVxuICAgICk7XG4gICAgd2FybmluZyhcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSA9PT0gXCIvXCIsXG4gICAgICBgcmVsYXRpdmUgcGF0aG5hbWVzIGFyZSBub3Qgc3VwcG9ydGVkIGluIG1lbW9yeSBoaXN0b3J5OiAke0pTT04uc3RyaW5naWZ5KFxuICAgICAgICB0b1xuICAgICAgKX1gXG4gICAgKTtcbiAgICByZXR1cm4gbG9jYXRpb247XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKHRvOiBUbykge1xuICAgIHJldHVybiB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyB0byA6IGNyZWF0ZVBhdGgodG8pO1xuICB9XG5cbiAgbGV0IGhpc3Rvcnk6IE1lbW9yeUhpc3RvcnkgPSB7XG4gICAgZ2V0IGluZGV4KCkge1xuICAgICAgcmV0dXJuIGluZGV4O1xuICAgIH0sXG4gICAgZ2V0IGFjdGlvbigpIHtcbiAgICAgIHJldHVybiBhY3Rpb247XG4gICAgfSxcbiAgICBnZXQgbG9jYXRpb24oKSB7XG4gICAgICByZXR1cm4gZ2V0Q3VycmVudExvY2F0aW9uKCk7XG4gICAgfSxcbiAgICBjcmVhdGVIcmVmLFxuICAgIGNyZWF0ZVVSTCh0bykge1xuICAgICAgcmV0dXJuIG5ldyBVUkwoY3JlYXRlSHJlZih0byksIFwiaHR0cDovL2xvY2FsaG9zdFwiKTtcbiAgICB9LFxuICAgIGVuY29kZUxvY2F0aW9uKHRvOiBUbykge1xuICAgICAgbGV0IHBhdGggPSB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgodG8pIDogdG87XG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYXRobmFtZTogcGF0aC5wYXRobmFtZSB8fCBcIlwiLFxuICAgICAgICBzZWFyY2g6IHBhdGguc2VhcmNoIHx8IFwiXCIsXG4gICAgICAgIGhhc2g6IHBhdGguaGFzaCB8fCBcIlwiLFxuICAgICAgfTtcbiAgICB9LFxuICAgIHB1c2godG8sIHN0YXRlKSB7XG4gICAgICBhY3Rpb24gPSBBY3Rpb24uUHVzaDtcbiAgICAgIGxldCBuZXh0TG9jYXRpb24gPSBjcmVhdGVNZW1vcnlMb2NhdGlvbih0bywgc3RhdGUpO1xuICAgICAgaW5kZXggKz0gMTtcbiAgICAgIGVudHJpZXMuc3BsaWNlKGluZGV4LCBlbnRyaWVzLmxlbmd0aCwgbmV4dExvY2F0aW9uKTtcbiAgICAgIGlmICh2NUNvbXBhdCAmJiBsaXN0ZW5lcikge1xuICAgICAgICBsaXN0ZW5lcih7IGFjdGlvbiwgbG9jYXRpb246IG5leHRMb2NhdGlvbiwgZGVsdGE6IDEgfSk7XG4gICAgICB9XG4gICAgfSxcbiAgICByZXBsYWNlKHRvLCBzdGF0ZSkge1xuICAgICAgYWN0aW9uID0gQWN0aW9uLlJlcGxhY2U7XG4gICAgICBsZXQgbmV4dExvY2F0aW9uID0gY3JlYXRlTWVtb3J5TG9jYXRpb24odG8sIHN0YXRlKTtcbiAgICAgIGVudHJpZXNbaW5kZXhdID0gbmV4dExvY2F0aW9uO1xuICAgICAgaWYgKHY1Q29tcGF0ICYmIGxpc3RlbmVyKSB7XG4gICAgICAgIGxpc3RlbmVyKHsgYWN0aW9uLCBsb2NhdGlvbjogbmV4dExvY2F0aW9uLCBkZWx0YTogMCB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGdvKGRlbHRhKSB7XG4gICAgICBhY3Rpb24gPSBBY3Rpb24uUG9wO1xuICAgICAgbGV0IG5leHRJbmRleCA9IGNsYW1wSW5kZXgoaW5kZXggKyBkZWx0YSk7XG4gICAgICBsZXQgbmV4dExvY2F0aW9uID0gZW50cmllc1tuZXh0SW5kZXhdO1xuICAgICAgaW5kZXggPSBuZXh0SW5kZXg7XG4gICAgICBpZiAobGlzdGVuZXIpIHtcbiAgICAgICAgbGlzdGVuZXIoeyBhY3Rpb24sIGxvY2F0aW9uOiBuZXh0TG9jYXRpb24sIGRlbHRhIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgbGlzdGVuKGZuOiBMaXN0ZW5lcikge1xuICAgICAgbGlzdGVuZXIgPSBmbjtcbiAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGxpc3RlbmVyID0gbnVsbDtcbiAgICAgIH07XG4gICAgfSxcbiAgfTtcblxuICByZXR1cm4gaGlzdG9yeTtcbn1cbi8vI2VuZHJlZ2lvblxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIEJyb3dzZXIgSGlzdG9yeVxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBBIGJyb3dzZXIgaGlzdG9yeSBzdG9yZXMgdGhlIGN1cnJlbnQgbG9jYXRpb24gaW4gcmVndWxhciBVUkxzIGluIGEgd2ViXG4gKiBicm93c2VyIGVudmlyb25tZW50LiBUaGlzIGlzIHRoZSBzdGFuZGFyZCBmb3IgbW9zdCB3ZWIgYXBwcyBhbmQgcHJvdmlkZXMgdGhlXG4gKiBjbGVhbmVzdCBVUkxzIHRoZSBicm93c2VyJ3MgYWRkcmVzcyBiYXIuXG4gKlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vcmVtaXgtcnVuL2hpc3RvcnkvdHJlZS9tYWluL2RvY3MvYXBpLXJlZmVyZW5jZS5tZCNicm93c2VyaGlzdG9yeVxuICovXG5leHBvcnQgaW50ZXJmYWNlIEJyb3dzZXJIaXN0b3J5IGV4dGVuZHMgVXJsSGlzdG9yeSB7fVxuXG5leHBvcnQgdHlwZSBCcm93c2VySGlzdG9yeU9wdGlvbnMgPSBVcmxIaXN0b3J5T3B0aW9ucztcblxuLyoqXG4gKiBCcm93c2VyIGhpc3Rvcnkgc3RvcmVzIHRoZSBsb2NhdGlvbiBpbiByZWd1bGFyIFVSTHMuIFRoaXMgaXMgdGhlIHN0YW5kYXJkIGZvclxuICogbW9zdCB3ZWIgYXBwcywgYnV0IGl0IHJlcXVpcmVzIHNvbWUgY29uZmlndXJhdGlvbiBvbiB0aGUgc2VydmVyIHRvIGVuc3VyZSB5b3VcbiAqIHNlcnZlIHRoZSBzYW1lIGFwcCBhdCBtdWx0aXBsZSBVUkxzLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3JlbWl4LXJ1bi9oaXN0b3J5L3RyZWUvbWFpbi9kb2NzL2FwaS1yZWZlcmVuY2UubWQjY3JlYXRlYnJvd3Nlcmhpc3RvcnlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIaXN0b3J5KFxuICBvcHRpb25zOiBCcm93c2VySGlzdG9yeU9wdGlvbnMgPSB7fVxuKTogQnJvd3Nlckhpc3Rvcnkge1xuICBmdW5jdGlvbiBjcmVhdGVCcm93c2VyTG9jYXRpb24oXG4gICAgd2luZG93OiBXaW5kb3csXG4gICAgZ2xvYmFsSGlzdG9yeTogV2luZG93W1wiaGlzdG9yeVwiXVxuICApIHtcbiAgICBsZXQgeyBwYXRobmFtZSwgc2VhcmNoLCBoYXNoIH0gPSB3aW5kb3cubG9jYXRpb247XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKFxuICAgICAgXCJcIixcbiAgICAgIHsgcGF0aG5hbWUsIHNlYXJjaCwgaGFzaCB9LFxuICAgICAgLy8gc3RhdGUgZGVmYXVsdHMgdG8gYG51bGxgIGJlY2F1c2UgYHdpbmRvdy5oaXN0b3J5LnN0YXRlYCBkb2VzXG4gICAgICAoZ2xvYmFsSGlzdG9yeS5zdGF0ZSAmJiBnbG9iYWxIaXN0b3J5LnN0YXRlLnVzcikgfHwgbnVsbCxcbiAgICAgIChnbG9iYWxIaXN0b3J5LnN0YXRlICYmIGdsb2JhbEhpc3Rvcnkuc3RhdGUua2V5KSB8fCBcImRlZmF1bHRcIlxuICAgICk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVCcm93c2VySHJlZih3aW5kb3c6IFdpbmRvdywgdG86IFRvKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHRvIDogY3JlYXRlUGF0aCh0byk7XG4gIH1cblxuICByZXR1cm4gZ2V0VXJsQmFzZWRIaXN0b3J5KFxuICAgIGNyZWF0ZUJyb3dzZXJMb2NhdGlvbixcbiAgICBjcmVhdGVCcm93c2VySHJlZixcbiAgICBudWxsLFxuICAgIG9wdGlvbnNcbiAgKTtcbn1cbi8vI2VuZHJlZ2lvblxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIEhhc2ggSGlzdG9yeVxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBBIGhhc2ggaGlzdG9yeSBzdG9yZXMgdGhlIGN1cnJlbnQgbG9jYXRpb24gaW4gdGhlIGZyYWdtZW50IGlkZW50aWZpZXIgcG9ydGlvblxuICogb2YgdGhlIFVSTCBpbiBhIHdlYiBicm93c2VyIGVudmlyb25tZW50LlxuICpcbiAqIFRoaXMgaXMgaWRlYWwgZm9yIGFwcHMgdGhhdCBkbyBub3QgY29udHJvbCB0aGUgc2VydmVyIGZvciBzb21lIHJlYXNvblxuICogKGJlY2F1c2UgdGhlIGZyYWdtZW50IGlkZW50aWZpZXIgaXMgbmV2ZXIgc2VudCB0byB0aGUgc2VydmVyKSwgaW5jbHVkaW5nIHNvbWVcbiAqIHNoYXJlZCBob3N0aW5nIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBwcm92aWRlIGZpbmUtZ3JhaW5lZCBjb250cm9scyBvdmVyXG4gKiB3aGljaCBwYWdlcyBhcmUgc2VydmVkIGF0IHdoaWNoIFVSTHMuXG4gKlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vcmVtaXgtcnVuL2hpc3RvcnkvdHJlZS9tYWluL2RvY3MvYXBpLXJlZmVyZW5jZS5tZCNoYXNoaGlzdG9yeVxuICovXG5leHBvcnQgaW50ZXJmYWNlIEhhc2hIaXN0b3J5IGV4dGVuZHMgVXJsSGlzdG9yeSB7fVxuXG5leHBvcnQgdHlwZSBIYXNoSGlzdG9yeU9wdGlvbnMgPSBVcmxIaXN0b3J5T3B0aW9ucztcblxuLyoqXG4gKiBIYXNoIGhpc3Rvcnkgc3RvcmVzIHRoZSBsb2NhdGlvbiBpbiB3aW5kb3cubG9jYXRpb24uaGFzaC4gVGhpcyBtYWtlcyBpdCBpZGVhbFxuICogZm9yIHNpdHVhdGlvbnMgd2hlcmUgeW91IGRvbid0IHdhbnQgdG8gc2VuZCB0aGUgbG9jYXRpb24gdG8gdGhlIHNlcnZlciBmb3JcbiAqIHNvbWUgcmVhc29uLCBlaXRoZXIgYmVjYXVzZSB5b3UgZG8gY2Fubm90IGNvbmZpZ3VyZSBpdCBvciB0aGUgVVJMIHNwYWNlIGlzXG4gKiByZXNlcnZlZCBmb3Igc29tZXRoaW5nIGVsc2UuXG4gKlxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vcmVtaXgtcnVuL2hpc3RvcnkvdHJlZS9tYWluL2RvY3MvYXBpLXJlZmVyZW5jZS5tZCNjcmVhdGVoYXNoaGlzdG9yeVxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlSGFzaEhpc3RvcnkoXG4gIG9wdGlvbnM6IEhhc2hIaXN0b3J5T3B0aW9ucyA9IHt9XG4pOiBIYXNoSGlzdG9yeSB7XG4gIGZ1bmN0aW9uIGNyZWF0ZUhhc2hMb2NhdGlvbihcbiAgICB3aW5kb3c6IFdpbmRvdyxcbiAgICBnbG9iYWxIaXN0b3J5OiBXaW5kb3dbXCJoaXN0b3J5XCJdXG4gICkge1xuICAgIGxldCB7XG4gICAgICBwYXRobmFtZSA9IFwiL1wiLFxuICAgICAgc2VhcmNoID0gXCJcIixcbiAgICAgIGhhc2ggPSBcIlwiLFxuICAgIH0gPSBwYXJzZVBhdGgod2luZG93LmxvY2F0aW9uLmhhc2guc3Vic3RyKDEpKTtcbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24oXG4gICAgICBcIlwiLFxuICAgICAgeyBwYXRobmFtZSwgc2VhcmNoLCBoYXNoIH0sXG4gICAgICAvLyBzdGF0ZSBkZWZhdWx0cyB0byBgbnVsbGAgYmVjYXVzZSBgd2luZG93Lmhpc3Rvcnkuc3RhdGVgIGRvZXNcbiAgICAgIChnbG9iYWxIaXN0b3J5LnN0YXRlICYmIGdsb2JhbEhpc3Rvcnkuc3RhdGUudXNyKSB8fCBudWxsLFxuICAgICAgKGdsb2JhbEhpc3Rvcnkuc3RhdGUgJiYgZ2xvYmFsSGlzdG9yeS5zdGF0ZS5rZXkpIHx8IFwiZGVmYXVsdFwiXG4gICAgKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUhhc2hIcmVmKHdpbmRvdzogV2luZG93LCB0bzogVG8pIHtcbiAgICBsZXQgYmFzZSA9IHdpbmRvdy5kb2N1bWVudC5xdWVyeVNlbGVjdG9yKFwiYmFzZVwiKTtcbiAgICBsZXQgaHJlZiA9IFwiXCI7XG5cbiAgICBpZiAoYmFzZSAmJiBiYXNlLmdldEF0dHJpYnV0ZShcImhyZWZcIikpIHtcbiAgICAgIGxldCB1cmwgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgICAgIGxldCBoYXNoSW5kZXggPSB1cmwuaW5kZXhPZihcIiNcIik7XG4gICAgICBocmVmID0gaGFzaEluZGV4ID09PSAtMSA/IHVybCA6IHVybC5zbGljZSgwLCBoYXNoSW5kZXgpO1xuICAgIH1cblxuICAgIHJldHVybiBocmVmICsgXCIjXCIgKyAodHlwZW9mIHRvID09PSBcInN0cmluZ1wiID8gdG8gOiBjcmVhdGVQYXRoKHRvKSk7XG4gIH1cblxuICBmdW5jdGlvbiB2YWxpZGF0ZUhhc2hMb2NhdGlvbihsb2NhdGlvbjogTG9jYXRpb24sIHRvOiBUbykge1xuICAgIHdhcm5pbmcoXG4gICAgICBsb2NhdGlvbi5wYXRobmFtZS5jaGFyQXQoMCkgPT09IFwiL1wiLFxuICAgICAgYHJlbGF0aXZlIHBhdGhuYW1lcyBhcmUgbm90IHN1cHBvcnRlZCBpbiBoYXNoIGhpc3RvcnkucHVzaCgke0pTT04uc3RyaW5naWZ5KFxuICAgICAgICB0b1xuICAgICAgKX0pYFxuICAgICk7XG4gIH1cblxuICByZXR1cm4gZ2V0VXJsQmFzZWRIaXN0b3J5KFxuICAgIGNyZWF0ZUhhc2hMb2NhdGlvbixcbiAgICBjcmVhdGVIYXNoSHJlZixcbiAgICB2YWxpZGF0ZUhhc2hMb2NhdGlvbixcbiAgICBvcHRpb25zXG4gICk7XG59XG4vLyNlbmRyZWdpb25cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vI3JlZ2lvbiBVVElMU1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gaW52YXJpYW50KHZhbHVlOiBib29sZWFuLCBtZXNzYWdlPzogc3RyaW5nKTogYXNzZXJ0cyB2YWx1ZTtcbmV4cG9ydCBmdW5jdGlvbiBpbnZhcmlhbnQ8VD4oXG4gIHZhbHVlOiBUIHwgbnVsbCB8IHVuZGVmaW5lZCxcbiAgbWVzc2FnZT86IHN0cmluZ1xuKTogYXNzZXJ0cyB2YWx1ZSBpcyBUO1xuZXhwb3J0IGZ1bmN0aW9uIGludmFyaWFudCh2YWx1ZTogYW55LCBtZXNzYWdlPzogc3RyaW5nKSB7XG4gIGlmICh2YWx1ZSA9PT0gZmFsc2UgfHwgdmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHdhcm5pbmcoY29uZDogYW55LCBtZXNzYWdlOiBzdHJpbmcpIHtcbiAgaWYgKCFjb25kKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09IFwidW5kZWZpbmVkXCIpIGNvbnNvbGUud2FybihtZXNzYWdlKTtcblxuICAgIHRyeSB7XG4gICAgICAvLyBXZWxjb21lIHRvIGRlYnVnZ2luZyBoaXN0b3J5IVxuICAgICAgLy9cbiAgICAgIC8vIFRoaXMgZXJyb3IgaXMgdGhyb3duIGFzIGEgY29udmVuaWVuY2Ugc28geW91IGNhbiBtb3JlIGVhc2lseVxuICAgICAgLy8gZmluZCB0aGUgc291cmNlIGZvciBhIHdhcm5pbmcgdGhhdCBhcHBlYXJzIGluIHRoZSBjb25zb2xlIGJ5XG4gICAgICAvLyBlbmFibGluZyBcInBhdXNlIG9uIGV4Y2VwdGlvbnNcIiBpbiB5b3VyIEphdmFTY3JpcHQgZGVidWdnZXIuXG4gICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZW1wdHlcbiAgICB9IGNhdGNoIChlKSB7fVxuICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCA4KTtcbn1cblxuLyoqXG4gKiBGb3IgYnJvd3Nlci1iYXNlZCBoaXN0b3JpZXMsIHdlIGNvbWJpbmUgdGhlIHN0YXRlIGFuZCBrZXkgaW50byBhbiBvYmplY3RcbiAqL1xuZnVuY3Rpb24gZ2V0SGlzdG9yeVN0YXRlKGxvY2F0aW9uOiBMb2NhdGlvbiwgaW5kZXg6IG51bWJlcik6IEhpc3RvcnlTdGF0ZSB7XG4gIHJldHVybiB7XG4gICAgdXNyOiBsb2NhdGlvbi5zdGF0ZSxcbiAgICBrZXk6IGxvY2F0aW9uLmtleSxcbiAgICBpZHg6IGluZGV4LFxuICB9O1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBMb2NhdGlvbiBvYmplY3Qgd2l0aCBhIHVuaXF1ZSBrZXkgZnJvbSB0aGUgZ2l2ZW4gUGF0aFxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlTG9jYXRpb24oXG4gIGN1cnJlbnQ6IHN0cmluZyB8IExvY2F0aW9uLFxuICB0bzogVG8sXG4gIHN0YXRlOiBhbnkgPSBudWxsLFxuICBrZXk/OiBzdHJpbmdcbik6IFJlYWRvbmx5PExvY2F0aW9uPiB7XG4gIGxldCBsb2NhdGlvbjogUmVhZG9ubHk8TG9jYXRpb24+ID0ge1xuICAgIHBhdGhuYW1lOiB0eXBlb2YgY3VycmVudCA9PT0gXCJzdHJpbmdcIiA/IGN1cnJlbnQgOiBjdXJyZW50LnBhdGhuYW1lLFxuICAgIHNlYXJjaDogXCJcIixcbiAgICBoYXNoOiBcIlwiLFxuICAgIC4uLih0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgodG8pIDogdG8pLFxuICAgIHN0YXRlLFxuICAgIC8vIFRPRE86IFRoaXMgY291bGQgYmUgY2xlYW5lZCB1cC4gIHB1c2gvcmVwbGFjZSBzaG91bGQgcHJvYmFibHkganVzdCB0YWtlXG4gICAgLy8gZnVsbCBMb2NhdGlvbnMgbm93IGFuZCBhdm9pZCB0aGUgbmVlZCB0byBydW4gdGhyb3VnaCB0aGlzIGZsb3cgYXQgYWxsXG4gICAgLy8gQnV0IHRoYXQncyBhIHByZXR0eSBiaWcgcmVmYWN0b3IgdG8gdGhlIGN1cnJlbnQgdGVzdCBzdWl0ZSBzbyBnb2luZyB0b1xuICAgIC8vIGtlZXAgYXMgaXMgZm9yIHRoZSB0aW1lIGJlaW5nIGFuZCBqdXN0IGxldCBhbnkgaW5jb21pbmcga2V5cyB0YWtlIHByZWNlZGVuY2VcbiAgICBrZXk6ICh0byAmJiAodG8gYXMgTG9jYXRpb24pLmtleSkgfHwga2V5IHx8IGNyZWF0ZUtleSgpLFxuICB9O1xuICByZXR1cm4gbG9jYXRpb247XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHN0cmluZyBVUkwgcGF0aCBmcm9tIHRoZSBnaXZlbiBwYXRobmFtZSwgc2VhcmNoLCBhbmQgaGFzaCBjb21wb25lbnRzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlUGF0aCh7XG4gIHBhdGhuYW1lID0gXCIvXCIsXG4gIHNlYXJjaCA9IFwiXCIsXG4gIGhhc2ggPSBcIlwiLFxufTogUGFydGlhbDxQYXRoPikge1xuICBpZiAoc2VhcmNoICYmIHNlYXJjaCAhPT0gXCI/XCIpXG4gICAgcGF0aG5hbWUgKz0gc2VhcmNoLmNoYXJBdCgwKSA9PT0gXCI/XCIgPyBzZWFyY2ggOiBcIj9cIiArIHNlYXJjaDtcbiAgaWYgKGhhc2ggJiYgaGFzaCAhPT0gXCIjXCIpXG4gICAgcGF0aG5hbWUgKz0gaGFzaC5jaGFyQXQoMCkgPT09IFwiI1wiID8gaGFzaCA6IFwiI1wiICsgaGFzaDtcbiAgcmV0dXJuIHBhdGhuYW1lO1xufVxuXG4vKipcbiAqIFBhcnNlcyBhIHN0cmluZyBVUkwgcGF0aCBpbnRvIGl0cyBzZXBhcmF0ZSBwYXRobmFtZSwgc2VhcmNoLCBhbmQgaGFzaCBjb21wb25lbnRzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VQYXRoKHBhdGg6IHN0cmluZyk6IFBhcnRpYWw8UGF0aD4ge1xuICBsZXQgcGFyc2VkUGF0aDogUGFydGlhbDxQYXRoPiA9IHt9O1xuXG4gIGlmIChwYXRoKSB7XG4gICAgbGV0IGhhc2hJbmRleCA9IHBhdGguaW5kZXhPZihcIiNcIik7XG4gICAgaWYgKGhhc2hJbmRleCA+PSAwKSB7XG4gICAgICBwYXJzZWRQYXRoLmhhc2ggPSBwYXRoLnN1YnN0cihoYXNoSW5kZXgpO1xuICAgICAgcGF0aCA9IHBhdGguc3Vic3RyKDAsIGhhc2hJbmRleCk7XG4gICAgfVxuXG4gICAgbGV0IHNlYXJjaEluZGV4ID0gcGF0aC5pbmRleE9mKFwiP1wiKTtcbiAgICBpZiAoc2VhcmNoSW5kZXggPj0gMCkge1xuICAgICAgcGFyc2VkUGF0aC5zZWFyY2ggPSBwYXRoLnN1YnN0cihzZWFyY2hJbmRleCk7XG4gICAgICBwYXRoID0gcGF0aC5zdWJzdHIoMCwgc2VhcmNoSW5kZXgpO1xuICAgIH1cblxuICAgIGlmIChwYXRoKSB7XG4gICAgICBwYXJzZWRQYXRoLnBhdGhuYW1lID0gcGF0aDtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcGFyc2VkUGF0aDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBVcmxIaXN0b3J5IGV4dGVuZHMgSGlzdG9yeSB7fVxuXG5leHBvcnQgdHlwZSBVcmxIaXN0b3J5T3B0aW9ucyA9IHtcbiAgd2luZG93PzogV2luZG93O1xuICB2NUNvbXBhdD86IGJvb2xlYW47XG59O1xuXG5mdW5jdGlvbiBnZXRVcmxCYXNlZEhpc3RvcnkoXG4gIGdldExvY2F0aW9uOiAod2luZG93OiBXaW5kb3csIGdsb2JhbEhpc3Rvcnk6IFdpbmRvd1tcImhpc3RvcnlcIl0pID0+IExvY2F0aW9uLFxuICBjcmVhdGVIcmVmOiAod2luZG93OiBXaW5kb3csIHRvOiBUbykgPT4gc3RyaW5nLFxuICB2YWxpZGF0ZUxvY2F0aW9uOiAoKGxvY2F0aW9uOiBMb2NhdGlvbiwgdG86IFRvKSA9PiB2b2lkKSB8IG51bGwsXG4gIG9wdGlvbnM6IFVybEhpc3RvcnlPcHRpb25zID0ge31cbik6IFVybEhpc3Rvcnkge1xuICBsZXQgeyB3aW5kb3cgPSBkb2N1bWVudC5kZWZhdWx0VmlldyEsIHY1Q29tcGF0ID0gZmFsc2UgfSA9IG9wdGlvbnM7XG4gIGxldCBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIGxldCBhY3Rpb24gPSBBY3Rpb24uUG9wO1xuICBsZXQgbGlzdGVuZXI6IExpc3RlbmVyIHwgbnVsbCA9IG51bGw7XG5cbiAgbGV0IGluZGV4ID0gZ2V0SW5kZXgoKSE7XG4gIC8vIEluZGV4IHNob3VsZCBvbmx5IGJlIG51bGwgd2hlbiB3ZSBpbml0aWFsaXplLiBJZiBub3QsIGl0J3MgYmVjYXVzZSB0aGVcbiAgLy8gdXNlciBjYWxsZWQgaGlzdG9yeS5wdXNoU3RhdGUgb3IgaGlzdG9yeS5yZXBsYWNlU3RhdGUgZGlyZWN0bHksIGluIHdoaWNoXG4gIC8vIGNhc2Ugd2Ugc2hvdWxkIGxvZyBhIHdhcm5pbmcgYXMgaXQgd2lsbCByZXN1bHQgaW4gYnVncy5cbiAgaWYgKGluZGV4ID09IG51bGwpIHtcbiAgICBpbmRleCA9IDA7XG4gICAgZ2xvYmFsSGlzdG9yeS5yZXBsYWNlU3RhdGUoeyAuLi5nbG9iYWxIaXN0b3J5LnN0YXRlLCBpZHg6IGluZGV4IH0sIFwiXCIpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0SW5kZXgoKTogbnVtYmVyIHtcbiAgICBsZXQgc3RhdGUgPSBnbG9iYWxIaXN0b3J5LnN0YXRlIHx8IHsgaWR4OiBudWxsIH07XG4gICAgcmV0dXJuIHN0YXRlLmlkeDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZVBvcCgpIHtcbiAgICBhY3Rpb24gPSBBY3Rpb24uUG9wO1xuICAgIGxldCBuZXh0SW5kZXggPSBnZXRJbmRleCgpO1xuICAgIGxldCBkZWx0YSA9IG5leHRJbmRleCA9PSBudWxsID8gbnVsbCA6IG5leHRJbmRleCAtIGluZGV4O1xuICAgIGluZGV4ID0gbmV4dEluZGV4O1xuICAgIGlmIChsaXN0ZW5lcikge1xuICAgICAgbGlzdGVuZXIoeyBhY3Rpb24sIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uLCBkZWx0YSB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwdXNoKHRvOiBUbywgc3RhdGU/OiBhbnkpIHtcbiAgICBhY3Rpb24gPSBBY3Rpb24uUHVzaDtcbiAgICBsZXQgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihoaXN0b3J5LmxvY2F0aW9uLCB0bywgc3RhdGUpO1xuICAgIGlmICh2YWxpZGF0ZUxvY2F0aW9uKSB2YWxpZGF0ZUxvY2F0aW9uKGxvY2F0aW9uLCB0byk7XG5cbiAgICBpbmRleCA9IGdldEluZGV4KCkgKyAxO1xuICAgIGxldCBoaXN0b3J5U3RhdGUgPSBnZXRIaXN0b3J5U3RhdGUobG9jYXRpb24sIGluZGV4KTtcbiAgICBsZXQgdXJsID0gaGlzdG9yeS5jcmVhdGVIcmVmKGxvY2F0aW9uKTtcblxuICAgIC8vIHRyeS4uLmNhdGNoIGJlY2F1c2UgaU9TIGxpbWl0cyB1cyB0byAxMDAgcHVzaFN0YXRlIGNhbGxzIDovXG4gICAgdHJ5IHtcbiAgICAgIGdsb2JhbEhpc3RvcnkucHVzaFN0YXRlKGhpc3RvcnlTdGF0ZSwgXCJcIiwgdXJsKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgLy8gVGhleSBhcmUgZ29pbmcgdG8gbG9zZSBzdGF0ZSBoZXJlLCBidXQgdGhlcmUgaXMgbm8gcmVhbFxuICAgICAgLy8gd2F5IHRvIHdhcm4gdGhlbSBhYm91dCBpdCBzaW5jZSB0aGUgcGFnZSB3aWxsIHJlZnJlc2guLi5cbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5hc3NpZ24odXJsKTtcbiAgICB9XG5cbiAgICBpZiAodjVDb21wYXQgJiYgbGlzdGVuZXIpIHtcbiAgICAgIGxpc3RlbmVyKHsgYWN0aW9uLCBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvbiwgZGVsdGE6IDEgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZSh0bzogVG8sIHN0YXRlPzogYW55KSB7XG4gICAgYWN0aW9uID0gQWN0aW9uLlJlcGxhY2U7XG4gICAgbGV0IGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oaGlzdG9yeS5sb2NhdGlvbiwgdG8sIHN0YXRlKTtcbiAgICBpZiAodmFsaWRhdGVMb2NhdGlvbikgdmFsaWRhdGVMb2NhdGlvbihsb2NhdGlvbiwgdG8pO1xuXG4gICAgaW5kZXggPSBnZXRJbmRleCgpO1xuICAgIGxldCBoaXN0b3J5U3RhdGUgPSBnZXRIaXN0b3J5U3RhdGUobG9jYXRpb24sIGluZGV4KTtcbiAgICBsZXQgdXJsID0gaGlzdG9yeS5jcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZShoaXN0b3J5U3RhdGUsIFwiXCIsIHVybCk7XG5cbiAgICBpZiAodjVDb21wYXQgJiYgbGlzdGVuZXIpIHtcbiAgICAgIGxpc3RlbmVyKHsgYWN0aW9uLCBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvbiwgZGVsdGE6IDAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlVVJMKHRvOiBUbyk6IFVSTCB7XG4gICAgLy8gd2luZG93LmxvY2F0aW9uLm9yaWdpbiBpcyBcIm51bGxcIiAodGhlIGxpdGVyYWwgc3RyaW5nIHZhbHVlKSBpbiBGaXJlZm94XG4gICAgLy8gdW5kZXIgY2VydGFpbiBjb25kaXRpb25zLCBub3RhYmx5IHdoZW4gc2VydmluZyBmcm9tIGEgbG9jYWwgSFRNTCBmaWxlXG4gICAgLy8gU2VlIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTg3ODI5N1xuICAgIGxldCBiYXNlID1cbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4gIT09IFwibnVsbFwiXG4gICAgICAgID8gd2luZG93LmxvY2F0aW9uLm9yaWdpblxuICAgICAgICA6IHdpbmRvdy5sb2NhdGlvbi5ocmVmO1xuXG4gICAgbGV0IGhyZWYgPSB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgPyB0byA6IGNyZWF0ZVBhdGgodG8pO1xuICAgIGludmFyaWFudChcbiAgICAgIGJhc2UsXG4gICAgICBgTm8gd2luZG93LmxvY2F0aW9uLihvcmlnaW58aHJlZikgYXZhaWxhYmxlIHRvIGNyZWF0ZSBVUkwgZm9yIGhyZWY6ICR7aHJlZn1gXG4gICAgKTtcbiAgICByZXR1cm4gbmV3IFVSTChocmVmLCBiYXNlKTtcbiAgfVxuXG4gIGxldCBoaXN0b3J5OiBIaXN0b3J5ID0ge1xuICAgIGdldCBhY3Rpb24oKSB7XG4gICAgICByZXR1cm4gYWN0aW9uO1xuICAgIH0sXG4gICAgZ2V0IGxvY2F0aW9uKCkge1xuICAgICAgcmV0dXJuIGdldExvY2F0aW9uKHdpbmRvdywgZ2xvYmFsSGlzdG9yeSk7XG4gICAgfSxcbiAgICBsaXN0ZW4oZm46IExpc3RlbmVyKSB7XG4gICAgICBpZiAobGlzdGVuZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQSBoaXN0b3J5IG9ubHkgYWNjZXB0cyBvbmUgYWN0aXZlIGxpc3RlbmVyXCIpO1xuICAgICAgfVxuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudFR5cGUsIGhhbmRsZVBvcCk7XG4gICAgICBsaXN0ZW5lciA9IGZuO1xuXG4gICAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihQb3BTdGF0ZUV2ZW50VHlwZSwgaGFuZGxlUG9wKTtcbiAgICAgICAgbGlzdGVuZXIgPSBudWxsO1xuICAgICAgfTtcbiAgICB9LFxuICAgIGNyZWF0ZUhyZWYodG8pIHtcbiAgICAgIHJldHVybiBjcmVhdGVIcmVmKHdpbmRvdywgdG8pO1xuICAgIH0sXG4gICAgY3JlYXRlVVJMLFxuICAgIGVuY29kZUxvY2F0aW9uKHRvKSB7XG4gICAgICAvLyBFbmNvZGUgYSBMb2NhdGlvbiB0aGUgc2FtZSB3YXkgd2luZG93LmxvY2F0aW9uIHdvdWxkXG4gICAgICBsZXQgdXJsID0gY3JlYXRlVVJMKHRvKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHBhdGhuYW1lOiB1cmwucGF0aG5hbWUsXG4gICAgICAgIHNlYXJjaDogdXJsLnNlYXJjaCxcbiAgICAgICAgaGFzaDogdXJsLmhhc2gsXG4gICAgICB9O1xuICAgIH0sXG4gICAgcHVzaCxcbiAgICByZXBsYWNlLFxuICAgIGdvKG4pIHtcbiAgICAgIHJldHVybiBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICAgIH0sXG4gIH07XG5cbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbi8vI2VuZHJlZ2lvblxuIiwiaW1wb3J0IHR5cGUgeyBMb2NhdGlvbiwgUGF0aCwgVG8gfSBmcm9tIFwiLi9oaXN0b3J5XCI7XG5pbXBvcnQgeyBpbnZhcmlhbnQsIHBhcnNlUGF0aCB9IGZyb20gXCIuL2hpc3RvcnlcIjtcblxuLyoqXG4gKiBNYXAgb2Ygcm91dGVJZCAtPiBkYXRhIHJldHVybmVkIGZyb20gYSBsb2FkZXIvYWN0aW9uL2Vycm9yXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUm91dGVEYXRhIHtcbiAgW3JvdXRlSWQ6IHN0cmluZ106IGFueTtcbn1cblxuZXhwb3J0IGVudW0gUmVzdWx0VHlwZSB7XG4gIGRhdGEgPSBcImRhdGFcIixcbiAgZGVmZXJyZWQgPSBcImRlZmVycmVkXCIsXG4gIHJlZGlyZWN0ID0gXCJyZWRpcmVjdFwiLFxuICBlcnJvciA9IFwiZXJyb3JcIixcbn1cblxuLyoqXG4gKiBTdWNjZXNzZnVsIHJlc3VsdCBmcm9tIGEgbG9hZGVyIG9yIGFjdGlvblxuICovXG5leHBvcnQgaW50ZXJmYWNlIFN1Y2Nlc3NSZXN1bHQge1xuICB0eXBlOiBSZXN1bHRUeXBlLmRhdGE7XG4gIGRhdGE6IGFueTtcbiAgc3RhdHVzQ29kZT86IG51bWJlcjtcbiAgaGVhZGVycz86IEhlYWRlcnM7XG59XG5cbi8qKlxuICogU3VjY2Vzc2Z1bCBkZWZlcigpIHJlc3VsdCBmcm9tIGEgbG9hZGVyIG9yIGFjdGlvblxuICovXG5leHBvcnQgaW50ZXJmYWNlIERlZmVycmVkUmVzdWx0IHtcbiAgdHlwZTogUmVzdWx0VHlwZS5kZWZlcnJlZDtcbiAgZGVmZXJyZWREYXRhOiBEZWZlcnJlZERhdGE7XG4gIHN0YXR1c0NvZGU/OiBudW1iZXI7XG4gIGhlYWRlcnM/OiBIZWFkZXJzO1xufVxuXG4vKipcbiAqIFJlZGlyZWN0IHJlc3VsdCBmcm9tIGEgbG9hZGVyIG9yIGFjdGlvblxuICovXG5leHBvcnQgaW50ZXJmYWNlIFJlZGlyZWN0UmVzdWx0IHtcbiAgdHlwZTogUmVzdWx0VHlwZS5yZWRpcmVjdDtcbiAgc3RhdHVzOiBudW1iZXI7XG4gIGxvY2F0aW9uOiBzdHJpbmc7XG4gIHJldmFsaWRhdGU6IGJvb2xlYW47XG59XG5cbi8qKlxuICogVW5zdWNjZXNzZnVsIHJlc3VsdCBmcm9tIGEgbG9hZGVyIG9yIGFjdGlvblxuICovXG5leHBvcnQgaW50ZXJmYWNlIEVycm9yUmVzdWx0IHtcbiAgdHlwZTogUmVzdWx0VHlwZS5lcnJvcjtcbiAgZXJyb3I6IGFueTtcbiAgaGVhZGVycz86IEhlYWRlcnM7XG59XG5cbi8qKlxuICogUmVzdWx0IGZyb20gYSBsb2FkZXIgb3IgYWN0aW9uIC0gcG90ZW50aWFsbHkgc3VjY2Vzc2Z1bCBvciB1bnN1Y2Nlc3NmdWxcbiAqL1xuZXhwb3J0IHR5cGUgRGF0YVJlc3VsdCA9XG4gIHwgU3VjY2Vzc1Jlc3VsdFxuICB8IERlZmVycmVkUmVzdWx0XG4gIHwgUmVkaXJlY3RSZXN1bHRcbiAgfCBFcnJvclJlc3VsdDtcblxuZXhwb3J0IHR5cGUgTXV0YXRpb25Gb3JtTWV0aG9kID0gXCJwb3N0XCIgfCBcInB1dFwiIHwgXCJwYXRjaFwiIHwgXCJkZWxldGVcIjtcbmV4cG9ydCB0eXBlIEZvcm1NZXRob2QgPSBcImdldFwiIHwgTXV0YXRpb25Gb3JtTWV0aG9kO1xuXG5leHBvcnQgdHlwZSBGb3JtRW5jVHlwZSA9XG4gIHwgXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIlxuICB8IFwibXVsdGlwYXJ0L2Zvcm0tZGF0YVwiO1xuXG4vKipcbiAqIEBwcml2YXRlXG4gKiBJbnRlcm5hbCBpbnRlcmZhY2UgdG8gcGFzcyBhcm91bmQgZm9yIGFjdGlvbiBzdWJtaXNzaW9ucywgbm90IGludGVuZGVkIGZvclxuICogZXh0ZXJuYWwgY29uc3VtcHRpb25cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTdWJtaXNzaW9uIHtcbiAgZm9ybU1ldGhvZDogRm9ybU1ldGhvZDtcbiAgZm9ybUFjdGlvbjogc3RyaW5nO1xuICBmb3JtRW5jVHlwZTogRm9ybUVuY1R5cGU7XG4gIGZvcm1EYXRhOiBGb3JtRGF0YTtcbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICogQXJndW1lbnRzIHBhc3NlZCB0byByb3V0ZSBsb2FkZXIvYWN0aW9uIGZ1bmN0aW9ucy4gIFNhbWUgZm9yIG5vdyBidXQgd2Uga2VlcFxuICogdGhpcyBhcyBhIHByaXZhdGUgaW1wbGVtZW50YXRpb24gZGV0YWlsIGluIGNhc2UgdGhleSBkaXZlcmdlIGluIHRoZSBmdXR1cmUuXG4gKi9cbmludGVyZmFjZSBEYXRhRnVuY3Rpb25BcmdzIHtcbiAgcmVxdWVzdDogUmVxdWVzdDtcbiAgcGFyYW1zOiBQYXJhbXM7XG4gIGNvbnRleHQ/OiBhbnk7XG59XG5cbi8qKlxuICogQXJndW1lbnRzIHBhc3NlZCB0byBsb2FkZXIgZnVuY3Rpb25zXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTG9hZGVyRnVuY3Rpb25BcmdzIGV4dGVuZHMgRGF0YUZ1bmN0aW9uQXJncyB7fVxuXG4vKipcbiAqIEFyZ3VtZW50cyBwYXNzZWQgdG8gYWN0aW9uIGZ1bmN0aW9uc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIEFjdGlvbkZ1bmN0aW9uQXJncyBleHRlbmRzIERhdGFGdW5jdGlvbkFyZ3Mge31cblxuLyoqXG4gKiBSb3V0ZSBsb2FkZXIgZnVuY3Rpb24gc2lnbmF0dXJlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTG9hZGVyRnVuY3Rpb24ge1xuICAoYXJnczogTG9hZGVyRnVuY3Rpb25BcmdzKTogUHJvbWlzZTxSZXNwb25zZT4gfCBSZXNwb25zZSB8IFByb21pc2U8YW55PiB8IGFueTtcbn1cblxuLyoqXG4gKiBSb3V0ZSBhY3Rpb24gZnVuY3Rpb24gc2lnbmF0dXJlXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQWN0aW9uRnVuY3Rpb24ge1xuICAoYXJnczogQWN0aW9uRnVuY3Rpb25BcmdzKTogUHJvbWlzZTxSZXNwb25zZT4gfCBSZXNwb25zZSB8IFByb21pc2U8YW55PiB8IGFueTtcbn1cblxuLyoqXG4gKiBSb3V0ZSBzaG91bGRSZXZhbGlkYXRlIGZ1bmN0aW9uIHNpZ25hdHVyZS4gIFRoaXMgcnVucyBhZnRlciBhbnkgc3VibWlzc2lvblxuICogKG5hdmlnYXRpb24gb3IgZmV0Y2hlciksIHNvIHdlIGZsYXR0ZW4gdGhlIG5hdmlnYXRpb24vZmV0Y2hlciBzdWJtaXNzaW9uXG4gKiBvbnRvIHRoZSBhcmd1bWVudHMuICBJdCBzaG91bGRuJ3QgbWF0dGVyIHdoZXRoZXIgaXQgY2FtZSBmcm9tIGEgbmF2aWdhdGlvblxuICogb3IgYSBmZXRjaGVyLCB3aGF0IHJlYWxseSBtYXR0ZXJzIGlzIHRoZSBVUkxzIGFuZCB0aGUgZm9ybURhdGEgc2luY2UgbG9hZGVyc1xuICogaGF2ZSB0byByZS1ydW4gYmFzZWQgb24gdGhlIGRhdGEgbW9kZWxzIHRoYXQgd2VyZSBwb3RlbnRpYWxseSBtdXRhdGVkLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFNob3VsZFJldmFsaWRhdGVGdW5jdGlvbiB7XG4gIChhcmdzOiB7XG4gICAgY3VycmVudFVybDogVVJMO1xuICAgIGN1cnJlbnRQYXJhbXM6IEFnbm9zdGljRGF0YVJvdXRlTWF0Y2hbXCJwYXJhbXNcIl07XG4gICAgbmV4dFVybDogVVJMO1xuICAgIG5leHRQYXJhbXM6IEFnbm9zdGljRGF0YVJvdXRlTWF0Y2hbXCJwYXJhbXNcIl07XG4gICAgZm9ybU1ldGhvZD86IFN1Ym1pc3Npb25bXCJmb3JtTWV0aG9kXCJdO1xuICAgIGZvcm1BY3Rpb24/OiBTdWJtaXNzaW9uW1wiZm9ybUFjdGlvblwiXTtcbiAgICBmb3JtRW5jVHlwZT86IFN1Ym1pc3Npb25bXCJmb3JtRW5jVHlwZVwiXTtcbiAgICBmb3JtRGF0YT86IFN1Ym1pc3Npb25bXCJmb3JtRGF0YVwiXTtcbiAgICBhY3Rpb25SZXN1bHQ/OiBEYXRhUmVzdWx0O1xuICAgIGRlZmF1bHRTaG91bGRSZXZhbGlkYXRlOiBib29sZWFuO1xuICB9KTogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBCYXNlIFJvdXRlT2JqZWN0IHdpdGggY29tbW9uIHByb3BzIHNoYXJlZCBieSBhbGwgdHlwZXMgb2Ygcm91dGVzXG4gKi9cbnR5cGUgQWdub3N0aWNCYXNlUm91dGVPYmplY3QgPSB7XG4gIGNhc2VTZW5zaXRpdmU/OiBib29sZWFuO1xuICBwYXRoPzogc3RyaW5nO1xuICBpZD86IHN0cmluZztcbiAgbG9hZGVyPzogTG9hZGVyRnVuY3Rpb247XG4gIGFjdGlvbj86IEFjdGlvbkZ1bmN0aW9uO1xuICBoYXNFcnJvckJvdW5kYXJ5PzogYm9vbGVhbjtcbiAgc2hvdWxkUmV2YWxpZGF0ZT86IFNob3VsZFJldmFsaWRhdGVGdW5jdGlvbjtcbiAgaGFuZGxlPzogYW55O1xufTtcblxuLyoqXG4gKiBJbmRleCByb3V0ZXMgbXVzdCBub3QgaGF2ZSBjaGlsZHJlblxuICovXG5leHBvcnQgdHlwZSBBZ25vc3RpY0luZGV4Um91dGVPYmplY3QgPSBBZ25vc3RpY0Jhc2VSb3V0ZU9iamVjdCAmIHtcbiAgY2hpbGRyZW4/OiB1bmRlZmluZWQ7XG4gIGluZGV4OiB0cnVlO1xufTtcblxuLyoqXG4gKiBOb24taW5kZXggcm91dGVzIG1heSBoYXZlIGNoaWxkcmVuLCBidXQgY2Fubm90IGhhdmUgaW5kZXhcbiAqL1xuZXhwb3J0IHR5cGUgQWdub3N0aWNOb25JbmRleFJvdXRlT2JqZWN0ID0gQWdub3N0aWNCYXNlUm91dGVPYmplY3QgJiB7XG4gIGNoaWxkcmVuPzogQWdub3N0aWNSb3V0ZU9iamVjdFtdO1xuICBpbmRleD86IGZhbHNlO1xufTtcblxuLyoqXG4gKiBBIHJvdXRlIG9iamVjdCByZXByZXNlbnRzIGEgbG9naWNhbCByb3V0ZSwgd2l0aCAob3B0aW9uYWxseSkgaXRzIGNoaWxkXG4gKiByb3V0ZXMgb3JnYW5pemVkIGluIGEgdHJlZS1saWtlIHN0cnVjdHVyZS5cbiAqL1xuZXhwb3J0IHR5cGUgQWdub3N0aWNSb3V0ZU9iamVjdCA9XG4gIHwgQWdub3N0aWNJbmRleFJvdXRlT2JqZWN0XG4gIHwgQWdub3N0aWNOb25JbmRleFJvdXRlT2JqZWN0O1xuXG5leHBvcnQgdHlwZSBBZ25vc3RpY0RhdGFJbmRleFJvdXRlT2JqZWN0ID0gQWdub3N0aWNJbmRleFJvdXRlT2JqZWN0ICYge1xuICBpZDogc3RyaW5nO1xufTtcblxuZXhwb3J0IHR5cGUgQWdub3N0aWNEYXRhTm9uSW5kZXhSb3V0ZU9iamVjdCA9IEFnbm9zdGljTm9uSW5kZXhSb3V0ZU9iamVjdCAmIHtcbiAgY2hpbGRyZW4/OiBBZ25vc3RpY0RhdGFSb3V0ZU9iamVjdFtdO1xuICBpZDogc3RyaW5nO1xufTtcblxuLyoqXG4gKiBBIGRhdGEgcm91dGUgb2JqZWN0LCB3aGljaCBpcyBqdXN0IGEgUm91dGVPYmplY3Qgd2l0aCBhIHJlcXVpcmVkIHVuaXF1ZSBJRFxuICovXG5leHBvcnQgdHlwZSBBZ25vc3RpY0RhdGFSb3V0ZU9iamVjdCA9XG4gIHwgQWdub3N0aWNEYXRhSW5kZXhSb3V0ZU9iamVjdFxuICB8IEFnbm9zdGljRGF0YU5vbkluZGV4Um91dGVPYmplY3Q7XG5cbi8vIFJlY3Vyc2l2ZSBoZWxwZXIgZm9yIGZpbmRpbmcgcGF0aCBwYXJhbWV0ZXJzIGluIHRoZSBhYnNlbmNlIG9mIHdpbGRjYXJkc1xudHlwZSBfUGF0aFBhcmFtPFBhdGggZXh0ZW5kcyBzdHJpbmc+ID1cbiAgLy8gc3BsaXQgcGF0aCBpbnRvIGluZGl2aWR1YWwgcGF0aCBzZWdtZW50c1xuICBQYXRoIGV4dGVuZHMgYCR7aW5mZXIgTH0vJHtpbmZlciBSfWBcbiAgICA/IF9QYXRoUGFyYW08TD4gfCBfUGF0aFBhcmFtPFI+XG4gICAgOiAvLyBmaW5kIHBhcmFtcyBhZnRlciBgOmBcbiAgICBQYXRoIGV4dGVuZHMgYDoke2luZmVyIFBhcmFtfWBcbiAgICA/IFBhcmFtIGV4dGVuZHMgYCR7aW5mZXIgT3B0aW9uYWx9P2BcbiAgICAgID8gT3B0aW9uYWxcbiAgICAgIDogUGFyYW1cbiAgICA6IC8vIG90aGVyd2lzZSwgdGhlcmUgYXJlbid0IGFueSBwYXJhbXMgcHJlc2VudFxuICAgICAgbmV2ZXI7XG5cbi8qKlxuICogRXhhbXBsZXM6XG4gKiBcIi9hL2IvKlwiIC0+IFwiKlwiXG4gKiBcIjphXCIgLT4gXCJhXCJcbiAqIFwiL2EvOmJcIiAtPiBcImJcIlxuICogXCIvYS9ibGFoYmxhaGJsYWg6YlwiIC0+IFwiYlwiXG4gKiBcIi86YS86YlwiIC0+IFwiYVwiIHwgXCJiXCJcbiAqIFwiLzphL2IvOmMvKlwiIC0+IFwiYVwiIHwgXCJjXCIgfCBcIipcIlxuICovXG50eXBlIFBhdGhQYXJhbTxQYXRoIGV4dGVuZHMgc3RyaW5nPiA9XG4gIC8vIGNoZWNrIGlmIHBhdGggaXMganVzdCBhIHdpbGRjYXJkXG4gIFBhdGggZXh0ZW5kcyBcIipcIlxuICAgID8gXCIqXCJcbiAgICA6IC8vIGxvb2sgZm9yIHdpbGRjYXJkIGF0IHRoZSBlbmQgb2YgdGhlIHBhdGhcbiAgICBQYXRoIGV4dGVuZHMgYCR7aW5mZXIgUmVzdH0vKmBcbiAgICA/IFwiKlwiIHwgX1BhdGhQYXJhbTxSZXN0PlxuICAgIDogLy8gbG9vayBmb3IgcGFyYW1zIGluIHRoZSBhYnNlbmNlIG9mIHdpbGRjYXJkc1xuICAgICAgX1BhdGhQYXJhbTxQYXRoPjtcblxuLy8gQXR0ZW1wdCB0byBwYXJzZSB0aGUgZ2l2ZW4gc3RyaW5nIHNlZ21lbnQuIElmIGl0IGZhaWxzLCB0aGVuIGp1c3QgcmV0dXJuIHRoZVxuLy8gcGxhaW4gc3RyaW5nIHR5cGUgYXMgYSBkZWZhdWx0IGZhbGxiYWNrLiBPdGhlcndpc2UgcmV0dXJuIHRoZSB1bmlvbiBvZiB0aGVcbi8vIHBhcnNlZCBzdHJpbmcgbGl0ZXJhbHMgdGhhdCB3ZXJlIHJlZmVyZW5jZWQgYXMgZHluYW1pYyBzZWdtZW50cyBpbiB0aGUgcm91dGUuXG5leHBvcnQgdHlwZSBQYXJhbVBhcnNlS2V5PFNlZ21lbnQgZXh0ZW5kcyBzdHJpbmc+ID1cbiAgLy8gaWYgY291bGQgbm90IGZpbmQgcGF0aCBwYXJhbXMsIGZhbGxiYWNrIHRvIGBzdHJpbmdgXG4gIFtQYXRoUGFyYW08U2VnbWVudD5dIGV4dGVuZHMgW25ldmVyXSA/IHN0cmluZyA6IFBhdGhQYXJhbTxTZWdtZW50PjtcblxuLyoqXG4gKiBUaGUgcGFyYW1ldGVycyB0aGF0IHdlcmUgcGFyc2VkIGZyb20gdGhlIFVSTCBwYXRoLlxuICovXG5leHBvcnQgdHlwZSBQYXJhbXM8S2V5IGV4dGVuZHMgc3RyaW5nID0gc3RyaW5nPiA9IHtcbiAgcmVhZG9ubHkgW2tleSBpbiBLZXldOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG59O1xuXG4vKipcbiAqIEEgUm91dGVNYXRjaCBjb250YWlucyBpbmZvIGFib3V0IGhvdyBhIHJvdXRlIG1hdGNoZWQgYSBVUkwuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQWdub3N0aWNSb3V0ZU1hdGNoPFxuICBQYXJhbUtleSBleHRlbmRzIHN0cmluZyA9IHN0cmluZyxcbiAgUm91dGVPYmplY3RUeXBlIGV4dGVuZHMgQWdub3N0aWNSb3V0ZU9iamVjdCA9IEFnbm9zdGljUm91dGVPYmplY3Rcbj4ge1xuICAvKipcbiAgICogVGhlIG5hbWVzIGFuZCB2YWx1ZXMgb2YgZHluYW1pYyBwYXJhbWV0ZXJzIGluIHRoZSBVUkwuXG4gICAqL1xuICBwYXJhbXM6IFBhcmFtczxQYXJhbUtleT47XG4gIC8qKlxuICAgKiBUaGUgcG9ydGlvbiBvZiB0aGUgVVJMIHBhdGhuYW1lIHRoYXQgd2FzIG1hdGNoZWQuXG4gICAqL1xuICBwYXRobmFtZTogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIHBvcnRpb24gb2YgdGhlIFVSTCBwYXRobmFtZSB0aGF0IHdhcyBtYXRjaGVkIGJlZm9yZSBjaGlsZCByb3V0ZXMuXG4gICAqL1xuICBwYXRobmFtZUJhc2U6IHN0cmluZztcbiAgLyoqXG4gICAqIFRoZSByb3V0ZSBvYmplY3QgdGhhdCB3YXMgdXNlZCB0byBtYXRjaC5cbiAgICovXG4gIHJvdXRlOiBSb3V0ZU9iamVjdFR5cGU7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQWdub3N0aWNEYXRhUm91dGVNYXRjaFxuICBleHRlbmRzIEFnbm9zdGljUm91dGVNYXRjaDxzdHJpbmcsIEFnbm9zdGljRGF0YVJvdXRlT2JqZWN0PiB7fVxuXG5mdW5jdGlvbiBpc0luZGV4Um91dGUoXG4gIHJvdXRlOiBBZ25vc3RpY1JvdXRlT2JqZWN0XG4pOiByb3V0ZSBpcyBBZ25vc3RpY0luZGV4Um91dGVPYmplY3Qge1xuICByZXR1cm4gcm91dGUuaW5kZXggPT09IHRydWU7XG59XG5cbi8vIFdhbGsgdGhlIHJvdXRlIHRyZWUgZ2VuZXJhdGluZyB1bmlxdWUgSURzIHdoZXJlIG5lY2Vzc2FyeSBzbyB3ZSBhcmUgd29ya2luZ1xuLy8gc29sZWx5IHdpdGggQWdub3N0aWNEYXRhUm91dGVPYmplY3QncyB3aXRoaW4gdGhlIFJvdXRlclxuZXhwb3J0IGZ1bmN0aW9uIGNvbnZlcnRSb3V0ZXNUb0RhdGFSb3V0ZXMoXG4gIHJvdXRlczogQWdub3N0aWNSb3V0ZU9iamVjdFtdLFxuICBwYXJlbnRQYXRoOiBudW1iZXJbXSA9IFtdLFxuICBhbGxJZHM6IFNldDxzdHJpbmc+ID0gbmV3IFNldDxzdHJpbmc+KClcbik6IEFnbm9zdGljRGF0YVJvdXRlT2JqZWN0W10ge1xuICByZXR1cm4gcm91dGVzLm1hcCgocm91dGUsIGluZGV4KSA9PiB7XG4gICAgbGV0IHRyZWVQYXRoID0gWy4uLnBhcmVudFBhdGgsIGluZGV4XTtcbiAgICBsZXQgaWQgPSB0eXBlb2Ygcm91dGUuaWQgPT09IFwic3RyaW5nXCIgPyByb3V0ZS5pZCA6IHRyZWVQYXRoLmpvaW4oXCItXCIpO1xuICAgIGludmFyaWFudChcbiAgICAgIHJvdXRlLmluZGV4ICE9PSB0cnVlIHx8ICFyb3V0ZS5jaGlsZHJlbixcbiAgICAgIGBDYW5ub3Qgc3BlY2lmeSBjaGlsZHJlbiBvbiBhbiBpbmRleCByb3V0ZWBcbiAgICApO1xuICAgIGludmFyaWFudChcbiAgICAgICFhbGxJZHMuaGFzKGlkKSxcbiAgICAgIGBGb3VuZCBhIHJvdXRlIGlkIGNvbGxpc2lvbiBvbiBpZCBcIiR7aWR9XCIuICBSb3V0ZSBgICtcbiAgICAgICAgXCJpZCdzIG11c3QgYmUgZ2xvYmFsbHkgdW5pcXVlIHdpdGhpbiBEYXRhIFJvdXRlciB1c2FnZXNcIlxuICAgICk7XG4gICAgYWxsSWRzLmFkZChpZCk7XG5cbiAgICBpZiAoaXNJbmRleFJvdXRlKHJvdXRlKSkge1xuICAgICAgbGV0IGluZGV4Um91dGU6IEFnbm9zdGljRGF0YUluZGV4Um91dGVPYmplY3QgPSB7IC4uLnJvdXRlLCBpZCB9O1xuICAgICAgcmV0dXJuIGluZGV4Um91dGU7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBwYXRoT3JMYXlvdXRSb3V0ZTogQWdub3N0aWNEYXRhTm9uSW5kZXhSb3V0ZU9iamVjdCA9IHtcbiAgICAgICAgLi4ucm91dGUsXG4gICAgICAgIGlkLFxuICAgICAgICBjaGlsZHJlbjogcm91dGUuY2hpbGRyZW5cbiAgICAgICAgICA/IGNvbnZlcnRSb3V0ZXNUb0RhdGFSb3V0ZXMocm91dGUuY2hpbGRyZW4sIHRyZWVQYXRoLCBhbGxJZHMpXG4gICAgICAgICAgOiB1bmRlZmluZWQsXG4gICAgICB9O1xuICAgICAgcmV0dXJuIHBhdGhPckxheW91dFJvdXRlO1xuICAgIH1cbiAgfSk7XG59XG5cbi8qKlxuICogTWF0Y2hlcyB0aGUgZ2l2ZW4gcm91dGVzIHRvIGEgbG9jYXRpb24gYW5kIHJldHVybnMgdGhlIG1hdGNoIGRhdGEuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS91dGlscy9tYXRjaC1yb3V0ZXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1hdGNoUm91dGVzPFxuICBSb3V0ZU9iamVjdFR5cGUgZXh0ZW5kcyBBZ25vc3RpY1JvdXRlT2JqZWN0ID0gQWdub3N0aWNSb3V0ZU9iamVjdFxuPihcbiAgcm91dGVzOiBSb3V0ZU9iamVjdFR5cGVbXSxcbiAgbG9jYXRpb25Bcmc6IFBhcnRpYWw8TG9jYXRpb24+IHwgc3RyaW5nLFxuICBiYXNlbmFtZSA9IFwiL1wiXG4pOiBBZ25vc3RpY1JvdXRlTWF0Y2g8c3RyaW5nLCBSb3V0ZU9iamVjdFR5cGU+W10gfCBudWxsIHtcbiAgbGV0IGxvY2F0aW9uID1cbiAgICB0eXBlb2YgbG9jYXRpb25BcmcgPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgobG9jYXRpb25BcmcpIDogbG9jYXRpb25Bcmc7XG5cbiAgbGV0IHBhdGhuYW1lID0gc3RyaXBCYXNlbmFtZShsb2NhdGlvbi5wYXRobmFtZSB8fCBcIi9cIiwgYmFzZW5hbWUpO1xuXG4gIGlmIChwYXRobmFtZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBsZXQgYnJhbmNoZXMgPSBmbGF0dGVuUm91dGVzKHJvdXRlcyk7XG4gIHJhbmtSb3V0ZUJyYW5jaGVzKGJyYW5jaGVzKTtcblxuICBsZXQgbWF0Y2hlcyA9IG51bGw7XG4gIGZvciAobGV0IGkgPSAwOyBtYXRjaGVzID09IG51bGwgJiYgaSA8IGJyYW5jaGVzLmxlbmd0aDsgKytpKSB7XG4gICAgbWF0Y2hlcyA9IG1hdGNoUm91dGVCcmFuY2g8c3RyaW5nLCBSb3V0ZU9iamVjdFR5cGU+KFxuICAgICAgYnJhbmNoZXNbaV0sXG4gICAgICAvLyBJbmNvbWluZyBwYXRobmFtZXMgYXJlIGdlbmVyYWxseSBlbmNvZGVkIGZyb20gZWl0aGVyIHdpbmRvdy5sb2NhdGlvblxuICAgICAgLy8gb3IgZnJvbSByb3V0ZXIubmF2aWdhdGUsIGJ1dCB3ZSB3YW50IHRvIG1hdGNoIGFnYWluc3QgdGhlIHVuZW5jb2RlZFxuICAgICAgLy8gcGF0aHMgaW4gdGhlIHJvdXRlIGRlZmluaXRpb25zLiAgTWVtb3J5IHJvdXRlciBsb2NhdGlvbnMgd29uJ3QgYmVcbiAgICAgIC8vIGVuY29kZWQgaGVyZSBidXQgdGhlcmUgYWxzbyBzaG91bGRuJ3QgYmUgYW55dGhpbmcgdG8gZGVjb2RlIHNvIHRoaXNcbiAgICAgIC8vIHNob3VsZCBiZSBhIHNhZmUgb3BlcmF0aW9uLiAgVGhpcyBhdm9pZHMgbmVlZGluZyBtYXRjaFJvdXRlcyB0byBiZVxuICAgICAgLy8gaGlzdG9yeS1hd2FyZS5cbiAgICAgIHNhZmVseURlY29kZVVSSShwYXRobmFtZSlcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIG1hdGNoZXM7XG59XG5cbmludGVyZmFjZSBSb3V0ZU1ldGE8XG4gIFJvdXRlT2JqZWN0VHlwZSBleHRlbmRzIEFnbm9zdGljUm91dGVPYmplY3QgPSBBZ25vc3RpY1JvdXRlT2JqZWN0XG4+IHtcbiAgcmVsYXRpdmVQYXRoOiBzdHJpbmc7XG4gIGNhc2VTZW5zaXRpdmU6IGJvb2xlYW47XG4gIGNoaWxkcmVuSW5kZXg6IG51bWJlcjtcbiAgcm91dGU6IFJvdXRlT2JqZWN0VHlwZTtcbn1cblxuaW50ZXJmYWNlIFJvdXRlQnJhbmNoPFxuICBSb3V0ZU9iamVjdFR5cGUgZXh0ZW5kcyBBZ25vc3RpY1JvdXRlT2JqZWN0ID0gQWdub3N0aWNSb3V0ZU9iamVjdFxuPiB7XG4gIHBhdGg6IHN0cmluZztcbiAgc2NvcmU6IG51bWJlcjtcbiAgcm91dGVzTWV0YTogUm91dGVNZXRhPFJvdXRlT2JqZWN0VHlwZT5bXTtcbn1cblxuZnVuY3Rpb24gZmxhdHRlblJvdXRlczxcbiAgUm91dGVPYmplY3RUeXBlIGV4dGVuZHMgQWdub3N0aWNSb3V0ZU9iamVjdCA9IEFnbm9zdGljUm91dGVPYmplY3Rcbj4oXG4gIHJvdXRlczogUm91dGVPYmplY3RUeXBlW10sXG4gIGJyYW5jaGVzOiBSb3V0ZUJyYW5jaDxSb3V0ZU9iamVjdFR5cGU+W10gPSBbXSxcbiAgcGFyZW50c01ldGE6IFJvdXRlTWV0YTxSb3V0ZU9iamVjdFR5cGU+W10gPSBbXSxcbiAgcGFyZW50UGF0aCA9IFwiXCJcbik6IFJvdXRlQnJhbmNoPFJvdXRlT2JqZWN0VHlwZT5bXSB7XG4gIGxldCBmbGF0dGVuUm91dGUgPSAoXG4gICAgcm91dGU6IFJvdXRlT2JqZWN0VHlwZSxcbiAgICBpbmRleDogbnVtYmVyLFxuICAgIHJlbGF0aXZlUGF0aD86IHN0cmluZ1xuICApID0+IHtcbiAgICBsZXQgbWV0YTogUm91dGVNZXRhPFJvdXRlT2JqZWN0VHlwZT4gPSB7XG4gICAgICByZWxhdGl2ZVBhdGg6XG4gICAgICAgIHJlbGF0aXZlUGF0aCA9PT0gdW5kZWZpbmVkID8gcm91dGUucGF0aCB8fCBcIlwiIDogcmVsYXRpdmVQYXRoLFxuICAgICAgY2FzZVNlbnNpdGl2ZTogcm91dGUuY2FzZVNlbnNpdGl2ZSA9PT0gdHJ1ZSxcbiAgICAgIGNoaWxkcmVuSW5kZXg6IGluZGV4LFxuICAgICAgcm91dGUsXG4gICAgfTtcblxuICAgIGlmIChtZXRhLnJlbGF0aXZlUGF0aC5zdGFydHNXaXRoKFwiL1wiKSkge1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICBtZXRhLnJlbGF0aXZlUGF0aC5zdGFydHNXaXRoKHBhcmVudFBhdGgpLFxuICAgICAgICBgQWJzb2x1dGUgcm91dGUgcGF0aCBcIiR7bWV0YS5yZWxhdGl2ZVBhdGh9XCIgbmVzdGVkIHVuZGVyIHBhdGggYCArXG4gICAgICAgICAgYFwiJHtwYXJlbnRQYXRofVwiIGlzIG5vdCB2YWxpZC4gQW4gYWJzb2x1dGUgY2hpbGQgcm91dGUgcGF0aCBgICtcbiAgICAgICAgICBgbXVzdCBzdGFydCB3aXRoIHRoZSBjb21iaW5lZCBwYXRoIG9mIGFsbCBpdHMgcGFyZW50IHJvdXRlcy5gXG4gICAgICApO1xuXG4gICAgICBtZXRhLnJlbGF0aXZlUGF0aCA9IG1ldGEucmVsYXRpdmVQYXRoLnNsaWNlKHBhcmVudFBhdGgubGVuZ3RoKTtcbiAgICB9XG5cbiAgICBsZXQgcGF0aCA9IGpvaW5QYXRocyhbcGFyZW50UGF0aCwgbWV0YS5yZWxhdGl2ZVBhdGhdKTtcbiAgICBsZXQgcm91dGVzTWV0YSA9IHBhcmVudHNNZXRhLmNvbmNhdChtZXRhKTtcblxuICAgIC8vIEFkZCB0aGUgY2hpbGRyZW4gYmVmb3JlIGFkZGluZyB0aGlzIHJvdXRlIHRvIHRoZSBhcnJheSBzbyB3ZSB0cmF2ZXJzZSB0aGVcbiAgICAvLyByb3V0ZSB0cmVlIGRlcHRoLWZpcnN0IGFuZCBjaGlsZCByb3V0ZXMgYXBwZWFyIGJlZm9yZSB0aGVpciBwYXJlbnRzIGluXG4gICAgLy8gdGhlIFwiZmxhdHRlbmVkXCIgdmVyc2lvbi5cbiAgICBpZiAocm91dGUuY2hpbGRyZW4gJiYgcm91dGUuY2hpbGRyZW4ubGVuZ3RoID4gMCkge1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICAvLyBPdXIgdHlwZXMga25vdyBiZXR0ZXIsIGJ1dCBydW50aW1lIEpTIG1heSBub3QhXG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcbiAgICAgICAgcm91dGUuaW5kZXggIT09IHRydWUsXG4gICAgICAgIGBJbmRleCByb3V0ZXMgbXVzdCBub3QgaGF2ZSBjaGlsZCByb3V0ZXMuIFBsZWFzZSByZW1vdmUgYCArXG4gICAgICAgICAgYGFsbCBjaGlsZCByb3V0ZXMgZnJvbSByb3V0ZSBwYXRoIFwiJHtwYXRofVwiLmBcbiAgICAgICk7XG5cbiAgICAgIGZsYXR0ZW5Sb3V0ZXMocm91dGUuY2hpbGRyZW4sIGJyYW5jaGVzLCByb3V0ZXNNZXRhLCBwYXRoKTtcbiAgICB9XG5cbiAgICAvLyBSb3V0ZXMgd2l0aG91dCBhIHBhdGggc2hvdWxkbid0IGV2ZXIgbWF0Y2ggYnkgdGhlbXNlbHZlcyB1bmxlc3MgdGhleSBhcmVcbiAgICAvLyBpbmRleCByb3V0ZXMsIHNvIGRvbid0IGFkZCB0aGVtIHRvIHRoZSBsaXN0IG9mIHBvc3NpYmxlIGJyYW5jaGVzLlxuICAgIGlmIChyb3V0ZS5wYXRoID09IG51bGwgJiYgIXJvdXRlLmluZGV4KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgYnJhbmNoZXMucHVzaCh7XG4gICAgICBwYXRoLFxuICAgICAgc2NvcmU6IGNvbXB1dGVTY29yZShwYXRoLCByb3V0ZS5pbmRleCksXG4gICAgICByb3V0ZXNNZXRhLFxuICAgIH0pO1xuICB9O1xuICByb3V0ZXMuZm9yRWFjaCgocm91dGUsIGluZGV4KSA9PiB7XG4gICAgLy8gY29hcnNlLWdyYWluIGNoZWNrIGZvciBvcHRpb25hbCBwYXJhbXNcbiAgICBpZiAocm91dGUucGF0aCA9PT0gXCJcIiB8fCAhcm91dGUucGF0aD8uaW5jbHVkZXMoXCI/XCIpKSB7XG4gICAgICBmbGF0dGVuUm91dGUocm91dGUsIGluZGV4KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9yIChsZXQgZXhwbG9kZWQgb2YgZXhwbG9kZU9wdGlvbmFsU2VnbWVudHMocm91dGUucGF0aCkpIHtcbiAgICAgICAgZmxhdHRlblJvdXRlKHJvdXRlLCBpbmRleCwgZXhwbG9kZWQpO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGJyYW5jaGVzO1xufVxuXG4vKipcbiAqIENvbXB1dGVzIGFsbCBjb21iaW5hdGlvbnMgb2Ygb3B0aW9uYWwgcGF0aCBzZWdtZW50cyBmb3IgYSBnaXZlbiBwYXRoLFxuICogZXhjbHVkaW5nIGNvbWJpbmF0aW9ucyB0aGF0IGFyZSBhbWJpZ3VvdXMgYW5kIG9mIGxvd2VyIHByaW9yaXR5LlxuICpcbiAqIEZvciBleGFtcGxlLCBgL29uZS86dHdvPy90aHJlZS86Zm91cj8vOmZpdmU/YCBleHBsb2RlcyB0bzpcbiAqIC0gYC9vbmUvdGhyZWVgXG4gKiAtIGAvb25lLzp0d28vdGhyZWVgXG4gKiAtIGAvb25lL3RocmVlLzpmb3VyYFxuICogLSBgL29uZS90aHJlZS86Zml2ZWBcbiAqIC0gYC9vbmUvOnR3by90aHJlZS86Zm91cmBcbiAqIC0gYC9vbmUvOnR3by90aHJlZS86Zml2ZWBcbiAqIC0gYC9vbmUvdGhyZWUvOmZvdXIvOmZpdmVgXG4gKiAtIGAvb25lLzp0d28vdGhyZWUvOmZvdXIvOmZpdmVgXG4gKi9cbmZ1bmN0aW9uIGV4cGxvZGVPcHRpb25hbFNlZ21lbnRzKHBhdGg6IHN0cmluZyk6IHN0cmluZ1tdIHtcbiAgbGV0IHNlZ21lbnRzID0gcGF0aC5zcGxpdChcIi9cIik7XG4gIGlmIChzZWdtZW50cy5sZW5ndGggPT09IDApIHJldHVybiBbXTtcblxuICBsZXQgW2ZpcnN0LCAuLi5yZXN0XSA9IHNlZ21lbnRzO1xuXG4gIC8vIE9wdGlvbmFsIHBhdGggc2VnbWVudHMgYXJlIGRlbm90ZWQgYnkgYSB0cmFpbGluZyBgP2BcbiAgbGV0IGlzT3B0aW9uYWwgPSBmaXJzdC5lbmRzV2l0aChcIj9cIik7XG4gIC8vIENvbXB1dGUgdGhlIGNvcnJlc3BvbmRpbmcgcmVxdWlyZWQgc2VnbWVudDogYGZvbz9gIC0+IGBmb29gXG4gIGxldCByZXF1aXJlZCA9IGZpcnN0LnJlcGxhY2UoL1xcPyQvLCBcIlwiKTtcblxuICBpZiAocmVzdC5sZW5ndGggPT09IDApIHtcbiAgICAvLyBJbnRlcHJldCBlbXB0eSBzdHJpbmcgYXMgb21pdHRpbmcgYW4gb3B0aW9uYWwgc2VnbWVudFxuICAgIC8vIGBbXCJvbmVcIiwgXCJcIiwgXCJ0aHJlZVwiXWAgY29ycmVzcG9uZHMgdG8gb21pdHRpbmcgYDp0d29gIGZyb20gYC9vbmUvOnR3bz8vdGhyZWVgIC0+IGAvb25lL3RocmVlYFxuICAgIHJldHVybiBpc09wdGlvbmFsID8gW3JlcXVpcmVkLCBcIlwiXSA6IFtyZXF1aXJlZF07XG4gIH1cblxuICBsZXQgcmVzdEV4cGxvZGVkID0gZXhwbG9kZU9wdGlvbmFsU2VnbWVudHMocmVzdC5qb2luKFwiL1wiKSk7XG5cbiAgbGV0IHJlc3VsdDogc3RyaW5nW10gPSBbXTtcblxuICAvLyBBbGwgY2hpbGQgcGF0aHMgd2l0aCB0aGUgcHJlZml4LiAgRG8gdGhpcyBmb3IgYWxsIGNoaWxkcmVuIGJlZm9yZSB0aGVcbiAgLy8gb3B0aW9uYWwgdmVyc2lvbiBmb3IgYWxsIGNoaWxkcmVuIHNvIHdlIGdldCBjb25zaXN0ZW50IG9yZGVyaW5nIHdoZXJlIHRoZVxuICAvLyBwYXJlbnQgb3B0aW9uYWwgYXNwZWN0IGlzIHByZWZlcnJlZCBhcyByZXF1aXJlZC4gIE90aGVyd2lzZSwgd2UgY2FuIGdldFxuICAvLyBjaGlsZCBzZWN0aW9ucyBpbnRlcnNwZXJzZWQgd2hlcmUgZGVlcGVyIG9wdGlvbmFsIHNlZ21lbnRzIGFyZSBoaWdoZXIgdGhhblxuICAvLyBwYXJlbnQgb3B0aW9uYWwgc2VnbWVudHMsIHdoZXJlIGZvciBleGFtcGxlLCAvOnR3byB3b3VsZCBleHBsb2RlcyBfZWFybGllcl9cbiAgLy8gdGhlbiAvOm9uZS4gIEJ5IGFsd2F5cyBpbmNsdWRpbmcgdGhlIHBhcmVudCBhcyByZXF1aXJlZCBfZm9yIGFsbCBjaGlsZHJlbl9cbiAgLy8gZmlyc3QsIHdlIGF2b2lkIHRoaXMgaXNzdWVcbiAgcmVzdWx0LnB1c2goXG4gICAgLi4ucmVzdEV4cGxvZGVkLm1hcCgoc3VicGF0aCkgPT5cbiAgICAgIHN1YnBhdGggPT09IFwiXCIgPyByZXF1aXJlZCA6IFtyZXF1aXJlZCwgc3VicGF0aF0uam9pbihcIi9cIilcbiAgICApXG4gICk7XG5cbiAgLy8gVGhlbiBpZiB0aGlzIGlzIGFuIG9wdGlvbmFsIHZhbHVlLCBhZGQgYWxsIGNoaWxkIHZlcnNpb25zIHdpdGhvdXRcbiAgaWYgKGlzT3B0aW9uYWwpIHtcbiAgICByZXN1bHQucHVzaCguLi5yZXN0RXhwbG9kZWQpO1xuICB9XG5cbiAgLy8gZm9yIGFic29sdXRlIHBhdGhzLCBlbnN1cmUgYC9gIGluc3RlYWQgb2YgZW1wdHkgc2VnbWVudFxuICByZXR1cm4gcmVzdWx0Lm1hcCgoZXhwbG9kZWQpID0+XG4gICAgcGF0aC5zdGFydHNXaXRoKFwiL1wiKSAmJiBleHBsb2RlZCA9PT0gXCJcIiA/IFwiL1wiIDogZXhwbG9kZWRcbiAgKTtcbn1cblxuZnVuY3Rpb24gcmFua1JvdXRlQnJhbmNoZXMoYnJhbmNoZXM6IFJvdXRlQnJhbmNoW10pOiB2b2lkIHtcbiAgYnJhbmNoZXMuc29ydCgoYSwgYikgPT5cbiAgICBhLnNjb3JlICE9PSBiLnNjb3JlXG4gICAgICA/IGIuc2NvcmUgLSBhLnNjb3JlIC8vIEhpZ2hlciBzY29yZSBmaXJzdFxuICAgICAgOiBjb21wYXJlSW5kZXhlcyhcbiAgICAgICAgICBhLnJvdXRlc01ldGEubWFwKChtZXRhKSA9PiBtZXRhLmNoaWxkcmVuSW5kZXgpLFxuICAgICAgICAgIGIucm91dGVzTWV0YS5tYXAoKG1ldGEpID0+IG1ldGEuY2hpbGRyZW5JbmRleClcbiAgICAgICAgKVxuICApO1xufVxuXG5jb25zdCBwYXJhbVJlID0gL146XFx3KyQvO1xuY29uc3QgZHluYW1pY1NlZ21lbnRWYWx1ZSA9IDM7XG5jb25zdCBpbmRleFJvdXRlVmFsdWUgPSAyO1xuY29uc3QgZW1wdHlTZWdtZW50VmFsdWUgPSAxO1xuY29uc3Qgc3RhdGljU2VnbWVudFZhbHVlID0gMTA7XG5jb25zdCBzcGxhdFBlbmFsdHkgPSAtMjtcbmNvbnN0IGlzU3BsYXQgPSAoczogc3RyaW5nKSA9PiBzID09PSBcIipcIjtcblxuZnVuY3Rpb24gY29tcHV0ZVNjb3JlKHBhdGg6IHN0cmluZywgaW5kZXg6IGJvb2xlYW4gfCB1bmRlZmluZWQpOiBudW1iZXIge1xuICBsZXQgc2VnbWVudHMgPSBwYXRoLnNwbGl0KFwiL1wiKTtcbiAgbGV0IGluaXRpYWxTY29yZSA9IHNlZ21lbnRzLmxlbmd0aDtcbiAgaWYgKHNlZ21lbnRzLnNvbWUoaXNTcGxhdCkpIHtcbiAgICBpbml0aWFsU2NvcmUgKz0gc3BsYXRQZW5hbHR5O1xuICB9XG5cbiAgaWYgKGluZGV4KSB7XG4gICAgaW5pdGlhbFNjb3JlICs9IGluZGV4Um91dGVWYWx1ZTtcbiAgfVxuXG4gIHJldHVybiBzZWdtZW50c1xuICAgIC5maWx0ZXIoKHMpID0+ICFpc1NwbGF0KHMpKVxuICAgIC5yZWR1Y2UoXG4gICAgICAoc2NvcmUsIHNlZ21lbnQpID0+XG4gICAgICAgIHNjb3JlICtcbiAgICAgICAgKHBhcmFtUmUudGVzdChzZWdtZW50KVxuICAgICAgICAgID8gZHluYW1pY1NlZ21lbnRWYWx1ZVxuICAgICAgICAgIDogc2VnbWVudCA9PT0gXCJcIlxuICAgICAgICAgID8gZW1wdHlTZWdtZW50VmFsdWVcbiAgICAgICAgICA6IHN0YXRpY1NlZ21lbnRWYWx1ZSksXG4gICAgICBpbml0aWFsU2NvcmVcbiAgICApO1xufVxuXG5mdW5jdGlvbiBjb21wYXJlSW5kZXhlcyhhOiBudW1iZXJbXSwgYjogbnVtYmVyW10pOiBudW1iZXIge1xuICBsZXQgc2libGluZ3MgPVxuICAgIGEubGVuZ3RoID09PSBiLmxlbmd0aCAmJiBhLnNsaWNlKDAsIC0xKS5ldmVyeSgobiwgaSkgPT4gbiA9PT0gYltpXSk7XG5cbiAgcmV0dXJuIHNpYmxpbmdzXG4gICAgPyAvLyBJZiB0d28gcm91dGVzIGFyZSBzaWJsaW5ncywgd2Ugc2hvdWxkIHRyeSB0byBtYXRjaCB0aGUgZWFybGllciBzaWJsaW5nXG4gICAgICAvLyBmaXJzdC4gVGhpcyBhbGxvd3MgcGVvcGxlIHRvIGhhdmUgZmluZS1ncmFpbmVkIGNvbnRyb2wgb3ZlciB0aGUgbWF0Y2hpbmdcbiAgICAgIC8vIGJlaGF2aW9yIGJ5IHNpbXBseSBwdXR0aW5nIHJvdXRlcyB3aXRoIGlkZW50aWNhbCBwYXRocyBpbiB0aGUgb3JkZXIgdGhleVxuICAgICAgLy8gd2FudCB0aGVtIHRyaWVkLlxuICAgICAgYVthLmxlbmd0aCAtIDFdIC0gYltiLmxlbmd0aCAtIDFdXG4gICAgOiAvLyBPdGhlcndpc2UsIGl0IGRvZXNuJ3QgcmVhbGx5IG1ha2Ugc2Vuc2UgdG8gcmFuayBub24tc2libGluZ3MgYnkgaW5kZXgsXG4gICAgICAvLyBzbyB0aGV5IHNvcnQgZXF1YWxseS5cbiAgICAgIDA7XG59XG5cbmZ1bmN0aW9uIG1hdGNoUm91dGVCcmFuY2g8XG4gIFBhcmFtS2V5IGV4dGVuZHMgc3RyaW5nID0gc3RyaW5nLFxuICBSb3V0ZU9iamVjdFR5cGUgZXh0ZW5kcyBBZ25vc3RpY1JvdXRlT2JqZWN0ID0gQWdub3N0aWNSb3V0ZU9iamVjdFxuPihcbiAgYnJhbmNoOiBSb3V0ZUJyYW5jaDxSb3V0ZU9iamVjdFR5cGU+LFxuICBwYXRobmFtZTogc3RyaW5nXG4pOiBBZ25vc3RpY1JvdXRlTWF0Y2g8UGFyYW1LZXksIFJvdXRlT2JqZWN0VHlwZT5bXSB8IG51bGwge1xuICBsZXQgeyByb3V0ZXNNZXRhIH0gPSBicmFuY2g7XG5cbiAgbGV0IG1hdGNoZWRQYXJhbXMgPSB7fTtcbiAgbGV0IG1hdGNoZWRQYXRobmFtZSA9IFwiL1wiO1xuICBsZXQgbWF0Y2hlczogQWdub3N0aWNSb3V0ZU1hdGNoPFBhcmFtS2V5LCBSb3V0ZU9iamVjdFR5cGU+W10gPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCByb3V0ZXNNZXRhLmxlbmd0aDsgKytpKSB7XG4gICAgbGV0IG1ldGEgPSByb3V0ZXNNZXRhW2ldO1xuICAgIGxldCBlbmQgPSBpID09PSByb3V0ZXNNZXRhLmxlbmd0aCAtIDE7XG4gICAgbGV0IHJlbWFpbmluZ1BhdGhuYW1lID1cbiAgICAgIG1hdGNoZWRQYXRobmFtZSA9PT0gXCIvXCJcbiAgICAgICAgPyBwYXRobmFtZVxuICAgICAgICA6IHBhdGhuYW1lLnNsaWNlKG1hdGNoZWRQYXRobmFtZS5sZW5ndGgpIHx8IFwiL1wiO1xuICAgIGxldCBtYXRjaCA9IG1hdGNoUGF0aChcbiAgICAgIHsgcGF0aDogbWV0YS5yZWxhdGl2ZVBhdGgsIGNhc2VTZW5zaXRpdmU6IG1ldGEuY2FzZVNlbnNpdGl2ZSwgZW5kIH0sXG4gICAgICByZW1haW5pbmdQYXRobmFtZVxuICAgICk7XG5cbiAgICBpZiAoIW1hdGNoKSByZXR1cm4gbnVsbDtcblxuICAgIE9iamVjdC5hc3NpZ24obWF0Y2hlZFBhcmFtcywgbWF0Y2gucGFyYW1zKTtcblxuICAgIGxldCByb3V0ZSA9IG1ldGEucm91dGU7XG5cbiAgICBtYXRjaGVzLnB1c2goe1xuICAgICAgLy8gVE9ETzogQ2FuIHRoaXMgYXMgYmUgYXZvaWRlZD9cbiAgICAgIHBhcmFtczogbWF0Y2hlZFBhcmFtcyBhcyBQYXJhbXM8UGFyYW1LZXk+LFxuICAgICAgcGF0aG5hbWU6IGpvaW5QYXRocyhbbWF0Y2hlZFBhdGhuYW1lLCBtYXRjaC5wYXRobmFtZV0pLFxuICAgICAgcGF0aG5hbWVCYXNlOiBub3JtYWxpemVQYXRobmFtZShcbiAgICAgICAgam9pblBhdGhzKFttYXRjaGVkUGF0aG5hbWUsIG1hdGNoLnBhdGhuYW1lQmFzZV0pXG4gICAgICApLFxuICAgICAgcm91dGUsXG4gICAgfSk7XG5cbiAgICBpZiAobWF0Y2gucGF0aG5hbWVCYXNlICE9PSBcIi9cIikge1xuICAgICAgbWF0Y2hlZFBhdGhuYW1lID0gam9pblBhdGhzKFttYXRjaGVkUGF0aG5hbWUsIG1hdGNoLnBhdGhuYW1lQmFzZV0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBtYXRjaGVzO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBwYXRoIHdpdGggcGFyYW1zIGludGVycG9sYXRlZC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3V0aWxzL2dlbmVyYXRlLXBhdGhcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlUGF0aDxQYXRoIGV4dGVuZHMgc3RyaW5nPihcbiAgb3JpZ2luYWxQYXRoOiBQYXRoLFxuICBwYXJhbXM6IHtcbiAgICBba2V5IGluIFBhdGhQYXJhbTxQYXRoPl06IHN0cmluZyB8IG51bGw7XG4gIH0gPSB7fSBhcyBhbnlcbik6IHN0cmluZyB7XG4gIGxldCBwYXRoID0gb3JpZ2luYWxQYXRoO1xuICBpZiAocGF0aC5lbmRzV2l0aChcIipcIikgJiYgcGF0aCAhPT0gXCIqXCIgJiYgIXBhdGguZW5kc1dpdGgoXCIvKlwiKSkge1xuICAgIHdhcm5pbmcoXG4gICAgICBmYWxzZSxcbiAgICAgIGBSb3V0ZSBwYXRoIFwiJHtwYXRofVwiIHdpbGwgYmUgdHJlYXRlZCBhcyBpZiBpdCB3ZXJlIGAgK1xuICAgICAgICBgXCIke3BhdGgucmVwbGFjZSgvXFwqJC8sIFwiLypcIil9XCIgYmVjYXVzZSB0aGUgXFxgKlxcYCBjaGFyYWN0ZXIgbXVzdCBgICtcbiAgICAgICAgYGFsd2F5cyBmb2xsb3cgYSBcXGAvXFxgIGluIHRoZSBwYXR0ZXJuLiBUbyBnZXQgcmlkIG9mIHRoaXMgd2FybmluZywgYCArXG4gICAgICAgIGBwbGVhc2UgY2hhbmdlIHRoZSByb3V0ZSBwYXRoIHRvIFwiJHtwYXRoLnJlcGxhY2UoL1xcKiQvLCBcIi8qXCIpfVwiLmBcbiAgICApO1xuICAgIHBhdGggPSBwYXRoLnJlcGxhY2UoL1xcKiQvLCBcIi8qXCIpIGFzIFBhdGg7XG4gIH1cblxuICByZXR1cm4gKFxuICAgIHBhdGhcbiAgICAgIC5yZXBsYWNlKFxuICAgICAgICAvXjooXFx3KykoXFw/PykvZyxcbiAgICAgICAgKF8sIGtleTogUGF0aFBhcmFtPFBhdGg+LCBvcHRpb25hbDogc3RyaW5nIHwgdW5kZWZpbmVkKSA9PiB7XG4gICAgICAgICAgbGV0IHBhcmFtID0gcGFyYW1zW2tleV07XG4gICAgICAgICAgaWYgKG9wdGlvbmFsID09PSBcIj9cIikge1xuICAgICAgICAgICAgcmV0dXJuIHBhcmFtID09IG51bGwgPyBcIlwiIDogcGFyYW07XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChwYXJhbSA9PSBudWxsKSB7XG4gICAgICAgICAgICBpbnZhcmlhbnQoZmFsc2UsIGBNaXNzaW5nIFwiOiR7a2V5fVwiIHBhcmFtYCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBwYXJhbTtcbiAgICAgICAgfVxuICAgICAgKVxuICAgICAgLnJlcGxhY2UoXG4gICAgICAgIC9cXC86KFxcdyspKFxcPz8pL2csXG4gICAgICAgIChfLCBrZXk6IFBhdGhQYXJhbTxQYXRoPiwgb3B0aW9uYWw6IHN0cmluZyB8IHVuZGVmaW5lZCkgPT4ge1xuICAgICAgICAgIGxldCBwYXJhbSA9IHBhcmFtc1trZXldO1xuICAgICAgICAgIGlmIChvcHRpb25hbCA9PT0gXCI/XCIpIHtcbiAgICAgICAgICAgIHJldHVybiBwYXJhbSA9PSBudWxsID8gXCJcIiA6IGAvJHtwYXJhbX1gO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAocGFyYW0gPT0gbnVsbCkge1xuICAgICAgICAgICAgaW52YXJpYW50KGZhbHNlLCBgTWlzc2luZyBcIjoke2tleX1cIiBwYXJhbWApO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gYC8ke3BhcmFtfWA7XG4gICAgICAgIH1cbiAgICAgIClcbiAgICAgIC8vIFJlbW92ZSBhbnkgb3B0aW9uYWwgbWFya2VycyBmcm9tIG9wdGlvbmFsIHN0YXRpYyBzZWdtZW50c1xuICAgICAgLnJlcGxhY2UoL1xcPy9nLCBcIlwiKVxuICAgICAgLnJlcGxhY2UoLyhcXC8/KVxcKi8sIChfLCBwcmVmaXgsIF9fLCBzdHIpID0+IHtcbiAgICAgICAgY29uc3Qgc3RhciA9IFwiKlwiIGFzIFBhdGhQYXJhbTxQYXRoPjtcblxuICAgICAgICBpZiAocGFyYW1zW3N0YXJdID09IG51bGwpIHtcbiAgICAgICAgICAvLyBJZiBubyBzcGxhdCB3YXMgcHJvdmlkZWQsIHRyaW0gdGhlIHRyYWlsaW5nIHNsYXNoIF91bmxlc3NfIGl0J3NcbiAgICAgICAgICAvLyB0aGUgZW50aXJlIHBhdGhcbiAgICAgICAgICByZXR1cm4gc3RyID09PSBcIi8qXCIgPyBcIi9cIiA6IFwiXCI7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBBcHBseSB0aGUgc3BsYXRcbiAgICAgICAgcmV0dXJuIGAke3ByZWZpeH0ke3BhcmFtc1tzdGFyXX1gO1xuICAgICAgfSlcbiAgKTtcbn1cblxuLyoqXG4gKiBBIFBhdGhQYXR0ZXJuIGlzIHVzZWQgdG8gbWF0Y2ggb24gc29tZSBwb3J0aW9uIG9mIGEgVVJMIHBhdGhuYW1lLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFBhdGhQYXR0ZXJuPFBhdGggZXh0ZW5kcyBzdHJpbmcgPSBzdHJpbmc+IHtcbiAgLyoqXG4gICAqIEEgc3RyaW5nIHRvIG1hdGNoIGFnYWluc3QgYSBVUkwgcGF0aG5hbWUuIE1heSBjb250YWluIGA6aWRgLXN0eWxlIHNlZ21lbnRzXG4gICAqIHRvIGluZGljYXRlIHBsYWNlaG9sZGVycyBmb3IgZHluYW1pYyBwYXJhbWV0ZXJzLiBNYXkgYWxzbyBlbmQgd2l0aCBgLypgIHRvXG4gICAqIGluZGljYXRlIG1hdGNoaW5nIHRoZSByZXN0IG9mIHRoZSBVUkwgcGF0aG5hbWUuXG4gICAqL1xuICBwYXRoOiBQYXRoO1xuICAvKipcbiAgICogU2hvdWxkIGJlIGB0cnVlYCBpZiB0aGUgc3RhdGljIHBvcnRpb25zIG9mIHRoZSBgcGF0aGAgc2hvdWxkIGJlIG1hdGNoZWQgaW5cbiAgICogdGhlIHNhbWUgY2FzZS5cbiAgICovXG4gIGNhc2VTZW5zaXRpdmU/OiBib29sZWFuO1xuICAvKipcbiAgICogU2hvdWxkIGJlIGB0cnVlYCBpZiB0aGlzIHBhdHRlcm4gc2hvdWxkIG1hdGNoIHRoZSBlbnRpcmUgVVJMIHBhdGhuYW1lLlxuICAgKi9cbiAgZW5kPzogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBBIFBhdGhNYXRjaCBjb250YWlucyBpbmZvIGFib3V0IGhvdyBhIFBhdGhQYXR0ZXJuIG1hdGNoZWQgb24gYSBVUkwgcGF0aG5hbWUuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUGF0aE1hdGNoPFBhcmFtS2V5IGV4dGVuZHMgc3RyaW5nID0gc3RyaW5nPiB7XG4gIC8qKlxuICAgKiBUaGUgbmFtZXMgYW5kIHZhbHVlcyBvZiBkeW5hbWljIHBhcmFtZXRlcnMgaW4gdGhlIFVSTC5cbiAgICovXG4gIHBhcmFtczogUGFyYW1zPFBhcmFtS2V5PjtcbiAgLyoqXG4gICAqIFRoZSBwb3J0aW9uIG9mIHRoZSBVUkwgcGF0aG5hbWUgdGhhdCB3YXMgbWF0Y2hlZC5cbiAgICovXG4gIHBhdGhuYW1lOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgcG9ydGlvbiBvZiB0aGUgVVJMIHBhdGhuYW1lIHRoYXQgd2FzIG1hdGNoZWQgYmVmb3JlIGNoaWxkIHJvdXRlcy5cbiAgICovXG4gIHBhdGhuYW1lQmFzZTogc3RyaW5nO1xuICAvKipcbiAgICogVGhlIHBhdHRlcm4gdGhhdCB3YXMgdXNlZCB0byBtYXRjaC5cbiAgICovXG4gIHBhdHRlcm46IFBhdGhQYXR0ZXJuO1xufVxuXG50eXBlIE11dGFibGU8VD4gPSB7XG4gIC1yZWFkb25seSBbUCBpbiBrZXlvZiBUXTogVFtQXTtcbn07XG5cbi8qKlxuICogUGVyZm9ybXMgcGF0dGVybiBtYXRjaGluZyBvbiBhIFVSTCBwYXRobmFtZSBhbmQgcmV0dXJucyBpbmZvcm1hdGlvbiBhYm91dFxuICogdGhlIG1hdGNoLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vdXRpbHMvbWF0Y2gtcGF0aFxuICovXG5leHBvcnQgZnVuY3Rpb24gbWF0Y2hQYXRoPFxuICBQYXJhbUtleSBleHRlbmRzIFBhcmFtUGFyc2VLZXk8UGF0aD4sXG4gIFBhdGggZXh0ZW5kcyBzdHJpbmdcbj4oXG4gIHBhdHRlcm46IFBhdGhQYXR0ZXJuPFBhdGg+IHwgUGF0aCxcbiAgcGF0aG5hbWU6IHN0cmluZ1xuKTogUGF0aE1hdGNoPFBhcmFtS2V5PiB8IG51bGwge1xuICBpZiAodHlwZW9mIHBhdHRlcm4gPT09IFwic3RyaW5nXCIpIHtcbiAgICBwYXR0ZXJuID0geyBwYXRoOiBwYXR0ZXJuLCBjYXNlU2Vuc2l0aXZlOiBmYWxzZSwgZW5kOiB0cnVlIH07XG4gIH1cblxuICBsZXQgW21hdGNoZXIsIHBhcmFtTmFtZXNdID0gY29tcGlsZVBhdGgoXG4gICAgcGF0dGVybi5wYXRoLFxuICAgIHBhdHRlcm4uY2FzZVNlbnNpdGl2ZSxcbiAgICBwYXR0ZXJuLmVuZFxuICApO1xuXG4gIGxldCBtYXRjaCA9IHBhdGhuYW1lLm1hdGNoKG1hdGNoZXIpO1xuICBpZiAoIW1hdGNoKSByZXR1cm4gbnVsbDtcblxuICBsZXQgbWF0Y2hlZFBhdGhuYW1lID0gbWF0Y2hbMF07XG4gIGxldCBwYXRobmFtZUJhc2UgPSBtYXRjaGVkUGF0aG5hbWUucmVwbGFjZSgvKC4pXFwvKyQvLCBcIiQxXCIpO1xuICBsZXQgY2FwdHVyZUdyb3VwcyA9IG1hdGNoLnNsaWNlKDEpO1xuICBsZXQgcGFyYW1zOiBQYXJhbXMgPSBwYXJhbU5hbWVzLnJlZHVjZTxNdXRhYmxlPFBhcmFtcz4+KFxuICAgIChtZW1vLCBwYXJhbU5hbWUsIGluZGV4KSA9PiB7XG4gICAgICAvLyBXZSBuZWVkIHRvIGNvbXB1dGUgdGhlIHBhdGhuYW1lQmFzZSBoZXJlIHVzaW5nIHRoZSByYXcgc3BsYXQgdmFsdWVcbiAgICAgIC8vIGluc3RlYWQgb2YgdXNpbmcgcGFyYW1zW1wiKlwiXSBsYXRlciBiZWNhdXNlIGl0IHdpbGwgYmUgZGVjb2RlZCB0aGVuXG4gICAgICBpZiAocGFyYW1OYW1lID09PSBcIipcIikge1xuICAgICAgICBsZXQgc3BsYXRWYWx1ZSA9IGNhcHR1cmVHcm91cHNbaW5kZXhdIHx8IFwiXCI7XG4gICAgICAgIHBhdGhuYW1lQmFzZSA9IG1hdGNoZWRQYXRobmFtZVxuICAgICAgICAgIC5zbGljZSgwLCBtYXRjaGVkUGF0aG5hbWUubGVuZ3RoIC0gc3BsYXRWYWx1ZS5sZW5ndGgpXG4gICAgICAgICAgLnJlcGxhY2UoLyguKVxcLyskLywgXCIkMVwiKTtcbiAgICAgIH1cblxuICAgICAgbWVtb1twYXJhbU5hbWVdID0gc2FmZWx5RGVjb2RlVVJJQ29tcG9uZW50KFxuICAgICAgICBjYXB0dXJlR3JvdXBzW2luZGV4XSB8fCBcIlwiLFxuICAgICAgICBwYXJhbU5hbWVcbiAgICAgICk7XG4gICAgICByZXR1cm4gbWVtbztcbiAgICB9LFxuICAgIHt9XG4gICk7XG5cbiAgcmV0dXJuIHtcbiAgICBwYXJhbXMsXG4gICAgcGF0aG5hbWU6IG1hdGNoZWRQYXRobmFtZSxcbiAgICBwYXRobmFtZUJhc2UsXG4gICAgcGF0dGVybixcbiAgfTtcbn1cblxuZnVuY3Rpb24gY29tcGlsZVBhdGgoXG4gIHBhdGg6IHN0cmluZyxcbiAgY2FzZVNlbnNpdGl2ZSA9IGZhbHNlLFxuICBlbmQgPSB0cnVlXG4pOiBbUmVnRXhwLCBzdHJpbmdbXV0ge1xuICB3YXJuaW5nKFxuICAgIHBhdGggPT09IFwiKlwiIHx8ICFwYXRoLmVuZHNXaXRoKFwiKlwiKSB8fCBwYXRoLmVuZHNXaXRoKFwiLypcIiksXG4gICAgYFJvdXRlIHBhdGggXCIke3BhdGh9XCIgd2lsbCBiZSB0cmVhdGVkIGFzIGlmIGl0IHdlcmUgYCArXG4gICAgICBgXCIke3BhdGgucmVwbGFjZSgvXFwqJC8sIFwiLypcIil9XCIgYmVjYXVzZSB0aGUgXFxgKlxcYCBjaGFyYWN0ZXIgbXVzdCBgICtcbiAgICAgIGBhbHdheXMgZm9sbG93IGEgXFxgL1xcYCBpbiB0aGUgcGF0dGVybi4gVG8gZ2V0IHJpZCBvZiB0aGlzIHdhcm5pbmcsIGAgK1xuICAgICAgYHBsZWFzZSBjaGFuZ2UgdGhlIHJvdXRlIHBhdGggdG8gXCIke3BhdGgucmVwbGFjZSgvXFwqJC8sIFwiLypcIil9XCIuYFxuICApO1xuXG4gIGxldCBwYXJhbU5hbWVzOiBzdHJpbmdbXSA9IFtdO1xuICBsZXQgcmVnZXhwU291cmNlID1cbiAgICBcIl5cIiArXG4gICAgcGF0aFxuICAgICAgLnJlcGxhY2UoL1xcLypcXCo/JC8sIFwiXCIpIC8vIElnbm9yZSB0cmFpbGluZyAvIGFuZCAvKiwgd2UnbGwgaGFuZGxlIGl0IGJlbG93XG4gICAgICAucmVwbGFjZSgvXlxcLyovLCBcIi9cIikgLy8gTWFrZSBzdXJlIGl0IGhhcyBhIGxlYWRpbmcgL1xuICAgICAgLnJlcGxhY2UoL1tcXFxcLiorXiQ/e318KClbXFxdXS9nLCBcIlxcXFwkJlwiKSAvLyBFc2NhcGUgc3BlY2lhbCByZWdleCBjaGFyc1xuICAgICAgLnJlcGxhY2UoL1xcLzooXFx3KykvZywgKF86IHN0cmluZywgcGFyYW1OYW1lOiBzdHJpbmcpID0+IHtcbiAgICAgICAgcGFyYW1OYW1lcy5wdXNoKHBhcmFtTmFtZSk7XG4gICAgICAgIHJldHVybiBcIi8oW15cXFxcL10rKVwiO1xuICAgICAgfSk7XG5cbiAgaWYgKHBhdGguZW5kc1dpdGgoXCIqXCIpKSB7XG4gICAgcGFyYW1OYW1lcy5wdXNoKFwiKlwiKTtcbiAgICByZWdleHBTb3VyY2UgKz1cbiAgICAgIHBhdGggPT09IFwiKlwiIHx8IHBhdGggPT09IFwiLypcIlxuICAgICAgICA/IFwiKC4qKSRcIiAvLyBBbHJlYWR5IG1hdGNoZWQgdGhlIGluaXRpYWwgLywganVzdCBtYXRjaCB0aGUgcmVzdFxuICAgICAgICA6IFwiKD86XFxcXC8oLispfFxcXFwvKikkXCI7IC8vIERvbid0IGluY2x1ZGUgdGhlIC8gaW4gcGFyYW1zW1wiKlwiXVxuICB9IGVsc2UgaWYgKGVuZCkge1xuICAgIC8vIFdoZW4gbWF0Y2hpbmcgdG8gdGhlIGVuZCwgaWdub3JlIHRyYWlsaW5nIHNsYXNoZXNcbiAgICByZWdleHBTb3VyY2UgKz0gXCJcXFxcLyokXCI7XG4gIH0gZWxzZSBpZiAocGF0aCAhPT0gXCJcIiAmJiBwYXRoICE9PSBcIi9cIikge1xuICAgIC8vIElmIG91ciBwYXRoIGlzIG5vbi1lbXB0eSBhbmQgY29udGFpbnMgYW55dGhpbmcgYmV5b25kIGFuIGluaXRpYWwgc2xhc2gsXG4gICAgLy8gdGhlbiB3ZSBoYXZlIF9zb21lXyBmb3JtIG9mIHBhdGggaW4gb3VyIHJlZ2V4IHNvIHdlIHNob3VsZCBleHBlY3QgdG9cbiAgICAvLyBtYXRjaCBvbmx5IGlmIHdlIGZpbmQgdGhlIGVuZCBvZiB0aGlzIHBhdGggc2VnbWVudC4gIExvb2sgZm9yIGFuIG9wdGlvbmFsXG4gICAgLy8gbm9uLWNhcHR1cmVkIHRyYWlsaW5nIHNsYXNoICh0byBtYXRjaCBhIHBvcnRpb24gb2YgdGhlIFVSTCkgb3IgdGhlIGVuZFxuICAgIC8vIG9mIHRoZSBwYXRoIChpZiB3ZSd2ZSBtYXRjaGVkIHRvIHRoZSBlbmQpLiAgV2UgdXNlZCB0byBkbyB0aGlzIHdpdGggYVxuICAgIC8vIHdvcmQgYm91bmRhcnkgYnV0IHRoYXQgZ2l2ZXMgZmFsc2UgcG9zaXRpdmVzIG9uIHJvdXRlcyBsaWtlXG4gICAgLy8gL3VzZXItcHJlZmVyZW5jZXMgc2luY2UgYC1gIGNvdW50cyBhcyBhIHdvcmQgYm91bmRhcnkuXG4gICAgcmVnZXhwU291cmNlICs9IFwiKD86KD89XFxcXC98JCkpXCI7XG4gIH0gZWxzZSB7XG4gICAgLy8gTm90aGluZyB0byBtYXRjaCBmb3IgXCJcIiBvciBcIi9cIlxuICB9XG5cbiAgbGV0IG1hdGNoZXIgPSBuZXcgUmVnRXhwKHJlZ2V4cFNvdXJjZSwgY2FzZVNlbnNpdGl2ZSA/IHVuZGVmaW5lZCA6IFwiaVwiKTtcblxuICByZXR1cm4gW21hdGNoZXIsIHBhcmFtTmFtZXNdO1xufVxuXG5mdW5jdGlvbiBzYWZlbHlEZWNvZGVVUkkodmFsdWU6IHN0cmluZykge1xuICB0cnkge1xuICAgIHJldHVybiBkZWNvZGVVUkkodmFsdWUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHdhcm5pbmcoXG4gICAgICBmYWxzZSxcbiAgICAgIGBUaGUgVVJMIHBhdGggXCIke3ZhbHVlfVwiIGNvdWxkIG5vdCBiZSBkZWNvZGVkIGJlY2F1c2UgaXQgaXMgaXMgYSBgICtcbiAgICAgICAgYG1hbGZvcm1lZCBVUkwgc2VnbWVudC4gVGhpcyBpcyBwcm9iYWJseSBkdWUgdG8gYSBiYWQgcGVyY2VudCBgICtcbiAgICAgICAgYGVuY29kaW5nICgke2Vycm9yfSkuYFxuICAgICk7XG5cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gc2FmZWx5RGVjb2RlVVJJQ29tcG9uZW50KHZhbHVlOiBzdHJpbmcsIHBhcmFtTmFtZTogc3RyaW5nKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudCh2YWx1ZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgd2FybmluZyhcbiAgICAgIGZhbHNlLFxuICAgICAgYFRoZSB2YWx1ZSBmb3IgdGhlIFVSTCBwYXJhbSBcIiR7cGFyYW1OYW1lfVwiIHdpbGwgbm90IGJlIGRlY29kZWQgYmVjYXVzZWAgK1xuICAgICAgICBgIHRoZSBzdHJpbmcgXCIke3ZhbHVlfVwiIGlzIGEgbWFsZm9ybWVkIFVSTCBzZWdtZW50LiBUaGlzIGlzIHByb2JhYmx5YCArXG4gICAgICAgIGAgZHVlIHRvIGEgYmFkIHBlcmNlbnQgZW5jb2RpbmcgKCR7ZXJyb3J9KS5gXG4gICAgKTtcblxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzdHJpcEJhc2VuYW1lKFxuICBwYXRobmFtZTogc3RyaW5nLFxuICBiYXNlbmFtZTogc3RyaW5nXG4pOiBzdHJpbmcgfCBudWxsIHtcbiAgaWYgKGJhc2VuYW1lID09PSBcIi9cIikgcmV0dXJuIHBhdGhuYW1lO1xuXG4gIGlmICghcGF0aG5hbWUudG9Mb3dlckNhc2UoKS5zdGFydHNXaXRoKGJhc2VuYW1lLnRvTG93ZXJDYXNlKCkpKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBXZSB3YW50IHRvIGxlYXZlIHRyYWlsaW5nIHNsYXNoIGJlaGF2aW9yIGluIHRoZSB1c2VyJ3MgY29udHJvbCwgc28gaWYgdGhleVxuICAvLyBzcGVjaWZ5IGEgYmFzZW5hbWUgd2l0aCBhIHRyYWlsaW5nIHNsYXNoLCB3ZSBzaG91bGQgc3VwcG9ydCBpdFxuICBsZXQgc3RhcnRJbmRleCA9IGJhc2VuYW1lLmVuZHNXaXRoKFwiL1wiKVxuICAgID8gYmFzZW5hbWUubGVuZ3RoIC0gMVxuICAgIDogYmFzZW5hbWUubGVuZ3RoO1xuICBsZXQgbmV4dENoYXIgPSBwYXRobmFtZS5jaGFyQXQoc3RhcnRJbmRleCk7XG4gIGlmIChuZXh0Q2hhciAmJiBuZXh0Q2hhciAhPT0gXCIvXCIpIHtcbiAgICAvLyBwYXRobmFtZSBkb2VzIG5vdCBzdGFydCB3aXRoIGJhc2VuYW1lL1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHBhdGhuYW1lLnNsaWNlKHN0YXJ0SW5kZXgpIHx8IFwiL1wiO1xufVxuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB3YXJuaW5nKGNvbmQ6IGFueSwgbWVzc2FnZTogc3RyaW5nKTogdm9pZCB7XG4gIGlmICghY29uZCkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSBcInVuZGVmaW5lZFwiKSBjb25zb2xlLndhcm4obWVzc2FnZSk7XG5cbiAgICB0cnkge1xuICAgICAgLy8gV2VsY29tZSB0byBkZWJ1Z2dpbmcgQHJlbWl4LXJ1bi9yb3V0ZXIhXG4gICAgICAvL1xuICAgICAgLy8gVGhpcyBlcnJvciBpcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB5b3UgY2FuIG1vcmUgZWFzaWx5XG4gICAgICAvLyBmaW5kIHRoZSBzb3VyY2UgZm9yIGEgd2FybmluZyB0aGF0IGFwcGVhcnMgaW4gdGhlIGNvbnNvbGUgYnlcbiAgICAgIC8vIGVuYWJsaW5nIFwicGF1c2Ugb24gZXhjZXB0aW9uc1wiIGluIHlvdXIgSmF2YVNjcmlwdCBkZWJ1Z2dlci5cbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lbXB0eVxuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgcmVzb2x2ZWQgcGF0aCBvYmplY3QgcmVsYXRpdmUgdG8gdGhlIGdpdmVuIHBhdGhuYW1lLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vdXRpbHMvcmVzb2x2ZS1wYXRoXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXNvbHZlUGF0aCh0bzogVG8sIGZyb21QYXRobmFtZSA9IFwiL1wiKTogUGF0aCB7XG4gIGxldCB7XG4gICAgcGF0aG5hbWU6IHRvUGF0aG5hbWUsXG4gICAgc2VhcmNoID0gXCJcIixcbiAgICBoYXNoID0gXCJcIixcbiAgfSA9IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aCh0bykgOiB0bztcblxuICBsZXQgcGF0aG5hbWUgPSB0b1BhdGhuYW1lXG4gICAgPyB0b1BhdGhuYW1lLnN0YXJ0c1dpdGgoXCIvXCIpXG4gICAgICA/IHRvUGF0aG5hbWVcbiAgICAgIDogcmVzb2x2ZVBhdGhuYW1lKHRvUGF0aG5hbWUsIGZyb21QYXRobmFtZSlcbiAgICA6IGZyb21QYXRobmFtZTtcblxuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lLFxuICAgIHNlYXJjaDogbm9ybWFsaXplU2VhcmNoKHNlYXJjaCksXG4gICAgaGFzaDogbm9ybWFsaXplSGFzaChoYXNoKSxcbiAgfTtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZVBhdGhuYW1lKHJlbGF0aXZlUGF0aDogc3RyaW5nLCBmcm9tUGF0aG5hbWU6IHN0cmluZyk6IHN0cmluZyB7XG4gIGxldCBzZWdtZW50cyA9IGZyb21QYXRobmFtZS5yZXBsYWNlKC9cXC8rJC8sIFwiXCIpLnNwbGl0KFwiL1wiKTtcbiAgbGV0IHJlbGF0aXZlU2VnbWVudHMgPSByZWxhdGl2ZVBhdGguc3BsaXQoXCIvXCIpO1xuXG4gIHJlbGF0aXZlU2VnbWVudHMuZm9yRWFjaCgoc2VnbWVudCkgPT4ge1xuICAgIGlmIChzZWdtZW50ID09PSBcIi4uXCIpIHtcbiAgICAgIC8vIEtlZXAgdGhlIHJvb3QgXCJcIiBzZWdtZW50IHNvIHRoZSBwYXRobmFtZSBzdGFydHMgYXQgL1xuICAgICAgaWYgKHNlZ21lbnRzLmxlbmd0aCA+IDEpIHNlZ21lbnRzLnBvcCgpO1xuICAgIH0gZWxzZSBpZiAoc2VnbWVudCAhPT0gXCIuXCIpIHtcbiAgICAgIHNlZ21lbnRzLnB1c2goc2VnbWVudCk7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gc2VnbWVudHMubGVuZ3RoID4gMSA/IHNlZ21lbnRzLmpvaW4oXCIvXCIpIDogXCIvXCI7XG59XG5cbmZ1bmN0aW9uIGdldEludmFsaWRQYXRoRXJyb3IoXG4gIGNoYXI6IHN0cmluZyxcbiAgZmllbGQ6IHN0cmluZyxcbiAgZGVzdDogc3RyaW5nLFxuICBwYXRoOiBQYXJ0aWFsPFBhdGg+XG4pIHtcbiAgcmV0dXJuIChcbiAgICBgQ2Fubm90IGluY2x1ZGUgYSAnJHtjaGFyfScgY2hhcmFjdGVyIGluIGEgbWFudWFsbHkgc3BlY2lmaWVkIGAgK1xuICAgIGBcXGB0by4ke2ZpZWxkfVxcYCBmaWVsZCBbJHtKU09OLnN0cmluZ2lmeShcbiAgICAgIHBhdGhcbiAgICApfV0uICBQbGVhc2Ugc2VwYXJhdGUgaXQgb3V0IHRvIHRoZSBgICtcbiAgICBgXFxgdG8uJHtkZXN0fVxcYCBmaWVsZC4gQWx0ZXJuYXRpdmVseSB5b3UgbWF5IHByb3ZpZGUgdGhlIGZ1bGwgcGF0aCBhcyBgICtcbiAgICBgYSBzdHJpbmcgaW4gPExpbmsgdG89XCIuLi5cIj4gYW5kIHRoZSByb3V0ZXIgd2lsbCBwYXJzZSBpdCBmb3IgeW91LmBcbiAgKTtcbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICpcbiAqIFdoZW4gcHJvY2Vzc2luZyByZWxhdGl2ZSBuYXZpZ2F0aW9uIHdlIHdhbnQgdG8gaWdub3JlIGFuY2VzdG9yIHJvdXRlcyB0aGF0XG4gKiBkbyBub3QgY29udHJpYnV0ZSB0byB0aGUgcGF0aCwgc3VjaCB0aGF0IGluZGV4L3BhdGhsZXNzIGxheW91dCByb3V0ZXMgZG9uJ3RcbiAqIGludGVyZmVyZS5cbiAqXG4gKiBGb3IgZXhhbXBsZSwgd2hlbiBtb3ZpbmcgYSByb3V0ZSBlbGVtZW50IGludG8gYW4gaW5kZXggcm91dGUgYW5kL29yIGFcbiAqIHBhdGhsZXNzIGxheW91dCByb3V0ZSwgcmVsYXRpdmUgbGluayBiZWhhdmlvciBjb250YWluZWQgd2l0aGluIHNob3VsZCBzdGF5XG4gKiB0aGUgc2FtZS4gIEJvdGggb2YgdGhlIGZvbGxvd2luZyBleGFtcGxlcyBzaG91bGQgbGluayBiYWNrIHRvIHRoZSByb290OlxuICpcbiAqICAgPFJvdXRlIHBhdGg9XCIvXCI+XG4gKiAgICAgPFJvdXRlIHBhdGg9XCJhY2NvdW50c1wiIGVsZW1lbnQ9ezxMaW5rIHRvPVwiLi5cIn0+XG4gKiAgIDwvUm91dGU+XG4gKlxuICogICA8Um91dGUgcGF0aD1cIi9cIj5cbiAqICAgICA8Um91dGUgcGF0aD1cImFjY291bnRzXCI+XG4gKiAgICAgICA8Um91dGUgZWxlbWVudD17PEFjY291bnRzTGF5b3V0IC8+fT4gICAgICAgLy8gPC0tIERvZXMgbm90IGNvbnRyaWJ1dGVcbiAqICAgICAgICAgPFJvdXRlIGluZGV4IGVsZW1lbnQ9ezxMaW5rIHRvPVwiLi5cIn0gLz4gIC8vIDwtLSBEb2VzIG5vdCBjb250cmlidXRlXG4gKiAgICAgICA8L1JvdXRlXG4gKiAgICAgPC9Sb3V0ZT5cbiAqICAgPC9Sb3V0ZT5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldFBhdGhDb250cmlidXRpbmdNYXRjaGVzPFxuICBUIGV4dGVuZHMgQWdub3N0aWNSb3V0ZU1hdGNoID0gQWdub3N0aWNSb3V0ZU1hdGNoXG4+KG1hdGNoZXM6IFRbXSkge1xuICByZXR1cm4gbWF0Y2hlcy5maWx0ZXIoXG4gICAgKG1hdGNoLCBpbmRleCkgPT5cbiAgICAgIGluZGV4ID09PSAwIHx8IChtYXRjaC5yb3V0ZS5wYXRoICYmIG1hdGNoLnJvdXRlLnBhdGgubGVuZ3RoID4gMClcbiAgKTtcbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gcmVzb2x2ZVRvKFxuICB0b0FyZzogVG8sXG4gIHJvdXRlUGF0aG5hbWVzOiBzdHJpbmdbXSxcbiAgbG9jYXRpb25QYXRobmFtZTogc3RyaW5nLFxuICBpc1BhdGhSZWxhdGl2ZSA9IGZhbHNlXG4pOiBQYXRoIHtcbiAgbGV0IHRvOiBQYXJ0aWFsPFBhdGg+O1xuICBpZiAodHlwZW9mIHRvQXJnID09PSBcInN0cmluZ1wiKSB7XG4gICAgdG8gPSBwYXJzZVBhdGgodG9BcmcpO1xuICB9IGVsc2Uge1xuICAgIHRvID0geyAuLi50b0FyZyB9O1xuXG4gICAgaW52YXJpYW50KFxuICAgICAgIXRvLnBhdGhuYW1lIHx8ICF0by5wYXRobmFtZS5pbmNsdWRlcyhcIj9cIiksXG4gICAgICBnZXRJbnZhbGlkUGF0aEVycm9yKFwiP1wiLCBcInBhdGhuYW1lXCIsIFwic2VhcmNoXCIsIHRvKVxuICAgICk7XG4gICAgaW52YXJpYW50KFxuICAgICAgIXRvLnBhdGhuYW1lIHx8ICF0by5wYXRobmFtZS5pbmNsdWRlcyhcIiNcIiksXG4gICAgICBnZXRJbnZhbGlkUGF0aEVycm9yKFwiI1wiLCBcInBhdGhuYW1lXCIsIFwiaGFzaFwiLCB0bylcbiAgICApO1xuICAgIGludmFyaWFudChcbiAgICAgICF0by5zZWFyY2ggfHwgIXRvLnNlYXJjaC5pbmNsdWRlcyhcIiNcIiksXG4gICAgICBnZXRJbnZhbGlkUGF0aEVycm9yKFwiI1wiLCBcInNlYXJjaFwiLCBcImhhc2hcIiwgdG8pXG4gICAgKTtcbiAgfVxuXG4gIGxldCBpc0VtcHR5UGF0aCA9IHRvQXJnID09PSBcIlwiIHx8IHRvLnBhdGhuYW1lID09PSBcIlwiO1xuICBsZXQgdG9QYXRobmFtZSA9IGlzRW1wdHlQYXRoID8gXCIvXCIgOiB0by5wYXRobmFtZTtcblxuICBsZXQgZnJvbTogc3RyaW5nO1xuXG4gIC8vIFJvdXRpbmcgaXMgcmVsYXRpdmUgdG8gdGhlIGN1cnJlbnQgcGF0aG5hbWUgaWYgZXhwbGljaXRseSByZXF1ZXN0ZWQuXG4gIC8vXG4gIC8vIElmIGEgcGF0aG5hbWUgaXMgZXhwbGljaXRseSBwcm92aWRlZCBpbiBgdG9gLCBpdCBzaG91bGQgYmUgcmVsYXRpdmUgdG8gdGhlXG4gIC8vIHJvdXRlIGNvbnRleHQuIFRoaXMgaXMgZXhwbGFpbmVkIGluIGBOb3RlIG9uIGA8TGluayB0bz5gIHZhbHVlc2AgaW4gb3VyXG4gIC8vIG1pZ3JhdGlvbiBndWlkZSBmcm9tIHY1IGFzIGEgbWVhbnMgb2YgZGlzYW1iaWd1YXRpb24gYmV0d2VlbiBgdG9gIHZhbHVlc1xuICAvLyB0aGF0IGJlZ2luIHdpdGggYC9gIGFuZCB0aG9zZSB0aGF0IGRvIG5vdC4gSG93ZXZlciwgdGhpcyBpcyBwcm9ibGVtYXRpYyBmb3JcbiAgLy8gYHRvYCB2YWx1ZXMgdGhhdCBkbyBub3QgcHJvdmlkZSBhIHBhdGhuYW1lLiBgdG9gIGNhbiBzaW1wbHkgYmUgYSBzZWFyY2ggb3JcbiAgLy8gaGFzaCBzdHJpbmcsIGluIHdoaWNoIGNhc2Ugd2Ugc2hvdWxkIGFzc3VtZSB0aGF0IHRoZSBuYXZpZ2F0aW9uIGlzIHJlbGF0aXZlXG4gIC8vIHRvIHRoZSBjdXJyZW50IGxvY2F0aW9uJ3MgcGF0aG5hbWUgYW5kICpub3QqIHRoZSByb3V0ZSBwYXRobmFtZS5cbiAgaWYgKGlzUGF0aFJlbGF0aXZlIHx8IHRvUGF0aG5hbWUgPT0gbnVsbCkge1xuICAgIGZyb20gPSBsb2NhdGlvblBhdGhuYW1lO1xuICB9IGVsc2Uge1xuICAgIGxldCByb3V0ZVBhdGhuYW1lSW5kZXggPSByb3V0ZVBhdGhuYW1lcy5sZW5ndGggLSAxO1xuXG4gICAgaWYgKHRvUGF0aG5hbWUuc3RhcnRzV2l0aChcIi4uXCIpKSB7XG4gICAgICBsZXQgdG9TZWdtZW50cyA9IHRvUGF0aG5hbWUuc3BsaXQoXCIvXCIpO1xuXG4gICAgICAvLyBFYWNoIGxlYWRpbmcgLi4gc2VnbWVudCBtZWFucyBcImdvIHVwIG9uZSByb3V0ZVwiIGluc3RlYWQgb2YgXCJnbyB1cCBvbmVcbiAgICAgIC8vIFVSTCBzZWdtZW50XCIuICBUaGlzIGlzIGEga2V5IGRpZmZlcmVuY2UgZnJvbSBob3cgPGEgaHJlZj4gd29ya3MgYW5kIGFcbiAgICAgIC8vIG1ham9yIHJlYXNvbiB3ZSBjYWxsIHRoaXMgYSBcInRvXCIgdmFsdWUgaW5zdGVhZCBvZiBhIFwiaHJlZlwiLlxuICAgICAgd2hpbGUgKHRvU2VnbWVudHNbMF0gPT09IFwiLi5cIikge1xuICAgICAgICB0b1NlZ21lbnRzLnNoaWZ0KCk7XG4gICAgICAgIHJvdXRlUGF0aG5hbWVJbmRleCAtPSAxO1xuICAgICAgfVxuXG4gICAgICB0by5wYXRobmFtZSA9IHRvU2VnbWVudHMuam9pbihcIi9cIik7XG4gICAgfVxuXG4gICAgLy8gSWYgdGhlcmUgYXJlIG1vcmUgXCIuLlwiIHNlZ21lbnRzIHRoYW4gcGFyZW50IHJvdXRlcywgcmVzb2x2ZSByZWxhdGl2ZSB0b1xuICAgIC8vIHRoZSByb290IC8gVVJMLlxuICAgIGZyb20gPSByb3V0ZVBhdGhuYW1lSW5kZXggPj0gMCA/IHJvdXRlUGF0aG5hbWVzW3JvdXRlUGF0aG5hbWVJbmRleF0gOiBcIi9cIjtcbiAgfVxuXG4gIGxldCBwYXRoID0gcmVzb2x2ZVBhdGgodG8sIGZyb20pO1xuXG4gIC8vIEVuc3VyZSB0aGUgcGF0aG5hbWUgaGFzIGEgdHJhaWxpbmcgc2xhc2ggaWYgdGhlIG9yaWdpbmFsIFwidG9cIiBoYWQgb25lXG4gIGxldCBoYXNFeHBsaWNpdFRyYWlsaW5nU2xhc2ggPVxuICAgIHRvUGF0aG5hbWUgJiYgdG9QYXRobmFtZSAhPT0gXCIvXCIgJiYgdG9QYXRobmFtZS5lbmRzV2l0aChcIi9cIik7XG4gIC8vIE9yIGlmIHRoaXMgd2FzIGEgbGluayB0byB0aGUgY3VycmVudCBwYXRoIHdoaWNoIGhhcyBhIHRyYWlsaW5nIHNsYXNoXG4gIGxldCBoYXNDdXJyZW50VHJhaWxpbmdTbGFzaCA9XG4gICAgKGlzRW1wdHlQYXRoIHx8IHRvUGF0aG5hbWUgPT09IFwiLlwiKSAmJiBsb2NhdGlvblBhdGhuYW1lLmVuZHNXaXRoKFwiL1wiKTtcbiAgaWYgKFxuICAgICFwYXRoLnBhdGhuYW1lLmVuZHNXaXRoKFwiL1wiKSAmJlxuICAgIChoYXNFeHBsaWNpdFRyYWlsaW5nU2xhc2ggfHwgaGFzQ3VycmVudFRyYWlsaW5nU2xhc2gpXG4gICkge1xuICAgIHBhdGgucGF0aG5hbWUgKz0gXCIvXCI7XG4gIH1cblxuICByZXR1cm4gcGF0aDtcbn1cblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0VG9QYXRobmFtZSh0bzogVG8pOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAvLyBFbXB0eSBzdHJpbmdzIHNob3VsZCBiZSB0cmVhdGVkIHRoZSBzYW1lIGFzIC8gcGF0aHNcbiAgcmV0dXJuIHRvID09PSBcIlwiIHx8ICh0byBhcyBQYXRoKS5wYXRobmFtZSA9PT0gXCJcIlxuICAgID8gXCIvXCJcbiAgICA6IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIlxuICAgID8gcGFyc2VQYXRoKHRvKS5wYXRobmFtZVxuICAgIDogdG8ucGF0aG5hbWU7XG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGNvbnN0IGpvaW5QYXRocyA9IChwYXRoczogc3RyaW5nW10pOiBzdHJpbmcgPT5cbiAgcGF0aHMuam9pbihcIi9cIikucmVwbGFjZSgvXFwvXFwvKy9nLCBcIi9cIik7XG5cbi8qKlxuICogQHByaXZhdGVcbiAqL1xuZXhwb3J0IGNvbnN0IG5vcm1hbGl6ZVBhdGhuYW1lID0gKHBhdGhuYW1lOiBzdHJpbmcpOiBzdHJpbmcgPT5cbiAgcGF0aG5hbWUucmVwbGFjZSgvXFwvKyQvLCBcIlwiKS5yZXBsYWNlKC9eXFwvKi8sIFwiL1wiKTtcblxuLyoqXG4gKiBAcHJpdmF0ZVxuICovXG5leHBvcnQgY29uc3Qgbm9ybWFsaXplU2VhcmNoID0gKHNlYXJjaDogc3RyaW5nKTogc3RyaW5nID0+XG4gICFzZWFyY2ggfHwgc2VhcmNoID09PSBcIj9cIlxuICAgID8gXCJcIlxuICAgIDogc2VhcmNoLnN0YXJ0c1dpdGgoXCI/XCIpXG4gICAgPyBzZWFyY2hcbiAgICA6IFwiP1wiICsgc2VhcmNoO1xuXG4vKipcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBjb25zdCBub3JtYWxpemVIYXNoID0gKGhhc2g6IHN0cmluZyk6IHN0cmluZyA9PlxuICAhaGFzaCB8fCBoYXNoID09PSBcIiNcIiA/IFwiXCIgOiBoYXNoLnN0YXJ0c1dpdGgoXCIjXCIpID8gaGFzaCA6IFwiI1wiICsgaGFzaDtcblxuZXhwb3J0IHR5cGUgSnNvbkZ1bmN0aW9uID0gPERhdGE+KFxuICBkYXRhOiBEYXRhLFxuICBpbml0PzogbnVtYmVyIHwgUmVzcG9uc2VJbml0XG4pID0+IFJlc3BvbnNlO1xuXG4vKipcbiAqIFRoaXMgaXMgYSBzaG9ydGN1dCBmb3IgY3JlYXRpbmcgYGFwcGxpY2F0aW9uL2pzb25gIHJlc3BvbnNlcy4gQ29udmVydHMgYGRhdGFgXG4gKiB0byBKU09OIGFuZCBzZXRzIHRoZSBgQ29udGVudC1UeXBlYCBoZWFkZXIuXG4gKi9cbmV4cG9ydCBjb25zdCBqc29uOiBKc29uRnVuY3Rpb24gPSAoZGF0YSwgaW5pdCA9IHt9KSA9PiB7XG4gIGxldCByZXNwb25zZUluaXQgPSB0eXBlb2YgaW5pdCA9PT0gXCJudW1iZXJcIiA/IHsgc3RhdHVzOiBpbml0IH0gOiBpbml0O1xuXG4gIGxldCBoZWFkZXJzID0gbmV3IEhlYWRlcnMocmVzcG9uc2VJbml0LmhlYWRlcnMpO1xuICBpZiAoIWhlYWRlcnMuaGFzKFwiQ29udGVudC1UeXBlXCIpKSB7XG4gICAgaGVhZGVycy5zZXQoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9qc29uOyBjaGFyc2V0PXV0Zi04XCIpO1xuICB9XG5cbiAgcmV0dXJuIG5ldyBSZXNwb25zZShKU09OLnN0cmluZ2lmeShkYXRhKSwge1xuICAgIC4uLnJlc3BvbnNlSW5pdCxcbiAgICBoZWFkZXJzLFxuICB9KTtcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgVHJhY2tlZFByb21pc2UgZXh0ZW5kcyBQcm9taXNlPGFueT4ge1xuICBfdHJhY2tlZD86IGJvb2xlYW47XG4gIF9kYXRhPzogYW55O1xuICBfZXJyb3I/OiBhbnk7XG59XG5cbmV4cG9ydCBjbGFzcyBBYm9ydGVkRGVmZXJyZWRFcnJvciBleHRlbmRzIEVycm9yIHt9XG5cbmV4cG9ydCBjbGFzcyBEZWZlcnJlZERhdGEge1xuICBwcml2YXRlIHBlbmRpbmdLZXlzU2V0OiBTZXQ8c3RyaW5nPiA9IG5ldyBTZXQ8c3RyaW5nPigpO1xuICBwcml2YXRlIGNvbnRyb2xsZXI6IEFib3J0Q29udHJvbGxlcjtcbiAgcHJpdmF0ZSBhYm9ydFByb21pc2U6IFByb21pc2U8dm9pZD47XG4gIHByaXZhdGUgdW5saXN0ZW5BYm9ydFNpZ25hbDogKCkgPT4gdm9pZDtcbiAgcHJpdmF0ZSBzdWJzY3JpYmVyczogU2V0PChhYm9ydGVkOiBib29sZWFuLCBzZXR0bGVkS2V5Pzogc3RyaW5nKSA9PiB2b2lkPiA9XG4gICAgbmV3IFNldCgpO1xuICBkYXRhOiBSZWNvcmQ8c3RyaW5nLCB1bmtub3duPjtcbiAgaW5pdD86IFJlc3BvbnNlSW5pdDtcbiAgZGVmZXJyZWRLZXlzOiBzdHJpbmdbXSA9IFtdO1xuXG4gIGNvbnN0cnVjdG9yKGRhdGE6IFJlY29yZDxzdHJpbmcsIHVua25vd24+LCByZXNwb25zZUluaXQ/OiBSZXNwb25zZUluaXQpIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICBkYXRhICYmIHR5cGVvZiBkYXRhID09PSBcIm9iamVjdFwiICYmICFBcnJheS5pc0FycmF5KGRhdGEpLFxuICAgICAgXCJkZWZlcigpIG9ubHkgYWNjZXB0cyBwbGFpbiBvYmplY3RzXCJcbiAgICApO1xuXG4gICAgLy8gU2V0IHVwIGFuIEFib3J0Q29udHJvbGxlciArIFByb21pc2Ugd2UgY2FuIHJhY2UgYWdhaW5zdCB0byBleGl0IGVhcmx5XG4gICAgLy8gY2FuY2VsbGF0aW9uXG4gICAgbGV0IHJlamVjdDogKGU6IEFib3J0ZWREZWZlcnJlZEVycm9yKSA9PiB2b2lkO1xuICAgIHRoaXMuYWJvcnRQcm9taXNlID0gbmV3IFByb21pc2UoKF8sIHIpID0+IChyZWplY3QgPSByKSk7XG4gICAgdGhpcy5jb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuICAgIGxldCBvbkFib3J0ID0gKCkgPT5cbiAgICAgIHJlamVjdChuZXcgQWJvcnRlZERlZmVycmVkRXJyb3IoXCJEZWZlcnJlZCBkYXRhIGFib3J0ZWRcIikpO1xuICAgIHRoaXMudW5saXN0ZW5BYm9ydFNpZ25hbCA9ICgpID0+XG4gICAgICB0aGlzLmNvbnRyb2xsZXIuc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvbkFib3J0KTtcbiAgICB0aGlzLmNvbnRyb2xsZXIuc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvbkFib3J0KTtcblxuICAgIHRoaXMuZGF0YSA9IE9iamVjdC5lbnRyaWVzKGRhdGEpLnJlZHVjZShcbiAgICAgIChhY2MsIFtrZXksIHZhbHVlXSkgPT5cbiAgICAgICAgT2JqZWN0LmFzc2lnbihhY2MsIHtcbiAgICAgICAgICBba2V5XTogdGhpcy50cmFja1Byb21pc2Uoa2V5LCB2YWx1ZSksXG4gICAgICAgIH0pLFxuICAgICAge31cbiAgICApO1xuXG4gICAgaWYgKHRoaXMuZG9uZSkge1xuICAgICAgLy8gQWxsIGluY29taW5nIHZhbHVlcyB3ZXJlIHJlc29sdmVkXG4gICAgICB0aGlzLnVubGlzdGVuQWJvcnRTaWduYWwoKTtcbiAgICB9XG5cbiAgICB0aGlzLmluaXQgPSByZXNwb25zZUluaXQ7XG4gIH1cblxuICBwcml2YXRlIHRyYWNrUHJvbWlzZShcbiAgICBrZXk6IHN0cmluZyxcbiAgICB2YWx1ZTogUHJvbWlzZTx1bmtub3duPiB8IHVua25vd25cbiAgKTogVHJhY2tlZFByb21pc2UgfCB1bmtub3duIHtcbiAgICBpZiAoISh2YWx1ZSBpbnN0YW5jZW9mIFByb21pc2UpKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfVxuXG4gICAgdGhpcy5kZWZlcnJlZEtleXMucHVzaChrZXkpO1xuICAgIHRoaXMucGVuZGluZ0tleXNTZXQuYWRkKGtleSk7XG5cbiAgICAvLyBXZSBzdG9yZSBhIGxpdHRsZSB3cmFwcGVyIHByb21pc2UgdGhhdCB3aWxsIGJlIGV4dGVuZGVkIHdpdGhcbiAgICAvLyBfZGF0YS9fZXJyb3IgcHJvcHMgdXBvbiByZXNvbHZlL3JlamVjdFxuICAgIGxldCBwcm9taXNlOiBUcmFja2VkUHJvbWlzZSA9IFByb21pc2UucmFjZShbdmFsdWUsIHRoaXMuYWJvcnRQcm9taXNlXSkudGhlbihcbiAgICAgIChkYXRhKSA9PiB0aGlzLm9uU2V0dGxlKHByb21pc2UsIGtleSwgbnVsbCwgZGF0YSBhcyB1bmtub3duKSxcbiAgICAgIChlcnJvcikgPT4gdGhpcy5vblNldHRsZShwcm9taXNlLCBrZXksIGVycm9yIGFzIHVua25vd24pXG4gICAgKTtcblxuICAgIC8vIFJlZ2lzdGVyIHJlamVjdGlvbiBsaXN0ZW5lcnMgdG8gYXZvaWQgdW5jYXVnaHQgcHJvbWlzZSByZWplY3Rpb25zIG9uXG4gICAgLy8gZXJyb3JzIG9yIGFib3J0ZWQgZGVmZXJyZWQgdmFsdWVzXG4gICAgcHJvbWlzZS5jYXRjaCgoKSA9PiB7fSk7XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfdHJhY2tlZFwiLCB7IGdldDogKCkgPT4gdHJ1ZSB9KTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG4gIHByaXZhdGUgb25TZXR0bGUoXG4gICAgcHJvbWlzZTogVHJhY2tlZFByb21pc2UsXG4gICAga2V5OiBzdHJpbmcsXG4gICAgZXJyb3I6IHVua25vd24sXG4gICAgZGF0YT86IHVua25vd25cbiAgKTogdW5rbm93biB7XG4gICAgaWYgKFxuICAgICAgdGhpcy5jb250cm9sbGVyLnNpZ25hbC5hYm9ydGVkICYmXG4gICAgICBlcnJvciBpbnN0YW5jZW9mIEFib3J0ZWREZWZlcnJlZEVycm9yXG4gICAgKSB7XG4gICAgICB0aGlzLnVubGlzdGVuQWJvcnRTaWduYWwoKTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl9lcnJvclwiLCB7IGdldDogKCkgPT4gZXJyb3IgfSk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgIH1cblxuICAgIHRoaXMucGVuZGluZ0tleXNTZXQuZGVsZXRlKGtleSk7XG5cbiAgICBpZiAodGhpcy5kb25lKSB7XG4gICAgICAvLyBOb3RoaW5nIGxlZnQgdG8gYWJvcnQhXG4gICAgICB0aGlzLnVubGlzdGVuQWJvcnRTaWduYWwoKTtcbiAgICB9XG5cbiAgICBpZiAoZXJyb3IpIHtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl9lcnJvclwiLCB7IGdldDogKCkgPT4gZXJyb3IgfSk7XG4gICAgICB0aGlzLmVtaXQoZmFsc2UsIGtleSk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyb3IpO1xuICAgIH1cblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShwcm9taXNlLCBcIl9kYXRhXCIsIHsgZ2V0OiAoKSA9PiBkYXRhIH0pO1xuICAgIHRoaXMuZW1pdChmYWxzZSwga2V5KTtcbiAgICByZXR1cm4gZGF0YTtcbiAgfVxuXG4gIHByaXZhdGUgZW1pdChhYm9ydGVkOiBib29sZWFuLCBzZXR0bGVkS2V5Pzogc3RyaW5nKSB7XG4gICAgdGhpcy5zdWJzY3JpYmVycy5mb3JFYWNoKChzdWJzY3JpYmVyKSA9PiBzdWJzY3JpYmVyKGFib3J0ZWQsIHNldHRsZWRLZXkpKTtcbiAgfVxuXG4gIHN1YnNjcmliZShmbjogKGFib3J0ZWQ6IGJvb2xlYW4sIHNldHRsZWRLZXk/OiBzdHJpbmcpID0+IHZvaWQpIHtcbiAgICB0aGlzLnN1YnNjcmliZXJzLmFkZChmbik7XG4gICAgcmV0dXJuICgpID0+IHRoaXMuc3Vic2NyaWJlcnMuZGVsZXRlKGZuKTtcbiAgfVxuXG4gIGNhbmNlbCgpIHtcbiAgICB0aGlzLmNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICB0aGlzLnBlbmRpbmdLZXlzU2V0LmZvckVhY2goKHYsIGspID0+IHRoaXMucGVuZGluZ0tleXNTZXQuZGVsZXRlKGspKTtcbiAgICB0aGlzLmVtaXQodHJ1ZSk7XG4gIH1cblxuICBhc3luYyByZXNvbHZlRGF0YShzaWduYWw6IEFib3J0U2lnbmFsKSB7XG4gICAgbGV0IGFib3J0ZWQgPSBmYWxzZTtcbiAgICBpZiAoIXRoaXMuZG9uZSkge1xuICAgICAgbGV0IG9uQWJvcnQgPSAoKSA9PiB0aGlzLmNhbmNlbCgpO1xuICAgICAgc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvbkFib3J0KTtcbiAgICAgIGFib3J0ZWQgPSBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgICAgICB0aGlzLnN1YnNjcmliZSgoYWJvcnRlZCkgPT4ge1xuICAgICAgICAgIHNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKFwiYWJvcnRcIiwgb25BYm9ydCk7XG4gICAgICAgICAgaWYgKGFib3J0ZWQgfHwgdGhpcy5kb25lKSB7XG4gICAgICAgICAgICByZXNvbHZlKGFib3J0ZWQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgICB9XG4gICAgcmV0dXJuIGFib3J0ZWQ7XG4gIH1cblxuICBnZXQgZG9uZSgpIHtcbiAgICByZXR1cm4gdGhpcy5wZW5kaW5nS2V5c1NldC5zaXplID09PSAwO1xuICB9XG5cbiAgZ2V0IHVud3JhcHBlZERhdGEoKSB7XG4gICAgaW52YXJpYW50KFxuICAgICAgdGhpcy5kYXRhICE9PSBudWxsICYmIHRoaXMuZG9uZSxcbiAgICAgIFwiQ2FuIG9ubHkgdW53cmFwIGRhdGEgb24gaW5pdGlhbGl6ZWQgYW5kIHNldHRsZWQgZGVmZXJyZWRzXCJcbiAgICApO1xuXG4gICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKHRoaXMuZGF0YSkucmVkdWNlKFxuICAgICAgKGFjYywgW2tleSwgdmFsdWVdKSA9PlxuICAgICAgICBPYmplY3QuYXNzaWduKGFjYywge1xuICAgICAgICAgIFtrZXldOiB1bndyYXBUcmFja2VkUHJvbWlzZSh2YWx1ZSksXG4gICAgICAgIH0pLFxuICAgICAge31cbiAgICApO1xuICB9XG5cbiAgZ2V0IHBlbmRpbmdLZXlzKCkge1xuICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMucGVuZGluZ0tleXNTZXQpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzVHJhY2tlZFByb21pc2UodmFsdWU6IGFueSk6IHZhbHVlIGlzIFRyYWNrZWRQcm9taXNlIHtcbiAgcmV0dXJuIChcbiAgICB2YWx1ZSBpbnN0YW5jZW9mIFByb21pc2UgJiYgKHZhbHVlIGFzIFRyYWNrZWRQcm9taXNlKS5fdHJhY2tlZCA9PT0gdHJ1ZVxuICApO1xufVxuXG5mdW5jdGlvbiB1bndyYXBUcmFja2VkUHJvbWlzZSh2YWx1ZTogYW55KSB7XG4gIGlmICghaXNUcmFja2VkUHJvbWlzZSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICBpZiAodmFsdWUuX2Vycm9yKSB7XG4gICAgdGhyb3cgdmFsdWUuX2Vycm9yO1xuICB9XG4gIHJldHVybiB2YWx1ZS5fZGF0YTtcbn1cblxuZXhwb3J0IHR5cGUgRGVmZXJGdW5jdGlvbiA9IChcbiAgZGF0YTogUmVjb3JkPHN0cmluZywgdW5rbm93bj4sXG4gIGluaXQ/OiBudW1iZXIgfCBSZXNwb25zZUluaXRcbikgPT4gRGVmZXJyZWREYXRhO1xuXG5leHBvcnQgY29uc3QgZGVmZXI6IERlZmVyRnVuY3Rpb24gPSAoZGF0YSwgaW5pdCA9IHt9KSA9PiB7XG4gIGxldCByZXNwb25zZUluaXQgPSB0eXBlb2YgaW5pdCA9PT0gXCJudW1iZXJcIiA/IHsgc3RhdHVzOiBpbml0IH0gOiBpbml0O1xuXG4gIHJldHVybiBuZXcgRGVmZXJyZWREYXRhKGRhdGEsIHJlc3BvbnNlSW5pdCk7XG59O1xuXG5leHBvcnQgdHlwZSBSZWRpcmVjdEZ1bmN0aW9uID0gKFxuICB1cmw6IHN0cmluZyxcbiAgaW5pdD86IG51bWJlciB8IFJlc3BvbnNlSW5pdFxuKSA9PiBSZXNwb25zZTtcblxuLyoqXG4gKiBBIHJlZGlyZWN0IHJlc3BvbnNlLiBTZXRzIHRoZSBzdGF0dXMgY29kZSBhbmQgdGhlIGBMb2NhdGlvbmAgaGVhZGVyLlxuICogRGVmYXVsdHMgdG8gXCIzMDIgRm91bmRcIi5cbiAqL1xuZXhwb3J0IGNvbnN0IHJlZGlyZWN0OiBSZWRpcmVjdEZ1bmN0aW9uID0gKHVybCwgaW5pdCA9IDMwMikgPT4ge1xuICBsZXQgcmVzcG9uc2VJbml0ID0gaW5pdDtcbiAgaWYgKHR5cGVvZiByZXNwb25zZUluaXQgPT09IFwibnVtYmVyXCIpIHtcbiAgICByZXNwb25zZUluaXQgPSB7IHN0YXR1czogcmVzcG9uc2VJbml0IH07XG4gIH0gZWxzZSBpZiAodHlwZW9mIHJlc3BvbnNlSW5pdC5zdGF0dXMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXNwb25zZUluaXQuc3RhdHVzID0gMzAyO1xuICB9XG5cbiAgbGV0IGhlYWRlcnMgPSBuZXcgSGVhZGVycyhyZXNwb25zZUluaXQuaGVhZGVycyk7XG4gIGhlYWRlcnMuc2V0KFwiTG9jYXRpb25cIiwgdXJsKTtcblxuICByZXR1cm4gbmV3IFJlc3BvbnNlKG51bGwsIHtcbiAgICAuLi5yZXNwb25zZUluaXQsXG4gICAgaGVhZGVycyxcbiAgfSk7XG59O1xuXG4vKipcbiAqIEBwcml2YXRlXG4gKiBVdGlsaXR5IGNsYXNzIHdlIHVzZSB0byBob2xkIGF1dG8tdW53cmFwcGVkIDR4eC81eHggUmVzcG9uc2UgYm9kaWVzXG4gKi9cbmV4cG9ydCBjbGFzcyBFcnJvclJlc3BvbnNlIHtcbiAgc3RhdHVzOiBudW1iZXI7XG4gIHN0YXR1c1RleHQ6IHN0cmluZztcbiAgZGF0YTogYW55O1xuICBlcnJvcj86IEVycm9yO1xuICBpbnRlcm5hbDogYm9vbGVhbjtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBzdGF0dXM6IG51bWJlcixcbiAgICBzdGF0dXNUZXh0OiBzdHJpbmcgfCB1bmRlZmluZWQsXG4gICAgZGF0YTogYW55LFxuICAgIGludGVybmFsID0gZmFsc2VcbiAgKSB7XG4gICAgdGhpcy5zdGF0dXMgPSBzdGF0dXM7XG4gICAgdGhpcy5zdGF0dXNUZXh0ID0gc3RhdHVzVGV4dCB8fCBcIlwiO1xuICAgIHRoaXMuaW50ZXJuYWwgPSBpbnRlcm5hbDtcbiAgICBpZiAoZGF0YSBpbnN0YW5jZW9mIEVycm9yKSB7XG4gICAgICB0aGlzLmRhdGEgPSBkYXRhLnRvU3RyaW5nKCk7XG4gICAgICB0aGlzLmVycm9yID0gZGF0YTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgZ2l2ZW4gZXJyb3IgaXMgYW4gRXJyb3JSZXNwb25zZSBnZW5lcmF0ZWQgZnJvbSBhIDR4eC81eHhcbiAqIFJlc3BvbnNlIHRocm93biBmcm9tIGFuIGFjdGlvbi9sb2FkZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzUm91dGVFcnJvclJlc3BvbnNlKGVycm9yOiBhbnkpOiBlcnJvciBpcyBFcnJvclJlc3BvbnNlIHtcbiAgcmV0dXJuIChcbiAgICBlcnJvciAhPSBudWxsICYmXG4gICAgdHlwZW9mIGVycm9yLnN0YXR1cyA9PT0gXCJudW1iZXJcIiAmJlxuICAgIHR5cGVvZiBlcnJvci5zdGF0dXNUZXh0ID09PSBcInN0cmluZ1wiICYmXG4gICAgdHlwZW9mIGVycm9yLmludGVybmFsID09PSBcImJvb2xlYW5cIiAmJlxuICAgIFwiZGF0YVwiIGluIGVycm9yXG4gICk7XG59XG4iLCJpbXBvcnQgdHlwZSB7IEhpc3RvcnksIExvY2F0aW9uLCBQYXRoLCBUbyB9IGZyb20gXCIuL2hpc3RvcnlcIjtcbmltcG9ydCB7XG4gIEFjdGlvbiBhcyBIaXN0b3J5QWN0aW9uLFxuICBjcmVhdGVMb2NhdGlvbixcbiAgY3JlYXRlUGF0aCxcbiAgaW52YXJpYW50LFxuICBwYXJzZVBhdGgsXG59IGZyb20gXCIuL2hpc3RvcnlcIjtcbmltcG9ydCB0eXBlIHtcbiAgRGF0YVJlc3VsdCxcbiAgQWdub3N0aWNEYXRhUm91dGVNYXRjaCxcbiAgQWdub3N0aWNEYXRhUm91dGVPYmplY3QsXG4gIERlZmVycmVkUmVzdWx0LFxuICBFcnJvclJlc3VsdCxcbiAgRm9ybUVuY1R5cGUsXG4gIEZvcm1NZXRob2QsXG4gIFJlZGlyZWN0UmVzdWx0LFxuICBSb3V0ZURhdGEsXG4gIEFnbm9zdGljUm91dGVPYmplY3QsXG4gIFN1Ym1pc3Npb24sXG4gIFN1Y2Nlc3NSZXN1bHQsXG4gIEFnbm9zdGljUm91dGVNYXRjaCxcbiAgTXV0YXRpb25Gb3JtTWV0aG9kLFxuICBTaG91bGRSZXZhbGlkYXRlRnVuY3Rpb24sXG59IGZyb20gXCIuL3V0aWxzXCI7XG5pbXBvcnQge1xuICBEZWZlcnJlZERhdGEsXG4gIEVycm9yUmVzcG9uc2UsXG4gIFJlc3VsdFR5cGUsXG4gIGNvbnZlcnRSb3V0ZXNUb0RhdGFSb3V0ZXMsXG4gIGdldFBhdGhDb250cmlidXRpbmdNYXRjaGVzLFxuICBpc1JvdXRlRXJyb3JSZXNwb25zZSxcbiAgam9pblBhdGhzLFxuICBtYXRjaFJvdXRlcyxcbiAgcmVzb2x2ZVRvLFxuICB3YXJuaW5nLFxufSBmcm9tIFwiLi91dGlsc1wiO1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIFR5cGVzIGFuZCBDb25zdGFudHNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKlxuICogQSBSb3V0ZXIgaW5zdGFuY2UgbWFuYWdlcyBhbGwgbmF2aWdhdGlvbiBhbmQgZGF0YSBsb2FkaW5nL211dGF0aW9uc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIFJvdXRlciB7XG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICogUFJJVkFURSAtIERPIE5PVCBVU0VcbiAgICpcbiAgICogUmV0dXJuIHRoZSBiYXNlbmFtZSBmb3IgdGhlIHJvdXRlclxuICAgKi9cbiAgZ2V0IGJhc2VuYW1lKCk6IFJvdXRlckluaXRbXCJiYXNlbmFtZVwiXTtcblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqIFBSSVZBVEUgLSBETyBOT1QgVVNFXG4gICAqXG4gICAqIFJldHVybiB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgcm91dGVyXG4gICAqL1xuICBnZXQgc3RhdGUoKTogUm91dGVyU3RhdGU7XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKiBQUklWQVRFIC0gRE8gTk9UIFVTRVxuICAgKlxuICAgKiBSZXR1cm4gdGhlIHJvdXRlcyBmb3IgdGhpcyByb3V0ZXIgaW5zdGFuY2VcbiAgICovXG4gIGdldCByb3V0ZXMoKTogQWdub3N0aWNEYXRhUm91dGVPYmplY3RbXTtcblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqIFBSSVZBVEUgLSBETyBOT1QgVVNFXG4gICAqXG4gICAqIEluaXRpYWxpemUgdGhlIHJvdXRlciwgaW5jbHVkaW5nIGFkZGluZyBoaXN0b3J5IGxpc3RlbmVycyBhbmQga2lja2luZyBvZmZcbiAgICogaW5pdGlhbCBkYXRhIGZldGNoZXMuICBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gY2xlYW51cCBsaXN0ZW5lcnMgYW5kIGFib3J0XG4gICAqIGFueSBpbi1wcm9ncmVzcyBsb2Fkc1xuICAgKi9cbiAgaW5pdGlhbGl6ZSgpOiBSb3V0ZXI7XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKiBQUklWQVRFIC0gRE8gTk9UIFVTRVxuICAgKlxuICAgKiBTdWJzY3JpYmUgdG8gcm91dGVyLnN0YXRlIHVwZGF0ZXNcbiAgICpcbiAgICogQHBhcmFtIGZuIGZ1bmN0aW9uIHRvIGNhbGwgd2l0aCB0aGUgbmV3IHN0YXRlXG4gICAqL1xuICBzdWJzY3JpYmUoZm46IFJvdXRlclN1YnNjcmliZXIpOiAoKSA9PiB2b2lkO1xuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICogUFJJVkFURSAtIERPIE5PVCBVU0VcbiAgICpcbiAgICogRW5hYmxlIHNjcm9sbCByZXN0b3JhdGlvbiBiZWhhdmlvciBpbiB0aGUgcm91dGVyXG4gICAqXG4gICAqIEBwYXJhbSBzYXZlZFNjcm9sbFBvc2l0aW9ucyBPYmplY3QgdGhhdCB3aWxsIG1hbmFnZSBwb3NpdGlvbnMsIGluIGNhc2VcbiAgICogICAgICAgICAgICAgICAgICAgICAgICAgICAgIGl0J3MgYmVpbmcgcmVzdG9yZWQgZnJvbSBzZXNzaW9uU3RvcmFnZVxuICAgKiBAcGFyYW0gZ2V0U2Nyb2xsUG9zaXRpb24gICAgRnVuY3Rpb24gdG8gZ2V0IHRoZSBhY3RpdmUgWSBzY3JvbGwgcG9zaXRpb25cbiAgICogQHBhcmFtIGdldEtleSAgICAgICAgICAgICAgIEZ1bmN0aW9uIHRvIGdldCB0aGUga2V5IHRvIHVzZSBmb3IgcmVzdG9yYXRpb25cbiAgICovXG4gIGVuYWJsZVNjcm9sbFJlc3RvcmF0aW9uKFxuICAgIHNhdmVkU2Nyb2xsUG9zaXRpb25zOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+LFxuICAgIGdldFNjcm9sbFBvc2l0aW9uOiBHZXRTY3JvbGxQb3NpdGlvbkZ1bmN0aW9uLFxuICAgIGdldEtleT86IEdldFNjcm9sbFJlc3RvcmF0aW9uS2V5RnVuY3Rpb25cbiAgKTogKCkgPT4gdm9pZDtcblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqIFBSSVZBVEUgLSBETyBOT1QgVVNFXG4gICAqXG4gICAqIE5hdmlnYXRlIGZvcndhcmQvYmFja3dhcmQgaW4gdGhlIGhpc3Rvcnkgc3RhY2tcbiAgICogQHBhcmFtIHRvIERlbHRhIHRvIG1vdmUgaW4gdGhlIGhpc3Rvcnkgc3RhY2tcbiAgICovXG4gIG5hdmlnYXRlKHRvOiBudW1iZXIpOiBQcm9taXNlPHZvaWQ+O1xuXG4gIC8qKlxuICAgKiBOYXZpZ2F0ZSB0byB0aGUgZ2l2ZW4gcGF0aFxuICAgKiBAcGFyYW0gdG8gUGF0aCB0byBuYXZpZ2F0ZSB0b1xuICAgKiBAcGFyYW0gb3B0cyBOYXZpZ2F0aW9uIG9wdGlvbnMgKG1ldGhvZCwgc3VibWlzc2lvbiwgZXRjLilcbiAgICovXG4gIG5hdmlnYXRlKHRvOiBUbywgb3B0cz86IFJvdXRlck5hdmlnYXRlT3B0aW9ucyk6IFByb21pc2U8dm9pZD47XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKiBQUklWQVRFIC0gRE8gTk9UIFVTRVxuICAgKlxuICAgKiBUcmlnZ2VyIGEgZmV0Y2hlciBsb2FkL3N1Ym1pc3Npb25cbiAgICpcbiAgICogQHBhcmFtIGtleSAgICAgRmV0Y2hlciBrZXlcbiAgICogQHBhcmFtIHJvdXRlSWQgUm91dGUgdGhhdCBvd25zIHRoZSBmZXRjaGVyXG4gICAqIEBwYXJhbSBocmVmICAgIGhyZWYgdG8gZmV0Y2hcbiAgICogQHBhcmFtIG9wdHMgICAgRmV0Y2hlciBvcHRpb25zLCAobWV0aG9kLCBzdWJtaXNzaW9uLCBldGMuKVxuICAgKi9cbiAgZmV0Y2goXG4gICAga2V5OiBzdHJpbmcsXG4gICAgcm91dGVJZDogc3RyaW5nLFxuICAgIGhyZWY6IHN0cmluZyxcbiAgICBvcHRzPzogUm91dGVyTmF2aWdhdGVPcHRpb25zXG4gICk6IHZvaWQ7XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKiBQUklWQVRFIC0gRE8gTk9UIFVTRVxuICAgKlxuICAgKiBUcmlnZ2VyIGEgcmV2YWxpZGF0aW9uIG9mIGFsbCBjdXJyZW50IHJvdXRlIGxvYWRlcnMgYW5kIGZldGNoZXIgbG9hZHNcbiAgICovXG4gIHJldmFsaWRhdGUoKTogdm9pZDtcblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqIFBSSVZBVEUgLSBETyBOT1QgVVNFXG4gICAqXG4gICAqIFV0aWxpdHkgZnVuY3Rpb24gdG8gY3JlYXRlIGFuIGhyZWYgZm9yIHRoZSBnaXZlbiBsb2NhdGlvblxuICAgKiBAcGFyYW0gbG9jYXRpb25cbiAgICovXG4gIGNyZWF0ZUhyZWYobG9jYXRpb246IExvY2F0aW9uIHwgVVJMKTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICogUFJJVkFURSAtIERPIE5PVCBVU0VcbiAgICpcbiAgICogVXRpbGl0eSBmdW5jdGlvbiB0byBVUkwgZW5jb2RlIGEgZGVzdGluYXRpb24gcGF0aCBhY2NvcmRpbmcgdG8gdGhlIGludGVybmFsXG4gICAqIGhpc3RvcnkgaW1wbGVtZW50YXRpb25cbiAgICogQHBhcmFtIHRvXG4gICAqL1xuICBlbmNvZGVMb2NhdGlvbih0bzogVG8pOiBQYXRoO1xuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICogUFJJVkFURSAtIERPIE5PVCBVU0VcbiAgICpcbiAgICogR2V0L2NyZWF0ZSBhIGZldGNoZXIgZm9yIHRoZSBnaXZlbiBrZXlcbiAgICogQHBhcmFtIGtleVxuICAgKi9cbiAgZ2V0RmV0Y2hlcjxURGF0YSA9IGFueT4oa2V5Pzogc3RyaW5nKTogRmV0Y2hlcjxURGF0YT47XG5cbiAgLyoqXG4gICAqIEBpbnRlcm5hbFxuICAgKiBQUklWQVRFIC0gRE8gTk9UIFVTRVxuICAgKlxuICAgKiBEZWxldGUgdGhlIGZldGNoZXIgZm9yIGEgZ2l2ZW4ga2V5XG4gICAqIEBwYXJhbSBrZXlcbiAgICovXG4gIGRlbGV0ZUZldGNoZXIoa2V5Pzogc3RyaW5nKTogdm9pZDtcblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqIFBSSVZBVEUgLSBETyBOT1QgVVNFXG4gICAqXG4gICAqIENsZWFudXAgbGlzdGVuZXJzIGFuZCBhYm9ydCBhbnkgaW4tcHJvZ3Jlc3MgbG9hZHNcbiAgICovXG4gIGRpc3Bvc2UoKTogdm9pZDtcblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqIFBSSVZBVEUgLSBETyBOT1QgVVNFXG4gICAqXG4gICAqIEdldCBhIG5hdmlnYXRpb24gYmxvY2tlclxuICAgKiBAcGFyYW0ga2V5IFRoZSBpZGVudGlmaWVyIGZvciB0aGUgYmxvY2tlclxuICAgKiBAcGFyYW0gZm4gVGhlIGJsb2NrZXIgZnVuY3Rpb24gaW1wbGVtZW50YXRpb25cbiAgICovXG4gIGdldEJsb2NrZXIoa2V5OiBzdHJpbmcsIGZuOiBCbG9ja2VyRnVuY3Rpb24pOiBCbG9ja2VyO1xuXG4gIC8qKlxuICAgKiBAaW50ZXJuYWxcbiAgICogUFJJVkFURSAtIERPIE5PVCBVU0VcbiAgICpcbiAgICogRGVsZXRlIGEgbmF2aWdhdGlvbiBibG9ja2VyXG4gICAqIEBwYXJhbSBrZXkgVGhlIGlkZW50aWZpZXIgZm9yIHRoZSBibG9ja2VyXG4gICAqL1xuICBkZWxldGVCbG9ja2VyKGtleTogc3RyaW5nKTogdm9pZDtcblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqIFBSSVZBVEUgLSBETyBOT1QgVVNFXG4gICAqXG4gICAqIEludGVybmFsIGZldGNoIEFib3J0Q29udHJvbGxlcnMgYWNjZXNzZWQgYnkgdW5pdCB0ZXN0c1xuICAgKi9cbiAgX2ludGVybmFsRmV0Y2hDb250cm9sbGVyczogTWFwPHN0cmluZywgQWJvcnRDb250cm9sbGVyPjtcblxuICAvKipcbiAgICogQGludGVybmFsXG4gICAqIFBSSVZBVEUgLSBETyBOT1QgVVNFXG4gICAqXG4gICAqIEludGVybmFsIHBlbmRpbmcgRGVmZXJyZWREYXRhIGluc3RhbmNlcyBhY2Nlc3NlZCBieSB1bml0IHRlc3RzXG4gICAqL1xuICBfaW50ZXJuYWxBY3RpdmVEZWZlcnJlZHM6IE1hcDxzdHJpbmcsIERlZmVycmVkRGF0YT47XG59XG5cbi8qKlxuICogU3RhdGUgbWFpbnRhaW5lZCBpbnRlcm5hbGx5IGJ5IHRoZSByb3V0ZXIuICBEdXJpbmcgYSBuYXZpZ2F0aW9uLCBhbGwgc3RhdGVzXG4gKiByZWZsZWN0IHRoZSB0aGUgXCJvbGRcIiBsb2NhdGlvbiB1bmxlc3Mgb3RoZXJ3aXNlIG5vdGVkLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIFJvdXRlclN0YXRlIHtcbiAgLyoqXG4gICAqIFRoZSBhY3Rpb24gb2YgdGhlIG1vc3QgcmVjZW50IG5hdmlnYXRpb25cbiAgICovXG4gIGhpc3RvcnlBY3Rpb246IEhpc3RvcnlBY3Rpb247XG5cbiAgLyoqXG4gICAqIFRoZSBjdXJyZW50IGxvY2F0aW9uIHJlZmxlY3RlZCBieSB0aGUgcm91dGVyXG4gICAqL1xuICBsb2NhdGlvbjogTG9jYXRpb247XG5cbiAgLyoqXG4gICAqIFRoZSBjdXJyZW50IHNldCBvZiByb3V0ZSBtYXRjaGVzXG4gICAqL1xuICBtYXRjaGVzOiBBZ25vc3RpY0RhdGFSb3V0ZU1hdGNoW107XG5cbiAgLyoqXG4gICAqIFRyYWNrcyB3aGV0aGVyIHdlJ3ZlIGNvbXBsZXRlZCBvdXIgaW5pdGlhbCBkYXRhIGxvYWRcbiAgICovXG4gIGluaXRpYWxpemVkOiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBDdXJyZW50IHNjcm9sbCBwb3NpdGlvbiB3ZSBzaG91bGQgc3RhcnQgYXQgZm9yIGEgbmV3IHZpZXdcbiAgICogIC0gbnVtYmVyIC0+IHNjcm9sbCBwb3NpdGlvbiB0byByZXN0b3JlIHRvXG4gICAqICAtIGZhbHNlIC0+IGRvIG5vdCByZXN0b3JlIHNjcm9sbCBhdCBhbGwgKHVzZWQgZHVyaW5nIHN1Ym1pc3Npb25zKVxuICAgKiAgLSBudWxsIC0+IGRvbid0IGhhdmUgYSBzYXZlZCBwb3NpdGlvbiwgc2Nyb2xsIHRvIGhhc2ggb3IgdG9wIG9mIHBhZ2VcbiAgICovXG4gIHJlc3RvcmVTY3JvbGxQb3NpdGlvbjogbnVtYmVyIHwgZmFsc2UgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBJbmRpY2F0ZSB3aGV0aGVyIHRoaXMgbmF2aWdhdGlvbiBzaG91bGQgc2tpcCByZXNldHRpbmcgdGhlIHNjcm9sbCBwb3NpdGlvblxuICAgKiBpZiB3ZSBhcmUgdW5hYmxlIHRvIHJlc3RvcmUgdGhlIHNjcm9sbCBwb3NpdGlvblxuICAgKi9cbiAgcHJldmVudFNjcm9sbFJlc2V0OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBUcmFja3MgdGhlIHN0YXRlIG9mIHRoZSBjdXJyZW50IG5hdmlnYXRpb25cbiAgICovXG4gIG5hdmlnYXRpb246IE5hdmlnYXRpb247XG5cbiAgLyoqXG4gICAqIFRyYWNrcyBhbnkgaW4tcHJvZ3Jlc3MgcmV2YWxpZGF0aW9uc1xuICAgKi9cbiAgcmV2YWxpZGF0aW9uOiBSZXZhbGlkYXRpb25TdGF0ZTtcblxuICAvKipcbiAgICogRGF0YSBmcm9tIHRoZSBsb2FkZXJzIGZvciB0aGUgY3VycmVudCBtYXRjaGVzXG4gICAqL1xuICBsb2FkZXJEYXRhOiBSb3V0ZURhdGE7XG5cbiAgLyoqXG4gICAqIERhdGEgZnJvbSB0aGUgYWN0aW9uIGZvciB0aGUgY3VycmVudCBtYXRjaGVzXG4gICAqL1xuICBhY3Rpb25EYXRhOiBSb3V0ZURhdGEgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBFcnJvcnMgY2F1Z2h0IGZyb20gbG9hZGVycyBmb3IgdGhlIGN1cnJlbnQgbWF0Y2hlc1xuICAgKi9cbiAgZXJyb3JzOiBSb3V0ZURhdGEgfCBudWxsO1xuXG4gIC8qKlxuICAgKiBNYXAgb2YgY3VycmVudCBmZXRjaGVyc1xuICAgKi9cbiAgZmV0Y2hlcnM6IE1hcDxzdHJpbmcsIEZldGNoZXI+O1xuXG4gIC8qKlxuICAgKiBNYXAgb2YgY3VycmVudCBibG9ja2Vyc1xuICAgKi9cbiAgYmxvY2tlcnM6IE1hcDxzdHJpbmcsIEJsb2NrZXI+O1xufVxuXG4vKipcbiAqIERhdGEgdGhhdCBjYW4gYmUgcGFzc2VkIGludG8gaHlkcmF0ZSBhIFJvdXRlciBmcm9tIFNTUlxuICovXG5leHBvcnQgdHlwZSBIeWRyYXRpb25TdGF0ZSA9IFBhcnRpYWw8XG4gIFBpY2s8Um91dGVyU3RhdGUsIFwibG9hZGVyRGF0YVwiIHwgXCJhY3Rpb25EYXRhXCIgfCBcImVycm9yc1wiPlxuPjtcblxuLyoqXG4gKiBJbml0aWFsaXphdGlvbiBvcHRpb25zIGZvciBjcmVhdGVSb3V0ZXJcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSb3V0ZXJJbml0IHtcbiAgYmFzZW5hbWU/OiBzdHJpbmc7XG4gIHJvdXRlczogQWdub3N0aWNSb3V0ZU9iamVjdFtdO1xuICBoaXN0b3J5OiBIaXN0b3J5O1xuICBoeWRyYXRpb25EYXRhPzogSHlkcmF0aW9uU3RhdGU7XG59XG5cbi8qKlxuICogU3RhdGUgcmV0dXJuZWQgZnJvbSBhIHNlcnZlci1zaWRlIHF1ZXJ5KCkgY2FsbFxuICovXG5leHBvcnQgaW50ZXJmYWNlIFN0YXRpY0hhbmRsZXJDb250ZXh0IHtcbiAgYmFzZW5hbWU6IFJvdXRlcltcImJhc2VuYW1lXCJdO1xuICBsb2NhdGlvbjogUm91dGVyU3RhdGVbXCJsb2NhdGlvblwiXTtcbiAgbWF0Y2hlczogUm91dGVyU3RhdGVbXCJtYXRjaGVzXCJdO1xuICBsb2FkZXJEYXRhOiBSb3V0ZXJTdGF0ZVtcImxvYWRlckRhdGFcIl07XG4gIGFjdGlvbkRhdGE6IFJvdXRlclN0YXRlW1wiYWN0aW9uRGF0YVwiXTtcbiAgZXJyb3JzOiBSb3V0ZXJTdGF0ZVtcImVycm9yc1wiXTtcbiAgc3RhdHVzQ29kZTogbnVtYmVyO1xuICBsb2FkZXJIZWFkZXJzOiBSZWNvcmQ8c3RyaW5nLCBIZWFkZXJzPjtcbiAgYWN0aW9uSGVhZGVyczogUmVjb3JkPHN0cmluZywgSGVhZGVycz47XG4gIGFjdGl2ZURlZmVycmVkczogUmVjb3JkPHN0cmluZywgRGVmZXJyZWREYXRhPiB8IG51bGw7XG4gIF9kZWVwZXN0UmVuZGVyZWRCb3VuZGFyeUlkPzogc3RyaW5nIHwgbnVsbDtcbn1cblxuLyoqXG4gKiBBIFN0YXRpY0hhbmRsZXIgaW5zdGFuY2UgbWFuYWdlcyBhIHNpbmd1bGFyIFNTUiBuYXZpZ2F0aW9uL2ZldGNoIGV2ZW50XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU3RhdGljSGFuZGxlciB7XG4gIGRhdGFSb3V0ZXM6IEFnbm9zdGljRGF0YVJvdXRlT2JqZWN0W107XG4gIHF1ZXJ5KFxuICAgIHJlcXVlc3Q6IFJlcXVlc3QsXG4gICAgb3B0cz86IHsgcmVxdWVzdENvbnRleHQ/OiB1bmtub3duIH1cbiAgKTogUHJvbWlzZTxTdGF0aWNIYW5kbGVyQ29udGV4dCB8IFJlc3BvbnNlPjtcbiAgcXVlcnlSb3V0ZShcbiAgICByZXF1ZXN0OiBSZXF1ZXN0LFxuICAgIG9wdHM/OiB7IHJvdXRlSWQ/OiBzdHJpbmc7IHJlcXVlc3RDb250ZXh0PzogdW5rbm93biB9XG4gICk6IFByb21pc2U8YW55Pjtcbn1cblxuLyoqXG4gKiBTdWJzY3JpYmVyIGZ1bmN0aW9uIHNpZ25hdHVyZSBmb3IgY2hhbmdlcyB0byByb3V0ZXIgc3RhdGVcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSb3V0ZXJTdWJzY3JpYmVyIHtcbiAgKHN0YXRlOiBSb3V0ZXJTdGF0ZSk6IHZvaWQ7XG59XG5cbmludGVyZmFjZSBVc2VNYXRjaGVzTWF0Y2gge1xuICBpZDogc3RyaW5nO1xuICBwYXRobmFtZTogc3RyaW5nO1xuICBwYXJhbXM6IEFnbm9zdGljUm91dGVNYXRjaFtcInBhcmFtc1wiXTtcbiAgZGF0YTogdW5rbm93bjtcbiAgaGFuZGxlOiB1bmtub3duO1xufVxuXG4vKipcbiAqIEZ1bmN0aW9uIHNpZ25hdHVyZSBmb3IgZGV0ZXJtaW5pbmcgdGhlIGtleSB0byBiZSB1c2VkIGluIHNjcm9sbCByZXN0b3JhdGlvblxuICogZm9yIGEgZ2l2ZW4gbG9jYXRpb25cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBHZXRTY3JvbGxSZXN0b3JhdGlvbktleUZ1bmN0aW9uIHtcbiAgKGxvY2F0aW9uOiBMb2NhdGlvbiwgbWF0Y2hlczogVXNlTWF0Y2hlc01hdGNoW10pOiBzdHJpbmcgfCBudWxsO1xufVxuXG4vKipcbiAqIEZ1bmN0aW9uIHNpZ25hdHVyZSBmb3IgZGV0ZXJtaW5pbmcgdGhlIGN1cnJlbnQgc2Nyb2xsIHBvc2l0aW9uXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgR2V0U2Nyb2xsUG9zaXRpb25GdW5jdGlvbiB7XG4gICgpOiBudW1iZXI7XG59XG5cbi8qKlxuICogT3B0aW9ucyBmb3IgYSBuYXZpZ2F0ZSgpIGNhbGwgZm9yIGEgTGluayBuYXZpZ2F0aW9uXG4gKi9cbnR5cGUgTGlua05hdmlnYXRlT3B0aW9ucyA9IHtcbiAgcmVwbGFjZT86IGJvb2xlYW47XG4gIHN0YXRlPzogYW55O1xuICBwcmV2ZW50U2Nyb2xsUmVzZXQ/OiBib29sZWFuO1xufTtcblxuLyoqXG4gKiBPcHRpb25zIGZvciBhIG5hdmlnYXRlKCkgY2FsbCBmb3IgYSBGb3JtIG5hdmlnYXRpb25cbiAqL1xudHlwZSBTdWJtaXNzaW9uTmF2aWdhdGVPcHRpb25zID0ge1xuICByZXBsYWNlPzogYm9vbGVhbjtcbiAgc3RhdGU/OiBhbnk7XG4gIHByZXZlbnRTY3JvbGxSZXNldD86IGJvb2xlYW47XG4gIGZvcm1NZXRob2Q/OiBGb3JtTWV0aG9kO1xuICBmb3JtRW5jVHlwZT86IEZvcm1FbmNUeXBlO1xuICBmb3JtRGF0YTogRm9ybURhdGE7XG59O1xuXG4vKipcbiAqIE9wdGlvbnMgdG8gcGFzcyB0byBuYXZpZ2F0ZSgpIGZvciBlaXRoZXIgYSBMaW5rIG9yIEZvcm0gbmF2aWdhdGlvblxuICovXG5leHBvcnQgdHlwZSBSb3V0ZXJOYXZpZ2F0ZU9wdGlvbnMgPVxuICB8IExpbmtOYXZpZ2F0ZU9wdGlvbnNcbiAgfCBTdWJtaXNzaW9uTmF2aWdhdGVPcHRpb25zO1xuXG4vKipcbiAqIE9wdGlvbnMgdG8gcGFzcyB0byBmZXRjaCgpXG4gKi9cbmV4cG9ydCB0eXBlIFJvdXRlckZldGNoT3B0aW9ucyA9XG4gIHwgT21pdDxMaW5rTmF2aWdhdGVPcHRpb25zLCBcInJlcGxhY2VcIj5cbiAgfCBPbWl0PFN1Ym1pc3Npb25OYXZpZ2F0ZU9wdGlvbnMsIFwicmVwbGFjZVwiPjtcblxuLyoqXG4gKiBQb3RlbnRpYWwgc3RhdGVzIGZvciBzdGF0ZS5uYXZpZ2F0aW9uXG4gKi9cbmV4cG9ydCB0eXBlIE5hdmlnYXRpb25TdGF0ZXMgPSB7XG4gIElkbGU6IHtcbiAgICBzdGF0ZTogXCJpZGxlXCI7XG4gICAgbG9jYXRpb246IHVuZGVmaW5lZDtcbiAgICBmb3JtTWV0aG9kOiB1bmRlZmluZWQ7XG4gICAgZm9ybUFjdGlvbjogdW5kZWZpbmVkO1xuICAgIGZvcm1FbmNUeXBlOiB1bmRlZmluZWQ7XG4gICAgZm9ybURhdGE6IHVuZGVmaW5lZDtcbiAgfTtcbiAgTG9hZGluZzoge1xuICAgIHN0YXRlOiBcImxvYWRpbmdcIjtcbiAgICBsb2NhdGlvbjogTG9jYXRpb247XG4gICAgZm9ybU1ldGhvZDogRm9ybU1ldGhvZCB8IHVuZGVmaW5lZDtcbiAgICBmb3JtQWN0aW9uOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gICAgZm9ybUVuY1R5cGU6IEZvcm1FbmNUeXBlIHwgdW5kZWZpbmVkO1xuICAgIGZvcm1EYXRhOiBGb3JtRGF0YSB8IHVuZGVmaW5lZDtcbiAgfTtcbiAgU3VibWl0dGluZzoge1xuICAgIHN0YXRlOiBcInN1Ym1pdHRpbmdcIjtcbiAgICBsb2NhdGlvbjogTG9jYXRpb247XG4gICAgZm9ybU1ldGhvZDogRm9ybU1ldGhvZDtcbiAgICBmb3JtQWN0aW9uOiBzdHJpbmc7XG4gICAgZm9ybUVuY1R5cGU6IEZvcm1FbmNUeXBlO1xuICAgIGZvcm1EYXRhOiBGb3JtRGF0YTtcbiAgfTtcbn07XG5cbmV4cG9ydCB0eXBlIE5hdmlnYXRpb24gPSBOYXZpZ2F0aW9uU3RhdGVzW2tleW9mIE5hdmlnYXRpb25TdGF0ZXNdO1xuXG5leHBvcnQgdHlwZSBSZXZhbGlkYXRpb25TdGF0ZSA9IFwiaWRsZVwiIHwgXCJsb2FkaW5nXCI7XG5cbi8qKlxuICogUG90ZW50aWFsIHN0YXRlcyBmb3IgZmV0Y2hlcnNcbiAqL1xudHlwZSBGZXRjaGVyU3RhdGVzPFREYXRhID0gYW55PiA9IHtcbiAgSWRsZToge1xuICAgIHN0YXRlOiBcImlkbGVcIjtcbiAgICBmb3JtTWV0aG9kOiB1bmRlZmluZWQ7XG4gICAgZm9ybUFjdGlvbjogdW5kZWZpbmVkO1xuICAgIGZvcm1FbmNUeXBlOiB1bmRlZmluZWQ7XG4gICAgZm9ybURhdGE6IHVuZGVmaW5lZDtcbiAgICBkYXRhOiBURGF0YSB8IHVuZGVmaW5lZDtcbiAgICBcIiBfaGFzRmV0Y2hlckRvbmVBbnl0aGluZyBcIj86IGJvb2xlYW47XG4gIH07XG4gIExvYWRpbmc6IHtcbiAgICBzdGF0ZTogXCJsb2FkaW5nXCI7XG4gICAgZm9ybU1ldGhvZDogRm9ybU1ldGhvZCB8IHVuZGVmaW5lZDtcbiAgICBmb3JtQWN0aW9uOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gICAgZm9ybUVuY1R5cGU6IEZvcm1FbmNUeXBlIHwgdW5kZWZpbmVkO1xuICAgIGZvcm1EYXRhOiBGb3JtRGF0YSB8IHVuZGVmaW5lZDtcbiAgICBkYXRhOiBURGF0YSB8IHVuZGVmaW5lZDtcbiAgICBcIiBfaGFzRmV0Y2hlckRvbmVBbnl0aGluZyBcIj86IGJvb2xlYW47XG4gIH07XG4gIFN1Ym1pdHRpbmc6IHtcbiAgICBzdGF0ZTogXCJzdWJtaXR0aW5nXCI7XG4gICAgZm9ybU1ldGhvZDogRm9ybU1ldGhvZDtcbiAgICBmb3JtQWN0aW9uOiBzdHJpbmc7XG4gICAgZm9ybUVuY1R5cGU6IEZvcm1FbmNUeXBlO1xuICAgIGZvcm1EYXRhOiBGb3JtRGF0YTtcbiAgICBkYXRhOiBURGF0YSB8IHVuZGVmaW5lZDtcbiAgICBcIiBfaGFzRmV0Y2hlckRvbmVBbnl0aGluZyBcIj86IGJvb2xlYW47XG4gIH07XG59O1xuXG5leHBvcnQgdHlwZSBGZXRjaGVyPFREYXRhID0gYW55PiA9XG4gIEZldGNoZXJTdGF0ZXM8VERhdGE+W2tleW9mIEZldGNoZXJTdGF0ZXM8VERhdGE+XTtcblxuaW50ZXJmYWNlIEJsb2NrZXJCbG9ja2VkIHtcbiAgc3RhdGU6IFwiYmxvY2tlZFwiO1xuICByZXNldCgpOiB2b2lkO1xuICBwcm9jZWVkKCk6IHZvaWQ7XG4gIGxvY2F0aW9uOiBMb2NhdGlvbjtcbn1cblxuaW50ZXJmYWNlIEJsb2NrZXJVbmJsb2NrZWQge1xuICBzdGF0ZTogXCJ1bmJsb2NrZWRcIjtcbiAgcmVzZXQ6IHVuZGVmaW5lZDtcbiAgcHJvY2VlZDogdW5kZWZpbmVkO1xuICBsb2NhdGlvbjogdW5kZWZpbmVkO1xufVxuXG5pbnRlcmZhY2UgQmxvY2tlclByb2NlZWRpbmcge1xuICBzdGF0ZTogXCJwcm9jZWVkaW5nXCI7XG4gIHJlc2V0OiB1bmRlZmluZWQ7XG4gIHByb2NlZWQ6IHVuZGVmaW5lZDtcbiAgbG9jYXRpb246IExvY2F0aW9uO1xufVxuXG5leHBvcnQgdHlwZSBCbG9ja2VyID0gQmxvY2tlclVuYmxvY2tlZCB8IEJsb2NrZXJCbG9ja2VkIHwgQmxvY2tlclByb2NlZWRpbmc7XG5cbmV4cG9ydCB0eXBlIEJsb2NrZXJGdW5jdGlvbiA9IChhcmdzOiB7XG4gIGN1cnJlbnRMb2NhdGlvbjogTG9jYXRpb247XG4gIG5leHRMb2NhdGlvbjogTG9jYXRpb247XG4gIGhpc3RvcnlBY3Rpb246IEhpc3RvcnlBY3Rpb247XG59KSA9PiBib29sZWFuO1xuXG5pbnRlcmZhY2UgU2hvcnRDaXJjdWl0YWJsZSB7XG4gIC8qKlxuICAgKiBzdGFydE5hdmlnYXRpb24gZG9lcyBub3QgbmVlZCB0byBjb21wbGV0ZSB0aGUgbmF2aWdhdGlvbiBiZWNhdXNlIHdlXG4gICAqIHJlZGlyZWN0ZWQgb3IgZ290IGludGVycnVwdGVkXG4gICAqL1xuICBzaG9ydENpcmN1aXRlZD86IGJvb2xlYW47XG59XG5cbmludGVyZmFjZSBIYW5kbGVBY3Rpb25SZXN1bHQgZXh0ZW5kcyBTaG9ydENpcmN1aXRhYmxlIHtcbiAgLyoqXG4gICAqIEVycm9yIHRocm93biBmcm9tIHRoZSBjdXJyZW50IGFjdGlvbiwga2V5ZWQgYnkgdGhlIHJvdXRlIGNvbnRhaW5pbmcgdGhlXG4gICAqIGVycm9yIGJvdW5kYXJ5IHRvIHJlbmRlciB0aGUgZXJyb3IuICBUbyBiZSBjb21taXR0ZWQgdG8gdGhlIHN0YXRlIGFmdGVyXG4gICAqIGxvYWRlcnMgaGF2ZSBjb21wbGV0ZWRcbiAgICovXG4gIHBlbmRpbmdBY3Rpb25FcnJvcj86IFJvdXRlRGF0YTtcbiAgLyoqXG4gICAqIERhdGEgcmV0dXJuZWQgZnJvbSB0aGUgY3VycmVudCBhY3Rpb24sIGtleWVkIGJ5IHRoZSByb3V0ZSBvd25pbmcgdGhlIGFjdGlvbi5cbiAgICogVG8gYmUgY29tbWl0dGVkIHRvIHRoZSBzdGF0ZSBhZnRlciBsb2FkZXJzIGhhdmUgY29tcGxldGVkXG4gICAqL1xuICBwZW5kaW5nQWN0aW9uRGF0YT86IFJvdXRlRGF0YTtcbn1cblxuaW50ZXJmYWNlIEhhbmRsZUxvYWRlcnNSZXN1bHQgZXh0ZW5kcyBTaG9ydENpcmN1aXRhYmxlIHtcbiAgLyoqXG4gICAqIGxvYWRlckRhdGEgcmV0dXJuZWQgZnJvbSB0aGUgY3VycmVudCBzZXQgb2YgbG9hZGVyc1xuICAgKi9cbiAgbG9hZGVyRGF0YT86IFJvdXRlclN0YXRlW1wibG9hZGVyRGF0YVwiXTtcbiAgLyoqXG4gICAqIGVycm9ycyB0aHJvd24gZnJvbSB0aGUgY3VycmVudCBzZXQgb2YgbG9hZGVyc1xuICAgKi9cbiAgZXJyb3JzPzogUm91dGVyU3RhdGVbXCJlcnJvcnNcIl07XG59XG5cbi8qKlxuICogQ2FjaGVkIGluZm8gZm9yIGFjdGl2ZSBmZXRjaGVyLmxvYWQoKSBpbnN0YW5jZXMgc28gdGhleSBjYW4gcGFydGljaXBhdGVcbiAqIGluIHJldmFsaWRhdGlvblxuICovXG5pbnRlcmZhY2UgRmV0Y2hMb2FkTWF0Y2gge1xuICByb3V0ZUlkOiBzdHJpbmc7XG4gIHBhdGg6IHN0cmluZztcbiAgbWF0Y2g6IEFnbm9zdGljRGF0YVJvdXRlTWF0Y2g7XG4gIG1hdGNoZXM6IEFnbm9zdGljRGF0YVJvdXRlTWF0Y2hbXTtcbn1cblxuLyoqXG4gKiBJZGVudGlmaWVkIGZldGNoZXIubG9hZCgpIGNhbGxzIHRoYXQgbmVlZCB0byBiZSByZXZhbGlkYXRlZFxuICovXG5pbnRlcmZhY2UgUmV2YWxpZGF0aW5nRmV0Y2hlciBleHRlbmRzIEZldGNoTG9hZE1hdGNoIHtcbiAga2V5OiBzdHJpbmc7XG59XG5cbi8qKlxuICogV3JhcHBlciBvYmplY3QgdG8gYWxsb3cgdXMgdG8gdGhyb3cgYW55IHJlc3BvbnNlIG91dCBmcm9tIGNhbGxMb2FkZXJPckFjdGlvblxuICogZm9yIHF1ZXJ5Um91dGVyIHdoaWxlIHByZXNlcnZpbmcgd2hldGhlciBvciBub3QgaXQgd2FzIHRocm93biBvciByZXR1cm5lZFxuICogZnJvbSB0aGUgbG9hZGVyL2FjdGlvblxuICovXG5pbnRlcmZhY2UgUXVlcnlSb3V0ZVJlc3BvbnNlIHtcbiAgdHlwZTogUmVzdWx0VHlwZS5kYXRhIHwgUmVzdWx0VHlwZS5lcnJvcjtcbiAgcmVzcG9uc2U6IFJlc3BvbnNlO1xufVxuXG5jb25zdCB2YWxpZE11dGF0aW9uTWV0aG9kc0FycjogTXV0YXRpb25Gb3JtTWV0aG9kW10gPSBbXG4gIFwicG9zdFwiLFxuICBcInB1dFwiLFxuICBcInBhdGNoXCIsXG4gIFwiZGVsZXRlXCIsXG5dO1xuY29uc3QgdmFsaWRNdXRhdGlvbk1ldGhvZHMgPSBuZXcgU2V0PE11dGF0aW9uRm9ybU1ldGhvZD4oXG4gIHZhbGlkTXV0YXRpb25NZXRob2RzQXJyXG4pO1xuXG5jb25zdCB2YWxpZFJlcXVlc3RNZXRob2RzQXJyOiBGb3JtTWV0aG9kW10gPSBbXG4gIFwiZ2V0XCIsXG4gIC4uLnZhbGlkTXV0YXRpb25NZXRob2RzQXJyLFxuXTtcbmNvbnN0IHZhbGlkUmVxdWVzdE1ldGhvZHMgPSBuZXcgU2V0PEZvcm1NZXRob2Q+KHZhbGlkUmVxdWVzdE1ldGhvZHNBcnIpO1xuXG5jb25zdCByZWRpcmVjdFN0YXR1c0NvZGVzID0gbmV3IFNldChbMzAxLCAzMDIsIDMwMywgMzA3LCAzMDhdKTtcbmNvbnN0IHJlZGlyZWN0UHJlc2VydmVNZXRob2RTdGF0dXNDb2RlcyA9IG5ldyBTZXQoWzMwNywgMzA4XSk7XG5cbmV4cG9ydCBjb25zdCBJRExFX05BVklHQVRJT046IE5hdmlnYXRpb25TdGF0ZXNbXCJJZGxlXCJdID0ge1xuICBzdGF0ZTogXCJpZGxlXCIsXG4gIGxvY2F0aW9uOiB1bmRlZmluZWQsXG4gIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICBmb3JtRGF0YTogdW5kZWZpbmVkLFxufTtcblxuZXhwb3J0IGNvbnN0IElETEVfRkVUQ0hFUjogRmV0Y2hlclN0YXRlc1tcIklkbGVcIl0gPSB7XG4gIHN0YXRlOiBcImlkbGVcIixcbiAgZGF0YTogdW5kZWZpbmVkLFxuICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gIGZvcm1BY3Rpb246IHVuZGVmaW5lZCxcbiAgZm9ybUVuY1R5cGU6IHVuZGVmaW5lZCxcbiAgZm9ybURhdGE6IHVuZGVmaW5lZCxcbn07XG5cbmV4cG9ydCBjb25zdCBJRExFX0JMT0NLRVI6IEJsb2NrZXJVbmJsb2NrZWQgPSB7XG4gIHN0YXRlOiBcInVuYmxvY2tlZFwiLFxuICBwcm9jZWVkOiB1bmRlZmluZWQsXG4gIHJlc2V0OiB1bmRlZmluZWQsXG4gIGxvY2F0aW9uOiB1bmRlZmluZWQsXG59O1xuXG5jb25zdCBBQlNPTFVURV9VUkxfUkVHRVggPSAvXig/OlthLXpdW2EtejAtOSsuLV0qOnxcXC9cXC8pL2k7XG5cbmNvbnN0IGlzQnJvd3NlciA9XG4gIHR5cGVvZiB3aW5kb3cgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgdHlwZW9mIHdpbmRvdy5kb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICB0eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgIT09IFwidW5kZWZpbmVkXCI7XG5jb25zdCBpc1NlcnZlciA9ICFpc0Jyb3dzZXI7XG4vLyNlbmRyZWdpb25cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vI3JlZ2lvbiBjcmVhdGVSb3V0ZXJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbi8qKlxuICogQ3JlYXRlIGEgcm91dGVyIGFuZCBsaXN0ZW4gdG8gaGlzdG9yeSBQT1AgbmF2aWdhdGlvbnNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVJvdXRlcihpbml0OiBSb3V0ZXJJbml0KTogUm91dGVyIHtcbiAgaW52YXJpYW50KFxuICAgIGluaXQucm91dGVzLmxlbmd0aCA+IDAsXG4gICAgXCJZb3UgbXVzdCBwcm92aWRlIGEgbm9uLWVtcHR5IHJvdXRlcyBhcnJheSB0byBjcmVhdGVSb3V0ZXJcIlxuICApO1xuXG4gIGxldCBkYXRhUm91dGVzID0gY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcyhpbml0LnJvdXRlcyk7XG4gIC8vIENsZWFudXAgZnVuY3Rpb24gZm9yIGhpc3RvcnlcbiAgbGV0IHVubGlzdGVuSGlzdG9yeTogKCgpID0+IHZvaWQpIHwgbnVsbCA9IG51bGw7XG4gIC8vIEV4dGVybmFsbHktcHJvdmlkZWQgZnVuY3Rpb25zIHRvIGNhbGwgb24gYWxsIHN0YXRlIGNoYW5nZXNcbiAgbGV0IHN1YnNjcmliZXJzID0gbmV3IFNldDxSb3V0ZXJTdWJzY3JpYmVyPigpO1xuICAvLyBFeHRlcm5hbGx5LXByb3ZpZGVkIG9iamVjdCB0byBob2xkIHNjcm9sbCByZXN0b3JhdGlvbiBsb2NhdGlvbnMgZHVyaW5nIHJvdXRpbmdcbiAgbGV0IHNhdmVkU2Nyb2xsUG9zaXRpb25zOiBSZWNvcmQ8c3RyaW5nLCBudW1iZXI+IHwgbnVsbCA9IG51bGw7XG4gIC8vIEV4dGVybmFsbHktcHJvdmlkZWQgZnVuY3Rpb24gdG8gZ2V0IHNjcm9sbCByZXN0b3JhdGlvbiBrZXlzXG4gIGxldCBnZXRTY3JvbGxSZXN0b3JhdGlvbktleTogR2V0U2Nyb2xsUmVzdG9yYXRpb25LZXlGdW5jdGlvbiB8IG51bGwgPSBudWxsO1xuICAvLyBFeHRlcm5hbGx5LXByb3ZpZGVkIGZ1bmN0aW9uIHRvIGdldCBjdXJyZW50IHNjcm9sbCBwb3NpdGlvblxuICBsZXQgZ2V0U2Nyb2xsUG9zaXRpb246IEdldFNjcm9sbFBvc2l0aW9uRnVuY3Rpb24gfCBudWxsID0gbnVsbDtcbiAgLy8gT25lLXRpbWUgZmxhZyB0byBjb250cm9sIHRoZSBpbml0aWFsIGh5ZHJhdGlvbiBzY3JvbGwgcmVzdG9yYXRpb24uICBCZWNhdXNlXG4gIC8vIHdlIGRvbid0IGdldCB0aGUgc2F2ZWQgcG9zaXRpb25zIGZyb20gPFNjcm9sbFJlc3RvcmF0aW9uIC8+IHVudGlsIF9hZnRlcl9cbiAgLy8gdGhlIGluaXRpYWwgcmVuZGVyLCB3ZSBuZWVkIHRvIG1hbnVhbGx5IHRyaWdnZXIgYSBzZXBhcmF0ZSB1cGRhdGVTdGF0ZSB0b1xuICAvLyBzZW5kIGFsb25nIHRoZSByZXN0b3JlU2Nyb2xsUG9zaXRpb25cbiAgLy8gU2V0IHRvIHRydWUgaWYgd2UgaGF2ZSBgaHlkcmF0aW9uRGF0YWAgc2luY2Ugd2UgYXNzdW1lIHdlIHdlcmUgU1NSJ2QgYW5kIHRoYXRcbiAgLy8gU1NSIGRpZCB0aGUgaW5pdGlhbCBzY3JvbGwgcmVzdG9yYXRpb24uXG4gIGxldCBpbml0aWFsU2Nyb2xsUmVzdG9yZWQgPSBpbml0Lmh5ZHJhdGlvbkRhdGEgIT0gbnVsbDtcblxuICBsZXQgaW5pdGlhbE1hdGNoZXMgPSBtYXRjaFJvdXRlcyhcbiAgICBkYXRhUm91dGVzLFxuICAgIGluaXQuaGlzdG9yeS5sb2NhdGlvbixcbiAgICBpbml0LmJhc2VuYW1lXG4gICk7XG4gIGxldCBpbml0aWFsRXJyb3JzOiBSb3V0ZURhdGEgfCBudWxsID0gbnVsbDtcblxuICBpZiAoaW5pdGlhbE1hdGNoZXMgPT0gbnVsbCkge1xuICAgIC8vIElmIHdlIGRvIG5vdCBtYXRjaCBhIHVzZXItcHJvdmlkZWQtcm91dGUsIGZhbGwgYmFjayB0byB0aGUgcm9vdFxuICAgIC8vIHRvIGFsbG93IHRoZSBlcnJvciBib3VuZGFyeSB0byB0YWtlIG92ZXJcbiAgICBsZXQgZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwge1xuICAgICAgcGF0aG5hbWU6IGluaXQuaGlzdG9yeS5sb2NhdGlvbi5wYXRobmFtZSxcbiAgICB9KTtcbiAgICBsZXQgeyBtYXRjaGVzLCByb3V0ZSB9ID0gZ2V0U2hvcnRDaXJjdWl0TWF0Y2hlcyhkYXRhUm91dGVzKTtcbiAgICBpbml0aWFsTWF0Y2hlcyA9IG1hdGNoZXM7XG4gICAgaW5pdGlhbEVycm9ycyA9IHsgW3JvdXRlLmlkXTogZXJyb3IgfTtcbiAgfVxuXG4gIGxldCBpbml0aWFsaXplZCA9XG4gICAgIWluaXRpYWxNYXRjaGVzLnNvbWUoKG0pID0+IG0ucm91dGUubG9hZGVyKSB8fCBpbml0Lmh5ZHJhdGlvbkRhdGEgIT0gbnVsbDtcblxuICBsZXQgcm91dGVyOiBSb3V0ZXI7XG4gIGxldCBzdGF0ZTogUm91dGVyU3RhdGUgPSB7XG4gICAgaGlzdG9yeUFjdGlvbjogaW5pdC5oaXN0b3J5LmFjdGlvbixcbiAgICBsb2NhdGlvbjogaW5pdC5oaXN0b3J5LmxvY2F0aW9uLFxuICAgIG1hdGNoZXM6IGluaXRpYWxNYXRjaGVzLFxuICAgIGluaXRpYWxpemVkLFxuICAgIG5hdmlnYXRpb246IElETEVfTkFWSUdBVElPTixcbiAgICAvLyBEb24ndCByZXN0b3JlIG9uIGluaXRpYWwgdXBkYXRlU3RhdGUoKSBpZiB3ZSB3ZXJlIFNTUidkXG4gICAgcmVzdG9yZVNjcm9sbFBvc2l0aW9uOiBpbml0Lmh5ZHJhdGlvbkRhdGEgIT0gbnVsbCA/IGZhbHNlIDogbnVsbCxcbiAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ6IGZhbHNlLFxuICAgIHJldmFsaWRhdGlvbjogXCJpZGxlXCIsXG4gICAgbG9hZGVyRGF0YTogKGluaXQuaHlkcmF0aW9uRGF0YSAmJiBpbml0Lmh5ZHJhdGlvbkRhdGEubG9hZGVyRGF0YSkgfHwge30sXG4gICAgYWN0aW9uRGF0YTogKGluaXQuaHlkcmF0aW9uRGF0YSAmJiBpbml0Lmh5ZHJhdGlvbkRhdGEuYWN0aW9uRGF0YSkgfHwgbnVsbCxcbiAgICBlcnJvcnM6IChpbml0Lmh5ZHJhdGlvbkRhdGEgJiYgaW5pdC5oeWRyYXRpb25EYXRhLmVycm9ycykgfHwgaW5pdGlhbEVycm9ycyxcbiAgICBmZXRjaGVyczogbmV3IE1hcCgpLFxuICAgIGJsb2NrZXJzOiBuZXcgTWFwKCksXG4gIH07XG5cbiAgLy8gLS0gU3RhdGVmdWwgaW50ZXJuYWwgdmFyaWFibGVzIHRvIG1hbmFnZSBuYXZpZ2F0aW9ucyAtLVxuICAvLyBDdXJyZW50IG5hdmlnYXRpb24gaW4gcHJvZ3Jlc3MgKHRvIGJlIGNvbW1pdHRlZCBpbiBjb21wbGV0ZU5hdmlnYXRpb24pXG4gIGxldCBwZW5kaW5nQWN0aW9uOiBIaXN0b3J5QWN0aW9uID0gSGlzdG9yeUFjdGlvbi5Qb3A7XG5cbiAgLy8gU2hvdWxkIHRoZSBjdXJyZW50IG5hdmlnYXRpb24gcHJldmVudCB0aGUgc2Nyb2xsIHJlc2V0IGlmIHNjcm9sbCBjYW5ub3RcbiAgLy8gYmUgcmVzdG9yZWQ/XG4gIGxldCBwZW5kaW5nUHJldmVudFNjcm9sbFJlc2V0ID0gZmFsc2U7XG5cbiAgLy8gQWJvcnRDb250cm9sbGVyIGZvciB0aGUgYWN0aXZlIG5hdmlnYXRpb25cbiAgbGV0IHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlcjogQWJvcnRDb250cm9sbGVyIHwgbnVsbDtcblxuICAvLyBXZSB1c2UgdGhpcyB0byBhdm9pZCB0b3VjaGluZyBoaXN0b3J5IGluIGNvbXBsZXRlTmF2aWdhdGlvbiBpZiBhXG4gIC8vIHJldmFsaWRhdGlvbiBpcyBlbnRpcmVseSB1bmludGVycnVwdGVkXG4gIGxldCBpc1VuaW50ZXJydXB0ZWRSZXZhbGlkYXRpb24gPSBmYWxzZTtcblxuICAvLyBVc2UgdGhpcyBpbnRlcm5hbCBmbGFnIHRvIGZvcmNlIHJldmFsaWRhdGlvbiBvZiBhbGwgbG9hZGVyczpcbiAgLy8gIC0gc3VibWlzc2lvbnMgKGNvbXBsZXRlZCBvciBpbnRlcnJ1cHRlZClcbiAgLy8gIC0gdXNlUmV2YWxpZGF0ZSgpXG4gIC8vICAtIFgtUmVtaXgtUmV2YWxpZGF0ZSAoZnJvbSByZWRpcmVjdClcbiAgbGV0IGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgPSBmYWxzZTtcblxuICAvLyBVc2UgdGhpcyBpbnRlcm5hbCBhcnJheSB0byBjYXB0dXJlIHJvdXRlcyB0aGF0IHJlcXVpcmUgcmV2YWxpZGF0aW9uIGR1ZVxuICAvLyB0byBhIGNhbmNlbGxlZCBkZWZlcnJlZCBvbiBhY3Rpb24gc3VibWlzc2lvblxuICBsZXQgY2FuY2VsbGVkRGVmZXJyZWRSb3V0ZXM6IHN0cmluZ1tdID0gW107XG5cbiAgLy8gVXNlIHRoaXMgaW50ZXJuYWwgYXJyYXkgdG8gY2FwdHVyZSBmZXRjaGVyIGxvYWRzIHRoYXQgd2VyZSBjYW5jZWxsZWQgYnkgYW5cbiAgLy8gYWN0aW9uIG5hdmlnYXRpb24gYW5kIHJlcXVpcmUgcmV2YWxpZGF0aW9uXG4gIGxldCBjYW5jZWxsZWRGZXRjaGVyTG9hZHM6IHN0cmluZ1tdID0gW107XG5cbiAgLy8gQWJvcnRDb250cm9sbGVycyBmb3IgYW55IGluLWZsaWdodCBmZXRjaGVyc1xuICBsZXQgZmV0Y2hDb250cm9sbGVycyA9IG5ldyBNYXA8c3RyaW5nLCBBYm9ydENvbnRyb2xsZXI+KCk7XG5cbiAgLy8gVHJhY2sgbG9hZHMgYmFzZWQgb24gdGhlIG9yZGVyIGluIHdoaWNoIHRoZXkgc3RhcnRlZFxuICBsZXQgaW5jcmVtZW50aW5nTG9hZElkID0gMDtcblxuICAvLyBUcmFjayB0aGUgb3V0c3RhbmRpbmcgcGVuZGluZyBuYXZpZ2F0aW9uIGRhdGEgbG9hZCB0byBiZSBjb21wYXJlZCBhZ2FpbnN0XG4gIC8vIHRoZSBnbG9iYWxseSBpbmNyZW1lbnRpbmcgbG9hZCB3aGVuIGEgZmV0Y2hlciBsb2FkIGxhbmRzIGFmdGVyIGEgY29tcGxldGVkXG4gIC8vIG5hdmlnYXRpb25cbiAgbGV0IHBlbmRpbmdOYXZpZ2F0aW9uTG9hZElkID0gLTE7XG5cbiAgLy8gRmV0Y2hlcnMgdGhhdCB0cmlnZ2VyZWQgZGF0YSByZWxvYWRzIGFzIGEgcmVzdWx0IG9mIHRoZWlyIGFjdGlvbnNcbiAgbGV0IGZldGNoUmVsb2FkSWRzID0gbmV3IE1hcDxzdHJpbmcsIG51bWJlcj4oKTtcblxuICAvLyBGZXRjaGVycyB0aGF0IHRyaWdnZXJlZCByZWRpcmVjdCBuYXZpZ2F0aW9ucyBmcm9tIHRoZWlyIGFjdGlvbnNcbiAgbGV0IGZldGNoUmVkaXJlY3RJZHMgPSBuZXcgU2V0PHN0cmluZz4oKTtcblxuICAvLyBNb3N0IHJlY2VudCBocmVmL21hdGNoIGZvciBmZXRjaGVyLmxvYWQgY2FsbHMgZm9yIGZldGNoZXJzXG4gIGxldCBmZXRjaExvYWRNYXRjaGVzID0gbmV3IE1hcDxzdHJpbmcsIEZldGNoTG9hZE1hdGNoPigpO1xuXG4gIC8vIFN0b3JlIERlZmVycmVkRGF0YSBpbnN0YW5jZXMgZm9yIGFjdGl2ZSByb3V0ZSBtYXRjaGVzLiAgV2hlbiBhXG4gIC8vIHJvdXRlIGxvYWRlciByZXR1cm5zIGRlZmVyKCkgd2Ugc3RpY2sgb25lIGluIGhlcmUuICBUaGVuLCB3aGVuIGEgbmVzdGVkXG4gIC8vIHByb21pc2UgcmVzb2x2ZXMgd2UgdXBkYXRlIGxvYWRlckRhdGEuICBJZiBhIG5ldyBuYXZpZ2F0aW9uIHN0YXJ0cyB3ZVxuICAvLyBjYW5jZWwgYWN0aXZlIGRlZmVycmVkcyBmb3IgZWxpbWluYXRlZCByb3V0ZXMuXG4gIGxldCBhY3RpdmVEZWZlcnJlZHMgPSBuZXcgTWFwPHN0cmluZywgRGVmZXJyZWREYXRhPigpO1xuXG4gIC8vIFN0b3JlIGJsb2NrZXIgZnVuY3Rpb25zIGluIGEgc2VwYXJhdGUgTWFwIG91dHNpZGUgb2Ygcm91dGVyIHN0YXRlIHNpbmNlXG4gIC8vIHdlIGRvbid0IG5lZWQgdG8gdXBkYXRlIFVJIHN0YXRlIGlmIHRoZXkgY2hhbmdlXG4gIGxldCBibG9ja2VyRnVuY3Rpb25zID0gbmV3IE1hcDxzdHJpbmcsIEJsb2NrZXJGdW5jdGlvbj4oKTtcblxuICAvLyBGbGFnIHRvIGlnbm9yZSB0aGUgbmV4dCBoaXN0b3J5IHVwZGF0ZSwgc28gd2UgY2FuIHJldmVydCB0aGUgVVJMIGNoYW5nZSBvblxuICAvLyBhIFBPUCBuYXZpZ2F0aW9uIHRoYXQgd2FzIGJsb2NrZWQgYnkgdGhlIHVzZXIgd2l0aG91dCB0b3VjaGluZyByb3V0ZXIgc3RhdGVcbiAgbGV0IGlnbm9yZU5leHRIaXN0b3J5VXBkYXRlID0gZmFsc2U7XG5cbiAgLy8gSW5pdGlhbGl6ZSB0aGUgcm91dGVyLCBhbGwgc2lkZSBlZmZlY3RzIHNob3VsZCBiZSBraWNrZWQgb2ZmIGZyb20gaGVyZS5cbiAgLy8gSW1wbGVtZW50ZWQgYXMgYSBGbHVlbnQgQVBJIGZvciBlYXNlIG9mOlxuICAvLyAgIGxldCByb3V0ZXIgPSBjcmVhdGVSb3V0ZXIoaW5pdCkuaW5pdGlhbGl6ZSgpO1xuICBmdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICAgIC8vIElmIGhpc3RvcnkgaW5mb3JtcyB1cyBvZiBhIFBPUCBuYXZpZ2F0aW9uLCBzdGFydCB0aGUgbmF2aWdhdGlvbiBidXQgZG8gbm90IHVwZGF0ZVxuICAgIC8vIHN0YXRlLiAgV2UnbGwgdXBkYXRlIG91ciBvd24gc3RhdGUgb25jZSB0aGUgbmF2aWdhdGlvbiBjb21wbGV0ZXNcbiAgICB1bmxpc3Rlbkhpc3RvcnkgPSBpbml0Lmhpc3RvcnkubGlzdGVuKFxuICAgICAgKHsgYWN0aW9uOiBoaXN0b3J5QWN0aW9uLCBsb2NhdGlvbiwgZGVsdGEgfSkgPT4ge1xuICAgICAgICAvLyBJZ25vcmUgdGhpcyBldmVudCBpZiBpdCB3YXMganVzdCB1cyByZXNldHRpbmcgdGhlIFVSTCBmcm9tIGFcbiAgICAgICAgLy8gYmxvY2tlZCBQT1AgbmF2aWdhdGlvblxuICAgICAgICBpZiAoaWdub3JlTmV4dEhpc3RvcnlVcGRhdGUpIHtcbiAgICAgICAgICBpZ25vcmVOZXh0SGlzdG9yeVVwZGF0ZSA9IGZhbHNlO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHdhcm5pbmcoXG4gICAgICAgICAgYmxvY2tlckZ1bmN0aW9ucy5zaXplID09PSAwIHx8IGRlbHRhICE9IG51bGwsXG4gICAgICAgICAgXCJZb3UgYXJlIHRyeWluZyB0byB1c2UgYSBibG9ja2VyIG9uIGEgUE9QIG5hdmlnYXRpb24gdG8gYSBsb2NhdGlvbiBcIiArXG4gICAgICAgICAgICBcInRoYXQgd2FzIG5vdCBjcmVhdGVkIGJ5IEByZW1peC1ydW4vcm91dGVyLiBUaGlzIHdpbGwgZmFpbCBzaWxlbnRseSBpbiBcIiArXG4gICAgICAgICAgICBcInByb2R1Y3Rpb24uIFRoaXMgY2FuIGhhcHBlbiBpZiB5b3UgYXJlIG5hdmlnYXRpbmcgb3V0c2lkZSB0aGUgcm91dGVyIFwiICtcbiAgICAgICAgICAgIFwidmlhIGB3aW5kb3cuaGlzdG9yeS5wdXNoU3RhdGVgL2B3aW5kb3cubG9jYXRpb24uaGFzaGAgaW5zdGVhZCBvZiB1c2luZyBcIiArXG4gICAgICAgICAgICBcInJvdXRlciBuYXZpZ2F0aW9uIEFQSXMuICBUaGlzIGNhbiBhbHNvIGhhcHBlbiBpZiB5b3UgYXJlIHVzaW5nIFwiICtcbiAgICAgICAgICAgIFwiY3JlYXRlSGFzaFJvdXRlciBhbmQgdGhlIHVzZXIgbWFudWFsbHkgY2hhbmdlcyB0aGUgVVJMLlwiXG4gICAgICAgICk7XG5cbiAgICAgICAgbGV0IGJsb2NrZXJLZXkgPSBzaG91bGRCbG9ja05hdmlnYXRpb24oe1xuICAgICAgICAgIGN1cnJlbnRMb2NhdGlvbjogc3RhdGUubG9jYXRpb24sXG4gICAgICAgICAgbmV4dExvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgICBoaXN0b3J5QWN0aW9uLFxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoYmxvY2tlcktleSAmJiBkZWx0YSAhPSBudWxsKSB7XG4gICAgICAgICAgLy8gUmVzdG9yZSB0aGUgVVJMIHRvIG1hdGNoIHRoZSBjdXJyZW50IFVJLCBidXQgZG9uJ3QgdXBkYXRlIHJvdXRlciBzdGF0ZVxuICAgICAgICAgIGlnbm9yZU5leHRIaXN0b3J5VXBkYXRlID0gdHJ1ZTtcbiAgICAgICAgICBpbml0Lmhpc3RvcnkuZ28oZGVsdGEgKiAtMSk7XG5cbiAgICAgICAgICAvLyBQdXQgdGhlIGJsb2NrZXIgaW50byBhIGJsb2NrZWQgc3RhdGVcbiAgICAgICAgICB1cGRhdGVCbG9ja2VyKGJsb2NrZXJLZXksIHtcbiAgICAgICAgICAgIHN0YXRlOiBcImJsb2NrZWRcIixcbiAgICAgICAgICAgIGxvY2F0aW9uLFxuICAgICAgICAgICAgcHJvY2VlZCgpIHtcbiAgICAgICAgICAgICAgdXBkYXRlQmxvY2tlcihibG9ja2VyS2V5ISwge1xuICAgICAgICAgICAgICAgIHN0YXRlOiBcInByb2NlZWRpbmdcIixcbiAgICAgICAgICAgICAgICBwcm9jZWVkOiB1bmRlZmluZWQsXG4gICAgICAgICAgICAgICAgcmVzZXQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIC8vIFJlLWRvIHRoZSBzYW1lIFBPUCBuYXZpZ2F0aW9uIHdlIGp1c3QgYmxvY2tlZFxuICAgICAgICAgICAgICBpbml0Lmhpc3RvcnkuZ28oZGVsdGEpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlc2V0KCkge1xuICAgICAgICAgICAgICBkZWxldGVCbG9ja2VyKGJsb2NrZXJLZXkhKTtcbiAgICAgICAgICAgICAgdXBkYXRlU3RhdGUoeyBibG9ja2VyczogbmV3IE1hcChyb3V0ZXIuc3RhdGUuYmxvY2tlcnMpIH0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gc3RhcnROYXZpZ2F0aW9uKGhpc3RvcnlBY3Rpb24sIGxvY2F0aW9uKTtcbiAgICAgIH1cbiAgICApO1xuXG4gICAgLy8gS2ljayBvZmYgaW5pdGlhbCBkYXRhIGxvYWQgaWYgbmVlZGVkLiAgVXNlIFBvcCB0byBhdm9pZCBtb2RpZnlpbmcgaGlzdG9yeVxuICAgIGlmICghc3RhdGUuaW5pdGlhbGl6ZWQpIHtcbiAgICAgIHN0YXJ0TmF2aWdhdGlvbihIaXN0b3J5QWN0aW9uLlBvcCwgc3RhdGUubG9jYXRpb24pO1xuICAgIH1cblxuICAgIHJldHVybiByb3V0ZXI7XG4gIH1cblxuICAvLyBDbGVhbiB1cCBhIHJvdXRlciBhbmQgaXQncyBzaWRlIGVmZmVjdHNcbiAgZnVuY3Rpb24gZGlzcG9zZSgpIHtcbiAgICBpZiAodW5saXN0ZW5IaXN0b3J5KSB7XG4gICAgICB1bmxpc3Rlbkhpc3RvcnkoKTtcbiAgICB9XG4gICAgc3Vic2NyaWJlcnMuY2xlYXIoKTtcbiAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgJiYgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyLmFib3J0KCk7XG4gICAgc3RhdGUuZmV0Y2hlcnMuZm9yRWFjaCgoXywga2V5KSA9PiBkZWxldGVGZXRjaGVyKGtleSkpO1xuICAgIHN0YXRlLmJsb2NrZXJzLmZvckVhY2goKF8sIGtleSkgPT4gZGVsZXRlQmxvY2tlcihrZXkpKTtcbiAgfVxuXG4gIC8vIFN1YnNjcmliZSB0byBzdGF0ZSB1cGRhdGVzIGZvciB0aGUgcm91dGVyXG4gIGZ1bmN0aW9uIHN1YnNjcmliZShmbjogUm91dGVyU3Vic2NyaWJlcikge1xuICAgIHN1YnNjcmliZXJzLmFkZChmbik7XG4gICAgcmV0dXJuICgpID0+IHN1YnNjcmliZXJzLmRlbGV0ZShmbik7XG4gIH1cblxuICAvLyBVcGRhdGUgb3VyIHN0YXRlIGFuZCBub3RpZnkgdGhlIGNhbGxpbmcgY29udGV4dCBvZiB0aGUgY2hhbmdlXG4gIGZ1bmN0aW9uIHVwZGF0ZVN0YXRlKG5ld1N0YXRlOiBQYXJ0aWFsPFJvdXRlclN0YXRlPik6IHZvaWQge1xuICAgIHN0YXRlID0ge1xuICAgICAgLi4uc3RhdGUsXG4gICAgICAuLi5uZXdTdGF0ZSxcbiAgICB9O1xuICAgIHN1YnNjcmliZXJzLmZvckVhY2goKHN1YnNjcmliZXIpID0+IHN1YnNjcmliZXIoc3RhdGUpKTtcbiAgfVxuXG4gIC8vIENvbXBsZXRlIGEgbmF2aWdhdGlvbiByZXR1cm5pbmcgdGhlIHN0YXRlLm5hdmlnYXRpb24gYmFjayB0byB0aGUgSURMRV9OQVZJR0FUSU9OXG4gIC8vIGFuZCBzZXR0aW5nIHN0YXRlLltoaXN0b3J5QWN0aW9uL2xvY2F0aW9uL21hdGNoZXNdIHRvIHRoZSBuZXcgcm91dGUuXG4gIC8vIC0gTG9jYXRpb24gaXMgYSByZXF1aXJlZCBwYXJhbVxuICAvLyAtIE5hdmlnYXRpb24gd2lsbCBhbHdheXMgYmUgc2V0IHRvIElETEVfTkFWSUdBVElPTlxuICAvLyAtIENhbiBwYXNzIGFueSBvdGhlciBzdGF0ZSBpbiBuZXdTdGF0ZVxuICBmdW5jdGlvbiBjb21wbGV0ZU5hdmlnYXRpb24oXG4gICAgbG9jYXRpb246IExvY2F0aW9uLFxuICAgIG5ld1N0YXRlOiBQYXJ0aWFsPE9taXQ8Um91dGVyU3RhdGUsIFwiYWN0aW9uXCIgfCBcImxvY2F0aW9uXCIgfCBcIm5hdmlnYXRpb25cIj4+XG4gICk6IHZvaWQge1xuICAgIC8vIERlZHVjZSBpZiB3ZSdyZSBpbiBhIGxvYWRpbmcvYWN0aW9uUmVsb2FkIHN0YXRlOlxuICAgIC8vIC0gV2UgaGF2ZSBjb21taXR0ZWQgYWN0aW9uRGF0YSBpbiB0aGUgc3RvcmVcbiAgICAvLyAtIFRoZSBjdXJyZW50IG5hdmlnYXRpb24gd2FzIGEgbXV0YXRpb24gc3VibWlzc2lvblxuICAgIC8vIC0gV2UncmUgcGFzdCB0aGUgc3VibWl0dGluZyBzdGF0ZSBhbmQgaW50byB0aGUgbG9hZGluZyBzdGF0ZVxuICAgIC8vIC0gVGhlIGxvY2F0aW9uIGJlaW5nIGxvYWRlZCBpcyBub3QgdGhlIHJlc3VsdCBvZiBhIHJlZGlyZWN0XG4gICAgbGV0IGlzQWN0aW9uUmVsb2FkID1cbiAgICAgIHN0YXRlLmFjdGlvbkRhdGEgIT0gbnVsbCAmJlxuICAgICAgc3RhdGUubmF2aWdhdGlvbi5mb3JtTWV0aG9kICE9IG51bGwgJiZcbiAgICAgIGlzTXV0YXRpb25NZXRob2Qoc3RhdGUubmF2aWdhdGlvbi5mb3JtTWV0aG9kKSAmJlxuICAgICAgc3RhdGUubmF2aWdhdGlvbi5zdGF0ZSA9PT0gXCJsb2FkaW5nXCIgJiZcbiAgICAgIGxvY2F0aW9uLnN0YXRlPy5faXNSZWRpcmVjdCAhPT0gdHJ1ZTtcblxuICAgIGxldCBhY3Rpb25EYXRhOiBSb3V0ZURhdGEgfCBudWxsO1xuICAgIGlmIChuZXdTdGF0ZS5hY3Rpb25EYXRhKSB7XG4gICAgICBpZiAoT2JqZWN0LmtleXMobmV3U3RhdGUuYWN0aW9uRGF0YSkubGVuZ3RoID4gMCkge1xuICAgICAgICBhY3Rpb25EYXRhID0gbmV3U3RhdGUuYWN0aW9uRGF0YTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEVtcHR5IGFjdGlvbkRhdGEgLT4gY2xlYXIgcHJpb3IgYWN0aW9uRGF0YSBkdWUgdG8gYW4gYWN0aW9uIGVycm9yXG4gICAgICAgIGFjdGlvbkRhdGEgPSBudWxsO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNBY3Rpb25SZWxvYWQpIHtcbiAgICAgIC8vIEtlZXAgdGhlIGN1cnJlbnQgZGF0YSBpZiB3ZSdyZSB3cmFwcGluZyB1cCB0aGUgYWN0aW9uIHJlbG9hZFxuICAgICAgYWN0aW9uRGF0YSA9IHN0YXRlLmFjdGlvbkRhdGE7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIENsZWFyIGFjdGlvbkRhdGEgb24gYW55IG90aGVyIGNvbXBsZXRlZCBuYXZpZ2F0aW9uc1xuICAgICAgYWN0aW9uRGF0YSA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gQWx3YXlzIHByZXNlcnZlIGFueSBleGlzdGluZyBsb2FkZXJEYXRhIGZyb20gcmUtdXNlZCByb3V0ZXNcbiAgICBsZXQgbG9hZGVyRGF0YSA9IG5ld1N0YXRlLmxvYWRlckRhdGFcbiAgICAgID8gbWVyZ2VMb2FkZXJEYXRhKFxuICAgICAgICAgIHN0YXRlLmxvYWRlckRhdGEsXG4gICAgICAgICAgbmV3U3RhdGUubG9hZGVyRGF0YSxcbiAgICAgICAgICBuZXdTdGF0ZS5tYXRjaGVzIHx8IFtdLFxuICAgICAgICAgIG5ld1N0YXRlLmVycm9yc1xuICAgICAgICApXG4gICAgICA6IHN0YXRlLmxvYWRlckRhdGE7XG5cbiAgICAvLyBPbiBhIHN1Y2Nlc3NmdWwgbmF2aWdhdGlvbiB3ZSBjYW4gYXNzdW1lIHdlIGdvdCB0aHJvdWdoIGFsbCBibG9ja2Vyc1xuICAgIC8vIHNvIHdlIGNhbiBzdGFydCBmcmVzaFxuICAgIGZvciAobGV0IFtrZXldIG9mIGJsb2NrZXJGdW5jdGlvbnMpIHtcbiAgICAgIGRlbGV0ZUJsb2NrZXIoa2V5KTtcbiAgICB9XG5cbiAgICAvLyBBbHdheXMgcmVzcGVjdCB0aGUgdXNlciBmbGFnLiAgT3RoZXJ3aXNlIGRvbid0IHJlc2V0IG9uIG11dGF0aW9uXG4gICAgLy8gc3VibWlzc2lvbiBuYXZpZ2F0aW9ucyB1bmxlc3MgdGhleSByZWRpcmVjdFxuICAgIGxldCBwcmV2ZW50U2Nyb2xsUmVzZXQgPVxuICAgICAgcGVuZGluZ1ByZXZlbnRTY3JvbGxSZXNldCA9PT0gdHJ1ZSB8fFxuICAgICAgKHN0YXRlLm5hdmlnYXRpb24uZm9ybU1ldGhvZCAhPSBudWxsICYmXG4gICAgICAgIGlzTXV0YXRpb25NZXRob2Qoc3RhdGUubmF2aWdhdGlvbi5mb3JtTWV0aG9kKSAmJlxuICAgICAgICBsb2NhdGlvbi5zdGF0ZT8uX2lzUmVkaXJlY3QgIT09IHRydWUpO1xuXG4gICAgdXBkYXRlU3RhdGUoe1xuICAgICAgLi4ubmV3U3RhdGUsIC8vIG1hdGNoZXMsIGVycm9ycywgZmV0Y2hlcnMgZ28gdGhyb3VnaCBhcy1pc1xuICAgICAgYWN0aW9uRGF0YSxcbiAgICAgIGxvYWRlckRhdGEsXG4gICAgICBoaXN0b3J5QWN0aW9uOiBwZW5kaW5nQWN0aW9uLFxuICAgICAgbG9jYXRpb24sXG4gICAgICBpbml0aWFsaXplZDogdHJ1ZSxcbiAgICAgIG5hdmlnYXRpb246IElETEVfTkFWSUdBVElPTixcbiAgICAgIHJldmFsaWRhdGlvbjogXCJpZGxlXCIsXG4gICAgICByZXN0b3JlU2Nyb2xsUG9zaXRpb246IGdldFNhdmVkU2Nyb2xsUG9zaXRpb24oXG4gICAgICAgIGxvY2F0aW9uLFxuICAgICAgICBuZXdTdGF0ZS5tYXRjaGVzIHx8IHN0YXRlLm1hdGNoZXNcbiAgICAgICksXG4gICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICBibG9ja2VyczogbmV3IE1hcChzdGF0ZS5ibG9ja2VycyksXG4gICAgfSk7XG5cbiAgICBpZiAoaXNVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uKSB7XG4gICAgICAvLyBJZiB0aGlzIHdhcyBhbiB1bmludGVycnVwdGVkIHJldmFsaWRhdGlvbiB0aGVuIGRvIG5vdCB0b3VjaCBoaXN0b3J5XG4gICAgfSBlbHNlIGlmIChwZW5kaW5nQWN0aW9uID09PSBIaXN0b3J5QWN0aW9uLlBvcCkge1xuICAgICAgLy8gRG8gbm90aGluZyBmb3IgUE9QIC0gVVJMIGhhcyBhbHJlYWR5IGJlZW4gdXBkYXRlZFxuICAgIH0gZWxzZSBpZiAocGVuZGluZ0FjdGlvbiA9PT0gSGlzdG9yeUFjdGlvbi5QdXNoKSB7XG4gICAgICBpbml0Lmhpc3RvcnkucHVzaChsb2NhdGlvbiwgbG9jYXRpb24uc3RhdGUpO1xuICAgIH0gZWxzZSBpZiAocGVuZGluZ0FjdGlvbiA9PT0gSGlzdG9yeUFjdGlvbi5SZXBsYWNlKSB7XG4gICAgICBpbml0Lmhpc3RvcnkucmVwbGFjZShsb2NhdGlvbiwgbG9jYXRpb24uc3RhdGUpO1xuICAgIH1cblxuICAgIC8vIFJlc2V0IHN0YXRlZnVsIG5hdmlnYXRpb24gdmFyc1xuICAgIHBlbmRpbmdBY3Rpb24gPSBIaXN0b3J5QWN0aW9uLlBvcDtcbiAgICBwZW5kaW5nUHJldmVudFNjcm9sbFJlc2V0ID0gZmFsc2U7XG4gICAgaXNVbmludGVycnVwdGVkUmV2YWxpZGF0aW9uID0gZmFsc2U7XG4gICAgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCA9IGZhbHNlO1xuICAgIGNhbmNlbGxlZERlZmVycmVkUm91dGVzID0gW107XG4gICAgY2FuY2VsbGVkRmV0Y2hlckxvYWRzID0gW107XG4gIH1cblxuICAvLyBUcmlnZ2VyIGEgbmF2aWdhdGlvbiBldmVudCwgd2hpY2ggY2FuIGVpdGhlciBiZSBhIG51bWVyaWNhbCBQT1Agb3IgYSBQVVNIXG4gIC8vIHJlcGxhY2Ugd2l0aCBhbiBvcHRpb25hbCBzdWJtaXNzaW9uXG4gIGFzeW5jIGZ1bmN0aW9uIG5hdmlnYXRlKFxuICAgIHRvOiBudW1iZXIgfCBUbyxcbiAgICBvcHRzPzogUm91dGVyTmF2aWdhdGVPcHRpb25zXG4gICk6IFByb21pc2U8dm9pZD4ge1xuICAgIGlmICh0eXBlb2YgdG8gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgIGluaXQuaGlzdG9yeS5nbyh0byk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgbGV0IHsgcGF0aCwgc3VibWlzc2lvbiwgZXJyb3IgfSA9IG5vcm1hbGl6ZU5hdmlnYXRlT3B0aW9ucyh0bywgb3B0cyk7XG5cbiAgICBsZXQgY3VycmVudExvY2F0aW9uID0gc3RhdGUubG9jYXRpb247XG4gICAgbGV0IG5leHRMb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHN0YXRlLmxvY2F0aW9uLCBwYXRoLCBvcHRzICYmIG9wdHMuc3RhdGUpO1xuXG4gICAgLy8gV2hlbiB1c2luZyBuYXZpZ2F0ZSBhcyBhIFBVU0gvUkVQTEFDRSB3ZSBhcmVuJ3QgcmVhZGluZyBhbiBhbHJlYWR5LWVuY29kZWRcbiAgICAvLyBVUkwgZnJvbSB3aW5kb3cubG9jYXRpb24sIHNvIHdlIG5lZWQgdG8gZW5jb2RlIGl0IGhlcmUgc28gdGhlIGJlaGF2aW9yXG4gICAgLy8gcmVtYWlucyB0aGUgc2FtZSBhcyBQT1AgYW5kIG5vbi1kYXRhLXJvdXRlciB1c2FnZXMuICBuZXcgVVJMKCkgZG9lcyBhbGxcbiAgICAvLyB0aGUgc2FtZSBlbmNvZGluZyB3ZSdkIGdldCBmcm9tIGEgaGlzdG9yeS5wdXNoU3RhdGUvd2luZG93LmxvY2F0aW9uIHJlYWRcbiAgICAvLyB3aXRob3V0IGhhdmluZyB0byB0b3VjaCBoaXN0b3J5XG4gICAgbmV4dExvY2F0aW9uID0ge1xuICAgICAgLi4ubmV4dExvY2F0aW9uLFxuICAgICAgLi4uaW5pdC5oaXN0b3J5LmVuY29kZUxvY2F0aW9uKG5leHRMb2NhdGlvbiksXG4gICAgfTtcblxuICAgIGxldCB1c2VyUmVwbGFjZSA9IG9wdHMgJiYgb3B0cy5yZXBsYWNlICE9IG51bGwgPyBvcHRzLnJlcGxhY2UgOiB1bmRlZmluZWQ7XG5cbiAgICBsZXQgaGlzdG9yeUFjdGlvbiA9IEhpc3RvcnlBY3Rpb24uUHVzaDtcblxuICAgIGlmICh1c2VyUmVwbGFjZSA9PT0gdHJ1ZSkge1xuICAgICAgaGlzdG9yeUFjdGlvbiA9IEhpc3RvcnlBY3Rpb24uUmVwbGFjZTtcbiAgICB9IGVsc2UgaWYgKHVzZXJSZXBsYWNlID09PSBmYWxzZSkge1xuICAgICAgLy8gbm8tb3BcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgc3VibWlzc2lvbiAhPSBudWxsICYmXG4gICAgICBpc011dGF0aW9uTWV0aG9kKHN1Ym1pc3Npb24uZm9ybU1ldGhvZCkgJiZcbiAgICAgIHN1Ym1pc3Npb24uZm9ybUFjdGlvbiA9PT0gc3RhdGUubG9jYXRpb24ucGF0aG5hbWUgKyBzdGF0ZS5sb2NhdGlvbi5zZWFyY2hcbiAgICApIHtcbiAgICAgIC8vIEJ5IGRlZmF1bHQgb24gc3VibWlzc2lvbnMgdG8gdGhlIGN1cnJlbnQgbG9jYXRpb24gd2UgUkVQTEFDRSBzbyB0aGF0XG4gICAgICAvLyB1c2VycyBkb24ndCBoYXZlIHRvIGRvdWJsZS1jbGljayB0aGUgYmFjayBidXR0b24gdG8gZ2V0IHRvIHRoZSBwcmlvclxuICAgICAgLy8gbG9jYXRpb24uICBJZiB0aGUgdXNlciByZWRpcmVjdHMgdG8gYSBkaWZmZXJlbnQgbG9jYXRpb24gZnJvbSB0aGVcbiAgICAgIC8vIGFjdGlvbi9sb2FkZXIgdGhpcyB3aWxsIGJlIGlnbm9yZWQgYW5kIHRoZSByZWRpcmVjdCB3aWxsIGJlIGEgUFVTSFxuICAgICAgaGlzdG9yeUFjdGlvbiA9IEhpc3RvcnlBY3Rpb24uUmVwbGFjZTtcbiAgICB9XG5cbiAgICBsZXQgcHJldmVudFNjcm9sbFJlc2V0ID1cbiAgICAgIG9wdHMgJiYgXCJwcmV2ZW50U2Nyb2xsUmVzZXRcIiBpbiBvcHRzXG4gICAgICAgID8gb3B0cy5wcmV2ZW50U2Nyb2xsUmVzZXQgPT09IHRydWVcbiAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICBsZXQgYmxvY2tlcktleSA9IHNob3VsZEJsb2NrTmF2aWdhdGlvbih7XG4gICAgICBjdXJyZW50TG9jYXRpb24sXG4gICAgICBuZXh0TG9jYXRpb24sXG4gICAgICBoaXN0b3J5QWN0aW9uLFxuICAgIH0pO1xuICAgIGlmIChibG9ja2VyS2V5KSB7XG4gICAgICAvLyBQdXQgdGhlIGJsb2NrZXIgaW50byBhIGJsb2NrZWQgc3RhdGVcbiAgICAgIHVwZGF0ZUJsb2NrZXIoYmxvY2tlcktleSwge1xuICAgICAgICBzdGF0ZTogXCJibG9ja2VkXCIsXG4gICAgICAgIGxvY2F0aW9uOiBuZXh0TG9jYXRpb24sXG4gICAgICAgIHByb2NlZWQoKSB7XG4gICAgICAgICAgdXBkYXRlQmxvY2tlcihibG9ja2VyS2V5ISwge1xuICAgICAgICAgICAgc3RhdGU6IFwicHJvY2VlZGluZ1wiLFxuICAgICAgICAgICAgcHJvY2VlZDogdW5kZWZpbmVkLFxuICAgICAgICAgICAgcmVzZXQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGxvY2F0aW9uOiBuZXh0TG9jYXRpb24sXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgLy8gU2VuZCB0aGUgc2FtZSBuYXZpZ2F0aW9uIHRocm91Z2hcbiAgICAgICAgICBuYXZpZ2F0ZSh0bywgb3B0cyk7XG4gICAgICAgIH0sXG4gICAgICAgIHJlc2V0KCkge1xuICAgICAgICAgIGRlbGV0ZUJsb2NrZXIoYmxvY2tlcktleSEpO1xuICAgICAgICAgIHVwZGF0ZVN0YXRlKHsgYmxvY2tlcnM6IG5ldyBNYXAoc3RhdGUuYmxvY2tlcnMpIH0pO1xuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgcmV0dXJuIGF3YWl0IHN0YXJ0TmF2aWdhdGlvbihoaXN0b3J5QWN0aW9uLCBuZXh0TG9jYXRpb24sIHtcbiAgICAgIHN1Ym1pc3Npb24sXG4gICAgICAvLyBTZW5kIHRocm91Z2ggdGhlIGZvcm1EYXRhIHNlcmlhbGl6YXRpb24gZXJyb3IgaWYgd2UgaGF2ZSBvbmUgc28gd2UgY2FuXG4gICAgICAvLyByZW5kZXIgYXQgdGhlIHJpZ2h0IGVycm9yIGJvdW5kYXJ5IGFmdGVyIHdlIG1hdGNoIHJvdXRlc1xuICAgICAgcGVuZGluZ0Vycm9yOiBlcnJvcixcbiAgICAgIHByZXZlbnRTY3JvbGxSZXNldCxcbiAgICAgIHJlcGxhY2U6IG9wdHMgJiYgb3B0cy5yZXBsYWNlLFxuICAgIH0pO1xuICB9XG5cbiAgLy8gUmV2YWxpZGF0ZSBhbGwgY3VycmVudCBsb2FkZXJzLiAgSWYgYSBuYXZpZ2F0aW9uIGlzIGluIHByb2dyZXNzIG9yIGlmIHRoaXNcbiAgLy8gaXMgaW50ZXJydXB0ZWQgYnkgYSBuYXZpZ2F0aW9uLCBhbGxvdyB0aGlzIHRvIFwic3VjY2VlZFwiIGJ5IGNhbGxpbmcgYWxsXG4gIC8vIGxvYWRlcnMgZHVyaW5nIHRoZSBuZXh0IGxvYWRlciByb3VuZFxuICBmdW5jdGlvbiByZXZhbGlkYXRlKCkge1xuICAgIGludGVycnVwdEFjdGl2ZUxvYWRzKCk7XG4gICAgdXBkYXRlU3RhdGUoeyByZXZhbGlkYXRpb246IFwibG9hZGluZ1wiIH0pO1xuXG4gICAgLy8gSWYgd2UncmUgY3VycmVudGx5IHN1Ym1pdHRpbmcgYW4gYWN0aW9uLCB3ZSBkb24ndCBuZWVkIHRvIHN0YXJ0IGEgbmV3XG4gICAgLy8gbmF2aWdhdGlvbiwgd2UnbGwganVzdCBsZXQgdGhlIGZvbGxvdyB1cCBsb2FkZXIgZXhlY3V0aW9uIGNhbGwgYWxsIGxvYWRlcnNcbiAgICBpZiAoc3RhdGUubmF2aWdhdGlvbi5zdGF0ZSA9PT0gXCJzdWJtaXR0aW5nXCIpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBJZiB3ZSdyZSBjdXJyZW50bHkgaW4gYW4gaWRsZSBzdGF0ZSwgc3RhcnQgYSBuZXcgbmF2aWdhdGlvbiBmb3IgdGhlIGN1cnJlbnRcbiAgICAvLyBhY3Rpb24vbG9jYXRpb24gYW5kIG1hcmsgaXQgYXMgdW5pbnRlcnJ1cHRlZCwgd2hpY2ggd2lsbCBza2lwIHRoZSBoaXN0b3J5XG4gICAgLy8gdXBkYXRlIGluIGNvbXBsZXRlTmF2aWdhdGlvblxuICAgIGlmIChzdGF0ZS5uYXZpZ2F0aW9uLnN0YXRlID09PSBcImlkbGVcIikge1xuICAgICAgc3RhcnROYXZpZ2F0aW9uKHN0YXRlLmhpc3RvcnlBY3Rpb24sIHN0YXRlLmxvY2F0aW9uLCB7XG4gICAgICAgIHN0YXJ0VW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbjogdHJ1ZSxcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIE90aGVyd2lzZSwgaWYgd2UncmUgY3VycmVudGx5IGluIGEgbG9hZGluZyBzdGF0ZSwganVzdCBzdGFydCBhIG5ld1xuICAgIC8vIG5hdmlnYXRpb24gdG8gdGhlIG5hdmlnYXRpb24ubG9jYXRpb24gYnV0IGRvIG5vdCB0cmlnZ2VyIGFuIHVuaW50ZXJydXB0ZWRcbiAgICAvLyByZXZhbGlkYXRpb24gc28gdGhhdCBoaXN0b3J5IGNvcnJlY3RseSB1cGRhdGVzIG9uY2UgdGhlIG5hdmlnYXRpb24gY29tcGxldGVzXG4gICAgc3RhcnROYXZpZ2F0aW9uKFxuICAgICAgcGVuZGluZ0FjdGlvbiB8fCBzdGF0ZS5oaXN0b3J5QWN0aW9uLFxuICAgICAgc3RhdGUubmF2aWdhdGlvbi5sb2NhdGlvbixcbiAgICAgIHsgb3ZlcnJpZGVOYXZpZ2F0aW9uOiBzdGF0ZS5uYXZpZ2F0aW9uIH1cbiAgICApO1xuICB9XG5cbiAgLy8gU3RhcnQgYSBuYXZpZ2F0aW9uIHRvIHRoZSBnaXZlbiBhY3Rpb24vbG9jYXRpb24uICBDYW4gb3B0aW9uYWxseSBwcm92aWRlIGFcbiAgLy8gb3ZlcnJpZGVOYXZpZ2F0aW9uIHdoaWNoIHdpbGwgb3ZlcnJpZGUgdGhlIG5vcm1hbExvYWQgaW4gdGhlIGNhc2Ugb2YgYSByZWRpcmVjdFxuICAvLyBuYXZpZ2F0aW9uXG4gIGFzeW5jIGZ1bmN0aW9uIHN0YXJ0TmF2aWdhdGlvbihcbiAgICBoaXN0b3J5QWN0aW9uOiBIaXN0b3J5QWN0aW9uLFxuICAgIGxvY2F0aW9uOiBMb2NhdGlvbixcbiAgICBvcHRzPzoge1xuICAgICAgc3VibWlzc2lvbj86IFN1Ym1pc3Npb247XG4gICAgICBvdmVycmlkZU5hdmlnYXRpb24/OiBOYXZpZ2F0aW9uO1xuICAgICAgcGVuZGluZ0Vycm9yPzogRXJyb3JSZXNwb25zZTtcbiAgICAgIHN0YXJ0VW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbj86IGJvb2xlYW47XG4gICAgICBwcmV2ZW50U2Nyb2xsUmVzZXQ/OiBib29sZWFuO1xuICAgICAgcmVwbGFjZT86IGJvb2xlYW47XG4gICAgfVxuICApOiBQcm9taXNlPHZvaWQ+IHtcbiAgICAvLyBBYm9ydCBhbnkgaW4tcHJvZ3Jlc3MgbmF2aWdhdGlvbnMgYW5kIHN0YXJ0IGEgbmV3IG9uZS4gVW5zZXQgYW55IG9uZ29pbmdcbiAgICAvLyB1bmludGVycnVwdGVkIHJldmFsaWRhdGlvbnMgdW5sZXNzIHRvbGQgb3RoZXJ3aXNlLCBzaW5jZSB3ZSB3YW50IHRoaXNcbiAgICAvLyBuZXcgbmF2aWdhdGlvbiB0byB1cGRhdGUgaGlzdG9yeSBub3JtYWxseVxuICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciAmJiBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIuYWJvcnQoKTtcbiAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgPSBudWxsO1xuICAgIHBlbmRpbmdBY3Rpb24gPSBoaXN0b3J5QWN0aW9uO1xuICAgIGlzVW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbiA9XG4gICAgICAob3B0cyAmJiBvcHRzLnN0YXJ0VW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbikgPT09IHRydWU7XG5cbiAgICAvLyBTYXZlIHRoZSBjdXJyZW50IHNjcm9sbCBwb3NpdGlvbiBldmVyeSB0aW1lIHdlIHN0YXJ0IGEgbmV3IG5hdmlnYXRpb24sXG4gICAgLy8gYW5kIHRyYWNrIHdoZXRoZXIgd2Ugc2hvdWxkIHJlc2V0IHNjcm9sbCBvbiBjb21wbGV0aW9uXG4gICAgc2F2ZVNjcm9sbFBvc2l0aW9uKHN0YXRlLmxvY2F0aW9uLCBzdGF0ZS5tYXRjaGVzKTtcbiAgICBwZW5kaW5nUHJldmVudFNjcm9sbFJlc2V0ID0gKG9wdHMgJiYgb3B0cy5wcmV2ZW50U2Nyb2xsUmVzZXQpID09PSB0cnVlO1xuXG4gICAgbGV0IGxvYWRpbmdOYXZpZ2F0aW9uID0gb3B0cyAmJiBvcHRzLm92ZXJyaWRlTmF2aWdhdGlvbjtcbiAgICBsZXQgbWF0Y2hlcyA9IG1hdGNoUm91dGVzKGRhdGFSb3V0ZXMsIGxvY2F0aW9uLCBpbml0LmJhc2VuYW1lKTtcblxuICAgIC8vIFNob3J0IGNpcmN1aXQgd2l0aCBhIDQwNCBvbiB0aGUgcm9vdCBlcnJvciBib3VuZGFyeSBpZiB3ZSBtYXRjaCBub3RoaW5nXG4gICAgaWYgKCFtYXRjaGVzKSB7XG4gICAgICBsZXQgZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwgeyBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUgfSk7XG4gICAgICBsZXQgeyBtYXRjaGVzOiBub3RGb3VuZE1hdGNoZXMsIHJvdXRlIH0gPVxuICAgICAgICBnZXRTaG9ydENpcmN1aXRNYXRjaGVzKGRhdGFSb3V0ZXMpO1xuICAgICAgLy8gQ2FuY2VsIGFsbCBwZW5kaW5nIGRlZmVycmVkIG9uIDQwNHMgc2luY2Ugd2UgZG9uJ3Qga2VlcCBhbnkgcm91dGVzXG4gICAgICBjYW5jZWxBY3RpdmVEZWZlcnJlZHMoKTtcbiAgICAgIGNvbXBsZXRlTmF2aWdhdGlvbihsb2NhdGlvbiwge1xuICAgICAgICBtYXRjaGVzOiBub3RGb3VuZE1hdGNoZXMsXG4gICAgICAgIGxvYWRlckRhdGE6IHt9LFxuICAgICAgICBlcnJvcnM6IHtcbiAgICAgICAgICBbcm91dGUuaWRdOiBlcnJvcixcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFNob3J0IGNpcmN1aXQgaWYgaXQncyBvbmx5IGEgaGFzaCBjaGFuZ2UgYW5kIG5vdCBhIG11dGF0aW9uIHN1Ym1pc3Npb25cbiAgICAvLyBGb3IgZXhhbXBsZSwgb24gL3BhZ2UjaGFzaCBhbmQgc3VibWl0IGEgPEZvcm0gbWV0aG9kPVwicG9zdFwiPiB3aGljaCB3aWxsXG4gICAgLy8gZGVmYXVsdCB0byBhIG5hdmlnYXRpb24gdG8gL3BhZ2VcbiAgICBpZiAoXG4gICAgICBpc0hhc2hDaGFuZ2VPbmx5KHN0YXRlLmxvY2F0aW9uLCBsb2NhdGlvbikgJiZcbiAgICAgICEob3B0cyAmJiBvcHRzLnN1Ym1pc3Npb24gJiYgaXNNdXRhdGlvbk1ldGhvZChvcHRzLnN1Ym1pc3Npb24uZm9ybU1ldGhvZCkpXG4gICAgKSB7XG4gICAgICBjb21wbGV0ZU5hdmlnYXRpb24obG9jYXRpb24sIHsgbWF0Y2hlcyB9KTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBDcmVhdGUgYSBjb250cm9sbGVyL1JlcXVlc3QgZm9yIHRoaXMgbmF2aWdhdGlvblxuICAgIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciA9IG5ldyBBYm9ydENvbnRyb2xsZXIoKTtcbiAgICBsZXQgcmVxdWVzdCA9IGNyZWF0ZUNsaWVudFNpZGVSZXF1ZXN0KFxuICAgICAgaW5pdC5oaXN0b3J5LFxuICAgICAgbG9jYXRpb24sXG4gICAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIuc2lnbmFsLFxuICAgICAgb3B0cyAmJiBvcHRzLnN1Ym1pc3Npb25cbiAgICApO1xuICAgIGxldCBwZW5kaW5nQWN0aW9uRGF0YTogUm91dGVEYXRhIHwgdW5kZWZpbmVkO1xuICAgIGxldCBwZW5kaW5nRXJyb3I6IFJvdXRlRGF0YSB8IHVuZGVmaW5lZDtcblxuICAgIGlmIChvcHRzICYmIG9wdHMucGVuZGluZ0Vycm9yKSB7XG4gICAgICAvLyBJZiB3ZSBoYXZlIGEgcGVuZGluZ0Vycm9yLCBpdCBtZWFucyB0aGUgdXNlciBhdHRlbXB0ZWQgYSBHRVQgc3VibWlzc2lvblxuICAgICAgLy8gd2l0aCBiaW5hcnkgRm9ybURhdGEgc28gYXNzaWduIGhlcmUgYW5kIHNraXAgdG8gaGFuZGxlTG9hZGVycy4gIFRoYXRcbiAgICAgIC8vIHdheSB3ZSBoYW5kbGUgY2FsbGluZyBsb2FkZXJzIGFib3ZlIHRoZSBib3VuZGFyeSBldGMuICBJdCdzIG5vdCByZWFsbHlcbiAgICAgIC8vIGRpZmZlcmVudCBmcm9tIGFuIGFjdGlvbkVycm9yIGluIHRoYXQgc2Vuc2UuXG4gICAgICBwZW5kaW5nRXJyb3IgPSB7XG4gICAgICAgIFtmaW5kTmVhcmVzdEJvdW5kYXJ5KG1hdGNoZXMpLnJvdXRlLmlkXTogb3B0cy5wZW5kaW5nRXJyb3IsXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICBvcHRzICYmXG4gICAgICBvcHRzLnN1Ym1pc3Npb24gJiZcbiAgICAgIGlzTXV0YXRpb25NZXRob2Qob3B0cy5zdWJtaXNzaW9uLmZvcm1NZXRob2QpXG4gICAgKSB7XG4gICAgICAvLyBDYWxsIGFjdGlvbiBpZiB3ZSByZWNlaXZlZCBhbiBhY3Rpb24gc3VibWlzc2lvblxuICAgICAgbGV0IGFjdGlvbk91dHB1dCA9IGF3YWl0IGhhbmRsZUFjdGlvbihcbiAgICAgICAgcmVxdWVzdCxcbiAgICAgICAgbG9jYXRpb24sXG4gICAgICAgIG9wdHMuc3VibWlzc2lvbixcbiAgICAgICAgbWF0Y2hlcyxcbiAgICAgICAgeyByZXBsYWNlOiBvcHRzLnJlcGxhY2UgfVxuICAgICAgKTtcblxuICAgICAgaWYgKGFjdGlvbk91dHB1dC5zaG9ydENpcmN1aXRlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHBlbmRpbmdBY3Rpb25EYXRhID0gYWN0aW9uT3V0cHV0LnBlbmRpbmdBY3Rpb25EYXRhO1xuICAgICAgcGVuZGluZ0Vycm9yID0gYWN0aW9uT3V0cHV0LnBlbmRpbmdBY3Rpb25FcnJvcjtcblxuICAgICAgbGV0IG5hdmlnYXRpb246IE5hdmlnYXRpb25TdGF0ZXNbXCJMb2FkaW5nXCJdID0ge1xuICAgICAgICBzdGF0ZTogXCJsb2FkaW5nXCIsXG4gICAgICAgIGxvY2F0aW9uLFxuICAgICAgICAuLi5vcHRzLnN1Ym1pc3Npb24sXG4gICAgICB9O1xuICAgICAgbG9hZGluZ05hdmlnYXRpb24gPSBuYXZpZ2F0aW9uO1xuXG4gICAgICAvLyBDcmVhdGUgYSBHRVQgcmVxdWVzdCBmb3IgdGhlIGxvYWRlcnNcbiAgICAgIHJlcXVlc3QgPSBuZXcgUmVxdWVzdChyZXF1ZXN0LnVybCwgeyBzaWduYWw6IHJlcXVlc3Quc2lnbmFsIH0pO1xuICAgIH1cblxuICAgIC8vIENhbGwgbG9hZGVyc1xuICAgIGxldCB7IHNob3J0Q2lyY3VpdGVkLCBsb2FkZXJEYXRhLCBlcnJvcnMgfSA9IGF3YWl0IGhhbmRsZUxvYWRlcnMoXG4gICAgICByZXF1ZXN0LFxuICAgICAgbG9jYXRpb24sXG4gICAgICBtYXRjaGVzLFxuICAgICAgbG9hZGluZ05hdmlnYXRpb24sXG4gICAgICBvcHRzICYmIG9wdHMuc3VibWlzc2lvbixcbiAgICAgIG9wdHMgJiYgb3B0cy5yZXBsYWNlLFxuICAgICAgcGVuZGluZ0FjdGlvbkRhdGEsXG4gICAgICBwZW5kaW5nRXJyb3JcbiAgICApO1xuXG4gICAgaWYgKHNob3J0Q2lyY3VpdGVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gQ2xlYW4gdXAgbm93IHRoYXQgdGhlIGFjdGlvbi9sb2FkZXJzIGhhdmUgY29tcGxldGVkLiAgRG9uJ3QgY2xlYW4gdXAgaWZcbiAgICAvLyB3ZSBzaG9ydCBjaXJjdWl0ZWQgYmVjYXVzZSBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgd2lsbCBoYXZlIGFscmVhZHlcbiAgICAvLyBiZWVuIGFzc2lnbmVkIHRvIGEgbmV3IGNvbnRyb2xsZXIgZm9yIHRoZSBuZXh0IG5hdmlnYXRpb25cbiAgICBwZW5kaW5nTmF2aWdhdGlvbkNvbnRyb2xsZXIgPSBudWxsO1xuXG4gICAgY29tcGxldGVOYXZpZ2F0aW9uKGxvY2F0aW9uLCB7XG4gICAgICBtYXRjaGVzLFxuICAgICAgLi4uKHBlbmRpbmdBY3Rpb25EYXRhID8geyBhY3Rpb25EYXRhOiBwZW5kaW5nQWN0aW9uRGF0YSB9IDoge30pLFxuICAgICAgbG9hZGVyRGF0YSxcbiAgICAgIGVycm9ycyxcbiAgICB9KTtcbiAgfVxuXG4gIC8vIENhbGwgdGhlIGFjdGlvbiBtYXRjaGVkIGJ5IHRoZSBsZWFmIHJvdXRlIGZvciB0aGlzIG5hdmlnYXRpb24gYW5kIGhhbmRsZVxuICAvLyByZWRpcmVjdHMvZXJyb3JzXG4gIGFzeW5jIGZ1bmN0aW9uIGhhbmRsZUFjdGlvbihcbiAgICByZXF1ZXN0OiBSZXF1ZXN0LFxuICAgIGxvY2F0aW9uOiBMb2NhdGlvbixcbiAgICBzdWJtaXNzaW9uOiBTdWJtaXNzaW9uLFxuICAgIG1hdGNoZXM6IEFnbm9zdGljRGF0YVJvdXRlTWF0Y2hbXSxcbiAgICBvcHRzPzogeyByZXBsYWNlPzogYm9vbGVhbiB9XG4gICk6IFByb21pc2U8SGFuZGxlQWN0aW9uUmVzdWx0PiB7XG4gICAgaW50ZXJydXB0QWN0aXZlTG9hZHMoKTtcblxuICAgIC8vIFB1dCB1cyBpbiBhIHN1Ym1pdHRpbmcgc3RhdGVcbiAgICBsZXQgbmF2aWdhdGlvbjogTmF2aWdhdGlvblN0YXRlc1tcIlN1Ym1pdHRpbmdcIl0gPSB7XG4gICAgICBzdGF0ZTogXCJzdWJtaXR0aW5nXCIsXG4gICAgICBsb2NhdGlvbixcbiAgICAgIC4uLnN1Ym1pc3Npb24sXG4gICAgfTtcbiAgICB1cGRhdGVTdGF0ZSh7IG5hdmlnYXRpb24gfSk7XG5cbiAgICAvLyBDYWxsIG91ciBhY3Rpb24gYW5kIGdldCB0aGUgcmVzdWx0XG4gICAgbGV0IHJlc3VsdDogRGF0YVJlc3VsdDtcbiAgICBsZXQgYWN0aW9uTWF0Y2ggPSBnZXRUYXJnZXRNYXRjaChtYXRjaGVzLCBsb2NhdGlvbik7XG5cbiAgICBpZiAoIWFjdGlvbk1hdGNoLnJvdXRlLmFjdGlvbikge1xuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLmVycm9yLFxuICAgICAgICBlcnJvcjogZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDUsIHtcbiAgICAgICAgICBtZXRob2Q6IHJlcXVlc3QubWV0aG9kLFxuICAgICAgICAgIHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgICByb3V0ZUlkOiBhY3Rpb25NYXRjaC5yb3V0ZS5pZCxcbiAgICAgICAgfSksXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSBhd2FpdCBjYWxsTG9hZGVyT3JBY3Rpb24oXG4gICAgICAgIFwiYWN0aW9uXCIsXG4gICAgICAgIHJlcXVlc3QsXG4gICAgICAgIGFjdGlvbk1hdGNoLFxuICAgICAgICBtYXRjaGVzLFxuICAgICAgICByb3V0ZXIuYmFzZW5hbWVcbiAgICAgICk7XG5cbiAgICAgIGlmIChyZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICAgIHJldHVybiB7IHNob3J0Q2lyY3VpdGVkOiB0cnVlIH07XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGlzUmVkaXJlY3RSZXN1bHQocmVzdWx0KSkge1xuICAgICAgbGV0IHJlcGxhY2U6IGJvb2xlYW47XG4gICAgICBpZiAob3B0cyAmJiBvcHRzLnJlcGxhY2UgIT0gbnVsbCkge1xuICAgICAgICByZXBsYWNlID0gb3B0cy5yZXBsYWNlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gSWYgdGhlIHVzZXIgZGlkbid0IGV4cGxpY2l0eSBpbmRpY2F0ZSByZXBsYWNlIGJlaGF2aW9yLCByZXBsYWNlIGlmXG4gICAgICAgIC8vIHdlIHJlZGlyZWN0ZWQgdG8gdGhlIGV4YWN0IHNhbWUgbG9jYXRpb24gd2UncmUgY3VycmVudGx5IGF0IHRvIGF2b2lkXG4gICAgICAgIC8vIGRvdWJsZSBiYWNrLWJ1dHRvbnNcbiAgICAgICAgcmVwbGFjZSA9XG4gICAgICAgICAgcmVzdWx0LmxvY2F0aW9uID09PSBzdGF0ZS5sb2NhdGlvbi5wYXRobmFtZSArIHN0YXRlLmxvY2F0aW9uLnNlYXJjaDtcbiAgICAgIH1cbiAgICAgIGF3YWl0IHN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uKHN0YXRlLCByZXN1bHQsIHsgc3VibWlzc2lvbiwgcmVwbGFjZSB9KTtcbiAgICAgIHJldHVybiB7IHNob3J0Q2lyY3VpdGVkOiB0cnVlIH07XG4gICAgfVxuXG4gICAgaWYgKGlzRXJyb3JSZXN1bHQocmVzdWx0KSkge1xuICAgICAgLy8gU3RvcmUgb2ZmIHRoZSBwZW5kaW5nIGVycm9yIC0gd2UgdXNlIGl0IHRvIGRldGVybWluZSB3aGljaCBsb2FkZXJzXG4gICAgICAvLyB0byBjYWxsIGFuZCB3aWxsIGNvbW1pdCBpdCB3aGVuIHdlIGNvbXBsZXRlIHRoZSBuYXZpZ2F0aW9uXG4gICAgICBsZXQgYm91bmRhcnlNYXRjaCA9IGZpbmROZWFyZXN0Qm91bmRhcnkobWF0Y2hlcywgYWN0aW9uTWF0Y2gucm91dGUuaWQpO1xuXG4gICAgICAvLyBCeSBkZWZhdWx0LCBhbGwgc3VibWlzc2lvbnMgYXJlIFJFUExBQ0UgbmF2aWdhdGlvbnMsIGJ1dCBpZiB0aGVcbiAgICAgIC8vIGFjdGlvbiB0aHJldyBhbiBlcnJvciB0aGF0J2xsIGJlIHJlbmRlcmVkIGluIGFuIGVycm9yRWxlbWVudCwgd2UgZmFsbFxuICAgICAgLy8gYmFjayB0byBQVVNIIHNvIHRoYXQgdGhlIHVzZXIgY2FuIHVzZSB0aGUgYmFjayBidXR0b24gdG8gZ2V0IGJhY2sgdG9cbiAgICAgIC8vIHRoZSBwcmUtc3VibWlzc2lvbiBmb3JtIGxvY2F0aW9uIHRvIHRyeSBhZ2FpblxuICAgICAgaWYgKChvcHRzICYmIG9wdHMucmVwbGFjZSkgIT09IHRydWUpIHtcbiAgICAgICAgcGVuZGluZ0FjdGlvbiA9IEhpc3RvcnlBY3Rpb24uUHVzaDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLy8gU2VuZCBiYWNrIGFuIGVtcHR5IG9iamVjdCB3ZSBjYW4gdXNlIHRvIGNsZWFyIG91dCBhbnkgcHJpb3IgYWN0aW9uRGF0YVxuICAgICAgICBwZW5kaW5nQWN0aW9uRGF0YToge30sXG4gICAgICAgIHBlbmRpbmdBY3Rpb25FcnJvcjogeyBbYm91bmRhcnlNYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5lcnJvciB9LFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICB0aHJvdyBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwMCwgeyB0eXBlOiBcImRlZmVyLWFjdGlvblwiIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBwZW5kaW5nQWN0aW9uRGF0YTogeyBbYWN0aW9uTWF0Y2gucm91dGUuaWRdOiByZXN1bHQuZGF0YSB9LFxuICAgIH07XG4gIH1cblxuICAvLyBDYWxsIGFsbCBhcHBsaWNhYmxlIGxvYWRlcnMgZm9yIHRoZSBnaXZlbiBtYXRjaGVzLCBoYW5kbGluZyByZWRpcmVjdHMsXG4gIC8vIGVycm9ycywgZXRjLlxuICBhc3luYyBmdW5jdGlvbiBoYW5kbGVMb2FkZXJzKFxuICAgIHJlcXVlc3Q6IFJlcXVlc3QsXG4gICAgbG9jYXRpb246IExvY2F0aW9uLFxuICAgIG1hdGNoZXM6IEFnbm9zdGljRGF0YVJvdXRlTWF0Y2hbXSxcbiAgICBvdmVycmlkZU5hdmlnYXRpb24/OiBOYXZpZ2F0aW9uLFxuICAgIHN1Ym1pc3Npb24/OiBTdWJtaXNzaW9uLFxuICAgIHJlcGxhY2U/OiBib29sZWFuLFxuICAgIHBlbmRpbmdBY3Rpb25EYXRhPzogUm91dGVEYXRhLFxuICAgIHBlbmRpbmdFcnJvcj86IFJvdXRlRGF0YVxuICApOiBQcm9taXNlPEhhbmRsZUxvYWRlcnNSZXN1bHQ+IHtcbiAgICAvLyBGaWd1cmUgb3V0IHRoZSByaWdodCBuYXZpZ2F0aW9uIHdlIHdhbnQgdG8gdXNlIGZvciBkYXRhIGxvYWRpbmdcbiAgICBsZXQgbG9hZGluZ05hdmlnYXRpb24gPSBvdmVycmlkZU5hdmlnYXRpb247XG4gICAgaWYgKCFsb2FkaW5nTmF2aWdhdGlvbikge1xuICAgICAgbGV0IG5hdmlnYXRpb246IE5hdmlnYXRpb25TdGF0ZXNbXCJMb2FkaW5nXCJdID0ge1xuICAgICAgICBzdGF0ZTogXCJsb2FkaW5nXCIsXG4gICAgICAgIGxvY2F0aW9uLFxuICAgICAgICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gICAgICAgIGZvcm1BY3Rpb246IHVuZGVmaW5lZCxcbiAgICAgICAgZm9ybUVuY1R5cGU6IHVuZGVmaW5lZCxcbiAgICAgICAgZm9ybURhdGE6IHVuZGVmaW5lZCxcbiAgICAgICAgLi4uc3VibWlzc2lvbixcbiAgICAgIH07XG4gICAgICBsb2FkaW5nTmF2aWdhdGlvbiA9IG5hdmlnYXRpb247XG4gICAgfVxuXG4gICAgLy8gSWYgdGhpcyB3YXMgYSByZWRpcmVjdCBmcm9tIGFuIGFjdGlvbiB3ZSBkb24ndCBoYXZlIGEgXCJzdWJtaXNzaW9uXCIgYnV0XG4gICAgLy8gd2UgaGF2ZSBpdCBvbiB0aGUgbG9hZGluZyBuYXZpZ2F0aW9uIHNvIHVzZSB0aGF0IGlmIGF2YWlsYWJsZVxuICAgIGxldCBhY3RpdmVTdWJtaXNzaW9uID0gc3VibWlzc2lvblxuICAgICAgPyBzdWJtaXNzaW9uXG4gICAgICA6IGxvYWRpbmdOYXZpZ2F0aW9uLmZvcm1NZXRob2QgJiZcbiAgICAgICAgbG9hZGluZ05hdmlnYXRpb24uZm9ybUFjdGlvbiAmJlxuICAgICAgICBsb2FkaW5nTmF2aWdhdGlvbi5mb3JtRGF0YSAmJlxuICAgICAgICBsb2FkaW5nTmF2aWdhdGlvbi5mb3JtRW5jVHlwZVxuICAgICAgPyB7XG4gICAgICAgICAgZm9ybU1ldGhvZDogbG9hZGluZ05hdmlnYXRpb24uZm9ybU1ldGhvZCxcbiAgICAgICAgICBmb3JtQWN0aW9uOiBsb2FkaW5nTmF2aWdhdGlvbi5mb3JtQWN0aW9uLFxuICAgICAgICAgIGZvcm1EYXRhOiBsb2FkaW5nTmF2aWdhdGlvbi5mb3JtRGF0YSxcbiAgICAgICAgICBmb3JtRW5jVHlwZTogbG9hZGluZ05hdmlnYXRpb24uZm9ybUVuY1R5cGUsXG4gICAgICAgIH1cbiAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgbGV0IFttYXRjaGVzVG9Mb2FkLCByZXZhbGlkYXRpbmdGZXRjaGVyc10gPSBnZXRNYXRjaGVzVG9Mb2FkKFxuICAgICAgaW5pdC5oaXN0b3J5LFxuICAgICAgc3RhdGUsXG4gICAgICBtYXRjaGVzLFxuICAgICAgYWN0aXZlU3VibWlzc2lvbixcbiAgICAgIGxvY2F0aW9uLFxuICAgICAgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCxcbiAgICAgIGNhbmNlbGxlZERlZmVycmVkUm91dGVzLFxuICAgICAgY2FuY2VsbGVkRmV0Y2hlckxvYWRzLFxuICAgICAgcGVuZGluZ0FjdGlvbkRhdGEsXG4gICAgICBwZW5kaW5nRXJyb3IsXG4gICAgICBmZXRjaExvYWRNYXRjaGVzXG4gICAgKTtcblxuICAgIC8vIENhbmNlbCBwZW5kaW5nIGRlZmVycmVkcyBmb3Igbm8tbG9uZ2VyLW1hdGNoZWQgcm91dGVzIG9yIHJvdXRlcyB3ZSdyZVxuICAgIC8vIGFib3V0IHRvIHJlbG9hZC4gIE5vdGUgdGhhdCBpZiB0aGlzIGlzIGFuIGFjdGlvbiByZWxvYWQgd2Ugd291bGQgaGF2ZVxuICAgIC8vIGFscmVhZHkgY2FuY2VsbGVkIGFsbCBwZW5kaW5nIGRlZmVycmVkcyBzbyB0aGlzIHdvdWxkIGJlIGEgbm8tb3BcbiAgICBjYW5jZWxBY3RpdmVEZWZlcnJlZHMoXG4gICAgICAocm91dGVJZCkgPT5cbiAgICAgICAgIShtYXRjaGVzICYmIG1hdGNoZXMuc29tZSgobSkgPT4gbS5yb3V0ZS5pZCA9PT0gcm91dGVJZCkpIHx8XG4gICAgICAgIChtYXRjaGVzVG9Mb2FkICYmIG1hdGNoZXNUb0xvYWQuc29tZSgobSkgPT4gbS5yb3V0ZS5pZCA9PT0gcm91dGVJZCkpXG4gICAgKTtcblxuICAgIC8vIFNob3J0IGNpcmN1aXQgaWYgd2UgaGF2ZSBubyBsb2FkZXJzIHRvIHJ1blxuICAgIGlmIChtYXRjaGVzVG9Mb2FkLmxlbmd0aCA9PT0gMCAmJiByZXZhbGlkYXRpbmdGZXRjaGVycy5sZW5ndGggPT09IDApIHtcbiAgICAgIGNvbXBsZXRlTmF2aWdhdGlvbihsb2NhdGlvbiwge1xuICAgICAgICBtYXRjaGVzLFxuICAgICAgICBsb2FkZXJEYXRhOiB7fSxcbiAgICAgICAgLy8gQ29tbWl0IHBlbmRpbmcgZXJyb3IgaWYgd2UncmUgc2hvcnQgY2lyY3VpdGluZ1xuICAgICAgICBlcnJvcnM6IHBlbmRpbmdFcnJvciB8fCBudWxsLFxuICAgICAgICAuLi4ocGVuZGluZ0FjdGlvbkRhdGEgPyB7IGFjdGlvbkRhdGE6IHBlbmRpbmdBY3Rpb25EYXRhIH0gOiB7fSksXG4gICAgICB9KTtcbiAgICAgIHJldHVybiB7IHNob3J0Q2lyY3VpdGVkOiB0cnVlIH07XG4gICAgfVxuXG4gICAgLy8gSWYgdGhpcyBpcyBhbiB1bmludGVycnVwdGVkIHJldmFsaWRhdGlvbiwgd2UgcmVtYWluIGluIG91ciBjdXJyZW50IGlkbGVcbiAgICAvLyBzdGF0ZS4gIElmIG5vdCwgd2UgbmVlZCB0byBzd2l0Y2ggdG8gb3VyIGxvYWRpbmcgc3RhdGUgYW5kIGxvYWQgZGF0YSxcbiAgICAvLyBwcmVzZXJ2aW5nIGFueSBuZXcgYWN0aW9uIGRhdGEgb3IgZXhpc3RpbmcgYWN0aW9uIGRhdGEgKGluIHRoZSBjYXNlIG9mXG4gICAgLy8gYSByZXZhbGlkYXRpb24gaW50ZXJydXB0aW5nIGFuIGFjdGlvblJlbG9hZClcbiAgICBpZiAoIWlzVW5pbnRlcnJ1cHRlZFJldmFsaWRhdGlvbikge1xuICAgICAgcmV2YWxpZGF0aW5nRmV0Y2hlcnMuZm9yRWFjaCgocmYpID0+IHtcbiAgICAgICAgbGV0IGZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQocmYua2V5KTtcbiAgICAgICAgbGV0IHJldmFsaWRhdGluZ0ZldGNoZXI6IEZldGNoZXJTdGF0ZXNbXCJMb2FkaW5nXCJdID0ge1xuICAgICAgICAgIHN0YXRlOiBcImxvYWRpbmdcIixcbiAgICAgICAgICBkYXRhOiBmZXRjaGVyICYmIGZldGNoZXIuZGF0YSxcbiAgICAgICAgICBmb3JtTWV0aG9kOiB1bmRlZmluZWQsXG4gICAgICAgICAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICAgICAgICAgIGZvcm1FbmNUeXBlOiB1bmRlZmluZWQsXG4gICAgICAgICAgZm9ybURhdGE6IHVuZGVmaW5lZCxcbiAgICAgICAgICBcIiBfaGFzRmV0Y2hlckRvbmVBbnl0aGluZyBcIjogdHJ1ZSxcbiAgICAgICAgfTtcbiAgICAgICAgc3RhdGUuZmV0Y2hlcnMuc2V0KHJmLmtleSwgcmV2YWxpZGF0aW5nRmV0Y2hlcik7XG4gICAgICB9KTtcbiAgICAgIGxldCBhY3Rpb25EYXRhID0gcGVuZGluZ0FjdGlvbkRhdGEgfHwgc3RhdGUuYWN0aW9uRGF0YTtcbiAgICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgICAgbmF2aWdhdGlvbjogbG9hZGluZ05hdmlnYXRpb24sXG4gICAgICAgIC4uLihhY3Rpb25EYXRhXG4gICAgICAgICAgPyBPYmplY3Qua2V5cyhhY3Rpb25EYXRhKS5sZW5ndGggPT09IDBcbiAgICAgICAgICAgID8geyBhY3Rpb25EYXRhOiBudWxsIH1cbiAgICAgICAgICAgIDogeyBhY3Rpb25EYXRhIH1cbiAgICAgICAgICA6IHt9KSxcbiAgICAgICAgLi4uKHJldmFsaWRhdGluZ0ZldGNoZXJzLmxlbmd0aCA+IDBcbiAgICAgICAgICA/IHsgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpIH1cbiAgICAgICAgICA6IHt9KSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHBlbmRpbmdOYXZpZ2F0aW9uTG9hZElkID0gKytpbmNyZW1lbnRpbmdMb2FkSWQ7XG4gICAgcmV2YWxpZGF0aW5nRmV0Y2hlcnMuZm9yRWFjaCgocmYpID0+XG4gICAgICBmZXRjaENvbnRyb2xsZXJzLnNldChyZi5rZXksIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlciEpXG4gICAgKTtcblxuICAgIGxldCB7IHJlc3VsdHMsIGxvYWRlclJlc3VsdHMsIGZldGNoZXJSZXN1bHRzIH0gPVxuICAgICAgYXdhaXQgY2FsbExvYWRlcnNBbmRNYXliZVJlc29sdmVEYXRhKFxuICAgICAgICBzdGF0ZS5tYXRjaGVzLFxuICAgICAgICBtYXRjaGVzLFxuICAgICAgICBtYXRjaGVzVG9Mb2FkLFxuICAgICAgICByZXZhbGlkYXRpbmdGZXRjaGVycyxcbiAgICAgICAgcmVxdWVzdFxuICAgICAgKTtcblxuICAgIGlmIChyZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICByZXR1cm4geyBzaG9ydENpcmN1aXRlZDogdHJ1ZSB9O1xuICAgIH1cblxuICAgIC8vIENsZWFuIHVwIF9hZnRlcl8gbG9hZGVycyBoYXZlIGNvbXBsZXRlZC4gIERvbid0IGNsZWFuIHVwIGlmIHdlIHNob3J0XG4gICAgLy8gY2lyY3VpdGVkIGJlY2F1c2UgZmV0Y2hDb250cm9sbGVycyB3b3VsZCBoYXZlIGJlZW4gYWJvcnRlZCBhbmRcbiAgICAvLyByZWFzc2lnbmVkIHRvIG5ldyBjb250cm9sbGVycyBmb3IgdGhlIG5leHQgbmF2aWdhdGlvblxuICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLmZvckVhY2goKHJmKSA9PiBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShyZi5rZXkpKTtcblxuICAgIC8vIElmIGFueSBsb2FkZXJzIHJldHVybmVkIGEgcmVkaXJlY3QgUmVzcG9uc2UsIHN0YXJ0IGEgbmV3IFJFUExBQ0UgbmF2aWdhdGlvblxuICAgIGxldCByZWRpcmVjdCA9IGZpbmRSZWRpcmVjdChyZXN1bHRzKTtcbiAgICBpZiAocmVkaXJlY3QpIHtcbiAgICAgIGF3YWl0IHN0YXJ0UmVkaXJlY3ROYXZpZ2F0aW9uKHN0YXRlLCByZWRpcmVjdCwgeyByZXBsYWNlIH0pO1xuICAgICAgcmV0dXJuIHsgc2hvcnRDaXJjdWl0ZWQ6IHRydWUgfTtcbiAgICB9XG5cbiAgICAvLyBQcm9jZXNzIGFuZCBjb21taXQgb3V0cHV0IGZyb20gbG9hZGVyc1xuICAgIGxldCB7IGxvYWRlckRhdGEsIGVycm9ycyB9ID0gcHJvY2Vzc0xvYWRlckRhdGEoXG4gICAgICBzdGF0ZSxcbiAgICAgIG1hdGNoZXMsXG4gICAgICBtYXRjaGVzVG9Mb2FkLFxuICAgICAgbG9hZGVyUmVzdWx0cyxcbiAgICAgIHBlbmRpbmdFcnJvcixcbiAgICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLFxuICAgICAgZmV0Y2hlclJlc3VsdHMsXG4gICAgICBhY3RpdmVEZWZlcnJlZHNcbiAgICApO1xuXG4gICAgLy8gV2lyZSB1cCBzdWJzY3JpYmVycyB0byB1cGRhdGUgbG9hZGVyRGF0YSBhcyBwcm9taXNlcyBzZXR0bGVcbiAgICBhY3RpdmVEZWZlcnJlZHMuZm9yRWFjaCgoZGVmZXJyZWREYXRhLCByb3V0ZUlkKSA9PiB7XG4gICAgICBkZWZlcnJlZERhdGEuc3Vic2NyaWJlKChhYm9ydGVkKSA9PiB7XG4gICAgICAgIC8vIE5vdGU6IE5vIG5lZWQgdG8gdXBkYXRlU3RhdGUgaGVyZSBzaW5jZSB0aGUgVHJhY2tlZFByb21pc2Ugb25cbiAgICAgICAgLy8gbG9hZGVyRGF0YSBpcyBzdGFibGUgYWNyb3NzIHJlc29sdmUvcmVqZWN0XG4gICAgICAgIC8vIFJlbW92ZSB0aGlzIGluc3RhbmNlIGlmIHdlIHdlcmUgYWJvcnRlZCBvciBpZiBwcm9taXNlcyBoYXZlIHNldHRsZWRcbiAgICAgICAgaWYgKGFib3J0ZWQgfHwgZGVmZXJyZWREYXRhLmRvbmUpIHtcbiAgICAgICAgICBhY3RpdmVEZWZlcnJlZHMuZGVsZXRlKHJvdXRlSWQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIG1hcmtGZXRjaFJlZGlyZWN0c0RvbmUoKTtcbiAgICBsZXQgZGlkQWJvcnRGZXRjaExvYWRzID0gYWJvcnRTdGFsZUZldGNoTG9hZHMocGVuZGluZ05hdmlnYXRpb25Mb2FkSWQpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGxvYWRlckRhdGEsXG4gICAgICBlcnJvcnMsXG4gICAgICAuLi4oZGlkQWJvcnRGZXRjaExvYWRzIHx8IHJldmFsaWRhdGluZ0ZldGNoZXJzLmxlbmd0aCA+IDBcbiAgICAgICAgPyB7IGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKSB9XG4gICAgICAgIDoge30pLFxuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBnZXRGZXRjaGVyPFREYXRhID0gYW55PihrZXk6IHN0cmluZyk6IEZldGNoZXI8VERhdGE+IHtcbiAgICByZXR1cm4gc3RhdGUuZmV0Y2hlcnMuZ2V0KGtleSkgfHwgSURMRV9GRVRDSEVSO1xuICB9XG5cbiAgLy8gVHJpZ2dlciBhIGZldGNoZXIgbG9hZC9zdWJtaXQgZm9yIHRoZSBnaXZlbiBmZXRjaGVyIGtleVxuICBmdW5jdGlvbiBmZXRjaChcbiAgICBrZXk6IHN0cmluZyxcbiAgICByb3V0ZUlkOiBzdHJpbmcsXG4gICAgaHJlZjogc3RyaW5nLFxuICAgIG9wdHM/OiBSb3V0ZXJGZXRjaE9wdGlvbnNcbiAgKSB7XG4gICAgaWYgKGlzU2VydmVyKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIFwicm91dGVyLmZldGNoKCkgd2FzIGNhbGxlZCBkdXJpbmcgdGhlIHNlcnZlciByZW5kZXIsIGJ1dCBpdCBzaG91bGRuJ3QgYmUuIFwiICtcbiAgICAgICAgICBcIllvdSBhcmUgbGlrZWx5IGNhbGxpbmcgYSB1c2VGZXRjaGVyKCkgbWV0aG9kIGluIHRoZSBib2R5IG9mIHlvdXIgY29tcG9uZW50LiBcIiArXG4gICAgICAgICAgXCJUcnkgbW92aW5nIGl0IHRvIGEgdXNlRWZmZWN0IG9yIGEgY2FsbGJhY2suXCJcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKGZldGNoQ29udHJvbGxlcnMuaGFzKGtleSkpIGFib3J0RmV0Y2hlcihrZXkpO1xuXG4gICAgbGV0IG1hdGNoZXMgPSBtYXRjaFJvdXRlcyhkYXRhUm91dGVzLCBocmVmLCBpbml0LmJhc2VuYW1lKTtcbiAgICBpZiAoIW1hdGNoZXMpIHtcbiAgICAgIHNldEZldGNoZXJFcnJvcihcbiAgICAgICAga2V5LFxuICAgICAgICByb3V0ZUlkLFxuICAgICAgICBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwgeyBwYXRobmFtZTogaHJlZiB9KVxuICAgICAgKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBsZXQgeyBwYXRoLCBzdWJtaXNzaW9uIH0gPSBub3JtYWxpemVOYXZpZ2F0ZU9wdGlvbnMoaHJlZiwgb3B0cywgdHJ1ZSk7XG4gICAgbGV0IG1hdGNoID0gZ2V0VGFyZ2V0TWF0Y2gobWF0Y2hlcywgcGF0aCk7XG5cbiAgICBwZW5kaW5nUHJldmVudFNjcm9sbFJlc2V0ID0gKG9wdHMgJiYgb3B0cy5wcmV2ZW50U2Nyb2xsUmVzZXQpID09PSB0cnVlO1xuXG4gICAgaWYgKHN1Ym1pc3Npb24gJiYgaXNNdXRhdGlvbk1ldGhvZChzdWJtaXNzaW9uLmZvcm1NZXRob2QpKSB7XG4gICAgICBoYW5kbGVGZXRjaGVyQWN0aW9uKGtleSwgcm91dGVJZCwgcGF0aCwgbWF0Y2gsIG1hdGNoZXMsIHN1Ym1pc3Npb24pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIFN0b3JlIG9mZiB0aGUgbWF0Y2ggc28gd2UgY2FuIGNhbGwgaXQncyBzaG91bGRSZXZhbGlkYXRlIG9uIHN1YnNlcXVlbnRcbiAgICAvLyByZXZhbGlkYXRpb25zXG4gICAgZmV0Y2hMb2FkTWF0Y2hlcy5zZXQoa2V5LCB7IHJvdXRlSWQsIHBhdGgsIG1hdGNoLCBtYXRjaGVzIH0pO1xuICAgIGhhbmRsZUZldGNoZXJMb2FkZXIoa2V5LCByb3V0ZUlkLCBwYXRoLCBtYXRjaCwgbWF0Y2hlcywgc3VibWlzc2lvbik7XG4gIH1cblxuICAvLyBDYWxsIHRoZSBhY3Rpb24gZm9yIHRoZSBtYXRjaGVkIGZldGNoZXIuc3VibWl0KCksIGFuZCB0aGVuIGhhbmRsZSByZWRpcmVjdHMsXG4gIC8vIGVycm9ycywgYW5kIHJldmFsaWRhdGlvblxuICBhc3luYyBmdW5jdGlvbiBoYW5kbGVGZXRjaGVyQWN0aW9uKFxuICAgIGtleTogc3RyaW5nLFxuICAgIHJvdXRlSWQ6IHN0cmluZyxcbiAgICBwYXRoOiBzdHJpbmcsXG4gICAgbWF0Y2g6IEFnbm9zdGljRGF0YVJvdXRlTWF0Y2gsXG4gICAgcmVxdWVzdE1hdGNoZXM6IEFnbm9zdGljRGF0YVJvdXRlTWF0Y2hbXSxcbiAgICBzdWJtaXNzaW9uOiBTdWJtaXNzaW9uXG4gICkge1xuICAgIGludGVycnVwdEFjdGl2ZUxvYWRzKCk7XG4gICAgZmV0Y2hMb2FkTWF0Y2hlcy5kZWxldGUoa2V5KTtcblxuICAgIGlmICghbWF0Y2gucm91dGUuYWN0aW9uKSB7XG4gICAgICBsZXQgZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNSwge1xuICAgICAgICBtZXRob2Q6IHN1Ym1pc3Npb24uZm9ybU1ldGhvZCxcbiAgICAgICAgcGF0aG5hbWU6IHBhdGgsXG4gICAgICAgIHJvdXRlSWQ6IHJvdXRlSWQsXG4gICAgICB9KTtcbiAgICAgIHNldEZldGNoZXJFcnJvcihrZXksIHJvdXRlSWQsIGVycm9yKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBQdXQgdGhpcyBmZXRjaGVyIGludG8gaXQncyBzdWJtaXR0aW5nIHN0YXRlXG4gICAgbGV0IGV4aXN0aW5nRmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChrZXkpO1xuICAgIGxldCBmZXRjaGVyOiBGZXRjaGVyU3RhdGVzW1wiU3VibWl0dGluZ1wiXSA9IHtcbiAgICAgIHN0YXRlOiBcInN1Ym1pdHRpbmdcIixcbiAgICAgIC4uLnN1Ym1pc3Npb24sXG4gICAgICBkYXRhOiBleGlzdGluZ0ZldGNoZXIgJiYgZXhpc3RpbmdGZXRjaGVyLmRhdGEsXG4gICAgICBcIiBfaGFzRmV0Y2hlckRvbmVBbnl0aGluZyBcIjogdHJ1ZSxcbiAgICB9O1xuICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIGZldGNoZXIpO1xuICAgIHVwZGF0ZVN0YXRlKHsgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpIH0pO1xuXG4gICAgLy8gQ2FsbCB0aGUgYWN0aW9uIGZvciB0aGUgZmV0Y2hlclxuICAgIGxldCBhYm9ydENvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgbGV0IGZldGNoUmVxdWVzdCA9IGNyZWF0ZUNsaWVudFNpZGVSZXF1ZXN0KFxuICAgICAgaW5pdC5oaXN0b3J5LFxuICAgICAgcGF0aCxcbiAgICAgIGFib3J0Q29udHJvbGxlci5zaWduYWwsXG4gICAgICBzdWJtaXNzaW9uXG4gICAgKTtcbiAgICBmZXRjaENvbnRyb2xsZXJzLnNldChrZXksIGFib3J0Q29udHJvbGxlcik7XG5cbiAgICBsZXQgYWN0aW9uUmVzdWx0ID0gYXdhaXQgY2FsbExvYWRlck9yQWN0aW9uKFxuICAgICAgXCJhY3Rpb25cIixcbiAgICAgIGZldGNoUmVxdWVzdCxcbiAgICAgIG1hdGNoLFxuICAgICAgcmVxdWVzdE1hdGNoZXMsXG4gICAgICByb3V0ZXIuYmFzZW5hbWVcbiAgICApO1xuXG4gICAgaWYgKGZldGNoUmVxdWVzdC5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgLy8gV2UgY2FuIGRlbGV0ZSB0aGlzIHNvIGxvbmcgYXMgd2Ugd2VyZW4ndCBhYm9ydGVkIGJ5IG91IG91ciBvd24gZmV0Y2hlclxuICAgICAgLy8gcmUtc3VibWl0IHdoaWNoIHdvdWxkIGhhdmUgcHV0IF9uZXdfIGNvbnRyb2xsZXIgaXMgaW4gZmV0Y2hDb250cm9sbGVyc1xuICAgICAgaWYgKGZldGNoQ29udHJvbGxlcnMuZ2V0KGtleSkgPT09IGFib3J0Q29udHJvbGxlcikge1xuICAgICAgICBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShrZXkpO1xuICAgICAgfVxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmIChpc1JlZGlyZWN0UmVzdWx0KGFjdGlvblJlc3VsdCkpIHtcbiAgICAgIGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKGtleSk7XG4gICAgICBmZXRjaFJlZGlyZWN0SWRzLmFkZChrZXkpO1xuICAgICAgbGV0IGxvYWRpbmdGZXRjaGVyOiBGZXRjaGVyU3RhdGVzW1wiTG9hZGluZ1wiXSA9IHtcbiAgICAgICAgc3RhdGU6IFwibG9hZGluZ1wiLFxuICAgICAgICAuLi5zdWJtaXNzaW9uLFxuICAgICAgICBkYXRhOiB1bmRlZmluZWQsXG4gICAgICAgIFwiIF9oYXNGZXRjaGVyRG9uZUFueXRoaW5nIFwiOiB0cnVlLFxuICAgICAgfTtcbiAgICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIGxvYWRpbmdGZXRjaGVyKTtcbiAgICAgIHVwZGF0ZVN0YXRlKHsgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpIH0pO1xuXG4gICAgICByZXR1cm4gc3RhcnRSZWRpcmVjdE5hdmlnYXRpb24oc3RhdGUsIGFjdGlvblJlc3VsdCwge1xuICAgICAgICBpc0ZldGNoQWN0aW9uUmVkaXJlY3Q6IHRydWUsXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBQcm9jZXNzIGFueSBub24tcmVkaXJlY3QgZXJyb3JzIHRocm93blxuICAgIGlmIChpc0Vycm9yUmVzdWx0KGFjdGlvblJlc3VsdCkpIHtcbiAgICAgIHNldEZldGNoZXJFcnJvcihrZXksIHJvdXRlSWQsIGFjdGlvblJlc3VsdC5lcnJvcik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKGlzRGVmZXJyZWRSZXN1bHQoYWN0aW9uUmVzdWx0KSkge1xuICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDAsIHsgdHlwZTogXCJkZWZlci1hY3Rpb25cIiB9KTtcbiAgICB9XG5cbiAgICAvLyBTdGFydCB0aGUgZGF0YSBsb2FkIGZvciBjdXJyZW50IG1hdGNoZXMsIG9yIHRoZSBuZXh0IGxvY2F0aW9uIGlmIHdlJ3JlXG4gICAgLy8gaW4gdGhlIG1pZGRsZSBvZiBhIG5hdmlnYXRpb25cbiAgICBsZXQgbmV4dExvY2F0aW9uID0gc3RhdGUubmF2aWdhdGlvbi5sb2NhdGlvbiB8fCBzdGF0ZS5sb2NhdGlvbjtcbiAgICBsZXQgcmV2YWxpZGF0aW9uUmVxdWVzdCA9IGNyZWF0ZUNsaWVudFNpZGVSZXF1ZXN0KFxuICAgICAgaW5pdC5oaXN0b3J5LFxuXG4gICAgICBuZXh0TG9jYXRpb24sXG4gICAgICBhYm9ydENvbnRyb2xsZXIuc2lnbmFsXG4gICAgKTtcbiAgICBsZXQgbWF0Y2hlcyA9XG4gICAgICBzdGF0ZS5uYXZpZ2F0aW9uLnN0YXRlICE9PSBcImlkbGVcIlxuICAgICAgICA/IG1hdGNoUm91dGVzKGRhdGFSb3V0ZXMsIHN0YXRlLm5hdmlnYXRpb24ubG9jYXRpb24sIGluaXQuYmFzZW5hbWUpXG4gICAgICAgIDogc3RhdGUubWF0Y2hlcztcblxuICAgIGludmFyaWFudChtYXRjaGVzLCBcIkRpZG4ndCBmaW5kIGFueSBtYXRjaGVzIGFmdGVyIGZldGNoZXIgYWN0aW9uXCIpO1xuXG4gICAgbGV0IGxvYWRJZCA9ICsraW5jcmVtZW50aW5nTG9hZElkO1xuICAgIGZldGNoUmVsb2FkSWRzLnNldChrZXksIGxvYWRJZCk7XG5cbiAgICBsZXQgbG9hZEZldGNoZXI6IEZldGNoZXJTdGF0ZXNbXCJMb2FkaW5nXCJdID0ge1xuICAgICAgc3RhdGU6IFwibG9hZGluZ1wiLFxuICAgICAgZGF0YTogYWN0aW9uUmVzdWx0LmRhdGEsXG4gICAgICAuLi5zdWJtaXNzaW9uLFxuICAgICAgXCIgX2hhc0ZldGNoZXJEb25lQW55dGhpbmcgXCI6IHRydWUsXG4gICAgfTtcbiAgICBzdGF0ZS5mZXRjaGVycy5zZXQoa2V5LCBsb2FkRmV0Y2hlcik7XG5cbiAgICBsZXQgW21hdGNoZXNUb0xvYWQsIHJldmFsaWRhdGluZ0ZldGNoZXJzXSA9IGdldE1hdGNoZXNUb0xvYWQoXG4gICAgICBpbml0Lmhpc3RvcnksXG4gICAgICBzdGF0ZSxcbiAgICAgIG1hdGNoZXMsXG4gICAgICBzdWJtaXNzaW9uLFxuICAgICAgbmV4dExvY2F0aW9uLFxuICAgICAgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCxcbiAgICAgIGNhbmNlbGxlZERlZmVycmVkUm91dGVzLFxuICAgICAgY2FuY2VsbGVkRmV0Y2hlckxvYWRzLFxuICAgICAgeyBbbWF0Y2gucm91dGUuaWRdOiBhY3Rpb25SZXN1bHQuZGF0YSB9LFxuICAgICAgdW5kZWZpbmVkLCAvLyBObyBuZWVkIHRvIHNlbmQgdGhyb3VnaCBlcnJvcnMgc2luY2Ugd2Ugc2hvcnQgY2lyY3VpdCBhYm92ZVxuICAgICAgZmV0Y2hMb2FkTWF0Y2hlc1xuICAgICk7XG5cbiAgICAvLyBQdXQgYWxsIHJldmFsaWRhdGluZyBmZXRjaGVycyBpbnRvIHRoZSBsb2FkaW5nIHN0YXRlLCBleGNlcHQgZm9yIHRoZVxuICAgIC8vIGN1cnJlbnQgZmV0Y2hlciB3aGljaCB3ZSB3YW50IHRvIGtlZXAgaW4gaXQncyBjdXJyZW50IGxvYWRpbmcgc3RhdGUgd2hpY2hcbiAgICAvLyBjb250YWlucyBpdCdzIGFjdGlvbiBzdWJtaXNzaW9uIGluZm8gKyBhY3Rpb24gZGF0YVxuICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzXG4gICAgICAuZmlsdGVyKChyZikgPT4gcmYua2V5ICE9PSBrZXkpXG4gICAgICAuZm9yRWFjaCgocmYpID0+IHtcbiAgICAgICAgbGV0IHN0YWxlS2V5ID0gcmYua2V5O1xuICAgICAgICBsZXQgZXhpc3RpbmdGZXRjaGVyID0gc3RhdGUuZmV0Y2hlcnMuZ2V0KHN0YWxlS2V5KTtcbiAgICAgICAgbGV0IHJldmFsaWRhdGluZ0ZldGNoZXI6IEZldGNoZXJTdGF0ZXNbXCJMb2FkaW5nXCJdID0ge1xuICAgICAgICAgIHN0YXRlOiBcImxvYWRpbmdcIixcbiAgICAgICAgICBkYXRhOiBleGlzdGluZ0ZldGNoZXIgJiYgZXhpc3RpbmdGZXRjaGVyLmRhdGEsXG4gICAgICAgICAgZm9ybU1ldGhvZDogdW5kZWZpbmVkLFxuICAgICAgICAgIGZvcm1BY3Rpb246IHVuZGVmaW5lZCxcbiAgICAgICAgICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICAgICAgICAgIGZvcm1EYXRhOiB1bmRlZmluZWQsXG4gICAgICAgICAgXCIgX2hhc0ZldGNoZXJEb25lQW55dGhpbmcgXCI6IHRydWUsXG4gICAgICAgIH07XG4gICAgICAgIHN0YXRlLmZldGNoZXJzLnNldChzdGFsZUtleSwgcmV2YWxpZGF0aW5nRmV0Y2hlcik7XG4gICAgICAgIGZldGNoQ29udHJvbGxlcnMuc2V0KHN0YWxlS2V5LCBhYm9ydENvbnRyb2xsZXIpO1xuICAgICAgfSk7XG5cbiAgICB1cGRhdGVTdGF0ZSh7IGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKSB9KTtcblxuICAgIGxldCB7IHJlc3VsdHMsIGxvYWRlclJlc3VsdHMsIGZldGNoZXJSZXN1bHRzIH0gPVxuICAgICAgYXdhaXQgY2FsbExvYWRlcnNBbmRNYXliZVJlc29sdmVEYXRhKFxuICAgICAgICBzdGF0ZS5tYXRjaGVzLFxuICAgICAgICBtYXRjaGVzLFxuICAgICAgICBtYXRjaGVzVG9Mb2FkLFxuICAgICAgICByZXZhbGlkYXRpbmdGZXRjaGVycyxcbiAgICAgICAgcmV2YWxpZGF0aW9uUmVxdWVzdFxuICAgICAgKTtcblxuICAgIGlmIChhYm9ydENvbnRyb2xsZXIuc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBmZXRjaFJlbG9hZElkcy5kZWxldGUoa2V5KTtcbiAgICBmZXRjaENvbnRyb2xsZXJzLmRlbGV0ZShrZXkpO1xuICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLmZvckVhY2goKHIpID0+IGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKHIua2V5KSk7XG5cbiAgICBsZXQgcmVkaXJlY3QgPSBmaW5kUmVkaXJlY3QocmVzdWx0cyk7XG4gICAgaWYgKHJlZGlyZWN0KSB7XG4gICAgICByZXR1cm4gc3RhcnRSZWRpcmVjdE5hdmlnYXRpb24oc3RhdGUsIHJlZGlyZWN0KTtcbiAgICB9XG5cbiAgICAvLyBQcm9jZXNzIGFuZCBjb21taXQgb3V0cHV0IGZyb20gbG9hZGVyc1xuICAgIGxldCB7IGxvYWRlckRhdGEsIGVycm9ycyB9ID0gcHJvY2Vzc0xvYWRlckRhdGEoXG4gICAgICBzdGF0ZSxcbiAgICAgIHN0YXRlLm1hdGNoZXMsXG4gICAgICBtYXRjaGVzVG9Mb2FkLFxuICAgICAgbG9hZGVyUmVzdWx0cyxcbiAgICAgIHVuZGVmaW5lZCxcbiAgICAgIHJldmFsaWRhdGluZ0ZldGNoZXJzLFxuICAgICAgZmV0Y2hlclJlc3VsdHMsXG4gICAgICBhY3RpdmVEZWZlcnJlZHNcbiAgICApO1xuXG4gICAgbGV0IGRvbmVGZXRjaGVyOiBGZXRjaGVyU3RhdGVzW1wiSWRsZVwiXSA9IHtcbiAgICAgIHN0YXRlOiBcImlkbGVcIixcbiAgICAgIGRhdGE6IGFjdGlvblJlc3VsdC5kYXRhLFxuICAgICAgZm9ybU1ldGhvZDogdW5kZWZpbmVkLFxuICAgICAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICAgICAgZm9ybUVuY1R5cGU6IHVuZGVmaW5lZCxcbiAgICAgIGZvcm1EYXRhOiB1bmRlZmluZWQsXG4gICAgICBcIiBfaGFzRmV0Y2hlckRvbmVBbnl0aGluZyBcIjogdHJ1ZSxcbiAgICB9O1xuICAgIHN0YXRlLmZldGNoZXJzLnNldChrZXksIGRvbmVGZXRjaGVyKTtcblxuICAgIGxldCBkaWRBYm9ydEZldGNoTG9hZHMgPSBhYm9ydFN0YWxlRmV0Y2hMb2Fkcyhsb2FkSWQpO1xuXG4gICAgLy8gSWYgd2UgYXJlIGN1cnJlbnRseSBpbiBhIG5hdmlnYXRpb24gbG9hZGluZyBzdGF0ZSBhbmQgdGhpcyBmZXRjaGVyIGlzXG4gICAgLy8gbW9yZSByZWNlbnQgdGhhbiB0aGUgbmF2aWdhdGlvbiwgd2Ugd2FudCB0aGUgbmV3ZXIgZGF0YSBzbyBhYm9ydCB0aGVcbiAgICAvLyBuYXZpZ2F0aW9uIGFuZCBjb21wbGV0ZSBpdCB3aXRoIHRoZSBmZXRjaGVyIGRhdGFcbiAgICBpZiAoXG4gICAgICBzdGF0ZS5uYXZpZ2F0aW9uLnN0YXRlID09PSBcImxvYWRpbmdcIiAmJlxuICAgICAgbG9hZElkID4gcGVuZGluZ05hdmlnYXRpb25Mb2FkSWRcbiAgICApIHtcbiAgICAgIGludmFyaWFudChwZW5kaW5nQWN0aW9uLCBcIkV4cGVjdGVkIHBlbmRpbmcgYWN0aW9uXCIpO1xuICAgICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyICYmIHBlbmRpbmdOYXZpZ2F0aW9uQ29udHJvbGxlci5hYm9ydCgpO1xuXG4gICAgICBjb21wbGV0ZU5hdmlnYXRpb24oc3RhdGUubmF2aWdhdGlvbi5sb2NhdGlvbiwge1xuICAgICAgICBtYXRjaGVzLFxuICAgICAgICBsb2FkZXJEYXRhLFxuICAgICAgICBlcnJvcnMsXG4gICAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKSxcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBvdGhlcndpc2UganVzdCB1cGRhdGUgd2l0aCB0aGUgZmV0Y2hlciBkYXRhLCBwcmVzZXJ2aW5nIGFueSBleGlzdGluZ1xuICAgICAgLy8gbG9hZGVyRGF0YSBmb3IgbG9hZGVycyB0aGF0IGRpZCBub3QgbmVlZCB0byByZWxvYWQuICBXZSBoYXZlIHRvXG4gICAgICAvLyBtYW51YWxseSBtZXJnZSBoZXJlIHNpbmNlIHdlIGFyZW4ndCBnb2luZyB0aHJvdWdoIGNvbXBsZXRlTmF2aWdhdGlvblxuICAgICAgdXBkYXRlU3RhdGUoe1xuICAgICAgICBlcnJvcnMsXG4gICAgICAgIGxvYWRlckRhdGE6IG1lcmdlTG9hZGVyRGF0YShcbiAgICAgICAgICBzdGF0ZS5sb2FkZXJEYXRhLFxuICAgICAgICAgIGxvYWRlckRhdGEsXG4gICAgICAgICAgbWF0Y2hlcyxcbiAgICAgICAgICBlcnJvcnNcbiAgICAgICAgKSxcbiAgICAgICAgLi4uKGRpZEFib3J0RmV0Y2hMb2FkcyA/IHsgZmV0Y2hlcnM6IG5ldyBNYXAoc3RhdGUuZmV0Y2hlcnMpIH0gOiB7fSksXG4gICAgICB9KTtcbiAgICAgIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICAvLyBDYWxsIHRoZSBtYXRjaGVkIGxvYWRlciBmb3IgZmV0Y2hlci5sb2FkKCksIGhhbmRsaW5nIHJlZGlyZWN0cywgZXJyb3JzLCBldGMuXG4gIGFzeW5jIGZ1bmN0aW9uIGhhbmRsZUZldGNoZXJMb2FkZXIoXG4gICAga2V5OiBzdHJpbmcsXG4gICAgcm91dGVJZDogc3RyaW5nLFxuICAgIHBhdGg6IHN0cmluZyxcbiAgICBtYXRjaDogQWdub3N0aWNEYXRhUm91dGVNYXRjaCxcbiAgICBtYXRjaGVzOiBBZ25vc3RpY0RhdGFSb3V0ZU1hdGNoW10sXG4gICAgc3VibWlzc2lvbj86IFN1Ym1pc3Npb25cbiAgKSB7XG4gICAgbGV0IGV4aXN0aW5nRmV0Y2hlciA9IHN0YXRlLmZldGNoZXJzLmdldChrZXkpO1xuICAgIC8vIFB1dCB0aGlzIGZldGNoZXIgaW50byBpdCdzIGxvYWRpbmcgc3RhdGVcbiAgICBsZXQgbG9hZGluZ0ZldGNoZXI6IEZldGNoZXJTdGF0ZXNbXCJMb2FkaW5nXCJdID0ge1xuICAgICAgc3RhdGU6IFwibG9hZGluZ1wiLFxuICAgICAgZm9ybU1ldGhvZDogdW5kZWZpbmVkLFxuICAgICAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICAgICAgZm9ybUVuY1R5cGU6IHVuZGVmaW5lZCxcbiAgICAgIGZvcm1EYXRhOiB1bmRlZmluZWQsXG4gICAgICAuLi5zdWJtaXNzaW9uLFxuICAgICAgZGF0YTogZXhpc3RpbmdGZXRjaGVyICYmIGV4aXN0aW5nRmV0Y2hlci5kYXRhLFxuICAgICAgXCIgX2hhc0ZldGNoZXJEb25lQW55dGhpbmcgXCI6IHRydWUsXG4gICAgfTtcbiAgICBzdGF0ZS5mZXRjaGVycy5zZXQoa2V5LCBsb2FkaW5nRmV0Y2hlcik7XG4gICAgdXBkYXRlU3RhdGUoeyBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycykgfSk7XG5cbiAgICAvLyBDYWxsIHRoZSBsb2FkZXIgZm9yIHRoaXMgZmV0Y2hlciByb3V0ZSBtYXRjaFxuICAgIGxldCBhYm9ydENvbnRyb2xsZXIgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgbGV0IGZldGNoUmVxdWVzdCA9IGNyZWF0ZUNsaWVudFNpZGVSZXF1ZXN0KFxuICAgICAgaW5pdC5oaXN0b3J5LFxuICAgICAgcGF0aCxcbiAgICAgIGFib3J0Q29udHJvbGxlci5zaWduYWxcbiAgICApO1xuICAgIGZldGNoQ29udHJvbGxlcnMuc2V0KGtleSwgYWJvcnRDb250cm9sbGVyKTtcbiAgICBsZXQgcmVzdWx0OiBEYXRhUmVzdWx0ID0gYXdhaXQgY2FsbExvYWRlck9yQWN0aW9uKFxuICAgICAgXCJsb2FkZXJcIixcbiAgICAgIGZldGNoUmVxdWVzdCxcbiAgICAgIG1hdGNoLFxuICAgICAgbWF0Y2hlcyxcbiAgICAgIHJvdXRlci5iYXNlbmFtZVxuICAgICk7XG5cbiAgICAvLyBEZWZlcnJlZCBpc24ndCBzdXBwb3J0ZWQgZm9yIGZldGNoZXIgbG9hZHMsIGF3YWl0IGV2ZXJ5dGhpbmcgYW5kIHRyZWF0IGl0XG4gICAgLy8gYXMgYSBub3JtYWwgbG9hZC4gIHJlc29sdmVEZWZlcnJlZERhdGEgd2lsbCByZXR1cm4gdW5kZWZpbmVkIGlmIHRoaXNcbiAgICAvLyBmZXRjaGVyIGdldHMgYWJvcnRlZCwgc28gd2UganVzdCBsZWF2ZSByZXN1bHQgdW50b3VjaGVkIGFuZCBzaG9ydCBjaXJjdWl0XG4gICAgLy8gYmVsb3cgaWYgdGhhdCBoYXBwZW5zXG4gICAgaWYgKGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSkge1xuICAgICAgcmVzdWx0ID1cbiAgICAgICAgKGF3YWl0IHJlc29sdmVEZWZlcnJlZERhdGEocmVzdWx0LCBmZXRjaFJlcXVlc3Quc2lnbmFsLCB0cnVlKSkgfHxcbiAgICAgICAgcmVzdWx0O1xuICAgIH1cblxuICAgIC8vIFdlIGNhbiBkZWxldGUgdGhpcyBzbyBsb25nIGFzIHdlIHdlcmVuJ3QgYWJvcnRlZCBieSBvdSBvdXIgb3duIGZldGNoZXJcbiAgICAvLyByZS1sb2FkIHdoaWNoIHdvdWxkIGhhdmUgcHV0IF9uZXdfIGNvbnRyb2xsZXIgaXMgaW4gZmV0Y2hDb250cm9sbGVyc1xuICAgIGlmIChmZXRjaENvbnRyb2xsZXJzLmdldChrZXkpID09PSBhYm9ydENvbnRyb2xsZXIpIHtcbiAgICAgIGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKGtleSk7XG4gICAgfVxuXG4gICAgaWYgKGZldGNoUmVxdWVzdC5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIElmIHRoZSBsb2FkZXIgdGhyZXcgYSByZWRpcmVjdCBSZXNwb25zZSwgc3RhcnQgYSBuZXcgUkVQTEFDRSBuYXZpZ2F0aW9uXG4gICAgaWYgKGlzUmVkaXJlY3RSZXN1bHQocmVzdWx0KSkge1xuICAgICAgYXdhaXQgc3RhcnRSZWRpcmVjdE5hdmlnYXRpb24oc3RhdGUsIHJlc3VsdCk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gUHJvY2VzcyBhbnkgbm9uLXJlZGlyZWN0IGVycm9ycyB0aHJvd25cbiAgICBpZiAoaXNFcnJvclJlc3VsdChyZXN1bHQpKSB7XG4gICAgICBsZXQgYm91bmRhcnlNYXRjaCA9IGZpbmROZWFyZXN0Qm91bmRhcnkoc3RhdGUubWF0Y2hlcywgcm91dGVJZCk7XG4gICAgICBzdGF0ZS5mZXRjaGVycy5kZWxldGUoa2V5KTtcbiAgICAgIC8vIFRPRE86IEluIHJlbWl4LCB0aGlzIHdvdWxkIHJlc2V0IHRvIElETEVfTkFWSUdBVElPTiBpZiBpdCB3YXMgYSBjYXRjaCAtXG4gICAgICAvLyBkbyB3ZSBuZWVkIHRvIGJlaGF2ZSBhbnkgZGlmZmVyZW50bHkgd2l0aCBvdXIgbm9uLXJlZGlyZWN0IGVycm9ycz9cbiAgICAgIC8vIFdoYXQgaWYgaXQgd2FzIGEgbm9uLXJlZGlyZWN0IFJlc3BvbnNlP1xuICAgICAgdXBkYXRlU3RhdGUoe1xuICAgICAgICBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycyksXG4gICAgICAgIGVycm9yczoge1xuICAgICAgICAgIFtib3VuZGFyeU1hdGNoLnJvdXRlLmlkXTogcmVzdWx0LmVycm9yLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaW52YXJpYW50KCFpc0RlZmVycmVkUmVzdWx0KHJlc3VsdCksIFwiVW5oYW5kbGVkIGZldGNoZXIgZGVmZXJyZWQgZGF0YVwiKTtcblxuICAgIC8vIFB1dCB0aGUgZmV0Y2hlciBiYWNrIGludG8gYW4gaWRsZSBzdGF0ZVxuICAgIGxldCBkb25lRmV0Y2hlcjogRmV0Y2hlclN0YXRlc1tcIklkbGVcIl0gPSB7XG4gICAgICBzdGF0ZTogXCJpZGxlXCIsXG4gICAgICBkYXRhOiByZXN1bHQuZGF0YSxcbiAgICAgIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgICAgIGZvcm1BY3Rpb246IHVuZGVmaW5lZCxcbiAgICAgIGZvcm1FbmNUeXBlOiB1bmRlZmluZWQsXG4gICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgICAgXCIgX2hhc0ZldGNoZXJEb25lQW55dGhpbmcgXCI6IHRydWUsXG4gICAgfTtcbiAgICBzdGF0ZS5mZXRjaGVycy5zZXQoa2V5LCBkb25lRmV0Y2hlcik7XG4gICAgdXBkYXRlU3RhdGUoeyBmZXRjaGVyczogbmV3IE1hcChzdGF0ZS5mZXRjaGVycykgfSk7XG4gIH1cblxuICAvKipcbiAgICogVXRpbGl0eSBmdW5jdGlvbiB0byBoYW5kbGUgcmVkaXJlY3RzIHJldHVybmVkIGZyb20gYW4gYWN0aW9uIG9yIGxvYWRlci5cbiAgICogTm9ybWFsbHksIGEgcmVkaXJlY3QgXCJyZXBsYWNlc1wiIHRoZSBuYXZpZ2F0aW9uIHRoYXQgdHJpZ2dlcmVkIGl0LiAgU28sIGZvclxuICAgKiBleGFtcGxlOlxuICAgKlxuICAgKiAgLSB1c2VyIGlzIG9uIC9hXG4gICAqICAtIHVzZXIgY2xpY2tzIGEgbGluayB0byAvYlxuICAgKiAgLSBsb2FkZXIgZm9yIC9iIHJlZGlyZWN0cyB0byAvY1xuICAgKlxuICAgKiBJbiBhIG5vbi1KUyBhcHAgdGhlIGJyb3dzZXIgd291bGQgdHJhY2sgdGhlIGluLWZsaWdodCBuYXZpZ2F0aW9uIHRvIC9iIGFuZFxuICAgKiB0aGVuIHJlcGxhY2UgaXQgd2l0aCAvYyB3aGVuIGl0IGVuY291bnRlcmVkIHRoZSByZWRpcmVjdCByZXNwb25zZS4gIEluXG4gICAqIHRoZSBlbmQgaXQgd291bGQgb25seSBldmVyIHVwZGF0ZSB0aGUgVVJMIGJhciB3aXRoIC9jLlxuICAgKlxuICAgKiBJbiBjbGllbnQtc2lkZSByb3V0aW5nIHVzaW5nIHB1c2hTdGF0ZS9yZXBsYWNlU3RhdGUsIHdlIGFpbSB0byBlbXVsYXRlXG4gICAqIHRoaXMgYmVoYXZpb3IgYW5kIHdlIGFsc28gZG8gbm90IHVwZGF0ZSBoaXN0b3J5IHVudGlsIHRoZSBlbmQgb2YgdGhlXG4gICAqIG5hdmlnYXRpb24gKGluY2x1ZGluZyBwcm9jZXNzZWQgcmVkaXJlY3RzKS4gIFRoaXMgbWVhbnMgdGhhdCB3ZSBuZXZlclxuICAgKiBhY3R1YWxseSB0b3VjaCBoaXN0b3J5IHVudGlsIHdlJ3ZlIHByb2Nlc3NlZCByZWRpcmVjdHMsIHNvIHdlIGp1c3QgdXNlXG4gICAqIHRoZSBoaXN0b3J5IGFjdGlvbiBmcm9tIHRoZSBvcmlnaW5hbCBuYXZpZ2F0aW9uIChQVVNIIG9yIFJFUExBQ0UpLlxuICAgKi9cbiAgYXN5bmMgZnVuY3Rpb24gc3RhcnRSZWRpcmVjdE5hdmlnYXRpb24oXG4gICAgc3RhdGU6IFJvdXRlclN0YXRlLFxuICAgIHJlZGlyZWN0OiBSZWRpcmVjdFJlc3VsdCxcbiAgICB7XG4gICAgICBzdWJtaXNzaW9uLFxuICAgICAgcmVwbGFjZSxcbiAgICAgIGlzRmV0Y2hBY3Rpb25SZWRpcmVjdCxcbiAgICB9OiB7XG4gICAgICBzdWJtaXNzaW9uPzogU3VibWlzc2lvbjtcbiAgICAgIHJlcGxhY2U/OiBib29sZWFuO1xuICAgICAgaXNGZXRjaEFjdGlvblJlZGlyZWN0PzogYm9vbGVhbjtcbiAgICB9ID0ge31cbiAgKSB7XG4gICAgaWYgKHJlZGlyZWN0LnJldmFsaWRhdGUpIHtcbiAgICAgIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIGxldCByZWRpcmVjdExvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oXG4gICAgICBzdGF0ZS5sb2NhdGlvbixcbiAgICAgIHJlZGlyZWN0LmxvY2F0aW9uLFxuICAgICAgLy8gVE9ETzogVGhpcyBjYW4gYmUgcmVtb3ZlZCBvbmNlIHdlIGdldCByaWQgb2YgdXNlVHJhbnNpdGlvbiBpbiBSZW1peCB2MlxuICAgICAge1xuICAgICAgICBfaXNSZWRpcmVjdDogdHJ1ZSxcbiAgICAgICAgLi4uKGlzRmV0Y2hBY3Rpb25SZWRpcmVjdCA/IHsgX2lzRmV0Y2hBY3Rpb25SZWRpcmVjdDogdHJ1ZSB9IDoge30pLFxuICAgICAgfVxuICAgICk7XG4gICAgaW52YXJpYW50KFxuICAgICAgcmVkaXJlY3RMb2NhdGlvbixcbiAgICAgIFwiRXhwZWN0ZWQgYSBsb2NhdGlvbiBvbiB0aGUgcmVkaXJlY3QgbmF2aWdhdGlvblwiXG4gICAgKTtcblxuICAgIC8vIENoZWNrIGlmIHRoaXMgYW4gYWJzb2x1dGUgZXh0ZXJuYWwgcmVkaXJlY3QgdGhhdCBnb2VzIHRvIGEgbmV3IG9yaWdpblxuICAgIGlmIChcbiAgICAgIEFCU09MVVRFX1VSTF9SRUdFWC50ZXN0KHJlZGlyZWN0LmxvY2F0aW9uKSAmJlxuICAgICAgaXNCcm93c2VyICYmXG4gICAgICB0eXBlb2Ygd2luZG93Py5sb2NhdGlvbiAhPT0gXCJ1bmRlZmluZWRcIlxuICAgICkge1xuICAgICAgbGV0IG5ld09yaWdpbiA9IGluaXQuaGlzdG9yeS5jcmVhdGVVUkwocmVkaXJlY3QubG9jYXRpb24pLm9yaWdpbjtcbiAgICAgIGlmICh3aW5kb3cubG9jYXRpb24ub3JpZ2luICE9PSBuZXdPcmlnaW4pIHtcbiAgICAgICAgaWYgKHJlcGxhY2UpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShyZWRpcmVjdC5sb2NhdGlvbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLmFzc2lnbihyZWRpcmVjdC5sb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFRoZXJlJ3Mgbm8gbmVlZCB0byBhYm9ydCBvbiByZWRpcmVjdHMsIHNpbmNlIHdlIGRvbid0IGRldGVjdCB0aGVcbiAgICAvLyByZWRpcmVjdCB1bnRpbCB0aGUgYWN0aW9uL2xvYWRlcnMgaGF2ZSBzZXR0bGVkXG4gICAgcGVuZGluZ05hdmlnYXRpb25Db250cm9sbGVyID0gbnVsbDtcblxuICAgIGxldCByZWRpcmVjdEhpc3RvcnlBY3Rpb24gPVxuICAgICAgcmVwbGFjZSA9PT0gdHJ1ZSA/IEhpc3RvcnlBY3Rpb24uUmVwbGFjZSA6IEhpc3RvcnlBY3Rpb24uUHVzaDtcblxuICAgIC8vIFVzZSB0aGUgaW5jb21pbmcgc3VibWlzc2lvbiBpZiBwcm92aWRlZCwgZmFsbGJhY2sgb24gdGhlIGFjdGl2ZSBvbmUgaW5cbiAgICAvLyBzdGF0ZS5uYXZpZ2F0aW9uXG4gICAgbGV0IHsgZm9ybU1ldGhvZCwgZm9ybUFjdGlvbiwgZm9ybUVuY1R5cGUsIGZvcm1EYXRhIH0gPSBzdGF0ZS5uYXZpZ2F0aW9uO1xuICAgIGlmICghc3VibWlzc2lvbiAmJiBmb3JtTWV0aG9kICYmIGZvcm1BY3Rpb24gJiYgZm9ybURhdGEgJiYgZm9ybUVuY1R5cGUpIHtcbiAgICAgIHN1Ym1pc3Npb24gPSB7XG4gICAgICAgIGZvcm1NZXRob2QsXG4gICAgICAgIGZvcm1BY3Rpb24sXG4gICAgICAgIGZvcm1FbmNUeXBlLFxuICAgICAgICBmb3JtRGF0YSxcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gSWYgdGhpcyB3YXMgYSAzMDcvMzA4IHN1Ym1pc3Npb24gd2Ugd2FudCB0byBwcmVzZXJ2ZSB0aGUgSFRUUCBtZXRob2QgYW5kXG4gICAgLy8gcmUtc3VibWl0IHRoZSBHRVQvUE9TVC9QVVQvUEFUQ0gvREVMRVRFIGFzIGEgc3VibWlzc2lvbiBuYXZpZ2F0aW9uIHRvIHRoZVxuICAgIC8vIHJlZGlyZWN0ZWQgbG9jYXRpb25cbiAgICBpZiAoXG4gICAgICByZWRpcmVjdFByZXNlcnZlTWV0aG9kU3RhdHVzQ29kZXMuaGFzKHJlZGlyZWN0LnN0YXR1cykgJiZcbiAgICAgIHN1Ym1pc3Npb24gJiZcbiAgICAgIGlzTXV0YXRpb25NZXRob2Qoc3VibWlzc2lvbi5mb3JtTWV0aG9kKVxuICAgICkge1xuICAgICAgYXdhaXQgc3RhcnROYXZpZ2F0aW9uKHJlZGlyZWN0SGlzdG9yeUFjdGlvbiwgcmVkaXJlY3RMb2NhdGlvbiwge1xuICAgICAgICBzdWJtaXNzaW9uOiB7XG4gICAgICAgICAgLi4uc3VibWlzc2lvbixcbiAgICAgICAgICBmb3JtQWN0aW9uOiByZWRpcmVjdC5sb2NhdGlvbixcbiAgICAgICAgfSxcbiAgICAgICAgLy8gUHJlc2VydmUgdGhpcyBmbGFnIGFjcm9zcyByZWRpcmVjdHNcbiAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0OiBwZW5kaW5nUHJldmVudFNjcm9sbFJlc2V0LFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIE90aGVyd2lzZSwgd2Uga2ljayBvZmYgYSBuZXcgbG9hZGluZyBuYXZpZ2F0aW9uLCBwcmVzZXJ2aW5nIHRoZVxuICAgICAgLy8gc3VibWlzc2lvbiBpbmZvIGZvciB0aGUgZHVyYXRpb24gb2YgdGhpcyBuYXZpZ2F0aW9uXG4gICAgICBhd2FpdCBzdGFydE5hdmlnYXRpb24ocmVkaXJlY3RIaXN0b3J5QWN0aW9uLCByZWRpcmVjdExvY2F0aW9uLCB7XG4gICAgICAgIG92ZXJyaWRlTmF2aWdhdGlvbjoge1xuICAgICAgICAgIHN0YXRlOiBcImxvYWRpbmdcIixcbiAgICAgICAgICBsb2NhdGlvbjogcmVkaXJlY3RMb2NhdGlvbixcbiAgICAgICAgICBmb3JtTWV0aG9kOiBzdWJtaXNzaW9uID8gc3VibWlzc2lvbi5mb3JtTWV0aG9kIDogdW5kZWZpbmVkLFxuICAgICAgICAgIGZvcm1BY3Rpb246IHN1Ym1pc3Npb24gPyBzdWJtaXNzaW9uLmZvcm1BY3Rpb24gOiB1bmRlZmluZWQsXG4gICAgICAgICAgZm9ybUVuY1R5cGU6IHN1Ym1pc3Npb24gPyBzdWJtaXNzaW9uLmZvcm1FbmNUeXBlIDogdW5kZWZpbmVkLFxuICAgICAgICAgIGZvcm1EYXRhOiBzdWJtaXNzaW9uID8gc3VibWlzc2lvbi5mb3JtRGF0YSA6IHVuZGVmaW5lZCxcbiAgICAgICAgfSxcbiAgICAgICAgLy8gUHJlc2VydmUgdGhpcyBmbGFnIGFjcm9zcyByZWRpcmVjdHNcbiAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0OiBwZW5kaW5nUHJldmVudFNjcm9sbFJlc2V0LFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZnVuY3Rpb24gY2FsbExvYWRlcnNBbmRNYXliZVJlc29sdmVEYXRhKFxuICAgIGN1cnJlbnRNYXRjaGVzOiBBZ25vc3RpY0RhdGFSb3V0ZU1hdGNoW10sXG4gICAgbWF0Y2hlczogQWdub3N0aWNEYXRhUm91dGVNYXRjaFtdLFxuICAgIG1hdGNoZXNUb0xvYWQ6IEFnbm9zdGljRGF0YVJvdXRlTWF0Y2hbXSxcbiAgICBmZXRjaGVyc1RvTG9hZDogUmV2YWxpZGF0aW5nRmV0Y2hlcltdLFxuICAgIHJlcXVlc3Q6IFJlcXVlc3RcbiAgKSB7XG4gICAgLy8gQ2FsbCBhbGwgbmF2aWdhdGlvbiBsb2FkZXJzIGFuZCByZXZhbGlkYXRpbmcgZmV0Y2hlciBsb2FkZXJzIGluIHBhcmFsbGVsLFxuICAgIC8vIHRoZW4gc2xpY2Ugb2ZmIHRoZSByZXN1bHRzIGludG8gc2VwYXJhdGUgYXJyYXlzIHNvIHdlIGNhbiBoYW5kbGUgdGhlbVxuICAgIC8vIGFjY29yZGluZ2x5XG4gICAgbGV0IHJlc3VsdHMgPSBhd2FpdCBQcm9taXNlLmFsbChbXG4gICAgICAuLi5tYXRjaGVzVG9Mb2FkLm1hcCgobWF0Y2gpID0+XG4gICAgICAgIGNhbGxMb2FkZXJPckFjdGlvbihcImxvYWRlclwiLCByZXF1ZXN0LCBtYXRjaCwgbWF0Y2hlcywgcm91dGVyLmJhc2VuYW1lKVxuICAgICAgKSxcbiAgICAgIC4uLmZldGNoZXJzVG9Mb2FkLm1hcCgoZikgPT5cbiAgICAgICAgY2FsbExvYWRlck9yQWN0aW9uKFxuICAgICAgICAgIFwibG9hZGVyXCIsXG4gICAgICAgICAgY3JlYXRlQ2xpZW50U2lkZVJlcXVlc3QoaW5pdC5oaXN0b3J5LCBmLnBhdGgsIHJlcXVlc3Quc2lnbmFsKSxcbiAgICAgICAgICBmLm1hdGNoLFxuICAgICAgICAgIGYubWF0Y2hlcyxcbiAgICAgICAgICByb3V0ZXIuYmFzZW5hbWVcbiAgICAgICAgKVxuICAgICAgKSxcbiAgICBdKTtcbiAgICBsZXQgbG9hZGVyUmVzdWx0cyA9IHJlc3VsdHMuc2xpY2UoMCwgbWF0Y2hlc1RvTG9hZC5sZW5ndGgpO1xuICAgIGxldCBmZXRjaGVyUmVzdWx0cyA9IHJlc3VsdHMuc2xpY2UobWF0Y2hlc1RvTG9hZC5sZW5ndGgpO1xuXG4gICAgYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgcmVzb2x2ZURlZmVycmVkUmVzdWx0cyhcbiAgICAgICAgY3VycmVudE1hdGNoZXMsXG4gICAgICAgIG1hdGNoZXNUb0xvYWQsXG4gICAgICAgIGxvYWRlclJlc3VsdHMsXG4gICAgICAgIHJlcXVlc3Quc2lnbmFsLFxuICAgICAgICBmYWxzZSxcbiAgICAgICAgc3RhdGUubG9hZGVyRGF0YVxuICAgICAgKSxcbiAgICAgIHJlc29sdmVEZWZlcnJlZFJlc3VsdHMoXG4gICAgICAgIGN1cnJlbnRNYXRjaGVzLFxuICAgICAgICBmZXRjaGVyc1RvTG9hZC5tYXAoKGYpID0+IGYubWF0Y2gpLFxuICAgICAgICBmZXRjaGVyUmVzdWx0cyxcbiAgICAgICAgcmVxdWVzdC5zaWduYWwsXG4gICAgICAgIHRydWVcbiAgICAgICksXG4gICAgXSk7XG5cbiAgICByZXR1cm4geyByZXN1bHRzLCBsb2FkZXJSZXN1bHRzLCBmZXRjaGVyUmVzdWx0cyB9O1xuICB9XG5cbiAgZnVuY3Rpb24gaW50ZXJydXB0QWN0aXZlTG9hZHMoKSB7XG4gICAgLy8gRXZlcnkgaW50ZXJydXB0aW9uIHRyaWdnZXJzIGEgcmV2YWxpZGF0aW9uXG4gICAgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCA9IHRydWU7XG5cbiAgICAvLyBDYW5jZWwgcGVuZGluZyByb3V0ZS1sZXZlbCBkZWZlcnJlZHMgYW5kIG1hcmsgY2FuY2VsbGVkIHJvdXRlcyBmb3JcbiAgICAvLyByZXZhbGlkYXRpb25cbiAgICBjYW5jZWxsZWREZWZlcnJlZFJvdXRlcy5wdXNoKC4uLmNhbmNlbEFjdGl2ZURlZmVycmVkcygpKTtcblxuICAgIC8vIEFib3J0IGluLWZsaWdodCBmZXRjaGVyIGxvYWRzXG4gICAgZmV0Y2hMb2FkTWF0Y2hlcy5mb3JFYWNoKChfLCBrZXkpID0+IHtcbiAgICAgIGlmIChmZXRjaENvbnRyb2xsZXJzLmhhcyhrZXkpKSB7XG4gICAgICAgIGNhbmNlbGxlZEZldGNoZXJMb2Fkcy5wdXNoKGtleSk7XG4gICAgICAgIGFib3J0RmV0Y2hlcihrZXkpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gc2V0RmV0Y2hlckVycm9yKGtleTogc3RyaW5nLCByb3V0ZUlkOiBzdHJpbmcsIGVycm9yOiBhbnkpIHtcbiAgICBsZXQgYm91bmRhcnlNYXRjaCA9IGZpbmROZWFyZXN0Qm91bmRhcnkoc3RhdGUubWF0Y2hlcywgcm91dGVJZCk7XG4gICAgZGVsZXRlRmV0Y2hlcihrZXkpO1xuICAgIHVwZGF0ZVN0YXRlKHtcbiAgICAgIGVycm9yczoge1xuICAgICAgICBbYm91bmRhcnlNYXRjaC5yb3V0ZS5pZF06IGVycm9yLFxuICAgICAgfSxcbiAgICAgIGZldGNoZXJzOiBuZXcgTWFwKHN0YXRlLmZldGNoZXJzKSxcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlbGV0ZUZldGNoZXIoa2V5OiBzdHJpbmcpOiB2b2lkIHtcbiAgICBpZiAoZmV0Y2hDb250cm9sbGVycy5oYXMoa2V5KSkgYWJvcnRGZXRjaGVyKGtleSk7XG4gICAgZmV0Y2hMb2FkTWF0Y2hlcy5kZWxldGUoa2V5KTtcbiAgICBmZXRjaFJlbG9hZElkcy5kZWxldGUoa2V5KTtcbiAgICBmZXRjaFJlZGlyZWN0SWRzLmRlbGV0ZShrZXkpO1xuICAgIHN0YXRlLmZldGNoZXJzLmRlbGV0ZShrZXkpO1xuICB9XG5cbiAgZnVuY3Rpb24gYWJvcnRGZXRjaGVyKGtleTogc3RyaW5nKSB7XG4gICAgbGV0IGNvbnRyb2xsZXIgPSBmZXRjaENvbnRyb2xsZXJzLmdldChrZXkpO1xuICAgIGludmFyaWFudChjb250cm9sbGVyLCBgRXhwZWN0ZWQgZmV0Y2ggY29udHJvbGxlcjogJHtrZXl9YCk7XG4gICAgY29udHJvbGxlci5hYm9ydCgpO1xuICAgIGZldGNoQ29udHJvbGxlcnMuZGVsZXRlKGtleSk7XG4gIH1cblxuICBmdW5jdGlvbiBtYXJrRmV0Y2hlcnNEb25lKGtleXM6IHN0cmluZ1tdKSB7XG4gICAgZm9yIChsZXQga2V5IG9mIGtleXMpIHtcbiAgICAgIGxldCBmZXRjaGVyID0gZ2V0RmV0Y2hlcihrZXkpO1xuICAgICAgbGV0IGRvbmVGZXRjaGVyOiBGZXRjaGVyU3RhdGVzW1wiSWRsZVwiXSA9IHtcbiAgICAgICAgc3RhdGU6IFwiaWRsZVwiLFxuICAgICAgICBkYXRhOiBmZXRjaGVyLmRhdGEsXG4gICAgICAgIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgICAgICAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICAgICAgICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICAgICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgICAgICBcIiBfaGFzRmV0Y2hlckRvbmVBbnl0aGluZyBcIjogdHJ1ZSxcbiAgICAgIH07XG4gICAgICBzdGF0ZS5mZXRjaGVycy5zZXQoa2V5LCBkb25lRmV0Y2hlcik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbWFya0ZldGNoUmVkaXJlY3RzRG9uZSgpOiB2b2lkIHtcbiAgICBsZXQgZG9uZUtleXMgPSBbXTtcbiAgICBmb3IgKGxldCBrZXkgb2YgZmV0Y2hSZWRpcmVjdElkcykge1xuICAgICAgbGV0IGZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQoa2V5KTtcbiAgICAgIGludmFyaWFudChmZXRjaGVyLCBgRXhwZWN0ZWQgZmV0Y2hlcjogJHtrZXl9YCk7XG4gICAgICBpZiAoZmV0Y2hlci5zdGF0ZSA9PT0gXCJsb2FkaW5nXCIpIHtcbiAgICAgICAgZmV0Y2hSZWRpcmVjdElkcy5kZWxldGUoa2V5KTtcbiAgICAgICAgZG9uZUtleXMucHVzaChrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgICBtYXJrRmV0Y2hlcnNEb25lKGRvbmVLZXlzKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFib3J0U3RhbGVGZXRjaExvYWRzKGxhbmRlZElkOiBudW1iZXIpOiBib29sZWFuIHtcbiAgICBsZXQgeWVldGVkS2V5cyA9IFtdO1xuICAgIGZvciAobGV0IFtrZXksIGlkXSBvZiBmZXRjaFJlbG9hZElkcykge1xuICAgICAgaWYgKGlkIDwgbGFuZGVkSWQpIHtcbiAgICAgICAgbGV0IGZldGNoZXIgPSBzdGF0ZS5mZXRjaGVycy5nZXQoa2V5KTtcbiAgICAgICAgaW52YXJpYW50KGZldGNoZXIsIGBFeHBlY3RlZCBmZXRjaGVyOiAke2tleX1gKTtcbiAgICAgICAgaWYgKGZldGNoZXIuc3RhdGUgPT09IFwibG9hZGluZ1wiKSB7XG4gICAgICAgICAgYWJvcnRGZXRjaGVyKGtleSk7XG4gICAgICAgICAgZmV0Y2hSZWxvYWRJZHMuZGVsZXRlKGtleSk7XG4gICAgICAgICAgeWVldGVkS2V5cy5wdXNoKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgbWFya0ZldGNoZXJzRG9uZSh5ZWV0ZWRLZXlzKTtcbiAgICByZXR1cm4geWVldGVkS2V5cy5sZW5ndGggPiAwO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0QmxvY2tlcihrZXk6IHN0cmluZywgZm46IEJsb2NrZXJGdW5jdGlvbikge1xuICAgIGxldCBibG9ja2VyOiBCbG9ja2VyID0gc3RhdGUuYmxvY2tlcnMuZ2V0KGtleSkgfHwgSURMRV9CTE9DS0VSO1xuXG4gICAgaWYgKGJsb2NrZXJGdW5jdGlvbnMuZ2V0KGtleSkgIT09IGZuKSB7XG4gICAgICBibG9ja2VyRnVuY3Rpb25zLnNldChrZXksIGZuKTtcbiAgICB9XG5cbiAgICByZXR1cm4gYmxvY2tlcjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlbGV0ZUJsb2NrZXIoa2V5OiBzdHJpbmcpIHtcbiAgICBzdGF0ZS5ibG9ja2Vycy5kZWxldGUoa2V5KTtcbiAgICBibG9ja2VyRnVuY3Rpb25zLmRlbGV0ZShrZXkpO1xuICB9XG5cbiAgLy8gVXRpbGl0eSBmdW5jdGlvbiB0byB1cGRhdGUgYmxvY2tlcnMsIGVuc3VyaW5nIHZhbGlkIHN0YXRlIHRyYW5zaXRpb25zXG4gIGZ1bmN0aW9uIHVwZGF0ZUJsb2NrZXIoa2V5OiBzdHJpbmcsIG5ld0Jsb2NrZXI6IEJsb2NrZXIpIHtcbiAgICBsZXQgYmxvY2tlciA9IHN0YXRlLmJsb2NrZXJzLmdldChrZXkpIHx8IElETEVfQkxPQ0tFUjtcblxuICAgIC8vIFBvb3IgbWFucyBzdGF0ZSBtYWNoaW5lIDopXG4gICAgLy8gaHR0cHM6Ly9tZXJtYWlkLmxpdmUvZWRpdCNwYWtvOmVOcVZrYzlPd3pBTXhsOGw4bm5qQVlyRXRESU9IRUJJZ3d2S0pUUmVHeTNfbERwSXFPMjdrNmF3TUcwWGNyTGxuejg3bndkb25FU29nS1hYQnVFNzlycTc1WFpPMy15SGRzMFJKVnV2NzBZclBsVXJDRWUySGZyT1JTM3J1YnFaZnVodHBnNUM5d2s1dFo0VktjUlVxODhxOVo4UlMwLTQ4Y0UxaUhKa0wwdWdiSHVGTHVzOUw2c3BaeThuWDlNUDJDTmRvbVZhcG9zcXUzZkdheVQ4VDgtakpRd2hlcG9fVXRwZ0JRYURFVW9tMDRkWmhBTjFhSkJEbFVLSkJ4RTFjZUIyU21qME1sbi1JQlc1QUZVMmR3VWlrdHRfMlFhcTJkQmZhS2RFdXA4NVVWN1lkLWRLamxua2FibDJQdnIwRFRrVHJlTVxuICAgIGludmFyaWFudChcbiAgICAgIChibG9ja2VyLnN0YXRlID09PSBcInVuYmxvY2tlZFwiICYmIG5ld0Jsb2NrZXIuc3RhdGUgPT09IFwiYmxvY2tlZFwiKSB8fFxuICAgICAgICAoYmxvY2tlci5zdGF0ZSA9PT0gXCJibG9ja2VkXCIgJiYgbmV3QmxvY2tlci5zdGF0ZSA9PT0gXCJibG9ja2VkXCIpIHx8XG4gICAgICAgIChibG9ja2VyLnN0YXRlID09PSBcImJsb2NrZWRcIiAmJiBuZXdCbG9ja2VyLnN0YXRlID09PSBcInByb2NlZWRpbmdcIikgfHxcbiAgICAgICAgKGJsb2NrZXIuc3RhdGUgPT09IFwiYmxvY2tlZFwiICYmIG5ld0Jsb2NrZXIuc3RhdGUgPT09IFwidW5ibG9ja2VkXCIpIHx8XG4gICAgICAgIChibG9ja2VyLnN0YXRlID09PSBcInByb2NlZWRpbmdcIiAmJiBuZXdCbG9ja2VyLnN0YXRlID09PSBcInVuYmxvY2tlZFwiKSxcbiAgICAgIGBJbnZhbGlkIGJsb2NrZXIgc3RhdGUgdHJhbnNpdGlvbjogJHtibG9ja2VyLnN0YXRlfSAtPiAke25ld0Jsb2NrZXIuc3RhdGV9YFxuICAgICk7XG5cbiAgICBzdGF0ZS5ibG9ja2Vycy5zZXQoa2V5LCBuZXdCbG9ja2VyKTtcbiAgICB1cGRhdGVTdGF0ZSh7IGJsb2NrZXJzOiBuZXcgTWFwKHN0YXRlLmJsb2NrZXJzKSB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNob3VsZEJsb2NrTmF2aWdhdGlvbih7XG4gICAgY3VycmVudExvY2F0aW9uLFxuICAgIG5leHRMb2NhdGlvbixcbiAgICBoaXN0b3J5QWN0aW9uLFxuICB9OiB7XG4gICAgY3VycmVudExvY2F0aW9uOiBMb2NhdGlvbjtcbiAgICBuZXh0TG9jYXRpb246IExvY2F0aW9uO1xuICAgIGhpc3RvcnlBY3Rpb246IEhpc3RvcnlBY3Rpb247XG4gIH0pOiBzdHJpbmcgfCB1bmRlZmluZWQge1xuICAgIGlmIChibG9ja2VyRnVuY3Rpb25zLnNpemUgPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICAvLyBXZSBvbnkgc3VwcG9ydCBhIHNpbmdsZSBhY3RpdmUgYmxvY2tlciBhdCB0aGUgbW9tZW50IHNpbmNlIHdlIGRvbid0IGhhdmVcbiAgICAvLyBhbnkgY29tcGVsbGluZyB1c2UgY2FzZXMgZm9yIG11bHRpLWJsb2NrZXIgeWV0XG4gICAgaWYgKGJsb2NrZXJGdW5jdGlvbnMuc2l6ZSA+IDEpIHtcbiAgICAgIHdhcm5pbmcoZmFsc2UsIFwiQSByb3V0ZXIgb25seSBzdXBwb3J0cyBvbmUgYmxvY2tlciBhdCBhIHRpbWVcIik7XG4gICAgfVxuXG4gICAgbGV0IGVudHJpZXMgPSBBcnJheS5mcm9tKGJsb2NrZXJGdW5jdGlvbnMuZW50cmllcygpKTtcbiAgICBsZXQgW2Jsb2NrZXJLZXksIGJsb2NrZXJGdW5jdGlvbl0gPSBlbnRyaWVzW2VudHJpZXMubGVuZ3RoIC0gMV07XG4gICAgbGV0IGJsb2NrZXIgPSBzdGF0ZS5ibG9ja2Vycy5nZXQoYmxvY2tlcktleSk7XG5cbiAgICBpZiAoYmxvY2tlciAmJiBibG9ja2VyLnN0YXRlID09PSBcInByb2NlZWRpbmdcIikge1xuICAgICAgLy8gSWYgdGhlIGJsb2NrZXIgaXMgY3VycmVudGx5IHByb2NlZWRpbmcsIHdlIGRvbid0IG5lZWQgdG8gcmUtY2hlY2tcbiAgICAgIC8vIGl0IGFuZCBjYW4gbGV0IHRoaXMgbmF2aWdhdGlvbiBjb250aW51ZVxuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIC8vIEF0IHRoaXMgcG9pbnQsIHdlIGtub3cgd2UncmUgdW5ibG9ja2VkL2Jsb2NrZWQgc28gd2UgbmVlZCB0byBjaGVjayB0aGVcbiAgICAvLyB1c2VyLXByb3ZpZGVkIGJsb2NrZXIgZnVuY3Rpb25cbiAgICBpZiAoYmxvY2tlckZ1bmN0aW9uKHsgY3VycmVudExvY2F0aW9uLCBuZXh0TG9jYXRpb24sIGhpc3RvcnlBY3Rpb24gfSkpIHtcbiAgICAgIHJldHVybiBibG9ja2VyS2V5O1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbmNlbEFjdGl2ZURlZmVycmVkcyhcbiAgICBwcmVkaWNhdGU/OiAocm91dGVJZDogc3RyaW5nKSA9PiBib29sZWFuXG4gICk6IHN0cmluZ1tdIHtcbiAgICBsZXQgY2FuY2VsbGVkUm91dGVJZHM6IHN0cmluZ1tdID0gW107XG4gICAgYWN0aXZlRGVmZXJyZWRzLmZvckVhY2goKGRmZCwgcm91dGVJZCkgPT4ge1xuICAgICAgaWYgKCFwcmVkaWNhdGUgfHwgcHJlZGljYXRlKHJvdXRlSWQpKSB7XG4gICAgICAgIC8vIENhbmNlbCB0aGUgZGVmZXJyZWQgLSBidXQgZG8gbm90IHJlbW92ZSBmcm9tIGFjdGl2ZURlZmVycmVkcyBoZXJlIC1cbiAgICAgICAgLy8gd2UgcmVseSBvbiB0aGUgc3Vic2NyaWJlcnMgdG8gZG8gdGhhdCBzbyBvdXIgdGVzdHMgY2FuIGFzc2VydCBwcm9wZXJcbiAgICAgICAgLy8gY2xlYW51cCB2aWEgX2ludGVybmFsQWN0aXZlRGVmZXJyZWRzXG4gICAgICAgIGRmZC5jYW5jZWwoKTtcbiAgICAgICAgY2FuY2VsbGVkUm91dGVJZHMucHVzaChyb3V0ZUlkKTtcbiAgICAgICAgYWN0aXZlRGVmZXJyZWRzLmRlbGV0ZShyb3V0ZUlkKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gY2FuY2VsbGVkUm91dGVJZHM7XG4gIH1cblxuICAvLyBPcHQgaW4gdG8gY2FwdHVyaW5nIGFuZCByZXBvcnRpbmcgc2Nyb2xsIHBvc2l0aW9ucyBkdXJpbmcgbmF2aWdhdGlvbnMsXG4gIC8vIHVzZWQgYnkgdGhlIDxTY3JvbGxSZXN0b3JhdGlvbj4gY29tcG9uZW50XG4gIGZ1bmN0aW9uIGVuYWJsZVNjcm9sbFJlc3RvcmF0aW9uKFxuICAgIHBvc2l0aW9uczogUmVjb3JkPHN0cmluZywgbnVtYmVyPixcbiAgICBnZXRQb3NpdGlvbjogR2V0U2Nyb2xsUG9zaXRpb25GdW5jdGlvbixcbiAgICBnZXRLZXk/OiBHZXRTY3JvbGxSZXN0b3JhdGlvbktleUZ1bmN0aW9uXG4gICkge1xuICAgIHNhdmVkU2Nyb2xsUG9zaXRpb25zID0gcG9zaXRpb25zO1xuICAgIGdldFNjcm9sbFBvc2l0aW9uID0gZ2V0UG9zaXRpb247XG4gICAgZ2V0U2Nyb2xsUmVzdG9yYXRpb25LZXkgPSBnZXRLZXkgfHwgKChsb2NhdGlvbikgPT4gbG9jYXRpb24ua2V5KTtcblxuICAgIC8vIFBlcmZvcm0gaW5pdGlhbCBoeWRyYXRpb24gc2Nyb2xsIHJlc3RvcmF0aW9uLCBzaW5jZSB3ZSBtaXNzIHRoZSBib2F0IG9uXG4gICAgLy8gdGhlIGluaXRpYWwgdXBkYXRlU3RhdGUoKSBiZWNhdXNlIHdlJ3ZlIG5vdCB5ZXQgcmVuZGVyZWQgPFNjcm9sbFJlc3RvcmF0aW9uLz5cbiAgICAvLyBhbmQgdGhlcmVmb3JlIGhhdmUgbm8gc2F2ZWRTY3JvbGxQb3NpdGlvbnMgYXZhaWxhYmxlXG4gICAgaWYgKCFpbml0aWFsU2Nyb2xsUmVzdG9yZWQgJiYgc3RhdGUubmF2aWdhdGlvbiA9PT0gSURMRV9OQVZJR0FUSU9OKSB7XG4gICAgICBpbml0aWFsU2Nyb2xsUmVzdG9yZWQgPSB0cnVlO1xuICAgICAgbGV0IHkgPSBnZXRTYXZlZFNjcm9sbFBvc2l0aW9uKHN0YXRlLmxvY2F0aW9uLCBzdGF0ZS5tYXRjaGVzKTtcbiAgICAgIGlmICh5ICE9IG51bGwpIHtcbiAgICAgICAgdXBkYXRlU3RhdGUoeyByZXN0b3JlU2Nyb2xsUG9zaXRpb246IHkgfSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHNhdmVkU2Nyb2xsUG9zaXRpb25zID0gbnVsbDtcbiAgICAgIGdldFNjcm9sbFBvc2l0aW9uID0gbnVsbDtcbiAgICAgIGdldFNjcm9sbFJlc3RvcmF0aW9uS2V5ID0gbnVsbDtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gc2F2ZVNjcm9sbFBvc2l0aW9uKFxuICAgIGxvY2F0aW9uOiBMb2NhdGlvbixcbiAgICBtYXRjaGVzOiBBZ25vc3RpY0RhdGFSb3V0ZU1hdGNoW11cbiAgKTogdm9pZCB7XG4gICAgaWYgKHNhdmVkU2Nyb2xsUG9zaXRpb25zICYmIGdldFNjcm9sbFJlc3RvcmF0aW9uS2V5ICYmIGdldFNjcm9sbFBvc2l0aW9uKSB7XG4gICAgICBsZXQgdXNlck1hdGNoZXMgPSBtYXRjaGVzLm1hcCgobSkgPT5cbiAgICAgICAgY3JlYXRlVXNlTWF0Y2hlc01hdGNoKG0sIHN0YXRlLmxvYWRlckRhdGEpXG4gICAgICApO1xuICAgICAgbGV0IGtleSA9IGdldFNjcm9sbFJlc3RvcmF0aW9uS2V5KGxvY2F0aW9uLCB1c2VyTWF0Y2hlcykgfHwgbG9jYXRpb24ua2V5O1xuICAgICAgc2F2ZWRTY3JvbGxQb3NpdGlvbnNba2V5XSA9IGdldFNjcm9sbFBvc2l0aW9uKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0U2F2ZWRTY3JvbGxQb3NpdGlvbihcbiAgICBsb2NhdGlvbjogTG9jYXRpb24sXG4gICAgbWF0Y2hlczogQWdub3N0aWNEYXRhUm91dGVNYXRjaFtdXG4gICk6IG51bWJlciB8IG51bGwge1xuICAgIGlmIChzYXZlZFNjcm9sbFBvc2l0aW9ucyAmJiBnZXRTY3JvbGxSZXN0b3JhdGlvbktleSAmJiBnZXRTY3JvbGxQb3NpdGlvbikge1xuICAgICAgbGV0IHVzZXJNYXRjaGVzID0gbWF0Y2hlcy5tYXAoKG0pID0+XG4gICAgICAgIGNyZWF0ZVVzZU1hdGNoZXNNYXRjaChtLCBzdGF0ZS5sb2FkZXJEYXRhKVxuICAgICAgKTtcbiAgICAgIGxldCBrZXkgPSBnZXRTY3JvbGxSZXN0b3JhdGlvbktleShsb2NhdGlvbiwgdXNlck1hdGNoZXMpIHx8IGxvY2F0aW9uLmtleTtcbiAgICAgIGxldCB5ID0gc2F2ZWRTY3JvbGxQb3NpdGlvbnNba2V5XTtcbiAgICAgIGlmICh0eXBlb2YgeSA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICByZXR1cm4geTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICByb3V0ZXIgPSB7XG4gICAgZ2V0IGJhc2VuYW1lKCkge1xuICAgICAgcmV0dXJuIGluaXQuYmFzZW5hbWU7XG4gICAgfSxcbiAgICBnZXQgc3RhdGUoKSB7XG4gICAgICByZXR1cm4gc3RhdGU7XG4gICAgfSxcbiAgICBnZXQgcm91dGVzKCkge1xuICAgICAgcmV0dXJuIGRhdGFSb3V0ZXM7XG4gICAgfSxcbiAgICBpbml0aWFsaXplLFxuICAgIHN1YnNjcmliZSxcbiAgICBlbmFibGVTY3JvbGxSZXN0b3JhdGlvbixcbiAgICBuYXZpZ2F0ZSxcbiAgICBmZXRjaCxcbiAgICByZXZhbGlkYXRlLFxuICAgIC8vIFBhc3N0aHJvdWdoIHRvIGhpc3RvcnktYXdhcmUgY3JlYXRlSHJlZiB1c2VkIGJ5IHVzZUhyZWYgc28gd2UgZ2V0IHByb3BlclxuICAgIC8vIGhhc2gtYXdhcmUgVVJMcyBpbiBET00gcGF0aHNcbiAgICBjcmVhdGVIcmVmOiAodG86IFRvKSA9PiBpbml0Lmhpc3RvcnkuY3JlYXRlSHJlZih0byksXG4gICAgZW5jb2RlTG9jYXRpb246ICh0bzogVG8pID0+IGluaXQuaGlzdG9yeS5lbmNvZGVMb2NhdGlvbih0byksXG4gICAgZ2V0RmV0Y2hlcixcbiAgICBkZWxldGVGZXRjaGVyLFxuICAgIGRpc3Bvc2UsXG4gICAgZ2V0QmxvY2tlcixcbiAgICBkZWxldGVCbG9ja2VyLFxuICAgIF9pbnRlcm5hbEZldGNoQ29udHJvbGxlcnM6IGZldGNoQ29udHJvbGxlcnMsXG4gICAgX2ludGVybmFsQWN0aXZlRGVmZXJyZWRzOiBhY3RpdmVEZWZlcnJlZHMsXG4gIH07XG5cbiAgcmV0dXJuIHJvdXRlcjtcbn1cbi8vI2VuZHJlZ2lvblxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIGNyZWF0ZVN0YXRpY0hhbmRsZXJcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbmV4cG9ydCBjb25zdCBVTlNBRkVfREVGRVJSRURfU1lNQk9MID0gU3ltYm9sKFwiZGVmZXJyZWRcIik7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTdGF0aWNIYW5kbGVyKFxuICByb3V0ZXM6IEFnbm9zdGljUm91dGVPYmplY3RbXSxcbiAgb3B0cz86IHtcbiAgICBiYXNlbmFtZT86IHN0cmluZztcbiAgfVxuKTogU3RhdGljSGFuZGxlciB7XG4gIGludmFyaWFudChcbiAgICByb3V0ZXMubGVuZ3RoID4gMCxcbiAgICBcIllvdSBtdXN0IHByb3ZpZGUgYSBub24tZW1wdHkgcm91dGVzIGFycmF5IHRvIGNyZWF0ZVN0YXRpY0hhbmRsZXJcIlxuICApO1xuXG4gIGxldCBkYXRhUm91dGVzID0gY29udmVydFJvdXRlc1RvRGF0YVJvdXRlcyhyb3V0ZXMpO1xuICBsZXQgYmFzZW5hbWUgPSAob3B0cyA/IG9wdHMuYmFzZW5hbWUgOiBudWxsKSB8fCBcIi9cIjtcblxuICAvKipcbiAgICogVGhlIHF1ZXJ5KCkgbWV0aG9kIGlzIGludGVuZGVkIGZvciBkb2N1bWVudCByZXF1ZXN0cywgaW4gd2hpY2ggd2Ugd2FudCB0b1xuICAgKiBjYWxsIGFuIG9wdGlvbmFsIGFjdGlvbiBhbmQgcG90ZW50aWFsbHkgbXVsdGlwbGUgbG9hZGVycyBmb3IgYWxsIG5lc3RlZFxuICAgKiByb3V0ZXMuICBJdCByZXR1cm5zIGEgU3RhdGljSGFuZGxlckNvbnRleHQgb2JqZWN0LCB3aGljaCBpcyB2ZXJ5IHNpbWlsYXJcbiAgICogdG8gdGhlIHJvdXRlciBzdGF0ZSAobG9jYXRpb24sIGxvYWRlckRhdGEsIGFjdGlvbkRhdGEsIGVycm9ycywgZXRjLikgYW5kXG4gICAqIGFsc28gYWRkcyBTU1Itc3BlY2lmaWMgaW5mb3JtYXRpb24gc3VjaCBhcyB0aGUgc3RhdHVzQ29kZSBhbmQgaGVhZGVyc1xuICAgKiBmcm9tIGFjdGlvbi9sb2FkZXJzIFJlc3BvbnNlcy5cbiAgICpcbiAgICogSXQgX3Nob3VsZF8gbmV2ZXIgdGhyb3cgYW5kIHNob3VsZCByZXBvcnQgYWxsIGVycm9ycyB0aHJvdWdoIHRoZVxuICAgKiByZXR1cm5lZCBjb250ZXh0LmVycm9ycyBvYmplY3QsIHByb3Blcmx5IGFzc29jaWF0aW5nIGVycm9ycyB0byB0aGVpciBlcnJvclxuICAgKiBib3VuZGFyeS4gIEFkZGl0aW9uYWxseSwgaXQgdHJhY2tzIF9kZWVwZXN0UmVuZGVyZWRCb3VuZGFyeUlkIHdoaWNoIGNhbiBiZVxuICAgKiB1c2VkIHRvIGVtdWxhdGUgUmVhY3QgZXJyb3IgYm91bmRhcmllcyBkdXJpbmcgU1NyIGJ5IHBlcmZvcm1pbmcgYSBzZWNvbmRcbiAgICogcGFzcyBvbmx5IGRvd24gdG8gdGhlIGJvdW5kYXJ5SWQuXG4gICAqXG4gICAqIFRoZSBvbmUgZXhjZXB0aW9uIHdoZXJlIHdlIGRvIG5vdCByZXR1cm4gYSBTdGF0aWNIYW5kbGVyQ29udGV4dCBpcyB3aGVuIGFcbiAgICogcmVkaXJlY3QgcmVzcG9uc2UgaXMgcmV0dXJuZWQgb3IgdGhyb3duIGZyb20gYW55IGFjdGlvbi9sb2FkZXIuICBXZVxuICAgKiBwcm9wYWdhdGUgdGhhdCBvdXQgYW5kIHJldHVybiB0aGUgcmF3IFJlc3BvbnNlIHNvIHRoZSBIVFRQIHNlcnZlciBjYW5cbiAgICogcmV0dXJuIGl0IGRpcmVjdGx5LlxuICAgKi9cbiAgYXN5bmMgZnVuY3Rpb24gcXVlcnkoXG4gICAgcmVxdWVzdDogUmVxdWVzdCxcbiAgICB7IHJlcXVlc3RDb250ZXh0IH06IHsgcmVxdWVzdENvbnRleHQ/OiB1bmtub3duIH0gPSB7fVxuICApOiBQcm9taXNlPFN0YXRpY0hhbmRsZXJDb250ZXh0IHwgUmVzcG9uc2U+IHtcbiAgICBsZXQgdXJsID0gbmV3IFVSTChyZXF1ZXN0LnVybCk7XG4gICAgbGV0IG1ldGhvZCA9IHJlcXVlc3QubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG4gICAgbGV0IGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oXCJcIiwgY3JlYXRlUGF0aCh1cmwpLCBudWxsLCBcImRlZmF1bHRcIik7XG4gICAgbGV0IG1hdGNoZXMgPSBtYXRjaFJvdXRlcyhkYXRhUm91dGVzLCBsb2NhdGlvbiwgYmFzZW5hbWUpO1xuXG4gICAgLy8gU1NSIHN1cHBvcnRzIEhFQUQgcmVxdWVzdHMgd2hpbGUgU1BBIGRvZXNuJ3RcbiAgICBpZiAoIWlzVmFsaWRNZXRob2QobWV0aG9kKSAmJiBtZXRob2QgIT09IFwiaGVhZFwiKSB7XG4gICAgICBsZXQgZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNSwgeyBtZXRob2QgfSk7XG4gICAgICBsZXQgeyBtYXRjaGVzOiBtZXRob2ROb3RBbGxvd2VkTWF0Y2hlcywgcm91dGUgfSA9XG4gICAgICAgIGdldFNob3J0Q2lyY3VpdE1hdGNoZXMoZGF0YVJvdXRlcyk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBiYXNlbmFtZSxcbiAgICAgICAgbG9jYXRpb24sXG4gICAgICAgIG1hdGNoZXM6IG1ldGhvZE5vdEFsbG93ZWRNYXRjaGVzLFxuICAgICAgICBsb2FkZXJEYXRhOiB7fSxcbiAgICAgICAgYWN0aW9uRGF0YTogbnVsbCxcbiAgICAgICAgZXJyb3JzOiB7XG4gICAgICAgICAgW3JvdXRlLmlkXTogZXJyb3IsXG4gICAgICAgIH0sXG4gICAgICAgIHN0YXR1c0NvZGU6IGVycm9yLnN0YXR1cyxcbiAgICAgICAgbG9hZGVySGVhZGVyczoge30sXG4gICAgICAgIGFjdGlvbkhlYWRlcnM6IHt9LFxuICAgICAgICBhY3RpdmVEZWZlcnJlZHM6IG51bGwsXG4gICAgICB9O1xuICAgIH0gZWxzZSBpZiAoIW1hdGNoZXMpIHtcbiAgICAgIGxldCBlcnJvciA9IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA0LCB7IHBhdGhuYW1lOiBsb2NhdGlvbi5wYXRobmFtZSB9KTtcbiAgICAgIGxldCB7IG1hdGNoZXM6IG5vdEZvdW5kTWF0Y2hlcywgcm91dGUgfSA9XG4gICAgICAgIGdldFNob3J0Q2lyY3VpdE1hdGNoZXMoZGF0YVJvdXRlcyk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBiYXNlbmFtZSxcbiAgICAgICAgbG9jYXRpb24sXG4gICAgICAgIG1hdGNoZXM6IG5vdEZvdW5kTWF0Y2hlcyxcbiAgICAgICAgbG9hZGVyRGF0YToge30sXG4gICAgICAgIGFjdGlvbkRhdGE6IG51bGwsXG4gICAgICAgIGVycm9yczoge1xuICAgICAgICAgIFtyb3V0ZS5pZF06IGVycm9yLFxuICAgICAgICB9LFxuICAgICAgICBzdGF0dXNDb2RlOiBlcnJvci5zdGF0dXMsXG4gICAgICAgIGxvYWRlckhlYWRlcnM6IHt9LFxuICAgICAgICBhY3Rpb25IZWFkZXJzOiB7fSxcbiAgICAgICAgYWN0aXZlRGVmZXJyZWRzOiBudWxsLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBsZXQgcmVzdWx0ID0gYXdhaXQgcXVlcnlJbXBsKHJlcXVlc3QsIGxvY2F0aW9uLCBtYXRjaGVzLCByZXF1ZXN0Q29udGV4dCk7XG4gICAgaWYgKGlzUmVzcG9uc2UocmVzdWx0KSkge1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICAvLyBXaGVuIHJldHVybmluZyBTdGF0aWNIYW5kbGVyQ29udGV4dCwgd2UgcGF0Y2ggYmFjayBpbiB0aGUgbG9jYXRpb24gaGVyZVxuICAgIC8vIHNpbmNlIHdlIG5lZWQgaXQgZm9yIFJlYWN0IENvbnRleHQuICBCdXQgdGhpcyBoZWxwcyBrZWVwIG91ciBzdWJtaXQgYW5kXG4gICAgLy8gbG9hZFJvdXRlRGF0YSBvcGVyYXRpbmcgb24gYSBSZXF1ZXN0IGluc3RlYWQgb2YgYSBMb2NhdGlvblxuICAgIHJldHVybiB7IGxvY2F0aW9uLCBiYXNlbmFtZSwgLi4ucmVzdWx0IH07XG4gIH1cblxuICAvKipcbiAgICogVGhlIHF1ZXJ5Um91dGUoKSBtZXRob2QgaXMgaW50ZW5kZWQgZm9yIHRhcmdldGVkIHJvdXRlIHJlcXVlc3RzLCBlaXRoZXJcbiAgICogZm9yIGZldGNoID9fZGF0YSByZXF1ZXN0cyBvciByZXNvdXJjZSByb3V0ZSByZXF1ZXN0cy4gIEluIHRoaXMgY2FzZSwgd2VcbiAgICogYXJlIG9ubHkgZXZlciBjYWxsaW5nIGEgc2luZ2xlIGFjdGlvbiBvciBsb2FkZXIsIGFuZCB3ZSBhcmUgcmV0dXJuaW5nIHRoZVxuICAgKiByZXR1cm5lZCB2YWx1ZSBkaXJlY3RseS4gIEluIG1vc3QgY2FzZXMsIHRoaXMgd2lsbCBiZSBhIFJlc3BvbnNlIHJldHVybmVkXG4gICAqIGZyb20gdGhlIGFjdGlvbi9sb2FkZXIsIGJ1dCBpdCBtYXkgYmUgYSBwcmltaXRpdmUgb3Igb3RoZXIgdmFsdWUgYXMgd2VsbCAtXG4gICAqIGFuZCBpbiBzdWNoIGNhc2VzIHRoZSBjYWxsaW5nIGNvbnRleHQgc2hvdWxkIGhhbmRsZSB0aGF0IGFjY29yZGluZ2x5LlxuICAgKlxuICAgKiBXZSBkbyByZXNwZWN0IHRoZSB0aHJvdy9yZXR1cm4gZGlmZmVyZW50aWF0aW9uLCBzbyBpZiBhbiBhY3Rpb24vbG9hZGVyXG4gICAqIHRocm93cywgdGhlbiB0aGlzIG1ldGhvZCB3aWxsIHRocm93IHRoZSB2YWx1ZS4gIFRoaXMgaXMgaW1wb3J0YW50IHNvIHdlXG4gICAqIGNhbiBkbyBwcm9wZXIgYm91bmRhcnkgaWRlbnRpZmljYXRpb24gaW4gUmVtaXggd2hlcmUgYSB0aHJvd24gUmVzcG9uc2VcbiAgICogbXVzdCBnbyB0byB0aGUgQ2F0Y2ggQm91bmRhcnkgYnV0IGEgcmV0dXJuZWQgUmVzcG9uc2UgaXMgaGFwcHktcGF0aC5cbiAgICpcbiAgICogT25lIHRoaW5nIHRvIG5vdGUgaXMgdGhhdCBhbnkgUm91dGVyLWluaXRpYXRlZCBFcnJvcnMgdGhhdCBtYWtlIHNlbnNlXG4gICAqIHRvIGFzc29jaWF0ZSB3aXRoIGEgc3RhdHVzIGNvZGUgd2lsbCBiZSB0aHJvd24gYXMgYW4gRXJyb3JSZXNwb25zZVxuICAgKiBpbnN0YW5jZSB3aGljaCBpbmNsdWRlIHRoZSByYXcgRXJyb3IsIHN1Y2ggdGhhdCB0aGUgY2FsbGluZyBjb250ZXh0IGNhblxuICAgKiBzZXJpYWxpemUgdGhlIGVycm9yIGFzIHRoZXkgc2VlIGZpdCB3aGlsZSBpbmNsdWRpbmcgdGhlIHByb3BlciByZXNwb25zZVxuICAgKiBjb2RlLiAgRXhhbXBsZXMgaGVyZSBhcmUgNDA0IGFuZCA0MDUgZXJyb3JzIHRoYXQgb2NjdXIgcHJpb3IgdG8gcmVhY2hpbmdcbiAgICogYW55IHVzZXItZGVmaW5lZCBsb2FkZXJzLlxuICAgKi9cbiAgYXN5bmMgZnVuY3Rpb24gcXVlcnlSb3V0ZShcbiAgICByZXF1ZXN0OiBSZXF1ZXN0LFxuICAgIHtcbiAgICAgIHJvdXRlSWQsXG4gICAgICByZXF1ZXN0Q29udGV4dCxcbiAgICB9OiB7IHJlcXVlc3RDb250ZXh0PzogdW5rbm93bjsgcm91dGVJZD86IHN0cmluZyB9ID0ge31cbiAgKTogUHJvbWlzZTxhbnk+IHtcbiAgICBsZXQgdXJsID0gbmV3IFVSTChyZXF1ZXN0LnVybCk7XG4gICAgbGV0IG1ldGhvZCA9IHJlcXVlc3QubWV0aG9kLnRvTG93ZXJDYXNlKCk7XG4gICAgbGV0IGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oXCJcIiwgY3JlYXRlUGF0aCh1cmwpLCBudWxsLCBcImRlZmF1bHRcIik7XG4gICAgbGV0IG1hdGNoZXMgPSBtYXRjaFJvdXRlcyhkYXRhUm91dGVzLCBsb2NhdGlvbiwgYmFzZW5hbWUpO1xuXG4gICAgLy8gU1NSIHN1cHBvcnRzIEhFQUQgcmVxdWVzdHMgd2hpbGUgU1BBIGRvZXNuJ3RcbiAgICBpZiAoIWlzVmFsaWRNZXRob2QobWV0aG9kKSAmJiBtZXRob2QgIT09IFwiaGVhZFwiICYmIG1ldGhvZCAhPT0gXCJvcHRpb25zXCIpIHtcbiAgICAgIHRocm93IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA1LCB7IG1ldGhvZCB9KTtcbiAgICB9IGVsc2UgaWYgKCFtYXRjaGVzKSB7XG4gICAgICB0aHJvdyBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwNCwgeyBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUgfSk7XG4gICAgfVxuXG4gICAgbGV0IG1hdGNoID0gcm91dGVJZFxuICAgICAgPyBtYXRjaGVzLmZpbmQoKG0pID0+IG0ucm91dGUuaWQgPT09IHJvdXRlSWQpXG4gICAgICA6IGdldFRhcmdldE1hdGNoKG1hdGNoZXMsIGxvY2F0aW9uKTtcblxuICAgIGlmIChyb3V0ZUlkICYmICFtYXRjaCkge1xuICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDMsIHtcbiAgICAgICAgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICByb3V0ZUlkLFxuICAgICAgfSk7XG4gICAgfSBlbHNlIGlmICghbWF0Y2gpIHtcbiAgICAgIC8vIFRoaXMgc2hvdWxkIG5ldmVyIGhpdCBJIGRvbid0IHRoaW5rP1xuICAgICAgdGhyb3cgZ2V0SW50ZXJuYWxSb3V0ZXJFcnJvcig0MDQsIHsgcGF0aG5hbWU6IGxvY2F0aW9uLnBhdGhuYW1lIH0pO1xuICAgIH1cblxuICAgIGxldCByZXN1bHQgPSBhd2FpdCBxdWVyeUltcGwoXG4gICAgICByZXF1ZXN0LFxuICAgICAgbG9jYXRpb24sXG4gICAgICBtYXRjaGVzLFxuICAgICAgcmVxdWVzdENvbnRleHQsXG4gICAgICBtYXRjaFxuICAgICk7XG4gICAgaWYgKGlzUmVzcG9uc2UocmVzdWx0KSkge1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9XG5cbiAgICBsZXQgZXJyb3IgPSByZXN1bHQuZXJyb3JzID8gT2JqZWN0LnZhbHVlcyhyZXN1bHQuZXJyb3JzKVswXSA6IHVuZGVmaW5lZDtcbiAgICBpZiAoZXJyb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gSWYgd2UgZ290IGJhY2sgcmVzdWx0LmVycm9ycywgdGhhdCBtZWFucyB0aGUgbG9hZGVyL2FjdGlvbiB0aHJld1xuICAgICAgLy8gX3NvbWV0aGluZ18gdGhhdCB3YXNuJ3QgYSBSZXNwb25zZSwgYnV0IGl0J3Mgbm90IGd1YXJhbnRlZWQvcmVxdWlyZWRcbiAgICAgIC8vIHRvIGJlIGFuIGBpbnN0YW5jZW9mIEVycm9yYCBlaXRoZXIsIHNvIHdlIGhhdmUgdG8gdXNlIHRocm93IGhlcmUgdG9cbiAgICAgIC8vIHByZXNlcnZlIHRoZSBcImVycm9yXCIgc3RhdGUgb3V0c2lkZSBvZiBxdWVyeUltcGwuXG4gICAgICB0aHJvdyBlcnJvcjtcbiAgICB9XG5cbiAgICAvLyBQaWNrIG9mZiB0aGUgcmlnaHQgc3RhdGUgdmFsdWUgdG8gcmV0dXJuXG4gICAgaWYgKHJlc3VsdC5hY3Rpb25EYXRhKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LnZhbHVlcyhyZXN1bHQuYWN0aW9uRGF0YSlbMF07XG4gICAgfVxuXG4gICAgaWYgKHJlc3VsdC5sb2FkZXJEYXRhKSB7XG4gICAgICBsZXQgZGF0YSA9IE9iamVjdC52YWx1ZXMocmVzdWx0LmxvYWRlckRhdGEpWzBdO1xuICAgICAgaWYgKHJlc3VsdC5hY3RpdmVEZWZlcnJlZHM/LlttYXRjaC5yb3V0ZS5pZF0pIHtcbiAgICAgICAgZGF0YVtVTlNBRkVfREVGRVJSRURfU1lNQk9MXSA9IHJlc3VsdC5hY3RpdmVEZWZlcnJlZHNbbWF0Y2gucm91dGUuaWRdO1xuICAgICAgfVxuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuXG4gICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxuXG4gIGFzeW5jIGZ1bmN0aW9uIHF1ZXJ5SW1wbChcbiAgICByZXF1ZXN0OiBSZXF1ZXN0LFxuICAgIGxvY2F0aW9uOiBMb2NhdGlvbixcbiAgICBtYXRjaGVzOiBBZ25vc3RpY0RhdGFSb3V0ZU1hdGNoW10sXG4gICAgcmVxdWVzdENvbnRleHQ6IHVua25vd24sXG4gICAgcm91dGVNYXRjaD86IEFnbm9zdGljRGF0YVJvdXRlTWF0Y2hcbiAgKTogUHJvbWlzZTxPbWl0PFN0YXRpY0hhbmRsZXJDb250ZXh0LCBcImxvY2F0aW9uXCIgfCBcImJhc2VuYW1lXCI+IHwgUmVzcG9uc2U+IHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICByZXF1ZXN0LnNpZ25hbCxcbiAgICAgIFwicXVlcnkoKS9xdWVyeVJvdXRlKCkgcmVxdWVzdHMgbXVzdCBjb250YWluIGFuIEFib3J0Q29udHJvbGxlciBzaWduYWxcIlxuICAgICk7XG5cbiAgICB0cnkge1xuICAgICAgaWYgKGlzTXV0YXRpb25NZXRob2QocmVxdWVzdC5tZXRob2QudG9Mb3dlckNhc2UoKSkpIHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IGF3YWl0IHN1Ym1pdChcbiAgICAgICAgICByZXF1ZXN0LFxuICAgICAgICAgIG1hdGNoZXMsXG4gICAgICAgICAgcm91dGVNYXRjaCB8fCBnZXRUYXJnZXRNYXRjaChtYXRjaGVzLCBsb2NhdGlvbiksXG4gICAgICAgICAgcmVxdWVzdENvbnRleHQsXG4gICAgICAgICAgcm91dGVNYXRjaCAhPSBudWxsXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9XG5cbiAgICAgIGxldCByZXN1bHQgPSBhd2FpdCBsb2FkUm91dGVEYXRhKFxuICAgICAgICByZXF1ZXN0LFxuICAgICAgICBtYXRjaGVzLFxuICAgICAgICByZXF1ZXN0Q29udGV4dCxcbiAgICAgICAgcm91dGVNYXRjaFxuICAgICAgKTtcbiAgICAgIHJldHVybiBpc1Jlc3BvbnNlKHJlc3VsdClcbiAgICAgICAgPyByZXN1bHRcbiAgICAgICAgOiB7XG4gICAgICAgICAgICAuLi5yZXN1bHQsXG4gICAgICAgICAgICBhY3Rpb25EYXRhOiBudWxsLFxuICAgICAgICAgICAgYWN0aW9uSGVhZGVyczoge30sXG4gICAgICAgICAgfTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBJZiB0aGUgdXNlciB0aHJldy9yZXR1cm5lZCBhIFJlc3BvbnNlIGluIGNhbGxMb2FkZXJPckFjdGlvbiwgd2UgdGhyb3dcbiAgICAgIC8vIGl0IHRvIGJhaWwgb3V0IGFuZCB0aGVuIHJldHVybiBvciB0aHJvdyBoZXJlIGJhc2VkIG9uIHdoZXRoZXIgdGhlIHVzZXJcbiAgICAgIC8vIHJldHVybmVkIG9yIHRocmV3XG4gICAgICBpZiAoaXNRdWVyeVJvdXRlUmVzcG9uc2UoZSkpIHtcbiAgICAgICAgaWYgKGUudHlwZSA9PT0gUmVzdWx0VHlwZS5lcnJvciAmJiAhaXNSZWRpcmVjdFJlc3BvbnNlKGUucmVzcG9uc2UpKSB7XG4gICAgICAgICAgdGhyb3cgZS5yZXNwb25zZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZS5yZXNwb25zZTtcbiAgICAgIH1cbiAgICAgIC8vIFJlZGlyZWN0cyBhcmUgYWx3YXlzIHJldHVybmVkIHNpbmNlIHRoZXkgZG9uJ3QgcHJvcGFnYXRlIHRvIGNhdGNoXG4gICAgICAvLyBib3VuZGFyaWVzXG4gICAgICBpZiAoaXNSZWRpcmVjdFJlc3BvbnNlKGUpKSB7XG4gICAgICAgIHJldHVybiBlO1xuICAgICAgfVxuICAgICAgdGhyb3cgZTtcbiAgICB9XG4gIH1cblxuICBhc3luYyBmdW5jdGlvbiBzdWJtaXQoXG4gICAgcmVxdWVzdDogUmVxdWVzdCxcbiAgICBtYXRjaGVzOiBBZ25vc3RpY0RhdGFSb3V0ZU1hdGNoW10sXG4gICAgYWN0aW9uTWF0Y2g6IEFnbm9zdGljRGF0YVJvdXRlTWF0Y2gsXG4gICAgcmVxdWVzdENvbnRleHQ6IHVua25vd24sXG4gICAgaXNSb3V0ZVJlcXVlc3Q6IGJvb2xlYW5cbiAgKTogUHJvbWlzZTxPbWl0PFN0YXRpY0hhbmRsZXJDb250ZXh0LCBcImxvY2F0aW9uXCIgfCBcImJhc2VuYW1lXCI+IHwgUmVzcG9uc2U+IHtcbiAgICBsZXQgcmVzdWx0OiBEYXRhUmVzdWx0O1xuXG4gICAgaWYgKCFhY3Rpb25NYXRjaC5yb3V0ZS5hY3Rpb24pIHtcbiAgICAgIGxldCBlcnJvciA9IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA1LCB7XG4gICAgICAgIG1ldGhvZDogcmVxdWVzdC5tZXRob2QsXG4gICAgICAgIHBhdGhuYW1lOiBuZXcgVVJMKHJlcXVlc3QudXJsKS5wYXRobmFtZSxcbiAgICAgICAgcm91dGVJZDogYWN0aW9uTWF0Y2gucm91dGUuaWQsXG4gICAgICB9KTtcbiAgICAgIGlmIChpc1JvdXRlUmVxdWVzdCkge1xuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5lcnJvcixcbiAgICAgICAgZXJyb3IsXG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXN1bHQgPSBhd2FpdCBjYWxsTG9hZGVyT3JBY3Rpb24oXG4gICAgICAgIFwiYWN0aW9uXCIsXG4gICAgICAgIHJlcXVlc3QsXG4gICAgICAgIGFjdGlvbk1hdGNoLFxuICAgICAgICBtYXRjaGVzLFxuICAgICAgICBiYXNlbmFtZSxcbiAgICAgICAgdHJ1ZSxcbiAgICAgICAgaXNSb3V0ZVJlcXVlc3QsXG4gICAgICAgIHJlcXVlc3RDb250ZXh0XG4gICAgICApO1xuXG4gICAgICBpZiAocmVxdWVzdC5zaWduYWwuYWJvcnRlZCkge1xuICAgICAgICBsZXQgbWV0aG9kID0gaXNSb3V0ZVJlcXVlc3QgPyBcInF1ZXJ5Um91dGVcIiA6IFwicXVlcnlcIjtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGAke21ldGhvZH0oKSBjYWxsIGFib3J0ZWRgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaXNSZWRpcmVjdFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAvLyBVaGhoaCAtIHRoaXMgc2hvdWxkIG5ldmVyIGhhcHBlbiwgd2Ugc2hvdWxkIGFsd2F5cyB0aHJvdyB0aGVzZSBmcm9tXG4gICAgICAvLyBjYWxsTG9hZGVyT3JBY3Rpb24sIGJ1dCB0aGUgdHlwZSBuYXJyb3dpbmcgaGVyZSBrZWVwcyBUUyBoYXBweSBhbmQgd2VcbiAgICAgIC8vIGNhbiBnZXQgYmFjayBvbiB0aGUgXCJ0aHJvdyBhbGwgcmVkaXJlY3QgcmVzcG9uc2VzXCIgdHJhaW4gaGVyZSBzaG91bGRcbiAgICAgIC8vIHRoaXMgZXZlciBoYXBwZW4gOi9cbiAgICAgIHRocm93IG5ldyBSZXNwb25zZShudWxsLCB7XG4gICAgICAgIHN0YXR1czogcmVzdWx0LnN0YXR1cyxcbiAgICAgICAgaGVhZGVyczoge1xuICAgICAgICAgIExvY2F0aW9uOiByZXN1bHQubG9jYXRpb24sXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAoaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICBsZXQgZXJyb3IgPSBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwMCwgeyB0eXBlOiBcImRlZmVyLWFjdGlvblwiIH0pO1xuICAgICAgaWYgKGlzUm91dGVSZXF1ZXN0KSB7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuICAgICAgcmVzdWx0ID0ge1xuICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLmVycm9yLFxuICAgICAgICBlcnJvcixcbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKGlzUm91dGVSZXF1ZXN0KSB7XG4gICAgICAvLyBOb3RlOiBUaGlzIHNob3VsZCBvbmx5IGJlIG5vbi1SZXNwb25zZSB2YWx1ZXMgaWYgd2UgZ2V0IGhlcmUsIHNpbmNlXG4gICAgICAvLyBpc1JvdXRlUmVxdWVzdCBzaG91bGQgdGhyb3cgYW55IFJlc3BvbnNlIHJlY2VpdmVkIGluIGNhbGxMb2FkZXJPckFjdGlvblxuICAgICAgaWYgKGlzRXJyb3JSZXN1bHQocmVzdWx0KSkge1xuICAgICAgICB0aHJvdyByZXN1bHQuZXJyb3I7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1hdGNoZXM6IFthY3Rpb25NYXRjaF0sXG4gICAgICAgIGxvYWRlckRhdGE6IHt9LFxuICAgICAgICBhY3Rpb25EYXRhOiB7IFthY3Rpb25NYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5kYXRhIH0sXG4gICAgICAgIGVycm9yczogbnVsbCxcbiAgICAgICAgLy8gTm90ZTogc3RhdHVzQ29kZSArIGhlYWRlcnMgYXJlIHVudXNlZCBoZXJlIHNpbmNlIHF1ZXJ5Um91dGUgd2lsbFxuICAgICAgICAvLyByZXR1cm4gdGhlIHJhdyBSZXNwb25zZSBvciB2YWx1ZVxuICAgICAgICBzdGF0dXNDb2RlOiAyMDAsXG4gICAgICAgIGxvYWRlckhlYWRlcnM6IHt9LFxuICAgICAgICBhY3Rpb25IZWFkZXJzOiB7fSxcbiAgICAgICAgYWN0aXZlRGVmZXJyZWRzOiBudWxsLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAoaXNFcnJvclJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAvLyBTdG9yZSBvZmYgdGhlIHBlbmRpbmcgZXJyb3IgLSB3ZSB1c2UgaXQgdG8gZGV0ZXJtaW5lIHdoaWNoIGxvYWRlcnNcbiAgICAgIC8vIHRvIGNhbGwgYW5kIHdpbGwgY29tbWl0IGl0IHdoZW4gd2UgY29tcGxldGUgdGhlIG5hdmlnYXRpb25cbiAgICAgIGxldCBib3VuZGFyeU1hdGNoID0gZmluZE5lYXJlc3RCb3VuZGFyeShtYXRjaGVzLCBhY3Rpb25NYXRjaC5yb3V0ZS5pZCk7XG4gICAgICBsZXQgY29udGV4dCA9IGF3YWl0IGxvYWRSb3V0ZURhdGEoXG4gICAgICAgIHJlcXVlc3QsXG4gICAgICAgIG1hdGNoZXMsXG4gICAgICAgIHJlcXVlc3RDb250ZXh0LFxuICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgIHtcbiAgICAgICAgICBbYm91bmRhcnlNYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5lcnJvcixcbiAgICAgICAgfVxuICAgICAgKTtcblxuICAgICAgLy8gYWN0aW9uIHN0YXR1cyBjb2RlcyB0YWtlIHByZWNlZGVuY2Ugb3ZlciBsb2FkZXIgc3RhdHVzIGNvZGVzXG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5jb250ZXh0LFxuICAgICAgICBzdGF0dXNDb2RlOiBpc1JvdXRlRXJyb3JSZXNwb25zZShyZXN1bHQuZXJyb3IpXG4gICAgICAgICAgPyByZXN1bHQuZXJyb3Iuc3RhdHVzXG4gICAgICAgICAgOiA1MDAsXG4gICAgICAgIGFjdGlvbkRhdGE6IG51bGwsXG4gICAgICAgIGFjdGlvbkhlYWRlcnM6IHtcbiAgICAgICAgICAuLi4ocmVzdWx0LmhlYWRlcnMgPyB7IFthY3Rpb25NYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5oZWFkZXJzIH0gOiB7fSksXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIENyZWF0ZSBhIEdFVCByZXF1ZXN0IGZvciB0aGUgbG9hZGVyc1xuICAgIGxldCBsb2FkZXJSZXF1ZXN0ID0gbmV3IFJlcXVlc3QocmVxdWVzdC51cmwsIHtcbiAgICAgIGhlYWRlcnM6IHJlcXVlc3QuaGVhZGVycyxcbiAgICAgIHJlZGlyZWN0OiByZXF1ZXN0LnJlZGlyZWN0LFxuICAgICAgc2lnbmFsOiByZXF1ZXN0LnNpZ25hbCxcbiAgICB9KTtcbiAgICBsZXQgY29udGV4dCA9IGF3YWl0IGxvYWRSb3V0ZURhdGEobG9hZGVyUmVxdWVzdCwgbWF0Y2hlcywgcmVxdWVzdENvbnRleHQpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIC4uLmNvbnRleHQsXG4gICAgICAvLyBhY3Rpb24gc3RhdHVzIGNvZGVzIHRha2UgcHJlY2VkZW5jZSBvdmVyIGxvYWRlciBzdGF0dXMgY29kZXNcbiAgICAgIC4uLihyZXN1bHQuc3RhdHVzQ29kZSA/IHsgc3RhdHVzQ29kZTogcmVzdWx0LnN0YXR1c0NvZGUgfSA6IHt9KSxcbiAgICAgIGFjdGlvbkRhdGE6IHtcbiAgICAgICAgW2FjdGlvbk1hdGNoLnJvdXRlLmlkXTogcmVzdWx0LmRhdGEsXG4gICAgICB9LFxuICAgICAgYWN0aW9uSGVhZGVyczoge1xuICAgICAgICAuLi4ocmVzdWx0LmhlYWRlcnMgPyB7IFthY3Rpb25NYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5oZWFkZXJzIH0gOiB7fSksXG4gICAgICB9LFxuICAgIH07XG4gIH1cblxuICBhc3luYyBmdW5jdGlvbiBsb2FkUm91dGVEYXRhKFxuICAgIHJlcXVlc3Q6IFJlcXVlc3QsXG4gICAgbWF0Y2hlczogQWdub3N0aWNEYXRhUm91dGVNYXRjaFtdLFxuICAgIHJlcXVlc3RDb250ZXh0OiB1bmtub3duLFxuICAgIHJvdXRlTWF0Y2g/OiBBZ25vc3RpY0RhdGFSb3V0ZU1hdGNoLFxuICAgIHBlbmRpbmdBY3Rpb25FcnJvcj86IFJvdXRlRGF0YVxuICApOiBQcm9taXNlPFxuICAgIHwgT21pdDxcbiAgICAgICAgU3RhdGljSGFuZGxlckNvbnRleHQsXG4gICAgICAgIFwibG9jYXRpb25cIiB8IFwiYmFzZW5hbWVcIiB8IFwiYWN0aW9uRGF0YVwiIHwgXCJhY3Rpb25IZWFkZXJzXCJcbiAgICAgID5cbiAgICB8IFJlc3BvbnNlXG4gID4ge1xuICAgIGxldCBpc1JvdXRlUmVxdWVzdCA9IHJvdXRlTWF0Y2ggIT0gbnVsbDtcblxuICAgIC8vIFNob3J0IGNpcmN1aXQgaWYgd2UgaGF2ZSBubyBsb2FkZXJzIHRvIHJ1biAocXVlcnlSb3V0ZSgpKVxuICAgIGlmIChpc1JvdXRlUmVxdWVzdCAmJiAhcm91dGVNYXRjaD8ucm91dGUubG9hZGVyKSB7XG4gICAgICB0aHJvdyBnZXRJbnRlcm5hbFJvdXRlckVycm9yKDQwMCwge1xuICAgICAgICBtZXRob2Q6IHJlcXVlc3QubWV0aG9kLFxuICAgICAgICBwYXRobmFtZTogbmV3IFVSTChyZXF1ZXN0LnVybCkucGF0aG5hbWUsXG4gICAgICAgIHJvdXRlSWQ6IHJvdXRlTWF0Y2g/LnJvdXRlLmlkLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgbGV0IHJlcXVlc3RNYXRjaGVzID0gcm91dGVNYXRjaFxuICAgICAgPyBbcm91dGVNYXRjaF1cbiAgICAgIDogZ2V0TG9hZGVyTWF0Y2hlc1VudGlsQm91bmRhcnkoXG4gICAgICAgICAgbWF0Y2hlcyxcbiAgICAgICAgICBPYmplY3Qua2V5cyhwZW5kaW5nQWN0aW9uRXJyb3IgfHwge30pWzBdXG4gICAgICAgICk7XG4gICAgbGV0IG1hdGNoZXNUb0xvYWQgPSByZXF1ZXN0TWF0Y2hlcy5maWx0ZXIoKG0pID0+IG0ucm91dGUubG9hZGVyKTtcblxuICAgIC8vIFNob3J0IGNpcmN1aXQgaWYgd2UgaGF2ZSBubyBsb2FkZXJzIHRvIHJ1biAocXVlcnkoKSlcbiAgICBpZiAobWF0Y2hlc1RvTG9hZC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG1hdGNoZXMsXG4gICAgICAgIC8vIEFkZCBhIG51bGwgZm9yIGFsbCBtYXRjaGVkIHJvdXRlcyBmb3IgcHJvcGVyIHJldmFsaWRhdGlvbiBvbiB0aGUgY2xpZW50XG4gICAgICAgIGxvYWRlckRhdGE6IG1hdGNoZXMucmVkdWNlKFxuICAgICAgICAgIChhY2MsIG0pID0+IE9iamVjdC5hc3NpZ24oYWNjLCB7IFttLnJvdXRlLmlkXTogbnVsbCB9KSxcbiAgICAgICAgICB7fVxuICAgICAgICApLFxuICAgICAgICBlcnJvcnM6IHBlbmRpbmdBY3Rpb25FcnJvciB8fCBudWxsLFxuICAgICAgICBzdGF0dXNDb2RlOiAyMDAsXG4gICAgICAgIGxvYWRlckhlYWRlcnM6IHt9LFxuICAgICAgICBhY3RpdmVEZWZlcnJlZHM6IG51bGwsXG4gICAgICB9O1xuICAgIH1cblxuICAgIGxldCByZXN1bHRzID0gYXdhaXQgUHJvbWlzZS5hbGwoW1xuICAgICAgLi4ubWF0Y2hlc1RvTG9hZC5tYXAoKG1hdGNoKSA9PlxuICAgICAgICBjYWxsTG9hZGVyT3JBY3Rpb24oXG4gICAgICAgICAgXCJsb2FkZXJcIixcbiAgICAgICAgICByZXF1ZXN0LFxuICAgICAgICAgIG1hdGNoLFxuICAgICAgICAgIG1hdGNoZXMsXG4gICAgICAgICAgYmFzZW5hbWUsXG4gICAgICAgICAgdHJ1ZSxcbiAgICAgICAgICBpc1JvdXRlUmVxdWVzdCxcbiAgICAgICAgICByZXF1ZXN0Q29udGV4dFxuICAgICAgICApXG4gICAgICApLFxuICAgIF0pO1xuXG4gICAgaWYgKHJlcXVlc3Quc2lnbmFsLmFib3J0ZWQpIHtcbiAgICAgIGxldCBtZXRob2QgPSBpc1JvdXRlUmVxdWVzdCA/IFwicXVlcnlSb3V0ZVwiIDogXCJxdWVyeVwiO1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGAke21ldGhvZH0oKSBjYWxsIGFib3J0ZWRgKTtcbiAgICB9XG5cbiAgICAvLyBQcm9jZXNzIGFuZCBjb21taXQgb3V0cHV0IGZyb20gbG9hZGVyc1xuICAgIGxldCBhY3RpdmVEZWZlcnJlZHMgPSBuZXcgTWFwPHN0cmluZywgRGVmZXJyZWREYXRhPigpO1xuICAgIGxldCBjb250ZXh0ID0gcHJvY2Vzc1JvdXRlTG9hZGVyRGF0YShcbiAgICAgIG1hdGNoZXMsXG4gICAgICBtYXRjaGVzVG9Mb2FkLFxuICAgICAgcmVzdWx0cyxcbiAgICAgIHBlbmRpbmdBY3Rpb25FcnJvcixcbiAgICAgIGFjdGl2ZURlZmVycmVkc1xuICAgICk7XG5cbiAgICAvLyBBZGQgYSBudWxsIGZvciBhbnkgbm9uLWxvYWRlciBtYXRjaGVzIGZvciBwcm9wZXIgcmV2YWxpZGF0aW9uIG9uIHRoZSBjbGllbnRcbiAgICBsZXQgZXhlY3V0ZWRMb2FkZXJzID0gbmV3IFNldDxzdHJpbmc+KFxuICAgICAgbWF0Y2hlc1RvTG9hZC5tYXAoKG1hdGNoKSA9PiBtYXRjaC5yb3V0ZS5pZClcbiAgICApO1xuICAgIG1hdGNoZXMuZm9yRWFjaCgobWF0Y2gpID0+IHtcbiAgICAgIGlmICghZXhlY3V0ZWRMb2FkZXJzLmhhcyhtYXRjaC5yb3V0ZS5pZCkpIHtcbiAgICAgICAgY29udGV4dC5sb2FkZXJEYXRhW21hdGNoLnJvdXRlLmlkXSA9IG51bGw7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4ge1xuICAgICAgLi4uY29udGV4dCxcbiAgICAgIG1hdGNoZXMsXG4gICAgICBhY3RpdmVEZWZlcnJlZHM6XG4gICAgICAgIGFjdGl2ZURlZmVycmVkcy5zaXplID4gMFxuICAgICAgICAgID8gT2JqZWN0LmZyb21FbnRyaWVzKGFjdGl2ZURlZmVycmVkcy5lbnRyaWVzKCkpXG4gICAgICAgICAgOiBudWxsLFxuICAgIH07XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGRhdGFSb3V0ZXMsXG4gICAgcXVlcnksXG4gICAgcXVlcnlSb3V0ZSxcbiAgfTtcbn1cblxuLy8jZW5kcmVnaW9uXG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyNyZWdpb24gSGVscGVyc1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBHaXZlbiBhbiBleGlzdGluZyBTdGF0aWNIYW5kbGVyQ29udGV4dCBhbmQgYW4gZXJyb3IgdGhyb3duIGF0IHJlbmRlciB0aW1lLFxuICogcHJvdmlkZSBhbiB1cGRhdGVkIFN0YXRpY0hhbmRsZXJDb250ZXh0IHN1aXRhYmxlIGZvciBhIHNlY29uZCBTU1IgcmVuZGVyXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRTdGF0aWNDb250ZXh0RnJvbUVycm9yKFxuICByb3V0ZXM6IEFnbm9zdGljRGF0YVJvdXRlT2JqZWN0W10sXG4gIGNvbnRleHQ6IFN0YXRpY0hhbmRsZXJDb250ZXh0LFxuICBlcnJvcjogYW55XG4pIHtcbiAgbGV0IG5ld0NvbnRleHQ6IFN0YXRpY0hhbmRsZXJDb250ZXh0ID0ge1xuICAgIC4uLmNvbnRleHQsXG4gICAgc3RhdHVzQ29kZTogNTAwLFxuICAgIGVycm9yczoge1xuICAgICAgW2NvbnRleHQuX2RlZXBlc3RSZW5kZXJlZEJvdW5kYXJ5SWQgfHwgcm91dGVzWzBdLmlkXTogZXJyb3IsXG4gICAgfSxcbiAgfTtcbiAgcmV0dXJuIG5ld0NvbnRleHQ7XG59XG5cbmZ1bmN0aW9uIGlzU3VibWlzc2lvbk5hdmlnYXRpb24oXG4gIG9wdHM6IFJvdXRlck5hdmlnYXRlT3B0aW9uc1xuKTogb3B0cyBpcyBTdWJtaXNzaW9uTmF2aWdhdGVPcHRpb25zIHtcbiAgcmV0dXJuIG9wdHMgIT0gbnVsbCAmJiBcImZvcm1EYXRhXCIgaW4gb3B0cztcbn1cblxuLy8gTm9ybWFsaXplIG5hdmlnYXRpb24gb3B0aW9ucyBieSBjb252ZXJ0aW5nIGZvcm1NZXRob2Q9R0VUIGZvcm1EYXRhIG9iamVjdHMgdG9cbi8vIFVSTFNlYXJjaFBhcmFtcyBzbyB0aGV5IGJlaGF2ZSBpZGVudGljYWxseSB0byBsaW5rcyB3aXRoIHF1ZXJ5IHBhcmFtc1xuZnVuY3Rpb24gbm9ybWFsaXplTmF2aWdhdGVPcHRpb25zKFxuICB0bzogVG8sXG4gIG9wdHM/OiBSb3V0ZXJOYXZpZ2F0ZU9wdGlvbnMsXG4gIGlzRmV0Y2hlciA9IGZhbHNlXG4pOiB7XG4gIHBhdGg6IHN0cmluZztcbiAgc3VibWlzc2lvbj86IFN1Ym1pc3Npb247XG4gIGVycm9yPzogRXJyb3JSZXNwb25zZTtcbn0ge1xuICBsZXQgcGF0aCA9IHR5cGVvZiB0byA9PT0gXCJzdHJpbmdcIiA/IHRvIDogY3JlYXRlUGF0aCh0byk7XG5cbiAgLy8gUmV0dXJuIGxvY2F0aW9uIHZlcmJhdGltIG9uIG5vbi1zdWJtaXNzaW9uIG5hdmlnYXRpb25zXG4gIGlmICghb3B0cyB8fCAhaXNTdWJtaXNzaW9uTmF2aWdhdGlvbihvcHRzKSkge1xuICAgIHJldHVybiB7IHBhdGggfTtcbiAgfVxuXG4gIGlmIChvcHRzLmZvcm1NZXRob2QgJiYgIWlzVmFsaWRNZXRob2Qob3B0cy5mb3JtTWV0aG9kKSkge1xuICAgIHJldHVybiB7XG4gICAgICBwYXRoLFxuICAgICAgZXJyb3I6IGdldEludGVybmFsUm91dGVyRXJyb3IoNDA1LCB7IG1ldGhvZDogb3B0cy5mb3JtTWV0aG9kIH0pLFxuICAgIH07XG4gIH1cblxuICAvLyBDcmVhdGUgYSBTdWJtaXNzaW9uIG9uIG5vbi1HRVQgbmF2aWdhdGlvbnNcbiAgbGV0IHN1Ym1pc3Npb246IFN1Ym1pc3Npb24gfCB1bmRlZmluZWQ7XG4gIGlmIChvcHRzLmZvcm1EYXRhKSB7XG4gICAgc3VibWlzc2lvbiA9IHtcbiAgICAgIGZvcm1NZXRob2Q6IG9wdHMuZm9ybU1ldGhvZCB8fCBcImdldFwiLFxuICAgICAgZm9ybUFjdGlvbjogc3RyaXBIYXNoRnJvbVBhdGgocGF0aCksXG4gICAgICBmb3JtRW5jVHlwZTpcbiAgICAgICAgKG9wdHMgJiYgb3B0cy5mb3JtRW5jVHlwZSkgfHwgXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIixcbiAgICAgIGZvcm1EYXRhOiBvcHRzLmZvcm1EYXRhLFxuICAgIH07XG5cbiAgICBpZiAoaXNNdXRhdGlvbk1ldGhvZChzdWJtaXNzaW9uLmZvcm1NZXRob2QpKSB7XG4gICAgICByZXR1cm4geyBwYXRoLCBzdWJtaXNzaW9uIH07XG4gICAgfVxuICB9XG5cbiAgLy8gRmxhdHRlbiBzdWJtaXNzaW9uIG9udG8gVVJMU2VhcmNoUGFyYW1zIGZvciBHRVQgc3VibWlzc2lvbnNcbiAgbGV0IHBhcnNlZFBhdGggPSBwYXJzZVBhdGgocGF0aCk7XG4gIGxldCBzZWFyY2hQYXJhbXMgPSBjb252ZXJ0Rm9ybURhdGFUb1NlYXJjaFBhcmFtcyhvcHRzLmZvcm1EYXRhKTtcbiAgLy8gU2luY2UgZmV0Y2hlciBHRVQgc3VibWlzc2lvbnMgb25seSBydW4gYSBzaW5nbGUgbG9hZGVyIChhcyBvcHBvc2VkIHRvXG4gIC8vIG5hdmlnYXRpb24gR0VUIHN1Ym1pc3Npb25zIHdoaWNoIHJ1biBhbGwgbG9hZGVycyksIHdlIG5lZWQgdG8gcHJlc2VydmVcbiAgLy8gYW55IGluY29taW5nID9pbmRleCBwYXJhbXNcbiAgaWYgKGlzRmV0Y2hlciAmJiBwYXJzZWRQYXRoLnNlYXJjaCAmJiBoYXNOYWtlZEluZGV4UXVlcnkocGFyc2VkUGF0aC5zZWFyY2gpKSB7XG4gICAgc2VhcmNoUGFyYW1zLmFwcGVuZChcImluZGV4XCIsIFwiXCIpO1xuICB9XG4gIHBhcnNlZFBhdGguc2VhcmNoID0gYD8ke3NlYXJjaFBhcmFtc31gO1xuXG4gIHJldHVybiB7IHBhdGg6IGNyZWF0ZVBhdGgocGFyc2VkUGF0aCksIHN1Ym1pc3Npb24gfTtcbn1cblxuLy8gRmlsdGVyIG91dCBhbGwgcm91dGVzIGJlbG93IGFueSBjYXVnaHQgZXJyb3IgYXMgdGhleSBhcmVuJ3QgZ29pbmcgdG9cbi8vIHJlbmRlciBzbyB3ZSBkb24ndCBuZWVkIHRvIGxvYWQgdGhlbVxuZnVuY3Rpb24gZ2V0TG9hZGVyTWF0Y2hlc1VudGlsQm91bmRhcnkoXG4gIG1hdGNoZXM6IEFnbm9zdGljRGF0YVJvdXRlTWF0Y2hbXSxcbiAgYm91bmRhcnlJZD86IHN0cmluZ1xuKSB7XG4gIGxldCBib3VuZGFyeU1hdGNoZXMgPSBtYXRjaGVzO1xuICBpZiAoYm91bmRhcnlJZCkge1xuICAgIGxldCBpbmRleCA9IG1hdGNoZXMuZmluZEluZGV4KChtKSA9PiBtLnJvdXRlLmlkID09PSBib3VuZGFyeUlkKTtcbiAgICBpZiAoaW5kZXggPj0gMCkge1xuICAgICAgYm91bmRhcnlNYXRjaGVzID0gbWF0Y2hlcy5zbGljZSgwLCBpbmRleCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBib3VuZGFyeU1hdGNoZXM7XG59XG5cbmZ1bmN0aW9uIGdldE1hdGNoZXNUb0xvYWQoXG4gIGhpc3Rvcnk6IEhpc3RvcnksXG4gIHN0YXRlOiBSb3V0ZXJTdGF0ZSxcbiAgbWF0Y2hlczogQWdub3N0aWNEYXRhUm91dGVNYXRjaFtdLFxuICBzdWJtaXNzaW9uOiBTdWJtaXNzaW9uIHwgdW5kZWZpbmVkLFxuICBsb2NhdGlvbjogTG9jYXRpb24sXG4gIGlzUmV2YWxpZGF0aW9uUmVxdWlyZWQ6IGJvb2xlYW4sXG4gIGNhbmNlbGxlZERlZmVycmVkUm91dGVzOiBzdHJpbmdbXSxcbiAgY2FuY2VsbGVkRmV0Y2hlckxvYWRzOiBzdHJpbmdbXSxcbiAgcGVuZGluZ0FjdGlvbkRhdGE/OiBSb3V0ZURhdGEsXG4gIHBlbmRpbmdFcnJvcj86IFJvdXRlRGF0YSxcbiAgZmV0Y2hMb2FkTWF0Y2hlcz86IE1hcDxzdHJpbmcsIEZldGNoTG9hZE1hdGNoPlxuKTogW0Fnbm9zdGljRGF0YVJvdXRlTWF0Y2hbXSwgUmV2YWxpZGF0aW5nRmV0Y2hlcltdXSB7XG4gIGxldCBhY3Rpb25SZXN1bHQgPSBwZW5kaW5nRXJyb3JcbiAgICA/IE9iamVjdC52YWx1ZXMocGVuZGluZ0Vycm9yKVswXVxuICAgIDogcGVuZGluZ0FjdGlvbkRhdGFcbiAgICA/IE9iamVjdC52YWx1ZXMocGVuZGluZ0FjdGlvbkRhdGEpWzBdXG4gICAgOiB1bmRlZmluZWQ7XG5cbiAgbGV0IGN1cnJlbnRVcmwgPSBoaXN0b3J5LmNyZWF0ZVVSTChzdGF0ZS5sb2NhdGlvbik7XG4gIGxldCBuZXh0VXJsID0gaGlzdG9yeS5jcmVhdGVVUkwobG9jYXRpb24pO1xuXG4gIGxldCBkZWZhdWx0U2hvdWxkUmV2YWxpZGF0ZSA9XG4gICAgLy8gRm9yY2VkIHJldmFsaWRhdGlvbiBkdWUgdG8gc3VibWlzc2lvbiwgdXNlUmV2YWxpZGF0ZSwgb3IgWC1SZW1peC1SZXZhbGlkYXRlXG4gICAgaXNSZXZhbGlkYXRpb25SZXF1aXJlZCB8fFxuICAgIC8vIENsaWNrZWQgdGhlIHNhbWUgbGluaywgcmVzdWJtaXR0ZWQgYSBHRVQgZm9ybVxuICAgIGN1cnJlbnRVcmwudG9TdHJpbmcoKSA9PT0gbmV4dFVybC50b1N0cmluZygpIHx8XG4gICAgLy8gU2VhcmNoIHBhcmFtcyBhZmZlY3QgYWxsIGxvYWRlcnNcbiAgICBjdXJyZW50VXJsLnNlYXJjaCAhPT0gbmV4dFVybC5zZWFyY2g7XG5cbiAgLy8gUGljayBuYXZpZ2F0aW9uIG1hdGNoZXMgdGhhdCBhcmUgbmV0LW5ldyBvciBxdWFsaWZ5IGZvciByZXZhbGlkYXRpb25cbiAgbGV0IGJvdW5kYXJ5SWQgPSBwZW5kaW5nRXJyb3IgPyBPYmplY3Qua2V5cyhwZW5kaW5nRXJyb3IpWzBdIDogdW5kZWZpbmVkO1xuICBsZXQgYm91bmRhcnlNYXRjaGVzID0gZ2V0TG9hZGVyTWF0Y2hlc1VudGlsQm91bmRhcnkobWF0Y2hlcywgYm91bmRhcnlJZCk7XG5cbiAgbGV0IG5hdmlnYXRpb25NYXRjaGVzID0gYm91bmRhcnlNYXRjaGVzLmZpbHRlcigobWF0Y2gsIGluZGV4KSA9PiB7XG4gICAgaWYgKG1hdGNoLnJvdXRlLmxvYWRlciA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gQWx3YXlzIGNhbGwgdGhlIGxvYWRlciBvbiBuZXcgcm91dGUgaW5zdGFuY2VzIGFuZCBwZW5kaW5nIGRlZmVyIGNhbmNlbGxhdGlvbnNcbiAgICBpZiAoXG4gICAgICBpc05ld0xvYWRlcihzdGF0ZS5sb2FkZXJEYXRhLCBzdGF0ZS5tYXRjaGVzW2luZGV4XSwgbWF0Y2gpIHx8XG4gICAgICBjYW5jZWxsZWREZWZlcnJlZFJvdXRlcy5zb21lKChpZCkgPT4gaWQgPT09IG1hdGNoLnJvdXRlLmlkKVxuICAgICkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgLy8gVGhpcyBpcyB0aGUgZGVmYXVsdCBpbXBsZW1lbnRhdGlvbiBmb3Igd2hlbiB3ZSByZXZhbGlkYXRlLiAgSWYgdGhlIHJvdXRlXG4gICAgLy8gcHJvdmlkZXMgaXQncyBvd24gaW1wbGVtZW50YXRpb24sIHRoZW4gd2UgZ2l2ZSB0aGVtIGZ1bGwgY29udHJvbCBidXRcbiAgICAvLyBwcm92aWRlIHRoaXMgdmFsdWUgc28gdGhleSBjYW4gbGV2ZXJhZ2UgaXQgaWYgbmVlZGVkIGFmdGVyIHRoZXkgY2hlY2tcbiAgICAvLyB0aGVpciBvd24gc3BlY2lmaWMgdXNlIGNhc2VzXG4gICAgbGV0IGN1cnJlbnRSb3V0ZU1hdGNoID0gc3RhdGUubWF0Y2hlc1tpbmRleF07XG4gICAgbGV0IG5leHRSb3V0ZU1hdGNoID0gbWF0Y2g7XG5cbiAgICByZXR1cm4gc2hvdWxkUmV2YWxpZGF0ZUxvYWRlcihtYXRjaCwge1xuICAgICAgY3VycmVudFVybCxcbiAgICAgIGN1cnJlbnRQYXJhbXM6IGN1cnJlbnRSb3V0ZU1hdGNoLnBhcmFtcyxcbiAgICAgIG5leHRVcmwsXG4gICAgICBuZXh0UGFyYW1zOiBuZXh0Um91dGVNYXRjaC5wYXJhbXMsXG4gICAgICAuLi5zdWJtaXNzaW9uLFxuICAgICAgYWN0aW9uUmVzdWx0LFxuICAgICAgZGVmYXVsdFNob3VsZFJldmFsaWRhdGU6XG4gICAgICAgIGRlZmF1bHRTaG91bGRSZXZhbGlkYXRlIHx8XG4gICAgICAgIGlzTmV3Um91dGVJbnN0YW5jZShjdXJyZW50Um91dGVNYXRjaCwgbmV4dFJvdXRlTWF0Y2gpLFxuICAgIH0pO1xuICB9KTtcblxuICAvLyBQaWNrIGZldGNoZXIubG9hZHMgdGhhdCBuZWVkIHRvIGJlIHJldmFsaWRhdGVkXG4gIGxldCByZXZhbGlkYXRpbmdGZXRjaGVyczogUmV2YWxpZGF0aW5nRmV0Y2hlcltdID0gW107XG4gIGZldGNoTG9hZE1hdGNoZXMgJiZcbiAgICBmZXRjaExvYWRNYXRjaGVzLmZvckVhY2goKGYsIGtleSkgPT4ge1xuICAgICAgaWYgKCFtYXRjaGVzLnNvbWUoKG0pID0+IG0ucm91dGUuaWQgPT09IGYucm91dGVJZCkpIHtcbiAgICAgICAgLy8gVGhpcyBmZXRjaGVyIGlzIG5vdCBnb2luZyB0byBiZSBwcmVzZW50IGluIHRoZSBzdWJzZXF1ZW50IHJlbmRlciBzb1xuICAgICAgICAvLyB0aGVyZSdzIG5vIG5lZWQgdG8gcmV2YWxpZGF0ZSBpdFxuICAgICAgICByZXR1cm47XG4gICAgICB9IGVsc2UgaWYgKGNhbmNlbGxlZEZldGNoZXJMb2Fkcy5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgIC8vIFRoaXMgZmV0Y2hlciB3YXMgY2FuY2VsbGVkIGZyb20gYSBwcmlvciBhY3Rpb24gc3VibWlzc2lvbiAtIGZvcmNlIHJlbG9hZFxuICAgICAgICByZXZhbGlkYXRpbmdGZXRjaGVycy5wdXNoKHsga2V5LCAuLi5mIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmV2YWxpZGF0aW5nIGZldGNoZXJzIGFyZSBkZWNvdXBsZWQgZnJvbSB0aGUgcm91dGUgbWF0Y2hlcyBzaW5jZSB0aGV5XG4gICAgICAgIC8vIGhpdCBhIHN0YXRpYyBocmVmLCBzbyB0aGV5IF9hbHdheXNfIGNoZWNrIHNob3VsZFJldmFsaWRhdGUgYW5kIHRoZVxuICAgICAgICAvLyBkZWZhdWx0IGlzIHN0cmljdGx5IGlmIGEgcmV2YWxpZGF0aW9uIGlzIGV4cGxpY2l0bHkgcmVxdWlyZWQgKGFjdGlvblxuICAgICAgICAvLyBzdWJtaXNzaW9ucywgdXNlUmV2YWxpZGF0b3IsIFgtUmVtaXgtUmV2YWxpZGF0ZSkuXG4gICAgICAgIGxldCBzaG91bGRSZXZhbGlkYXRlID0gc2hvdWxkUmV2YWxpZGF0ZUxvYWRlcihmLm1hdGNoLCB7XG4gICAgICAgICAgY3VycmVudFVybCxcbiAgICAgICAgICBjdXJyZW50UGFyYW1zOiBzdGF0ZS5tYXRjaGVzW3N0YXRlLm1hdGNoZXMubGVuZ3RoIC0gMV0ucGFyYW1zLFxuICAgICAgICAgIG5leHRVcmwsXG4gICAgICAgICAgbmV4dFBhcmFtczogbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdLnBhcmFtcyxcbiAgICAgICAgICAuLi5zdWJtaXNzaW9uLFxuICAgICAgICAgIGFjdGlvblJlc3VsdCxcbiAgICAgICAgICBkZWZhdWx0U2hvdWxkUmV2YWxpZGF0ZSxcbiAgICAgICAgfSk7XG4gICAgICAgIGlmIChzaG91bGRSZXZhbGlkYXRlKSB7XG4gICAgICAgICAgcmV2YWxpZGF0aW5nRmV0Y2hlcnMucHVzaCh7IGtleSwgLi4uZiB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gIHJldHVybiBbbmF2aWdhdGlvbk1hdGNoZXMsIHJldmFsaWRhdGluZ0ZldGNoZXJzXTtcbn1cblxuZnVuY3Rpb24gaXNOZXdMb2FkZXIoXG4gIGN1cnJlbnRMb2FkZXJEYXRhOiBSb3V0ZURhdGEsXG4gIGN1cnJlbnRNYXRjaDogQWdub3N0aWNEYXRhUm91dGVNYXRjaCxcbiAgbWF0Y2g6IEFnbm9zdGljRGF0YVJvdXRlTWF0Y2hcbikge1xuICBsZXQgaXNOZXcgPVxuICAgIC8vIFthXSAtPiBbYSwgYl1cbiAgICAhY3VycmVudE1hdGNoIHx8XG4gICAgLy8gW2EsIGJdIC0+IFthLCBjXVxuICAgIG1hdGNoLnJvdXRlLmlkICE9PSBjdXJyZW50TWF0Y2gucm91dGUuaWQ7XG5cbiAgLy8gSGFuZGxlIHRoZSBjYXNlIHRoYXQgd2UgZG9uJ3QgaGF2ZSBkYXRhIGZvciBhIHJlLXVzZWQgcm91dGUsIHBvdGVudGlhbGx5XG4gIC8vIGZyb20gYSBwcmlvciBlcnJvciBvciBmcm9tIGEgY2FuY2VsbGVkIHBlbmRpbmcgZGVmZXJyZWRcbiAgbGV0IGlzTWlzc2luZ0RhdGEgPSBjdXJyZW50TG9hZGVyRGF0YVttYXRjaC5yb3V0ZS5pZF0gPT09IHVuZGVmaW5lZDtcblxuICAvLyBBbHdheXMgbG9hZCBpZiB0aGlzIGlzIGEgbmV0LW5ldyByb3V0ZSBvciB3ZSBkb24ndCB5ZXQgaGF2ZSBkYXRhXG4gIHJldHVybiBpc05ldyB8fCBpc01pc3NpbmdEYXRhO1xufVxuXG5mdW5jdGlvbiBpc05ld1JvdXRlSW5zdGFuY2UoXG4gIGN1cnJlbnRNYXRjaDogQWdub3N0aWNEYXRhUm91dGVNYXRjaCxcbiAgbWF0Y2g6IEFnbm9zdGljRGF0YVJvdXRlTWF0Y2hcbikge1xuICBsZXQgY3VycmVudFBhdGggPSBjdXJyZW50TWF0Y2gucm91dGUucGF0aDtcbiAgcmV0dXJuIChcbiAgICAvLyBwYXJhbSBjaGFuZ2UgZm9yIHRoaXMgbWF0Y2gsIC91c2Vycy8xMjMgLT4gL3VzZXJzLzQ1NlxuICAgIGN1cnJlbnRNYXRjaC5wYXRobmFtZSAhPT0gbWF0Y2gucGF0aG5hbWUgfHxcbiAgICAvLyBzcGxhdCBwYXJhbSBjaGFuZ2VkLCB3aGljaCBpcyBub3QgcHJlc2VudCBpbiBtYXRjaC5wYXRoXG4gICAgLy8gZS5nLiAvZmlsZXMvaW1hZ2VzL2F2YXRhci5qcGcgLT4gZmlsZXMvZmluYW5jZXMueGxzXG4gICAgKGN1cnJlbnRQYXRoICE9IG51bGwgJiZcbiAgICAgIGN1cnJlbnRQYXRoLmVuZHNXaXRoKFwiKlwiKSAmJlxuICAgICAgY3VycmVudE1hdGNoLnBhcmFtc1tcIipcIl0gIT09IG1hdGNoLnBhcmFtc1tcIipcIl0pXG4gICk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFJldmFsaWRhdGVMb2FkZXIoXG4gIGxvYWRlck1hdGNoOiBBZ25vc3RpY0RhdGFSb3V0ZU1hdGNoLFxuICBhcmc6IFBhcmFtZXRlcnM8U2hvdWxkUmV2YWxpZGF0ZUZ1bmN0aW9uPlswXVxuKSB7XG4gIGlmIChsb2FkZXJNYXRjaC5yb3V0ZS5zaG91bGRSZXZhbGlkYXRlKSB7XG4gICAgbGV0IHJvdXRlQ2hvaWNlID0gbG9hZGVyTWF0Y2gucm91dGUuc2hvdWxkUmV2YWxpZGF0ZShhcmcpO1xuICAgIGlmICh0eXBlb2Ygcm91dGVDaG9pY2UgPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICByZXR1cm4gcm91dGVDaG9pY2U7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGFyZy5kZWZhdWx0U2hvdWxkUmV2YWxpZGF0ZTtcbn1cblxuYXN5bmMgZnVuY3Rpb24gY2FsbExvYWRlck9yQWN0aW9uKFxuICB0eXBlOiBcImxvYWRlclwiIHwgXCJhY3Rpb25cIixcbiAgcmVxdWVzdDogUmVxdWVzdCxcbiAgbWF0Y2g6IEFnbm9zdGljRGF0YVJvdXRlTWF0Y2gsXG4gIG1hdGNoZXM6IEFnbm9zdGljRGF0YVJvdXRlTWF0Y2hbXSxcbiAgYmFzZW5hbWUgPSBcIi9cIixcbiAgaXNTdGF0aWNSZXF1ZXN0OiBib29sZWFuID0gZmFsc2UsXG4gIGlzUm91dGVSZXF1ZXN0OiBib29sZWFuID0gZmFsc2UsXG4gIHJlcXVlc3RDb250ZXh0PzogdW5rbm93blxuKTogUHJvbWlzZTxEYXRhUmVzdWx0PiB7XG4gIGxldCByZXN1bHRUeXBlO1xuICBsZXQgcmVzdWx0O1xuXG4gIC8vIFNldHVwIGEgcHJvbWlzZSB3ZSBjYW4gcmFjZSBhZ2FpbnN0IHNvIHRoYXQgYWJvcnQgc2lnbmFscyBzaG9ydCBjaXJjdWl0XG4gIGxldCByZWplY3Q6ICgpID0+IHZvaWQ7XG4gIGxldCBhYm9ydFByb21pc2UgPSBuZXcgUHJvbWlzZSgoXywgcikgPT4gKHJlamVjdCA9IHIpKTtcbiAgbGV0IG9uUmVqZWN0ID0gKCkgPT4gcmVqZWN0KCk7XG4gIHJlcXVlc3Quc2lnbmFsLmFkZEV2ZW50TGlzdGVuZXIoXCJhYm9ydFwiLCBvblJlamVjdCk7XG5cbiAgdHJ5IHtcbiAgICBsZXQgaGFuZGxlciA9IG1hdGNoLnJvdXRlW3R5cGVdO1xuICAgIGludmFyaWFudDxGdW5jdGlvbj4oXG4gICAgICBoYW5kbGVyLFxuICAgICAgYENvdWxkIG5vdCBmaW5kIHRoZSAke3R5cGV9IHRvIHJ1biBvbiB0aGUgXCIke21hdGNoLnJvdXRlLmlkfVwiIHJvdXRlYFxuICAgICk7XG5cbiAgICByZXN1bHQgPSBhd2FpdCBQcm9taXNlLnJhY2UoW1xuICAgICAgaGFuZGxlcih7IHJlcXVlc3QsIHBhcmFtczogbWF0Y2gucGFyYW1zLCBjb250ZXh0OiByZXF1ZXN0Q29udGV4dCB9KSxcbiAgICAgIGFib3J0UHJvbWlzZSxcbiAgICBdKTtcblxuICAgIGludmFyaWFudChcbiAgICAgIHJlc3VsdCAhPT0gdW5kZWZpbmVkLFxuICAgICAgYFlvdSBkZWZpbmVkICR7dHlwZSA9PT0gXCJhY3Rpb25cIiA/IFwiYW4gYWN0aW9uXCIgOiBcImEgbG9hZGVyXCJ9IGZvciByb3V0ZSBgICtcbiAgICAgICAgYFwiJHttYXRjaC5yb3V0ZS5pZH1cIiBidXQgZGlkbid0IHJldHVybiBhbnl0aGluZyBmcm9tIHlvdXIgXFxgJHt0eXBlfVxcYCBgICtcbiAgICAgICAgYGZ1bmN0aW9uLiBQbGVhc2UgcmV0dXJuIGEgdmFsdWUgb3IgXFxgbnVsbFxcYC5gXG4gICAgKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIHJlc3VsdFR5cGUgPSBSZXN1bHRUeXBlLmVycm9yO1xuICAgIHJlc3VsdCA9IGU7XG4gIH0gZmluYWxseSB7XG4gICAgcmVxdWVzdC5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIG9uUmVqZWN0KTtcbiAgfVxuXG4gIGlmIChpc1Jlc3BvbnNlKHJlc3VsdCkpIHtcbiAgICBsZXQgc3RhdHVzID0gcmVzdWx0LnN0YXR1cztcblxuICAgIC8vIFByb2Nlc3MgcmVkaXJlY3RzXG4gICAgaWYgKHJlZGlyZWN0U3RhdHVzQ29kZXMuaGFzKHN0YXR1cykpIHtcbiAgICAgIGxldCBsb2NhdGlvbiA9IHJlc3VsdC5oZWFkZXJzLmdldChcIkxvY2F0aW9uXCIpO1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICBsb2NhdGlvbixcbiAgICAgICAgXCJSZWRpcmVjdHMgcmV0dXJuZWQvdGhyb3duIGZyb20gbG9hZGVycy9hY3Rpb25zIG11c3QgaGF2ZSBhIExvY2F0aW9uIGhlYWRlclwiXG4gICAgICApO1xuXG4gICAgICAvLyBTdXBwb3J0IHJlbGF0aXZlIHJvdXRpbmcgaW4gaW50ZXJuYWwgcmVkaXJlY3RzXG4gICAgICBpZiAoIUFCU09MVVRFX1VSTF9SRUdFWC50ZXN0KGxvY2F0aW9uKSkge1xuICAgICAgICBsZXQgYWN0aXZlTWF0Y2hlcyA9IG1hdGNoZXMuc2xpY2UoMCwgbWF0Y2hlcy5pbmRleE9mKG1hdGNoKSArIDEpO1xuICAgICAgICBsZXQgcm91dGVQYXRobmFtZXMgPSBnZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcyhhY3RpdmVNYXRjaGVzKS5tYXAoXG4gICAgICAgICAgKG1hdGNoKSA9PiBtYXRjaC5wYXRobmFtZUJhc2VcbiAgICAgICAgKTtcbiAgICAgICAgbGV0IHJlc29sdmVkTG9jYXRpb24gPSByZXNvbHZlVG8oXG4gICAgICAgICAgbG9jYXRpb24sXG4gICAgICAgICAgcm91dGVQYXRobmFtZXMsXG4gICAgICAgICAgbmV3IFVSTChyZXF1ZXN0LnVybCkucGF0aG5hbWVcbiAgICAgICAgKTtcbiAgICAgICAgaW52YXJpYW50KFxuICAgICAgICAgIGNyZWF0ZVBhdGgocmVzb2x2ZWRMb2NhdGlvbiksXG4gICAgICAgICAgYFVuYWJsZSB0byByZXNvbHZlIHJlZGlyZWN0IGxvY2F0aW9uOiAke2xvY2F0aW9ufWBcbiAgICAgICAgKTtcblxuICAgICAgICAvLyBQcmVwZW5kIHRoZSBiYXNlbmFtZSB0byB0aGUgcmVkaXJlY3QgbG9jYXRpb24gaWYgd2UgaGF2ZSBvbmVcbiAgICAgICAgaWYgKGJhc2VuYW1lKSB7XG4gICAgICAgICAgbGV0IHBhdGggPSByZXNvbHZlZExvY2F0aW9uLnBhdGhuYW1lO1xuICAgICAgICAgIHJlc29sdmVkTG9jYXRpb24ucGF0aG5hbWUgPVxuICAgICAgICAgICAgcGF0aCA9PT0gXCIvXCIgPyBiYXNlbmFtZSA6IGpvaW5QYXRocyhbYmFzZW5hbWUsIHBhdGhdKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGxvY2F0aW9uID0gY3JlYXRlUGF0aChyZXNvbHZlZExvY2F0aW9uKTtcbiAgICAgIH0gZWxzZSBpZiAoIWlzU3RhdGljUmVxdWVzdCkge1xuICAgICAgICAvLyBTdHJpcCBvZmYgdGhlIHByb3RvY29sK29yaWdpbiBmb3Igc2FtZS1vcmlnaW4gYWJzb2x1dGUgcmVkaXJlY3RzLlxuICAgICAgICAvLyBJZiB0aGlzIGlzIGEgc3RhdGljIHJlcXVlcywgd2UgY2FuIGxldCBpdCBnbyBiYWNrIHRvIHRoZSBicm93c2VyXG4gICAgICAgIC8vIGFzLWlzXG4gICAgICAgIGxldCBjdXJyZW50VXJsID0gbmV3IFVSTChyZXF1ZXN0LnVybCk7XG4gICAgICAgIGxldCB1cmwgPSBsb2NhdGlvbi5zdGFydHNXaXRoKFwiLy9cIilcbiAgICAgICAgICA/IG5ldyBVUkwoY3VycmVudFVybC5wcm90b2NvbCArIGxvY2F0aW9uKVxuICAgICAgICAgIDogbmV3IFVSTChsb2NhdGlvbik7XG4gICAgICAgIGlmICh1cmwub3JpZ2luID09PSBjdXJyZW50VXJsLm9yaWdpbikge1xuICAgICAgICAgIGxvY2F0aW9uID0gdXJsLnBhdGhuYW1lICsgdXJsLnNlYXJjaCArIHVybC5oYXNoO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIERvbid0IHByb2Nlc3MgcmVkaXJlY3RzIGluIHRoZSByb3V0ZXIgZHVyaW5nIHN0YXRpYyByZXF1ZXN0cyByZXF1ZXN0cy5cbiAgICAgIC8vIEluc3RlYWQsIHRocm93IHRoZSBSZXNwb25zZSBhbmQgbGV0IHRoZSBzZXJ2ZXIgaGFuZGxlIGl0IHdpdGggYW4gSFRUUFxuICAgICAgLy8gcmVkaXJlY3QuICBXZSBhbHNvIHVwZGF0ZSB0aGUgTG9jYXRpb24gaGVhZGVyIGluIHBsYWNlIGluIHRoaXMgZmxvdyBzb1xuICAgICAgLy8gYmFzZW5hbWUgYW5kIHJlbGF0aXZlIHJvdXRpbmcgaXMgdGFrZW4gaW50byBhY2NvdW50XG4gICAgICBpZiAoaXNTdGF0aWNSZXF1ZXN0KSB7XG4gICAgICAgIHJlc3VsdC5oZWFkZXJzLnNldChcIkxvY2F0aW9uXCIsIGxvY2F0aW9uKTtcbiAgICAgICAgdGhyb3cgcmVzdWx0O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBSZXN1bHRUeXBlLnJlZGlyZWN0LFxuICAgICAgICBzdGF0dXMsXG4gICAgICAgIGxvY2F0aW9uLFxuICAgICAgICByZXZhbGlkYXRlOiByZXN1bHQuaGVhZGVycy5nZXQoXCJYLVJlbWl4LVJldmFsaWRhdGVcIikgIT09IG51bGwsXG4gICAgICB9O1xuICAgIH1cblxuICAgIC8vIEZvciBTU1Igc2luZ2xlLXJvdXRlIHJlcXVlc3RzLCB3ZSB3YW50IHRvIGhhbmQgUmVzcG9uc2VzIGJhY2sgZGlyZWN0bHlcbiAgICAvLyB3aXRob3V0IHVud3JhcHBpbmcuICBXZSBkbyB0aGlzIHdpdGggdGhlIFF1ZXJ5Um91dGVSZXNwb25zZSB3cmFwcGVyXG4gICAgLy8gaW50ZXJmYWNlIHNvIHdlIGNhbiBrbm93IHdoZXRoZXIgaXQgd2FzIHJldHVybmVkIG9yIHRocm93blxuICAgIGlmIChpc1JvdXRlUmVxdWVzdCkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXRocm93LWxpdGVyYWxcbiAgICAgIHRocm93IHtcbiAgICAgICAgdHlwZTogcmVzdWx0VHlwZSB8fCBSZXN1bHRUeXBlLmRhdGEsXG4gICAgICAgIHJlc3BvbnNlOiByZXN1bHQsXG4gICAgICB9O1xuICAgIH1cblxuICAgIGxldCBkYXRhOiBhbnk7XG4gICAgbGV0IGNvbnRlbnRUeXBlID0gcmVzdWx0LmhlYWRlcnMuZ2V0KFwiQ29udGVudC1UeXBlXCIpO1xuICAgIC8vIENoZWNrIGJldHdlZW4gd29yZCBib3VuZGFyaWVzIGluc3RlYWQgb2Ygc3RhcnRzV2l0aCgpIGR1ZSB0byB0aGUgbGFzdFxuICAgIC8vIHBhcmFncmFwaCBvZiBodHRwczovL2h0dHB3Zy5vcmcvc3BlY3MvcmZjOTExMC5odG1sI2ZpZWxkLmNvbnRlbnQtdHlwZVxuICAgIGlmIChjb250ZW50VHlwZSAmJiAvXFxiYXBwbGljYXRpb25cXC9qc29uXFxiLy50ZXN0KGNvbnRlbnRUeXBlKSkge1xuICAgICAgZGF0YSA9IGF3YWl0IHJlc3VsdC5qc29uKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRhdGEgPSBhd2FpdCByZXN1bHQudGV4dCgpO1xuICAgIH1cblxuICAgIGlmIChyZXN1bHRUeXBlID09PSBSZXN1bHRUeXBlLmVycm9yKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiByZXN1bHRUeXBlLFxuICAgICAgICBlcnJvcjogbmV3IEVycm9yUmVzcG9uc2Uoc3RhdHVzLCByZXN1bHQuc3RhdHVzVGV4dCwgZGF0YSksXG4gICAgICAgIGhlYWRlcnM6IHJlc3VsdC5oZWFkZXJzLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogUmVzdWx0VHlwZS5kYXRhLFxuICAgICAgZGF0YSxcbiAgICAgIHN0YXR1c0NvZGU6IHJlc3VsdC5zdGF0dXMsXG4gICAgICBoZWFkZXJzOiByZXN1bHQuaGVhZGVycyxcbiAgICB9O1xuICB9XG5cbiAgaWYgKHJlc3VsdFR5cGUgPT09IFJlc3VsdFR5cGUuZXJyb3IpIHtcbiAgICByZXR1cm4geyB0eXBlOiByZXN1bHRUeXBlLCBlcnJvcjogcmVzdWx0IH07XG4gIH1cblxuICBpZiAocmVzdWx0IGluc3RhbmNlb2YgRGVmZXJyZWREYXRhKSB7XG4gICAgcmV0dXJuIHsgdHlwZTogUmVzdWx0VHlwZS5kZWZlcnJlZCwgZGVmZXJyZWREYXRhOiByZXN1bHQgfTtcbiAgfVxuXG4gIHJldHVybiB7IHR5cGU6IFJlc3VsdFR5cGUuZGF0YSwgZGF0YTogcmVzdWx0IH07XG59XG5cbi8vIFV0aWxpdHkgbWV0aG9kIGZvciBjcmVhdGluZyB0aGUgUmVxdWVzdCBpbnN0YW5jZXMgZm9yIGxvYWRlcnMvYWN0aW9ucyBkdXJpbmdcbi8vIGNsaWVudC1zaWRlIG5hdmlnYXRpb25zIGFuZCBmZXRjaGVzLiAgRHVyaW5nIFNTUiB3ZSB3aWxsIGFsd2F5cyBoYXZlIGFcbi8vIFJlcXVlc3QgaW5zdGFuY2UgZnJvbSB0aGUgc3RhdGljIGhhbmRsZXIgKHF1ZXJ5L3F1ZXJ5Um91dGUpXG5mdW5jdGlvbiBjcmVhdGVDbGllbnRTaWRlUmVxdWVzdChcbiAgaGlzdG9yeTogSGlzdG9yeSxcbiAgbG9jYXRpb246IHN0cmluZyB8IExvY2F0aW9uLFxuICBzaWduYWw6IEFib3J0U2lnbmFsLFxuICBzdWJtaXNzaW9uPzogU3VibWlzc2lvblxuKTogUmVxdWVzdCB7XG4gIGxldCB1cmwgPSBoaXN0b3J5LmNyZWF0ZVVSTChzdHJpcEhhc2hGcm9tUGF0aChsb2NhdGlvbikpLnRvU3RyaW5nKCk7XG4gIGxldCBpbml0OiBSZXF1ZXN0SW5pdCA9IHsgc2lnbmFsIH07XG5cbiAgaWYgKHN1Ym1pc3Npb24gJiYgaXNNdXRhdGlvbk1ldGhvZChzdWJtaXNzaW9uLmZvcm1NZXRob2QpKSB7XG4gICAgbGV0IHsgZm9ybU1ldGhvZCwgZm9ybUVuY1R5cGUsIGZvcm1EYXRhIH0gPSBzdWJtaXNzaW9uO1xuICAgIGluaXQubWV0aG9kID0gZm9ybU1ldGhvZC50b1VwcGVyQ2FzZSgpO1xuICAgIGluaXQuYm9keSA9XG4gICAgICBmb3JtRW5jVHlwZSA9PT0gXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIlxuICAgICAgICA/IGNvbnZlcnRGb3JtRGF0YVRvU2VhcmNoUGFyYW1zKGZvcm1EYXRhKVxuICAgICAgICA6IGZvcm1EYXRhO1xuICB9XG5cbiAgLy8gQ29udGVudC1UeXBlIGlzIGluZmVycmVkIChodHRwczovL2ZldGNoLnNwZWMud2hhdHdnLm9yZy8jZG9tLXJlcXVlc3QpXG4gIHJldHVybiBuZXcgUmVxdWVzdCh1cmwsIGluaXQpO1xufVxuXG5mdW5jdGlvbiBjb252ZXJ0Rm9ybURhdGFUb1NlYXJjaFBhcmFtcyhmb3JtRGF0YTogRm9ybURhdGEpOiBVUkxTZWFyY2hQYXJhbXMge1xuICBsZXQgc2VhcmNoUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xuXG4gIGZvciAobGV0IFtrZXksIHZhbHVlXSBvZiBmb3JtRGF0YS5lbnRyaWVzKCkpIHtcbiAgICAvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3JtLWNvbnRyb2wtaW5mcmFzdHJ1Y3R1cmUuaHRtbCNjb252ZXJ0aW5nLWFuLWVudHJ5LWxpc3QtdG8tYS1saXN0LW9mLW5hbWUtdmFsdWUtcGFpcnNcbiAgICBzZWFyY2hQYXJhbXMuYXBwZW5kKGtleSwgdmFsdWUgaW5zdGFuY2VvZiBGaWxlID8gdmFsdWUubmFtZSA6IHZhbHVlKTtcbiAgfVxuXG4gIHJldHVybiBzZWFyY2hQYXJhbXM7XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NSb3V0ZUxvYWRlckRhdGEoXG4gIG1hdGNoZXM6IEFnbm9zdGljRGF0YVJvdXRlTWF0Y2hbXSxcbiAgbWF0Y2hlc1RvTG9hZDogQWdub3N0aWNEYXRhUm91dGVNYXRjaFtdLFxuICByZXN1bHRzOiBEYXRhUmVzdWx0W10sXG4gIHBlbmRpbmdFcnJvcjogUm91dGVEYXRhIHwgdW5kZWZpbmVkLFxuICBhY3RpdmVEZWZlcnJlZHM6IE1hcDxzdHJpbmcsIERlZmVycmVkRGF0YT5cbik6IHtcbiAgbG9hZGVyRGF0YTogUm91dGVyU3RhdGVbXCJsb2FkZXJEYXRhXCJdO1xuICBlcnJvcnM6IFJvdXRlclN0YXRlW1wiZXJyb3JzXCJdIHwgbnVsbDtcbiAgc3RhdHVzQ29kZTogbnVtYmVyO1xuICBsb2FkZXJIZWFkZXJzOiBSZWNvcmQ8c3RyaW5nLCBIZWFkZXJzPjtcbn0ge1xuICAvLyBGaWxsIGluIGxvYWRlckRhdGEvZXJyb3JzIGZyb20gb3VyIGxvYWRlcnNcbiAgbGV0IGxvYWRlckRhdGE6IFJvdXRlclN0YXRlW1wibG9hZGVyRGF0YVwiXSA9IHt9O1xuICBsZXQgZXJyb3JzOiBSb3V0ZXJTdGF0ZVtcImVycm9yc1wiXSB8IG51bGwgPSBudWxsO1xuICBsZXQgc3RhdHVzQ29kZTogbnVtYmVyIHwgdW5kZWZpbmVkO1xuICBsZXQgZm91bmRFcnJvciA9IGZhbHNlO1xuICBsZXQgbG9hZGVySGVhZGVyczogUmVjb3JkPHN0cmluZywgSGVhZGVycz4gPSB7fTtcblxuICAvLyBQcm9jZXNzIGxvYWRlciByZXN1bHRzIGludG8gc3RhdGUubG9hZGVyRGF0YS9zdGF0ZS5lcnJvcnNcbiAgcmVzdWx0cy5mb3JFYWNoKChyZXN1bHQsIGluZGV4KSA9PiB7XG4gICAgbGV0IGlkID0gbWF0Y2hlc1RvTG9hZFtpbmRleF0ucm91dGUuaWQ7XG4gICAgaW52YXJpYW50KFxuICAgICAgIWlzUmVkaXJlY3RSZXN1bHQocmVzdWx0KSxcbiAgICAgIFwiQ2Fubm90IGhhbmRsZSByZWRpcmVjdCByZXN1bHRzIGluIHByb2Nlc3NMb2FkZXJEYXRhXCJcbiAgICApO1xuICAgIGlmIChpc0Vycm9yUmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIC8vIExvb2sgdXB3YXJkcyBmcm9tIHRoZSBtYXRjaGVkIHJvdXRlIGZvciB0aGUgY2xvc2VzdCBhbmNlc3RvclxuICAgICAgLy8gZXJyb3IgYm91bmRhcnksIGRlZmF1bHRpbmcgdG8gdGhlIHJvb3QgbWF0Y2hcbiAgICAgIGxldCBib3VuZGFyeU1hdGNoID0gZmluZE5lYXJlc3RCb3VuZGFyeShtYXRjaGVzLCBpZCk7XG4gICAgICBsZXQgZXJyb3IgPSByZXN1bHQuZXJyb3I7XG4gICAgICAvLyBJZiB3ZSBoYXZlIGEgcGVuZGluZyBhY3Rpb24gZXJyb3IsIHdlIHJlcG9ydCBpdCBhdCB0aGUgaGlnaGVzdC1yb3V0ZVxuICAgICAgLy8gdGhhdCB0aHJvd3MgYSBsb2FkZXIgZXJyb3IsIGFuZCB0aGVuIGNsZWFyIGl0IG91dCB0byBpbmRpY2F0ZSB0aGF0XG4gICAgICAvLyBpdCB3YXMgY29uc3VtZWRcbiAgICAgIGlmIChwZW5kaW5nRXJyb3IpIHtcbiAgICAgICAgZXJyb3IgPSBPYmplY3QudmFsdWVzKHBlbmRpbmdFcnJvcilbMF07XG4gICAgICAgIHBlbmRpbmdFcnJvciA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgZXJyb3JzID0gZXJyb3JzIHx8IHt9O1xuXG4gICAgICAvLyBQcmVmZXIgaGlnaGVyIGVycm9yIHZhbHVlcyBpZiBsb3dlciBlcnJvcnMgYnViYmxlIHRvIHRoZSBzYW1lIGJvdW5kYXJ5XG4gICAgICBpZiAoZXJyb3JzW2JvdW5kYXJ5TWF0Y2gucm91dGUuaWRdID09IG51bGwpIHtcbiAgICAgICAgZXJyb3JzW2JvdW5kYXJ5TWF0Y2gucm91dGUuaWRdID0gZXJyb3I7XG4gICAgICB9XG5cbiAgICAgIC8vIENsZWFyIG91ciBhbnkgcHJpb3IgbG9hZGVyRGF0YSBmb3IgdGhlIHRocm93aW5nIHJvdXRlXG4gICAgICBsb2FkZXJEYXRhW2lkXSA9IHVuZGVmaW5lZDtcblxuICAgICAgLy8gT25jZSB3ZSBmaW5kIG91ciBmaXJzdCAoaGlnaGVzdCkgZXJyb3IsIHdlIHNldCB0aGUgc3RhdHVzIGNvZGUgYW5kXG4gICAgICAvLyBwcmV2ZW50IGRlZXBlciBzdGF0dXMgY29kZXMgZnJvbSBvdmVycmlkaW5nXG4gICAgICBpZiAoIWZvdW5kRXJyb3IpIHtcbiAgICAgICAgZm91bmRFcnJvciA9IHRydWU7XG4gICAgICAgIHN0YXR1c0NvZGUgPSBpc1JvdXRlRXJyb3JSZXNwb25zZShyZXN1bHQuZXJyb3IpXG4gICAgICAgICAgPyByZXN1bHQuZXJyb3Iuc3RhdHVzXG4gICAgICAgICAgOiA1MDA7XG4gICAgICB9XG4gICAgICBpZiAocmVzdWx0LmhlYWRlcnMpIHtcbiAgICAgICAgbG9hZGVySGVhZGVyc1tpZF0gPSByZXN1bHQuaGVhZGVycztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSkge1xuICAgICAgICBhY3RpdmVEZWZlcnJlZHMuc2V0KGlkLCByZXN1bHQuZGVmZXJyZWREYXRhKTtcbiAgICAgICAgbG9hZGVyRGF0YVtpZF0gPSByZXN1bHQuZGVmZXJyZWREYXRhLmRhdGE7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsb2FkZXJEYXRhW2lkXSA9IHJlc3VsdC5kYXRhO1xuICAgICAgfVxuXG4gICAgICAvLyBFcnJvciBzdGF0dXMgY29kZXMgYWx3YXlzIG92ZXJyaWRlIHN1Y2Nlc3Mgc3RhdHVzIGNvZGVzLCBidXQgaWYgYWxsXG4gICAgICAvLyBsb2FkZXJzIGFyZSBzdWNjZXNzZnVsIHdlIHRha2UgdGhlIGRlZXBlc3Qgc3RhdHVzIGNvZGUuXG4gICAgICBpZiAoXG4gICAgICAgIHJlc3VsdC5zdGF0dXNDb2RlICE9IG51bGwgJiZcbiAgICAgICAgcmVzdWx0LnN0YXR1c0NvZGUgIT09IDIwMCAmJlxuICAgICAgICAhZm91bmRFcnJvclxuICAgICAgKSB7XG4gICAgICAgIHN0YXR1c0NvZGUgPSByZXN1bHQuc3RhdHVzQ29kZTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXN1bHQuaGVhZGVycykge1xuICAgICAgICBsb2FkZXJIZWFkZXJzW2lkXSA9IHJlc3VsdC5oZWFkZXJzO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgLy8gSWYgd2UgZGlkbid0IGNvbnN1bWUgdGhlIHBlbmRpbmcgYWN0aW9uIGVycm9yIChpLmUuLCBhbGwgbG9hZGVyc1xuICAvLyByZXNvbHZlZCksIHRoZW4gY29uc3VtZSBpdCBoZXJlLiAgQWxzbyBjbGVhciBvdXQgYW55IGxvYWRlckRhdGEgZm9yIHRoZVxuICAvLyB0aHJvd2luZyByb3V0ZVxuICBpZiAocGVuZGluZ0Vycm9yKSB7XG4gICAgZXJyb3JzID0gcGVuZGluZ0Vycm9yO1xuICAgIGxvYWRlckRhdGFbT2JqZWN0LmtleXMocGVuZGluZ0Vycm9yKVswXV0gPSB1bmRlZmluZWQ7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIGxvYWRlckRhdGEsXG4gICAgZXJyb3JzLFxuICAgIHN0YXR1c0NvZGU6IHN0YXR1c0NvZGUgfHwgMjAwLFxuICAgIGxvYWRlckhlYWRlcnMsXG4gIH07XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NMb2FkZXJEYXRhKFxuICBzdGF0ZTogUm91dGVyU3RhdGUsXG4gIG1hdGNoZXM6IEFnbm9zdGljRGF0YVJvdXRlTWF0Y2hbXSxcbiAgbWF0Y2hlc1RvTG9hZDogQWdub3N0aWNEYXRhUm91dGVNYXRjaFtdLFxuICByZXN1bHRzOiBEYXRhUmVzdWx0W10sXG4gIHBlbmRpbmdFcnJvcjogUm91dGVEYXRhIHwgdW5kZWZpbmVkLFxuICByZXZhbGlkYXRpbmdGZXRjaGVyczogUmV2YWxpZGF0aW5nRmV0Y2hlcltdLFxuICBmZXRjaGVyUmVzdWx0czogRGF0YVJlc3VsdFtdLFxuICBhY3RpdmVEZWZlcnJlZHM6IE1hcDxzdHJpbmcsIERlZmVycmVkRGF0YT5cbik6IHtcbiAgbG9hZGVyRGF0YTogUm91dGVyU3RhdGVbXCJsb2FkZXJEYXRhXCJdO1xuICBlcnJvcnM/OiBSb3V0ZXJTdGF0ZVtcImVycm9yc1wiXTtcbn0ge1xuICBsZXQgeyBsb2FkZXJEYXRhLCBlcnJvcnMgfSA9IHByb2Nlc3NSb3V0ZUxvYWRlckRhdGEoXG4gICAgbWF0Y2hlcyxcbiAgICBtYXRjaGVzVG9Mb2FkLFxuICAgIHJlc3VsdHMsXG4gICAgcGVuZGluZ0Vycm9yLFxuICAgIGFjdGl2ZURlZmVycmVkc1xuICApO1xuXG4gIC8vIFByb2Nlc3MgcmVzdWx0cyBmcm9tIG91ciByZXZhbGlkYXRpbmcgZmV0Y2hlcnNcbiAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHJldmFsaWRhdGluZ0ZldGNoZXJzLmxlbmd0aDsgaW5kZXgrKykge1xuICAgIGxldCB7IGtleSwgbWF0Y2ggfSA9IHJldmFsaWRhdGluZ0ZldGNoZXJzW2luZGV4XTtcbiAgICBpbnZhcmlhbnQoXG4gICAgICBmZXRjaGVyUmVzdWx0cyAhPT0gdW5kZWZpbmVkICYmIGZldGNoZXJSZXN1bHRzW2luZGV4XSAhPT0gdW5kZWZpbmVkLFxuICAgICAgXCJEaWQgbm90IGZpbmQgY29ycmVzcG9uZGluZyBmZXRjaGVyIHJlc3VsdFwiXG4gICAgKTtcbiAgICBsZXQgcmVzdWx0ID0gZmV0Y2hlclJlc3VsdHNbaW5kZXhdO1xuXG4gICAgLy8gUHJvY2VzcyBmZXRjaGVyIG5vbi1yZWRpcmVjdCBlcnJvcnNcbiAgICBpZiAoaXNFcnJvclJlc3VsdChyZXN1bHQpKSB7XG4gICAgICBsZXQgYm91bmRhcnlNYXRjaCA9IGZpbmROZWFyZXN0Qm91bmRhcnkoc3RhdGUubWF0Y2hlcywgbWF0Y2gucm91dGUuaWQpO1xuICAgICAgaWYgKCEoZXJyb3JzICYmIGVycm9yc1tib3VuZGFyeU1hdGNoLnJvdXRlLmlkXSkpIHtcbiAgICAgICAgZXJyb3JzID0ge1xuICAgICAgICAgIC4uLmVycm9ycyxcbiAgICAgICAgICBbYm91bmRhcnlNYXRjaC5yb3V0ZS5pZF06IHJlc3VsdC5lcnJvcixcbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICAgIHN0YXRlLmZldGNoZXJzLmRlbGV0ZShrZXkpO1xuICAgIH0gZWxzZSBpZiAoaXNSZWRpcmVjdFJlc3VsdChyZXN1bHQpKSB7XG4gICAgICAvLyBTaG91bGQgbmV2ZXIgZ2V0IGhlcmUsIHJlZGlyZWN0cyBzaG91bGQgZ2V0IHByb2Nlc3NlZCBhYm92ZSwgYnV0IHdlXG4gICAgICAvLyBrZWVwIHRoaXMgdG8gdHlwZSBuYXJyb3cgdG8gYSBzdWNjZXNzIHJlc3VsdCBpbiB0aGUgZWxzZVxuICAgICAgaW52YXJpYW50KGZhbHNlLCBcIlVuaGFuZGxlZCBmZXRjaGVyIHJldmFsaWRhdGlvbiByZWRpcmVjdFwiKTtcbiAgICB9IGVsc2UgaWYgKGlzRGVmZXJyZWRSZXN1bHQocmVzdWx0KSkge1xuICAgICAgLy8gU2hvdWxkIG5ldmVyIGdldCBoZXJlLCBkZWZlcnJlZCBkYXRhIHNob3VsZCBiZSBhd2FpdGVkIGZvciBmZXRjaGVyc1xuICAgICAgLy8gaW4gcmVzb2x2ZURlZmVycmVkUmVzdWx0c1xuICAgICAgaW52YXJpYW50KGZhbHNlLCBcIlVuaGFuZGxlZCBmZXRjaGVyIGRlZmVycmVkIGRhdGFcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBkb25lRmV0Y2hlcjogRmV0Y2hlclN0YXRlc1tcIklkbGVcIl0gPSB7XG4gICAgICAgIHN0YXRlOiBcImlkbGVcIixcbiAgICAgICAgZGF0YTogcmVzdWx0LmRhdGEsXG4gICAgICAgIGZvcm1NZXRob2Q6IHVuZGVmaW5lZCxcbiAgICAgICAgZm9ybUFjdGlvbjogdW5kZWZpbmVkLFxuICAgICAgICBmb3JtRW5jVHlwZTogdW5kZWZpbmVkLFxuICAgICAgICBmb3JtRGF0YTogdW5kZWZpbmVkLFxuICAgICAgICBcIiBfaGFzRmV0Y2hlckRvbmVBbnl0aGluZyBcIjogdHJ1ZSxcbiAgICAgIH07XG4gICAgICBzdGF0ZS5mZXRjaGVycy5zZXQoa2V5LCBkb25lRmV0Y2hlcik7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHsgbG9hZGVyRGF0YSwgZXJyb3JzIH07XG59XG5cbmZ1bmN0aW9uIG1lcmdlTG9hZGVyRGF0YShcbiAgbG9hZGVyRGF0YTogUm91dGVEYXRhLFxuICBuZXdMb2FkZXJEYXRhOiBSb3V0ZURhdGEsXG4gIG1hdGNoZXM6IEFnbm9zdGljRGF0YVJvdXRlTWF0Y2hbXSxcbiAgZXJyb3JzOiBSb3V0ZURhdGEgfCBudWxsIHwgdW5kZWZpbmVkXG4pOiBSb3V0ZURhdGEge1xuICBsZXQgbWVyZ2VkTG9hZGVyRGF0YSA9IHsgLi4ubmV3TG9hZGVyRGF0YSB9O1xuICBmb3IgKGxldCBtYXRjaCBvZiBtYXRjaGVzKSB7XG4gICAgbGV0IGlkID0gbWF0Y2gucm91dGUuaWQ7XG4gICAgaWYgKG5ld0xvYWRlckRhdGEuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgICBpZiAobmV3TG9hZGVyRGF0YVtpZF0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBtZXJnZWRMb2FkZXJEYXRhW2lkXSA9IG5ld0xvYWRlckRhdGFbaWRdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTm8tb3AgLSB0aGlzIGlzIHNvIHdlIGlnbm9yZSBleGlzdGluZyBkYXRhIGlmIHdlIGhhdmUgYSBrZXkgaW4gdGhlXG4gICAgICAgIC8vIGluY29taW5nIG9iamVjdCB3aXRoIGFuIHVuZGVmaW5lZCB2YWx1ZSwgd2hpY2ggaXMgaG93IHdlIHVuc2V0IGEgcHJpb3JcbiAgICAgICAgLy8gbG9hZGVyRGF0YSBpZiB3ZSBlbmNvdW50ZXIgYSBsb2FkZXIgZXJyb3JcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGxvYWRlckRhdGFbaWRdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIG1lcmdlZExvYWRlckRhdGFbaWRdID0gbG9hZGVyRGF0YVtpZF07XG4gICAgfVxuXG4gICAgaWYgKGVycm9ycyAmJiBlcnJvcnMuaGFzT3duUHJvcGVydHkoaWQpKSB7XG4gICAgICAvLyBEb24ndCBrZWVwIGFueSBsb2FkZXIgZGF0YSBiZWxvdyB0aGUgYm91bmRhcnlcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbWVyZ2VkTG9hZGVyRGF0YTtcbn1cblxuLy8gRmluZCB0aGUgbmVhcmVzdCBlcnJvciBib3VuZGFyeSwgbG9va2luZyB1cHdhcmRzIGZyb20gdGhlIGxlYWYgcm91dGUgKG9yIHRoZVxuLy8gcm91dGUgc3BlY2lmaWVkIGJ5IHJvdXRlSWQpIGZvciB0aGUgY2xvc2VzdCBhbmNlc3RvciBlcnJvciBib3VuZGFyeSxcbi8vIGRlZmF1bHRpbmcgdG8gdGhlIHJvb3QgbWF0Y2hcbmZ1bmN0aW9uIGZpbmROZWFyZXN0Qm91bmRhcnkoXG4gIG1hdGNoZXM6IEFnbm9zdGljRGF0YVJvdXRlTWF0Y2hbXSxcbiAgcm91dGVJZD86IHN0cmluZ1xuKTogQWdub3N0aWNEYXRhUm91dGVNYXRjaCB7XG4gIGxldCBlbGlnaWJsZU1hdGNoZXMgPSByb3V0ZUlkXG4gICAgPyBtYXRjaGVzLnNsaWNlKDAsIG1hdGNoZXMuZmluZEluZGV4KChtKSA9PiBtLnJvdXRlLmlkID09PSByb3V0ZUlkKSArIDEpXG4gICAgOiBbLi4ubWF0Y2hlc107XG4gIHJldHVybiAoXG4gICAgZWxpZ2libGVNYXRjaGVzLnJldmVyc2UoKS5maW5kKChtKSA9PiBtLnJvdXRlLmhhc0Vycm9yQm91bmRhcnkgPT09IHRydWUpIHx8XG4gICAgbWF0Y2hlc1swXVxuICApO1xufVxuXG5mdW5jdGlvbiBnZXRTaG9ydENpcmN1aXRNYXRjaGVzKHJvdXRlczogQWdub3N0aWNEYXRhUm91dGVPYmplY3RbXSk6IHtcbiAgbWF0Y2hlczogQWdub3N0aWNEYXRhUm91dGVNYXRjaFtdO1xuICByb3V0ZTogQWdub3N0aWNEYXRhUm91dGVPYmplY3Q7XG59IHtcbiAgLy8gUHJlZmVyIGEgcm9vdCBsYXlvdXQgcm91dGUgaWYgcHJlc2VudCwgb3RoZXJ3aXNlIHNoaW0gaW4gYSByb3V0ZSBvYmplY3RcbiAgbGV0IHJvdXRlID0gcm91dGVzLmZpbmQoKHIpID0+IHIuaW5kZXggfHwgIXIucGF0aCB8fCByLnBhdGggPT09IFwiL1wiKSB8fCB7XG4gICAgaWQ6IGBfX3NoaW0tZXJyb3Itcm91dGVfX2AsXG4gIH07XG5cbiAgcmV0dXJuIHtcbiAgICBtYXRjaGVzOiBbXG4gICAgICB7XG4gICAgICAgIHBhcmFtczoge30sXG4gICAgICAgIHBhdGhuYW1lOiBcIlwiLFxuICAgICAgICBwYXRobmFtZUJhc2U6IFwiXCIsXG4gICAgICAgIHJvdXRlLFxuICAgICAgfSxcbiAgICBdLFxuICAgIHJvdXRlLFxuICB9O1xufVxuXG5mdW5jdGlvbiBnZXRJbnRlcm5hbFJvdXRlckVycm9yKFxuICBzdGF0dXM6IG51bWJlcixcbiAge1xuICAgIHBhdGhuYW1lLFxuICAgIHJvdXRlSWQsXG4gICAgbWV0aG9kLFxuICAgIHR5cGUsXG4gIH06IHtcbiAgICBwYXRobmFtZT86IHN0cmluZztcbiAgICByb3V0ZUlkPzogc3RyaW5nO1xuICAgIG1ldGhvZD86IHN0cmluZztcbiAgICB0eXBlPzogXCJkZWZlci1hY3Rpb25cIjtcbiAgfSA9IHt9XG4pIHtcbiAgbGV0IHN0YXR1c1RleHQgPSBcIlVua25vd24gU2VydmVyIEVycm9yXCI7XG4gIGxldCBlcnJvck1lc3NhZ2UgPSBcIlVua25vd24gQHJlbWl4LXJ1bi9yb3V0ZXIgZXJyb3JcIjtcblxuICBpZiAoc3RhdHVzID09PSA0MDApIHtcbiAgICBzdGF0dXNUZXh0ID0gXCJCYWQgUmVxdWVzdFwiO1xuICAgIGlmIChtZXRob2QgJiYgcGF0aG5hbWUgJiYgcm91dGVJZCkge1xuICAgICAgZXJyb3JNZXNzYWdlID1cbiAgICAgICAgYFlvdSBtYWRlIGEgJHttZXRob2R9IHJlcXVlc3QgdG8gXCIke3BhdGhuYW1lfVwiIGJ1dCBgICtcbiAgICAgICAgYGRpZCBub3QgcHJvdmlkZSBhIFxcYGxvYWRlclxcYCBmb3Igcm91dGUgXCIke3JvdXRlSWR9XCIsIGAgK1xuICAgICAgICBgc28gdGhlcmUgaXMgbm8gd2F5IHRvIGhhbmRsZSB0aGUgcmVxdWVzdC5gO1xuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gXCJkZWZlci1hY3Rpb25cIikge1xuICAgICAgZXJyb3JNZXNzYWdlID0gXCJkZWZlcigpIGlzIG5vdCBzdXBwb3J0ZWQgaW4gYWN0aW9uc1wiO1xuICAgIH1cbiAgfSBlbHNlIGlmIChzdGF0dXMgPT09IDQwMykge1xuICAgIHN0YXR1c1RleHQgPSBcIkZvcmJpZGRlblwiO1xuICAgIGVycm9yTWVzc2FnZSA9IGBSb3V0ZSBcIiR7cm91dGVJZH1cIiBkb2VzIG5vdCBtYXRjaCBVUkwgXCIke3BhdGhuYW1lfVwiYDtcbiAgfSBlbHNlIGlmIChzdGF0dXMgPT09IDQwNCkge1xuICAgIHN0YXR1c1RleHQgPSBcIk5vdCBGb3VuZFwiO1xuICAgIGVycm9yTWVzc2FnZSA9IGBObyByb3V0ZSBtYXRjaGVzIFVSTCBcIiR7cGF0aG5hbWV9XCJgO1xuICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gNDA1KSB7XG4gICAgc3RhdHVzVGV4dCA9IFwiTWV0aG9kIE5vdCBBbGxvd2VkXCI7XG4gICAgaWYgKG1ldGhvZCAmJiBwYXRobmFtZSAmJiByb3V0ZUlkKSB7XG4gICAgICBlcnJvck1lc3NhZ2UgPVxuICAgICAgICBgWW91IG1hZGUgYSAke21ldGhvZC50b1VwcGVyQ2FzZSgpfSByZXF1ZXN0IHRvIFwiJHtwYXRobmFtZX1cIiBidXQgYCArXG4gICAgICAgIGBkaWQgbm90IHByb3ZpZGUgYW4gXFxgYWN0aW9uXFxgIGZvciByb3V0ZSBcIiR7cm91dGVJZH1cIiwgYCArXG4gICAgICAgIGBzbyB0aGVyZSBpcyBubyB3YXkgdG8gaGFuZGxlIHRoZSByZXF1ZXN0LmA7XG4gICAgfSBlbHNlIGlmIChtZXRob2QpIHtcbiAgICAgIGVycm9yTWVzc2FnZSA9IGBJbnZhbGlkIHJlcXVlc3QgbWV0aG9kIFwiJHttZXRob2QudG9VcHBlckNhc2UoKX1cImA7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIG5ldyBFcnJvclJlc3BvbnNlKFxuICAgIHN0YXR1cyB8fCA1MDAsXG4gICAgc3RhdHVzVGV4dCxcbiAgICBuZXcgRXJyb3IoZXJyb3JNZXNzYWdlKSxcbiAgICB0cnVlXG4gICk7XG59XG5cbi8vIEZpbmQgYW55IHJldHVybmVkIHJlZGlyZWN0IGVycm9ycywgc3RhcnRpbmcgZnJvbSB0aGUgbG93ZXN0IG1hdGNoXG5mdW5jdGlvbiBmaW5kUmVkaXJlY3QocmVzdWx0czogRGF0YVJlc3VsdFtdKTogUmVkaXJlY3RSZXN1bHQgfCB1bmRlZmluZWQge1xuICBmb3IgKGxldCBpID0gcmVzdWx0cy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgIGxldCByZXN1bHQgPSByZXN1bHRzW2ldO1xuICAgIGlmIChpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdCkpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHN0cmlwSGFzaEZyb21QYXRoKHBhdGg6IFRvKSB7XG4gIGxldCBwYXJzZWRQYXRoID0gdHlwZW9mIHBhdGggPT09IFwic3RyaW5nXCIgPyBwYXJzZVBhdGgocGF0aCkgOiBwYXRoO1xuICByZXR1cm4gY3JlYXRlUGF0aCh7IC4uLnBhcnNlZFBhdGgsIGhhc2g6IFwiXCIgfSk7XG59XG5cbmZ1bmN0aW9uIGlzSGFzaENoYW5nZU9ubHkoYTogTG9jYXRpb24sIGI6IExvY2F0aW9uKTogYm9vbGVhbiB7XG4gIHJldHVybiAoXG4gICAgYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoICE9PSBiLmhhc2hcbiAgKTtcbn1cblxuZnVuY3Rpb24gaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQ6IERhdGFSZXN1bHQpOiByZXN1bHQgaXMgRGVmZXJyZWRSZXN1bHQge1xuICByZXR1cm4gcmVzdWx0LnR5cGUgPT09IFJlc3VsdFR5cGUuZGVmZXJyZWQ7XG59XG5cbmZ1bmN0aW9uIGlzRXJyb3JSZXN1bHQocmVzdWx0OiBEYXRhUmVzdWx0KTogcmVzdWx0IGlzIEVycm9yUmVzdWx0IHtcbiAgcmV0dXJuIHJlc3VsdC50eXBlID09PSBSZXN1bHRUeXBlLmVycm9yO1xufVxuXG5mdW5jdGlvbiBpc1JlZGlyZWN0UmVzdWx0KHJlc3VsdD86IERhdGFSZXN1bHQpOiByZXN1bHQgaXMgUmVkaXJlY3RSZXN1bHQge1xuICByZXR1cm4gKHJlc3VsdCAmJiByZXN1bHQudHlwZSkgPT09IFJlc3VsdFR5cGUucmVkaXJlY3Q7XG59XG5cbmZ1bmN0aW9uIGlzUmVzcG9uc2UodmFsdWU6IGFueSk6IHZhbHVlIGlzIFJlc3BvbnNlIHtcbiAgcmV0dXJuIChcbiAgICB2YWx1ZSAhPSBudWxsICYmXG4gICAgdHlwZW9mIHZhbHVlLnN0YXR1cyA9PT0gXCJudW1iZXJcIiAmJlxuICAgIHR5cGVvZiB2YWx1ZS5zdGF0dXNUZXh0ID09PSBcInN0cmluZ1wiICYmXG4gICAgdHlwZW9mIHZhbHVlLmhlYWRlcnMgPT09IFwib2JqZWN0XCIgJiZcbiAgICB0eXBlb2YgdmFsdWUuYm9keSAhPT0gXCJ1bmRlZmluZWRcIlxuICApO1xufVxuXG5mdW5jdGlvbiBpc1JlZGlyZWN0UmVzcG9uc2UocmVzdWx0OiBhbnkpOiByZXN1bHQgaXMgUmVzcG9uc2Uge1xuICBpZiAoIWlzUmVzcG9uc2UocmVzdWx0KSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGxldCBzdGF0dXMgPSByZXN1bHQuc3RhdHVzO1xuICBsZXQgbG9jYXRpb24gPSByZXN1bHQuaGVhZGVycy5nZXQoXCJMb2NhdGlvblwiKTtcbiAgcmV0dXJuIHN0YXR1cyA+PSAzMDAgJiYgc3RhdHVzIDw9IDM5OSAmJiBsb2NhdGlvbiAhPSBudWxsO1xufVxuXG5mdW5jdGlvbiBpc1F1ZXJ5Um91dGVSZXNwb25zZShvYmo6IGFueSk6IG9iaiBpcyBRdWVyeVJvdXRlUmVzcG9uc2Uge1xuICByZXR1cm4gKFxuICAgIG9iaiAmJlxuICAgIGlzUmVzcG9uc2Uob2JqLnJlc3BvbnNlKSAmJlxuICAgIChvYmoudHlwZSA9PT0gUmVzdWx0VHlwZS5kYXRhIHx8IFJlc3VsdFR5cGUuZXJyb3IpXG4gICk7XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWRNZXRob2QobWV0aG9kOiBzdHJpbmcpOiBtZXRob2QgaXMgRm9ybU1ldGhvZCB7XG4gIHJldHVybiB2YWxpZFJlcXVlc3RNZXRob2RzLmhhcyhtZXRob2QgYXMgRm9ybU1ldGhvZCk7XG59XG5cbmZ1bmN0aW9uIGlzTXV0YXRpb25NZXRob2QobWV0aG9kPzogc3RyaW5nKTogbWV0aG9kIGlzIE11dGF0aW9uRm9ybU1ldGhvZCB7XG4gIHJldHVybiB2YWxpZE11dGF0aW9uTWV0aG9kcy5oYXMobWV0aG9kIGFzIE11dGF0aW9uRm9ybU1ldGhvZCk7XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJlc29sdmVEZWZlcnJlZFJlc3VsdHMoXG4gIGN1cnJlbnRNYXRjaGVzOiBBZ25vc3RpY0RhdGFSb3V0ZU1hdGNoW10sXG4gIG1hdGNoZXNUb0xvYWQ6IEFnbm9zdGljRGF0YVJvdXRlTWF0Y2hbXSxcbiAgcmVzdWx0czogRGF0YVJlc3VsdFtdLFxuICBzaWduYWw6IEFib3J0U2lnbmFsLFxuICBpc0ZldGNoZXI6IGJvb2xlYW4sXG4gIGN1cnJlbnRMb2FkZXJEYXRhPzogUm91dGVEYXRhXG4pIHtcbiAgZm9yIChsZXQgaW5kZXggPSAwOyBpbmRleCA8IHJlc3VsdHMubGVuZ3RoOyBpbmRleCsrKSB7XG4gICAgbGV0IHJlc3VsdCA9IHJlc3VsdHNbaW5kZXhdO1xuICAgIGxldCBtYXRjaCA9IG1hdGNoZXNUb0xvYWRbaW5kZXhdO1xuICAgIGxldCBjdXJyZW50TWF0Y2ggPSBjdXJyZW50TWF0Y2hlcy5maW5kKFxuICAgICAgKG0pID0+IG0ucm91dGUuaWQgPT09IG1hdGNoLnJvdXRlLmlkXG4gICAgKTtcbiAgICBsZXQgaXNSZXZhbGlkYXRpbmdMb2FkZXIgPVxuICAgICAgY3VycmVudE1hdGNoICE9IG51bGwgJiZcbiAgICAgICFpc05ld1JvdXRlSW5zdGFuY2UoY3VycmVudE1hdGNoLCBtYXRjaCkgJiZcbiAgICAgIChjdXJyZW50TG9hZGVyRGF0YSAmJiBjdXJyZW50TG9hZGVyRGF0YVttYXRjaC5yb3V0ZS5pZF0pICE9PSB1bmRlZmluZWQ7XG5cbiAgICBpZiAoaXNEZWZlcnJlZFJlc3VsdChyZXN1bHQpICYmIChpc0ZldGNoZXIgfHwgaXNSZXZhbGlkYXRpbmdMb2FkZXIpKSB7XG4gICAgICAvLyBOb3RlOiB3ZSBkbyBub3QgaGF2ZSB0byB0b3VjaCBhY3RpdmVEZWZlcnJlZHMgaGVyZSBzaW5jZSB3ZSByYWNlIHRoZW1cbiAgICAgIC8vIGFnYWluc3QgdGhlIHNpZ25hbCBpbiByZXNvbHZlRGVmZXJyZWREYXRhIGFuZCB0aGV5J2xsIGdldCBhYm9ydGVkXG4gICAgICAvLyB0aGVyZSBpZiBuZWVkZWRcbiAgICAgIGF3YWl0IHJlc29sdmVEZWZlcnJlZERhdGEocmVzdWx0LCBzaWduYWwsIGlzRmV0Y2hlcikudGhlbigocmVzdWx0KSA9PiB7XG4gICAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgICByZXN1bHRzW2luZGV4XSA9IHJlc3VsdCB8fCByZXN1bHRzW2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG59XG5cbmFzeW5jIGZ1bmN0aW9uIHJlc29sdmVEZWZlcnJlZERhdGEoXG4gIHJlc3VsdDogRGVmZXJyZWRSZXN1bHQsXG4gIHNpZ25hbDogQWJvcnRTaWduYWwsXG4gIHVud3JhcCA9IGZhbHNlXG4pOiBQcm9taXNlPFN1Y2Nlc3NSZXN1bHQgfCBFcnJvclJlc3VsdCB8IHVuZGVmaW5lZD4ge1xuICBsZXQgYWJvcnRlZCA9IGF3YWl0IHJlc3VsdC5kZWZlcnJlZERhdGEucmVzb2x2ZURhdGEoc2lnbmFsKTtcbiAgaWYgKGFib3J0ZWQpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAodW53cmFwKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFJlc3VsdFR5cGUuZGF0YSxcbiAgICAgICAgZGF0YTogcmVzdWx0LmRlZmVycmVkRGF0YS51bndyYXBwZWREYXRhLFxuICAgICAgfTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBIYW5kbGUgYW55IFRyYWNrZWRQcm9taXNlLl9lcnJvciB2YWx1ZXMgZW5jb3VudGVyZWQgd2hpbGUgdW53cmFwcGluZ1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogUmVzdWx0VHlwZS5lcnJvcixcbiAgICAgICAgZXJyb3I6IGUsXG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgdHlwZTogUmVzdWx0VHlwZS5kYXRhLFxuICAgIGRhdGE6IHJlc3VsdC5kZWZlcnJlZERhdGEuZGF0YSxcbiAgfTtcbn1cblxuZnVuY3Rpb24gaGFzTmFrZWRJbmRleFF1ZXJ5KHNlYXJjaDogc3RyaW5nKTogYm9vbGVhbiB7XG4gIHJldHVybiBuZXcgVVJMU2VhcmNoUGFyYW1zKHNlYXJjaCkuZ2V0QWxsKFwiaW5kZXhcIikuc29tZSgodikgPT4gdiA9PT0gXCJcIik7XG59XG5cbi8vIE5vdGU6IFRoaXMgc2hvdWxkIG1hdGNoIHRoZSBmb3JtYXQgZXhwb3J0ZWQgYnkgdXNlTWF0Y2hlcywgc28gaWYgeW91IGNoYW5nZVxuLy8gdGhpcyBwbGVhc2UgYWxzbyBjaGFuZ2UgdGhhdCA6KSAgRXZlbnR1YWxseSB3ZSdsbCBEUlkgdGhpcyB1cFxuZnVuY3Rpb24gY3JlYXRlVXNlTWF0Y2hlc01hdGNoKFxuICBtYXRjaDogQWdub3N0aWNEYXRhUm91dGVNYXRjaCxcbiAgbG9hZGVyRGF0YTogUm91dGVEYXRhXG4pOiBVc2VNYXRjaGVzTWF0Y2gge1xuICBsZXQgeyByb3V0ZSwgcGF0aG5hbWUsIHBhcmFtcyB9ID0gbWF0Y2g7XG4gIHJldHVybiB7XG4gICAgaWQ6IHJvdXRlLmlkLFxuICAgIHBhdGhuYW1lLFxuICAgIHBhcmFtcyxcbiAgICBkYXRhOiBsb2FkZXJEYXRhW3JvdXRlLmlkXSBhcyB1bmtub3duLFxuICAgIGhhbmRsZTogcm91dGUuaGFuZGxlIGFzIHVua25vd24sXG4gIH07XG59XG5cbmZ1bmN0aW9uIGdldFRhcmdldE1hdGNoKFxuICBtYXRjaGVzOiBBZ25vc3RpY0RhdGFSb3V0ZU1hdGNoW10sXG4gIGxvY2F0aW9uOiBMb2NhdGlvbiB8IHN0cmluZ1xuKSB7XG4gIGxldCBzZWFyY2ggPVxuICAgIHR5cGVvZiBsb2NhdGlvbiA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aChsb2NhdGlvbikuc2VhcmNoIDogbG9jYXRpb24uc2VhcmNoO1xuICBpZiAoXG4gICAgbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdLnJvdXRlLmluZGV4ICYmXG4gICAgaGFzTmFrZWRJbmRleFF1ZXJ5KHNlYXJjaCB8fCBcIlwiKVxuICApIHtcbiAgICAvLyBSZXR1cm4gdGhlIGxlYWYgaW5kZXggcm91dGUgd2hlbiBpbmRleCBpcyBwcmVzZW50XG4gICAgcmV0dXJuIG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXTtcbiAgfVxuICAvLyBPdGhlcndpc2UgZ3JhYiB0aGUgZGVlcGVzdCBcInBhdGggY29udHJpYnV0aW5nXCIgbWF0Y2ggKGlnbm9yaW5nIGluZGV4IGFuZFxuICAvLyBwYXRobGVzcyBsYXlvdXQgcm91dGVzKVxuICBsZXQgcGF0aE1hdGNoZXMgPSBnZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcyhtYXRjaGVzKTtcbiAgcmV0dXJuIHBhdGhNYXRjaGVzW3BhdGhNYXRjaGVzLmxlbmd0aCAtIDFdO1xufVxuLy8jZW5kcmVnaW9uXG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG4vKipcbiAqIGlubGluZWQgT2JqZWN0LmlzIHBvbHlmaWxsIHRvIGF2b2lkIHJlcXVpcmluZyBjb25zdW1lcnMgc2hpcCB0aGVpciBvd25cbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9pc1xuICovXG5mdW5jdGlvbiBpc1BvbHlmaWxsKHg6IGFueSwgeTogYW55KSB7XG4gIHJldHVybiAoXG4gICAgKHggPT09IHkgJiYgKHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5KSkgfHwgKHggIT09IHggJiYgeSAhPT0geSkgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgKTtcbn1cblxuY29uc3QgaXM6ICh4OiBhbnksIHk6IGFueSkgPT4gYm9vbGVhbiA9XG4gIHR5cGVvZiBPYmplY3QuaXMgPT09IFwiZnVuY3Rpb25cIiA/IE9iamVjdC5pcyA6IGlzUG9seWZpbGw7XG5cbi8vIEludGVudGlvbmFsbHkgbm90IHVzaW5nIG5hbWVkIGltcG9ydHMgYmVjYXVzZSBSb2xsdXAgdXNlcyBkeW5hbWljXG4vLyBkaXNwYXRjaCBmb3IgQ29tbW9uSlMgaW50ZXJvcCBuYW1lZCBpbXBvcnRzLlxuY29uc3QgeyB1c2VTdGF0ZSwgdXNlRWZmZWN0LCB1c2VMYXlvdXRFZmZlY3QsIHVzZURlYnVnVmFsdWUgfSA9IFJlYWN0O1xuXG5sZXQgZGlkV2Fybk9sZDE4QWxwaGEgPSBmYWxzZTtcbmxldCBkaWRXYXJuVW5jYWNoZWRHZXRTbmFwc2hvdCA9IGZhbHNlO1xuXG4vLyBEaXNjbGFpbWVyOiBUaGlzIHNoaW0gYnJlYWtzIG1hbnkgb2YgdGhlIHJ1bGVzIG9mIFJlYWN0LCBhbmQgb25seSB3b3Jrc1xuLy8gYmVjYXVzZSBvZiBhIHZlcnkgcGFydGljdWxhciBzZXQgb2YgaW1wbGVtZW50YXRpb24gZGV0YWlscyBhbmQgYXNzdW1wdGlvbnNcbi8vIC0tIGNoYW5nZSBhbnkgb25lIG9mIHRoZW0gYW5kIGl0IHdpbGwgYnJlYWsuIFRoZSBtb3N0IGltcG9ydGFudCBhc3N1bXB0aW9uXG4vLyBpcyB0aGF0IHVwZGF0ZXMgYXJlIGFsd2F5cyBzeW5jaHJvbm91cywgYmVjYXVzZSBjb25jdXJyZW50IHJlbmRlcmluZyBpc1xuLy8gb25seSBhdmFpbGFibGUgaW4gdmVyc2lvbnMgb2YgUmVhY3QgdGhhdCBhbHNvIGhhdmUgYSBidWlsdC1pblxuLy8gdXNlU3luY0V4dGVybmFsU3RvcmUgQVBJLiBBbmQgd2Ugb25seSB1c2UgdGhpcyBzaGltIHdoZW4gdGhlIGJ1aWx0LWluIEFQSVxuLy8gZG9lcyBub3QgZXhpc3QuXG4vL1xuLy8gRG8gbm90IGFzc3VtZSB0aGF0IHRoZSBjbGV2ZXIgaGFja3MgdXNlZCBieSB0aGlzIGhvb2sgYWxzbyB3b3JrIGluIGdlbmVyYWwuXG4vLyBUaGUgcG9pbnQgb2YgdGhpcyBzaGltIGlzIHRvIHJlcGxhY2UgdGhlIG5lZWQgZm9yIGhhY2tzIGJ5IG90aGVyIGxpYnJhcmllcy5cbmV4cG9ydCBmdW5jdGlvbiB1c2VTeW5jRXh0ZXJuYWxTdG9yZTxUPihcbiAgc3Vic2NyaWJlOiAoZm46ICgpID0+IHZvaWQpID0+ICgpID0+IHZvaWQsXG4gIGdldFNuYXBzaG90OiAoKSA9PiBULFxuICAvLyBOb3RlOiBUaGUgc2hpbSBkb2VzIG5vdCB1c2UgZ2V0U2VydmVyU25hcHNob3QsIGJlY2F1c2UgcHJlLTE4IHZlcnNpb25zIG9mXG4gIC8vIFJlYWN0IGRvIG5vdCBleHBvc2UgYSB3YXkgdG8gY2hlY2sgaWYgd2UncmUgaHlkcmF0aW5nLiBTbyB1c2VycyBvZiB0aGUgc2hpbVxuICAvLyB3aWxsIG5lZWQgdG8gdHJhY2sgdGhhdCB0aGVtc2VsdmVzIGFuZCByZXR1cm4gdGhlIGNvcnJlY3QgdmFsdWVcbiAgLy8gZnJvbSBgZ2V0U25hcHNob3RgLlxuICBnZXRTZXJ2ZXJTbmFwc2hvdD86ICgpID0+IFRcbik6IFQge1xuICBpZiAoX19ERVZfXykge1xuICAgIGlmICghZGlkV2Fybk9sZDE4QWxwaGEpIHtcbiAgICAgIGlmIChcInN0YXJ0VHJhbnNpdGlvblwiIGluIFJlYWN0KSB7XG4gICAgICAgIGRpZFdhcm5PbGQxOEFscGhhID0gdHJ1ZTtcbiAgICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgICBcIllvdSBhcmUgdXNpbmcgYW4gb3V0ZGF0ZWQsIHByZS1yZWxlYXNlIGFscGhhIG9mIFJlYWN0IDE4IHRoYXQgXCIgK1xuICAgICAgICAgICAgXCJkb2VzIG5vdCBzdXBwb3J0IHVzZVN5bmNFeHRlcm5hbFN0b3JlLiBUaGUgXCIgK1xuICAgICAgICAgICAgXCJ1c2Utc3luYy1leHRlcm5hbC1zdG9yZSBzaGltIHdpbGwgbm90IHdvcmsgY29ycmVjdGx5LiBVcGdyYWRlIFwiICtcbiAgICAgICAgICAgIFwidG8gYSBuZXdlciBwcmUtcmVsZWFzZS5cIlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIFJlYWQgdGhlIGN1cnJlbnQgc25hcHNob3QgZnJvbSB0aGUgc3RvcmUgb24gZXZlcnkgcmVuZGVyLiBBZ2FpbiwgdGhpc1xuICAvLyBicmVha3MgdGhlIHJ1bGVzIG9mIFJlYWN0LCBhbmQgb25seSB3b3JrcyBoZXJlIGJlY2F1c2Ugb2Ygc3BlY2lmaWNcbiAgLy8gaW1wbGVtZW50YXRpb24gZGV0YWlscywgbW9zdCBpbXBvcnRhbnRseSB0aGF0IHVwZGF0ZXMgYXJlXG4gIC8vIGFsd2F5cyBzeW5jaHJvbm91cy5cbiAgY29uc3QgdmFsdWUgPSBnZXRTbmFwc2hvdCgpO1xuICBpZiAoX19ERVZfXykge1xuICAgIGlmICghZGlkV2FyblVuY2FjaGVkR2V0U25hcHNob3QpIHtcbiAgICAgIGNvbnN0IGNhY2hlZFZhbHVlID0gZ2V0U25hcHNob3QoKTtcbiAgICAgIGlmICghaXModmFsdWUsIGNhY2hlZFZhbHVlKSkge1xuICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgIFwiVGhlIHJlc3VsdCBvZiBnZXRTbmFwc2hvdCBzaG91bGQgYmUgY2FjaGVkIHRvIGF2b2lkIGFuIGluZmluaXRlIGxvb3BcIlxuICAgICAgICApO1xuICAgICAgICBkaWRXYXJuVW5jYWNoZWRHZXRTbmFwc2hvdCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gQmVjYXVzZSB1cGRhdGVzIGFyZSBzeW5jaHJvbm91cywgd2UgZG9uJ3QgcXVldWUgdGhlbS4gSW5zdGVhZCB3ZSBmb3JjZSBhXG4gIC8vIHJlLXJlbmRlciB3aGVuZXZlciB0aGUgc3Vic2NyaWJlZCBzdGF0ZSBjaGFuZ2VzIGJ5IHVwZGF0aW5nIGFuIHNvbWVcbiAgLy8gYXJiaXRyYXJ5IHVzZVN0YXRlIGhvb2suIFRoZW4sIGR1cmluZyByZW5kZXIsIHdlIGNhbGwgZ2V0U25hcHNob3QgdG8gcmVhZFxuICAvLyB0aGUgY3VycmVudCB2YWx1ZS5cbiAgLy9cbiAgLy8gQmVjYXVzZSB3ZSBkb24ndCBhY3R1YWxseSB1c2UgdGhlIHN0YXRlIHJldHVybmVkIGJ5IHRoZSB1c2VTdGF0ZSBob29rLCB3ZVxuICAvLyBjYW4gc2F2ZSBhIGJpdCBvZiBtZW1vcnkgYnkgc3RvcmluZyBvdGhlciBzdHVmZiBpbiB0aGF0IHNsb3QuXG4gIC8vXG4gIC8vIFRvIGltcGxlbWVudCB0aGUgZWFybHkgYmFpbG91dCwgd2UgbmVlZCB0byB0cmFjayBzb21lIHRoaW5ncyBvbiBhIG11dGFibGVcbiAgLy8gb2JqZWN0LiBVc3VhbGx5LCB3ZSB3b3VsZCBwdXQgdGhhdCBpbiBhIHVzZVJlZiBob29rLCBidXQgd2UgY2FuIHN0YXNoIGl0IGluXG4gIC8vIG91ciB1c2VTdGF0ZSBob29rIGluc3RlYWQuXG4gIC8vXG4gIC8vIFRvIGZvcmNlIGEgcmUtcmVuZGVyLCB3ZSBjYWxsIGZvcmNlVXBkYXRlKHtpbnN0fSkuIFRoYXQgd29ya3MgYmVjYXVzZSB0aGVcbiAgLy8gbmV3IG9iamVjdCBhbHdheXMgZmFpbHMgYW4gZXF1YWxpdHkgY2hlY2suXG4gIGNvbnN0IFt7IGluc3QgfSwgZm9yY2VVcGRhdGVdID0gdXNlU3RhdGUoeyBpbnN0OiB7IHZhbHVlLCBnZXRTbmFwc2hvdCB9IH0pO1xuXG4gIC8vIFRyYWNrIHRoZSBsYXRlc3QgZ2V0U25hcHNob3QgZnVuY3Rpb24gd2l0aCBhIHJlZi4gVGhpcyBuZWVkcyB0byBiZSB1cGRhdGVkXG4gIC8vIGluIHRoZSBsYXlvdXQgcGhhc2Ugc28gd2UgY2FuIGFjY2VzcyBpdCBkdXJpbmcgdGhlIHRlYXJpbmcgY2hlY2sgdGhhdFxuICAvLyBoYXBwZW5zIG9uIHN1YnNjcmliZS5cbiAgdXNlTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICBpbnN0LnZhbHVlID0gdmFsdWU7XG4gICAgaW5zdC5nZXRTbmFwc2hvdCA9IGdldFNuYXBzaG90O1xuXG4gICAgLy8gV2hlbmV2ZXIgZ2V0U25hcHNob3Qgb3Igc3Vic2NyaWJlIGNoYW5nZXMsIHdlIG5lZWQgdG8gY2hlY2sgaW4gdGhlXG4gICAgLy8gY29tbWl0IHBoYXNlIGlmIHRoZXJlIHdhcyBhbiBpbnRlcmxlYXZlZCBtdXRhdGlvbi4gSW4gY29uY3VycmVudCBtb2RlXG4gICAgLy8gdGhpcyBjYW4gaGFwcGVuIGFsbCB0aGUgdGltZSwgYnV0IGV2ZW4gaW4gc3luY2hyb25vdXMgbW9kZSwgYW4gZWFybGllclxuICAgIC8vIGVmZmVjdCBtYXkgaGF2ZSBtdXRhdGVkIHRoZSBzdG9yZS5cbiAgICBpZiAoY2hlY2tJZlNuYXBzaG90Q2hhbmdlZChpbnN0KSkge1xuICAgICAgLy8gRm9yY2UgYSByZS1yZW5kZXIuXG4gICAgICBmb3JjZVVwZGF0ZSh7IGluc3QgfSk7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9leGhhdXN0aXZlLWRlcHNcbiAgfSwgW3N1YnNjcmliZSwgdmFsdWUsIGdldFNuYXBzaG90XSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICAvLyBDaGVjayBmb3IgY2hhbmdlcyByaWdodCBiZWZvcmUgc3Vic2NyaWJpbmcuIFN1YnNlcXVlbnQgY2hhbmdlcyB3aWxsIGJlXG4gICAgLy8gZGV0ZWN0ZWQgaW4gdGhlIHN1YnNjcmlwdGlvbiBoYW5kbGVyLlxuICAgIGlmIChjaGVja0lmU25hcHNob3RDaGFuZ2VkKGluc3QpKSB7XG4gICAgICAvLyBGb3JjZSBhIHJlLXJlbmRlci5cbiAgICAgIGZvcmNlVXBkYXRlKHsgaW5zdCB9KTtcbiAgICB9XG4gICAgY29uc3QgaGFuZGxlU3RvcmVDaGFuZ2UgPSAoKSA9PiB7XG4gICAgICAvLyBUT0RPOiBCZWNhdXNlIHRoZXJlIGlzIG5vIGNyb3NzLXJlbmRlcmVyIEFQSSBmb3IgYmF0Y2hpbmcgdXBkYXRlcywgaXQnc1xuICAgICAgLy8gdXAgdG8gdGhlIGNvbnN1bWVyIG9mIHRoaXMgbGlicmFyeSB0byB3cmFwIHRoZWlyIHN1YnNjcmlwdGlvbiBldmVudFxuICAgICAgLy8gd2l0aCB1bnN0YWJsZV9iYXRjaGVkVXBkYXRlcy4gU2hvdWxkIHdlIHRyeSB0byBkZXRlY3Qgd2hlbiB0aGlzIGlzbid0XG4gICAgICAvLyB0aGUgY2FzZSBhbmQgcHJpbnQgYSB3YXJuaW5nIGluIGRldmVsb3BtZW50P1xuXG4gICAgICAvLyBUaGUgc3RvcmUgY2hhbmdlZC4gQ2hlY2sgaWYgdGhlIHNuYXBzaG90IGNoYW5nZWQgc2luY2UgdGhlIGxhc3QgdGltZSB3ZVxuICAgICAgLy8gcmVhZCBmcm9tIHRoZSBzdG9yZS5cbiAgICAgIGlmIChjaGVja0lmU25hcHNob3RDaGFuZ2VkKGluc3QpKSB7XG4gICAgICAgIC8vIEZvcmNlIGEgcmUtcmVuZGVyLlxuICAgICAgICBmb3JjZVVwZGF0ZSh7IGluc3QgfSk7XG4gICAgICB9XG4gICAgfTtcbiAgICAvLyBTdWJzY3JpYmUgdG8gdGhlIHN0b3JlIGFuZCByZXR1cm4gYSBjbGVhbi11cCBmdW5jdGlvbi5cbiAgICByZXR1cm4gc3Vic2NyaWJlKGhhbmRsZVN0b3JlQ2hhbmdlKTtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcmVhY3QtaG9va3MvZXhoYXVzdGl2ZS1kZXBzXG4gIH0sIFtzdWJzY3JpYmVdKTtcblxuICB1c2VEZWJ1Z1ZhbHVlKHZhbHVlKTtcbiAgcmV0dXJuIHZhbHVlO1xufVxuXG5mdW5jdGlvbiBjaGVja0lmU25hcHNob3RDaGFuZ2VkKGluc3Q6IGFueSkge1xuICBjb25zdCBsYXRlc3RHZXRTbmFwc2hvdCA9IGluc3QuZ2V0U25hcHNob3Q7XG4gIGNvbnN0IHByZXZWYWx1ZSA9IGluc3QudmFsdWU7XG4gIHRyeSB7XG4gICAgY29uc3QgbmV4dFZhbHVlID0gbGF0ZXN0R2V0U25hcHNob3QoKTtcbiAgICByZXR1cm4gIWlzKHByZXZWYWx1ZSwgbmV4dFZhbHVlKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufVxuIiwiLyoqXG4gKiBJbmxpbmVkIGludG8gdGhlIHJlYWN0LXJvdXRlciByZXBvIHNpbmNlIHVzZS1zeW5jLWV4dGVybmFsLXN0b3JlIGRvZXMgbm90XG4gKiBwcm92aWRlIGEgVU1ELWNvbXBhdGlibGUgcGFja2FnZSwgc28gd2UgbmVlZCB0aGlzIHRvIGJlIGFibGUgdG8gZGlzdHJpYnV0ZVxuICogVU1EIHJlYWN0LXJvdXRlciBidW5kbGVzXG4gKi9cblxuLyoqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqXG4gKiBAZmxvd1xuICovXG5cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgeyB1c2VTeW5jRXh0ZXJuYWxTdG9yZSBhcyBjbGllbnQgfSBmcm9tIFwiLi91c2VTeW5jRXh0ZXJuYWxTdG9yZVNoaW1DbGllbnRcIjtcbmltcG9ydCB7IHVzZVN5bmNFeHRlcm5hbFN0b3JlIGFzIHNlcnZlciB9IGZyb20gXCIuL3VzZVN5bmNFeHRlcm5hbFN0b3JlU2hpbVNlcnZlclwiO1xuXG5jb25zdCBjYW5Vc2VET006IGJvb2xlYW4gPSAhIShcbiAgdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiICYmXG4gIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAhPT0gXCJ1bmRlZmluZWRcIlxuKTtcbmNvbnN0IGlzU2VydmVyRW52aXJvbm1lbnQgPSAhY2FuVXNlRE9NO1xuY29uc3Qgc2hpbSA9IGlzU2VydmVyRW52aXJvbm1lbnQgPyBzZXJ2ZXIgOiBjbGllbnQ7XG5cbmV4cG9ydCBjb25zdCB1c2VTeW5jRXh0ZXJuYWxTdG9yZSA9XG4gIFwidXNlU3luY0V4dGVybmFsU3RvcmVcIiBpbiBSZWFjdFxuICAgID8gKChtb2R1bGUpID0+IG1vZHVsZS51c2VTeW5jRXh0ZXJuYWxTdG9yZSkoUmVhY3QpXG4gICAgOiBzaGltO1xuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgdHlwZSB7XG4gIEFnbm9zdGljUm91dGVNYXRjaCxcbiAgQWdub3N0aWNJbmRleFJvdXRlT2JqZWN0LFxuICBBZ25vc3RpY05vbkluZGV4Um91dGVPYmplY3QsXG4gIEhpc3RvcnksXG4gIExvY2F0aW9uLFxuICBSb3V0ZXIsXG4gIFN0YXRpY0hhbmRsZXJDb250ZXh0LFxuICBUbyxcbiAgVHJhY2tlZFByb21pc2UsXG59IGZyb20gXCJAcmVtaXgtcnVuL3JvdXRlclwiO1xuaW1wb3J0IHR5cGUgeyBBY3Rpb24gYXMgTmF2aWdhdGlvblR5cGUgfSBmcm9tIFwiQHJlbWl4LXJ1bi9yb3V0ZXJcIjtcblxuLy8gQ3JlYXRlIHJlYWN0LXNwZWNpZmljIHR5cGVzIGZyb20gdGhlIGFnbm9zdGljIHR5cGVzIGluIEByZW1peC1ydW4vcm91dGVyIHRvXG4vLyBleHBvcnQgZnJvbSByZWFjdC1yb3V0ZXJcbmV4cG9ydCBpbnRlcmZhY2UgSW5kZXhSb3V0ZU9iamVjdCB7XG4gIGNhc2VTZW5zaXRpdmU/OiBBZ25vc3RpY0luZGV4Um91dGVPYmplY3RbXCJjYXNlU2Vuc2l0aXZlXCJdO1xuICBwYXRoPzogQWdub3N0aWNJbmRleFJvdXRlT2JqZWN0W1wicGF0aFwiXTtcbiAgaWQ/OiBBZ25vc3RpY0luZGV4Um91dGVPYmplY3RbXCJpZFwiXTtcbiAgbG9hZGVyPzogQWdub3N0aWNJbmRleFJvdXRlT2JqZWN0W1wibG9hZGVyXCJdO1xuICBhY3Rpb24/OiBBZ25vc3RpY0luZGV4Um91dGVPYmplY3RbXCJhY3Rpb25cIl07XG4gIGhhc0Vycm9yQm91bmRhcnk/OiBBZ25vc3RpY0luZGV4Um91dGVPYmplY3RbXCJoYXNFcnJvckJvdW5kYXJ5XCJdO1xuICBzaG91bGRSZXZhbGlkYXRlPzogQWdub3N0aWNJbmRleFJvdXRlT2JqZWN0W1wic2hvdWxkUmV2YWxpZGF0ZVwiXTtcbiAgaGFuZGxlPzogQWdub3N0aWNJbmRleFJvdXRlT2JqZWN0W1wiaGFuZGxlXCJdO1xuICBpbmRleDogdHJ1ZTtcbiAgY2hpbGRyZW4/OiB1bmRlZmluZWQ7XG4gIGVsZW1lbnQ/OiBSZWFjdC5SZWFjdE5vZGUgfCBudWxsO1xuICBlcnJvckVsZW1lbnQ/OiBSZWFjdC5SZWFjdE5vZGUgfCBudWxsO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE5vbkluZGV4Um91dGVPYmplY3Qge1xuICBjYXNlU2Vuc2l0aXZlPzogQWdub3N0aWNOb25JbmRleFJvdXRlT2JqZWN0W1wiY2FzZVNlbnNpdGl2ZVwiXTtcbiAgcGF0aD86IEFnbm9zdGljTm9uSW5kZXhSb3V0ZU9iamVjdFtcInBhdGhcIl07XG4gIGlkPzogQWdub3N0aWNOb25JbmRleFJvdXRlT2JqZWN0W1wiaWRcIl07XG4gIGxvYWRlcj86IEFnbm9zdGljTm9uSW5kZXhSb3V0ZU9iamVjdFtcImxvYWRlclwiXTtcbiAgYWN0aW9uPzogQWdub3N0aWNOb25JbmRleFJvdXRlT2JqZWN0W1wiYWN0aW9uXCJdO1xuICBoYXNFcnJvckJvdW5kYXJ5PzogQWdub3N0aWNOb25JbmRleFJvdXRlT2JqZWN0W1wiaGFzRXJyb3JCb3VuZGFyeVwiXTtcbiAgc2hvdWxkUmV2YWxpZGF0ZT86IEFnbm9zdGljTm9uSW5kZXhSb3V0ZU9iamVjdFtcInNob3VsZFJldmFsaWRhdGVcIl07XG4gIGhhbmRsZT86IEFnbm9zdGljTm9uSW5kZXhSb3V0ZU9iamVjdFtcImhhbmRsZVwiXTtcbiAgaW5kZXg/OiBmYWxzZTtcbiAgY2hpbGRyZW4/OiBSb3V0ZU9iamVjdFtdO1xuICBlbGVtZW50PzogUmVhY3QuUmVhY3ROb2RlIHwgbnVsbDtcbiAgZXJyb3JFbGVtZW50PzogUmVhY3QuUmVhY3ROb2RlIHwgbnVsbDtcbn1cblxuZXhwb3J0IHR5cGUgUm91dGVPYmplY3QgPSBJbmRleFJvdXRlT2JqZWN0IHwgTm9uSW5kZXhSb3V0ZU9iamVjdDtcblxuZXhwb3J0IHR5cGUgRGF0YVJvdXRlT2JqZWN0ID0gUm91dGVPYmplY3QgJiB7XG4gIGNoaWxkcmVuPzogRGF0YVJvdXRlT2JqZWN0W107XG4gIGlkOiBzdHJpbmc7XG59O1xuXG5leHBvcnQgaW50ZXJmYWNlIFJvdXRlTWF0Y2g8XG4gIFBhcmFtS2V5IGV4dGVuZHMgc3RyaW5nID0gc3RyaW5nLFxuICBSb3V0ZU9iamVjdFR5cGUgZXh0ZW5kcyBSb3V0ZU9iamVjdCA9IFJvdXRlT2JqZWN0XG4+IGV4dGVuZHMgQWdub3N0aWNSb3V0ZU1hdGNoPFBhcmFtS2V5LCBSb3V0ZU9iamVjdFR5cGU+IHt9XG5cbmV4cG9ydCBpbnRlcmZhY2UgRGF0YVJvdXRlTWF0Y2ggZXh0ZW5kcyBSb3V0ZU1hdGNoPHN0cmluZywgRGF0YVJvdXRlT2JqZWN0PiB7fVxuXG5leHBvcnQgaW50ZXJmYWNlIERhdGFSb3V0ZXJDb250ZXh0T2JqZWN0IGV4dGVuZHMgTmF2aWdhdGlvbkNvbnRleHRPYmplY3Qge1xuICByb3V0ZXI6IFJvdXRlcjtcbiAgc3RhdGljQ29udGV4dD86IFN0YXRpY0hhbmRsZXJDb250ZXh0O1xufVxuXG5leHBvcnQgY29uc3QgRGF0YVJvdXRlckNvbnRleHQgPVxuICBSZWFjdC5jcmVhdGVDb250ZXh0PERhdGFSb3V0ZXJDb250ZXh0T2JqZWN0IHwgbnVsbD4obnVsbCk7XG5pZiAoX19ERVZfXykge1xuICBEYXRhUm91dGVyQ29udGV4dC5kaXNwbGF5TmFtZSA9IFwiRGF0YVJvdXRlclwiO1xufVxuXG5leHBvcnQgY29uc3QgRGF0YVJvdXRlclN0YXRlQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8XG4gIFJvdXRlcltcInN0YXRlXCJdIHwgbnVsbFxuPihudWxsKTtcbmlmIChfX0RFVl9fKSB7XG4gIERhdGFSb3V0ZXJTdGF0ZUNvbnRleHQuZGlzcGxheU5hbWUgPSBcIkRhdGFSb3V0ZXJTdGF0ZVwiO1xufVxuXG5leHBvcnQgY29uc3QgQXdhaXRDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dDxUcmFja2VkUHJvbWlzZSB8IG51bGw+KG51bGwpO1xuaWYgKF9fREVWX18pIHtcbiAgQXdhaXRDb250ZXh0LmRpc3BsYXlOYW1lID0gXCJBd2FpdFwiO1xufVxuXG5leHBvcnQgdHlwZSBSZWxhdGl2ZVJvdXRpbmdUeXBlID0gXCJyb3V0ZVwiIHwgXCJwYXRoXCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgTmF2aWdhdGVPcHRpb25zIHtcbiAgcmVwbGFjZT86IGJvb2xlYW47XG4gIHN0YXRlPzogYW55O1xuICBwcmV2ZW50U2Nyb2xsUmVzZXQ/OiBib29sZWFuO1xuICByZWxhdGl2ZT86IFJlbGF0aXZlUm91dGluZ1R5cGU7XG59XG5cbi8qKlxuICogQSBOYXZpZ2F0b3IgaXMgYSBcImxvY2F0aW9uIGNoYW5nZXJcIjsgaXQncyBob3cgeW91IGdldCB0byBkaWZmZXJlbnQgbG9jYXRpb25zLlxuICpcbiAqIEV2ZXJ5IGhpc3RvcnkgaW5zdGFuY2UgY29uZm9ybXMgdG8gdGhlIE5hdmlnYXRvciBpbnRlcmZhY2UsIGJ1dCB0aGVcbiAqIGRpc3RpbmN0aW9uIGlzIHVzZWZ1bCBwcmltYXJpbHkgd2hlbiBpdCBjb21lcyB0byB0aGUgbG93LWxldmVsIDxSb3V0ZXI+IEFQSVxuICogd2hlcmUgYm90aCB0aGUgbG9jYXRpb24gYW5kIGEgbmF2aWdhdG9yIG11c3QgYmUgcHJvdmlkZWQgc2VwYXJhdGVseSBpbiBvcmRlclxuICogdG8gYXZvaWQgXCJ0ZWFyaW5nXCIgdGhhdCBtYXkgb2NjdXIgaW4gYSBzdXNwZW5zZS1lbmFibGVkIGFwcCBpZiB0aGUgYWN0aW9uXG4gKiBhbmQvb3IgbG9jYXRpb24gd2VyZSB0byBiZSByZWFkIGRpcmVjdGx5IGZyb20gdGhlIGhpc3RvcnkgaW5zdGFuY2UuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTmF2aWdhdG9yIHtcbiAgY3JlYXRlSHJlZjogSGlzdG9yeVtcImNyZWF0ZUhyZWZcIl07XG4gIC8vIE9wdGlvbmFsIGZvciBiYWNrd2FyZHMtY29tcGF0IHdpdGggUm91dGVyL0hpc3RvcnlSb3V0ZXIgdXNhZ2UgKGVkZ2UgY2FzZSlcbiAgZW5jb2RlTG9jYXRpb24/OiBIaXN0b3J5W1wiZW5jb2RlTG9jYXRpb25cIl07XG4gIGdvOiBIaXN0b3J5W1wiZ29cIl07XG4gIHB1c2godG86IFRvLCBzdGF0ZT86IGFueSwgb3B0cz86IE5hdmlnYXRlT3B0aW9ucyk6IHZvaWQ7XG4gIHJlcGxhY2UodG86IFRvLCBzdGF0ZT86IGFueSwgb3B0cz86IE5hdmlnYXRlT3B0aW9ucyk6IHZvaWQ7XG59XG5cbmludGVyZmFjZSBOYXZpZ2F0aW9uQ29udGV4dE9iamVjdCB7XG4gIGJhc2VuYW1lOiBzdHJpbmc7XG4gIG5hdmlnYXRvcjogTmF2aWdhdG9yO1xuICBzdGF0aWM6IGJvb2xlYW47XG59XG5cbmV4cG9ydCBjb25zdCBOYXZpZ2F0aW9uQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8TmF2aWdhdGlvbkNvbnRleHRPYmplY3Q+KFxuICBudWxsIVxuKTtcblxuaWYgKF9fREVWX18pIHtcbiAgTmF2aWdhdGlvbkNvbnRleHQuZGlzcGxheU5hbWUgPSBcIk5hdmlnYXRpb25cIjtcbn1cblxuaW50ZXJmYWNlIExvY2F0aW9uQ29udGV4dE9iamVjdCB7XG4gIGxvY2F0aW9uOiBMb2NhdGlvbjtcbiAgbmF2aWdhdGlvblR5cGU6IE5hdmlnYXRpb25UeXBlO1xufVxuXG5leHBvcnQgY29uc3QgTG9jYXRpb25Db250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dDxMb2NhdGlvbkNvbnRleHRPYmplY3Q+KFxuICBudWxsIVxuKTtcblxuaWYgKF9fREVWX18pIHtcbiAgTG9jYXRpb25Db250ZXh0LmRpc3BsYXlOYW1lID0gXCJMb2NhdGlvblwiO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFJvdXRlQ29udGV4dE9iamVjdCB7XG4gIG91dGxldDogUmVhY3QuUmVhY3RFbGVtZW50IHwgbnVsbDtcbiAgbWF0Y2hlczogUm91dGVNYXRjaFtdO1xufVxuXG5leHBvcnQgY29uc3QgUm91dGVDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dDxSb3V0ZUNvbnRleHRPYmplY3Q+KHtcbiAgb3V0bGV0OiBudWxsLFxuICBtYXRjaGVzOiBbXSxcbn0pO1xuXG5pZiAoX19ERVZfXykge1xuICBSb3V0ZUNvbnRleHQuZGlzcGxheU5hbWUgPSBcIlJvdXRlXCI7XG59XG5cbmV4cG9ydCBjb25zdCBSb3V0ZUVycm9yQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8YW55PihudWxsKTtcblxuaWYgKF9fREVWX18pIHtcbiAgUm91dGVFcnJvckNvbnRleHQuZGlzcGxheU5hbWUgPSBcIlJvdXRlRXJyb3JcIjtcbn1cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHR5cGUge1xuICBCbG9ja2VyLFxuICBCbG9ja2VyRnVuY3Rpb24sXG4gIExvY2F0aW9uLFxuICBQYXJhbVBhcnNlS2V5LFxuICBQYXJhbXMsXG4gIFBhdGgsXG4gIFBhdGhNYXRjaCxcbiAgUGF0aFBhdHRlcm4sXG4gIFJvdXRlciBhcyBSZW1peFJvdXRlcixcbiAgVG8sXG59IGZyb20gXCJAcmVtaXgtcnVuL3JvdXRlclwiO1xuaW1wb3J0IHtcbiAgQWN0aW9uIGFzIE5hdmlnYXRpb25UeXBlLFxuICBpbnZhcmlhbnQsXG4gIGlzUm91dGVFcnJvclJlc3BvbnNlLFxuICBqb2luUGF0aHMsXG4gIG1hdGNoUGF0aCxcbiAgbWF0Y2hSb3V0ZXMsXG4gIHBhcnNlUGF0aCxcbiAgcmVzb2x2ZVRvLFxuICB3YXJuaW5nLFxuICBVTlNBRkVfZ2V0UGF0aENvbnRyaWJ1dGluZ01hdGNoZXMgYXMgZ2V0UGF0aENvbnRyaWJ1dGluZ01hdGNoZXMsXG59IGZyb20gXCJAcmVtaXgtcnVuL3JvdXRlclwiO1xuXG5pbXBvcnQgdHlwZSB7XG4gIE5hdmlnYXRlT3B0aW9ucyxcbiAgUm91dGVDb250ZXh0T2JqZWN0LFxuICBSb3V0ZU1hdGNoLFxuICBSb3V0ZU9iamVjdCxcbiAgRGF0YVJvdXRlTWF0Y2gsXG4gIFJlbGF0aXZlUm91dGluZ1R5cGUsXG59IGZyb20gXCIuL2NvbnRleHRcIjtcbmltcG9ydCB7XG4gIERhdGFSb3V0ZXJDb250ZXh0LFxuICBEYXRhUm91dGVyU3RhdGVDb250ZXh0LFxuICBMb2NhdGlvbkNvbnRleHQsXG4gIE5hdmlnYXRpb25Db250ZXh0LFxuICBSb3V0ZUNvbnRleHQsXG4gIFJvdXRlRXJyb3JDb250ZXh0LFxuICBBd2FpdENvbnRleHQsXG59IGZyb20gXCIuL2NvbnRleHRcIjtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBmdWxsIGhyZWYgZm9yIHRoZSBnaXZlbiBcInRvXCIgdmFsdWUuIFRoaXMgaXMgdXNlZnVsIGZvciBidWlsZGluZ1xuICogY3VzdG9tIGxpbmtzIHRoYXQgYXJlIGFsc28gYWNjZXNzaWJsZSBhbmQgcHJlc2VydmUgcmlnaHQtY2xpY2sgYmVoYXZpb3IuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtaHJlZlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlSHJlZihcbiAgdG86IFRvLFxuICB7IHJlbGF0aXZlIH06IHsgcmVsYXRpdmU/OiBSZWxhdGl2ZVJvdXRpbmdUeXBlIH0gPSB7fVxuKTogc3RyaW5nIHtcbiAgaW52YXJpYW50KFxuICAgIHVzZUluUm91dGVyQ29udGV4dCgpLFxuICAgIC8vIFRPRE86IFRoaXMgZXJyb3IgaXMgcHJvYmFibHkgYmVjYXVzZSB0aGV5IHNvbWVob3cgaGF2ZSAyIHZlcnNpb25zIG9mIHRoZVxuICAgIC8vIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgICBgdXNlSHJlZigpIG1heSBiZSB1c2VkIG9ubHkgaW4gdGhlIGNvbnRleHQgb2YgYSA8Um91dGVyPiBjb21wb25lbnQuYFxuICApO1xuXG4gIGxldCB7IGJhc2VuYW1lLCBuYXZpZ2F0b3IgfSA9IFJlYWN0LnVzZUNvbnRleHQoTmF2aWdhdGlvbkNvbnRleHQpO1xuICBsZXQgeyBoYXNoLCBwYXRobmFtZSwgc2VhcmNoIH0gPSB1c2VSZXNvbHZlZFBhdGgodG8sIHsgcmVsYXRpdmUgfSk7XG5cbiAgbGV0IGpvaW5lZFBhdGhuYW1lID0gcGF0aG5hbWU7XG5cbiAgLy8gSWYgd2UncmUgb3BlcmF0aW5nIHdpdGhpbiBhIGJhc2VuYW1lLCBwcmVwZW5kIGl0IHRvIHRoZSBwYXRobmFtZSBwcmlvclxuICAvLyB0byBjcmVhdGluZyB0aGUgaHJlZi4gIElmIHRoaXMgaXMgYSByb290IG5hdmlnYXRpb24sIHRoZW4ganVzdCB1c2UgdGhlIHJhd1xuICAvLyBiYXNlbmFtZSB3aGljaCBhbGxvd3MgdGhlIGJhc2VuYW1lIHRvIGhhdmUgZnVsbCBjb250cm9sIG92ZXIgdGhlIHByZXNlbmNlXG4gIC8vIG9mIGEgdHJhaWxpbmcgc2xhc2ggb24gcm9vdCBsaW5rc1xuICBpZiAoYmFzZW5hbWUgIT09IFwiL1wiKSB7XG4gICAgam9pbmVkUGF0aG5hbWUgPVxuICAgICAgcGF0aG5hbWUgPT09IFwiL1wiID8gYmFzZW5hbWUgOiBqb2luUGF0aHMoW2Jhc2VuYW1lLCBwYXRobmFtZV0pO1xuICB9XG5cbiAgcmV0dXJuIG5hdmlnYXRvci5jcmVhdGVIcmVmKHsgcGF0aG5hbWU6IGpvaW5lZFBhdGhuYW1lLCBzZWFyY2gsIGhhc2ggfSk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoaXMgY29tcG9uZW50IGlzIGEgZGVzY2VuZGFudCBvZiBhIDxSb3V0ZXI+LlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLWluLXJvdXRlci1jb250ZXh0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VJblJvdXRlckNvbnRleHQoKTogYm9vbGVhbiB7XG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KExvY2F0aW9uQ29udGV4dCkgIT0gbnVsbDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBjdXJyZW50IGxvY2F0aW9uIG9iamVjdCwgd2hpY2ggcmVwcmVzZW50cyB0aGUgY3VycmVudCBVUkwgaW4gd2ViXG4gKiBicm93c2Vycy5cbiAqXG4gKiBOb3RlOiBJZiB5b3UncmUgdXNpbmcgdGhpcyBpdCBtYXkgbWVhbiB5b3UncmUgZG9pbmcgc29tZSBvZiB5b3VyIG93blxuICogXCJyb3V0aW5nXCIgaW4geW91ciBhcHAsIGFuZCB3ZSdkIGxpa2UgdG8ga25vdyB3aGF0IHlvdXIgdXNlIGNhc2UgaXMuIFdlIG1heVxuICogYmUgYWJsZSB0byBwcm92aWRlIHNvbWV0aGluZyBoaWdoZXItbGV2ZWwgdG8gYmV0dGVyIHN1aXQgeW91ciBuZWVkcy5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1sb2NhdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTG9jYXRpb24oKTogTG9jYXRpb24ge1xuICBpbnZhcmlhbnQoXG4gICAgdXNlSW5Sb3V0ZXJDb250ZXh0KCksXG4gICAgLy8gVE9ETzogVGhpcyBlcnJvciBpcyBwcm9iYWJseSBiZWNhdXNlIHRoZXkgc29tZWhvdyBoYXZlIDIgdmVyc2lvbnMgb2YgdGhlXG4gICAgLy8gcm91dGVyIGxvYWRlZC4gV2UgY2FuIGhlbHAgdGhlbSB1bmRlcnN0YW5kIGhvdyB0byBhdm9pZCB0aGF0LlxuICAgIGB1c2VMb2NhdGlvbigpIG1heSBiZSB1c2VkIG9ubHkgaW4gdGhlIGNvbnRleHQgb2YgYSA8Um91dGVyPiBjb21wb25lbnQuYFxuICApO1xuXG4gIHJldHVybiBSZWFjdC51c2VDb250ZXh0KExvY2F0aW9uQ29udGV4dCkubG9jYXRpb247XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgY3VycmVudCBuYXZpZ2F0aW9uIGFjdGlvbiB3aGljaCBkZXNjcmliZXMgaG93IHRoZSByb3V0ZXIgY2FtZSB0b1xuICogdGhlIGN1cnJlbnQgbG9jYXRpb24sIGVpdGhlciBieSBhIHBvcCwgcHVzaCwgb3IgcmVwbGFjZSBvbiB0aGUgaGlzdG9yeSBzdGFjay5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1uYXZpZ2F0aW9uLXR5cGVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZU5hdmlnYXRpb25UeXBlKCk6IE5hdmlnYXRpb25UeXBlIHtcbiAgcmV0dXJuIFJlYWN0LnVzZUNvbnRleHQoTG9jYXRpb25Db250ZXh0KS5uYXZpZ2F0aW9uVHlwZTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgUGF0aE1hdGNoIG9iamVjdCBpZiB0aGUgZ2l2ZW4gcGF0dGVybiBtYXRjaGVzIHRoZSBjdXJyZW50IFVSTC5cbiAqIFRoaXMgaXMgdXNlZnVsIGZvciBjb21wb25lbnRzIHRoYXQgbmVlZCB0byBrbm93IFwiYWN0aXZlXCIgc3RhdGUsIGUuZy5cbiAqIDxOYXZMaW5rPi5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1tYXRjaFxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlTWF0Y2g8XG4gIFBhcmFtS2V5IGV4dGVuZHMgUGFyYW1QYXJzZUtleTxQYXRoPixcbiAgUGF0aCBleHRlbmRzIHN0cmluZ1xuPihwYXR0ZXJuOiBQYXRoUGF0dGVybjxQYXRoPiB8IFBhdGgpOiBQYXRoTWF0Y2g8UGFyYW1LZXk+IHwgbnVsbCB7XG4gIGludmFyaWFudChcbiAgICB1c2VJblJvdXRlckNvbnRleHQoKSxcbiAgICAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgICAvLyByb3V0ZXIgbG9hZGVkLiBXZSBjYW4gaGVscCB0aGVtIHVuZGVyc3RhbmQgaG93IHRvIGF2b2lkIHRoYXQuXG4gICAgYHVzZU1hdGNoKCkgbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5gXG4gICk7XG5cbiAgbGV0IHsgcGF0aG5hbWUgfSA9IHVzZUxvY2F0aW9uKCk7XG4gIHJldHVybiBSZWFjdC51c2VNZW1vKFxuICAgICgpID0+IG1hdGNoUGF0aDxQYXJhbUtleSwgUGF0aD4ocGF0dGVybiwgcGF0aG5hbWUpLFxuICAgIFtwYXRobmFtZSwgcGF0dGVybl1cbiAgKTtcbn1cblxuLyoqXG4gKiBUaGUgaW50ZXJmYWNlIGZvciB0aGUgbmF2aWdhdGUoKSBmdW5jdGlvbiByZXR1cm5lZCBmcm9tIHVzZU5hdmlnYXRlKCkuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTmF2aWdhdGVGdW5jdGlvbiB7XG4gICh0bzogVG8sIG9wdGlvbnM/OiBOYXZpZ2F0ZU9wdGlvbnMpOiB2b2lkO1xuICAoZGVsdGE6IG51bWJlcik6IHZvaWQ7XG59XG5cbi8qKlxuICogUmV0dXJucyBhbiBpbXBlcmF0aXZlIG1ldGhvZCBmb3IgY2hhbmdpbmcgdGhlIGxvY2F0aW9uLiBVc2VkIGJ5IDxMaW5rPnMsIGJ1dFxuICogbWF5IGFsc28gYmUgdXNlZCBieSBvdGhlciBlbGVtZW50cyB0byBjaGFuZ2UgdGhlIGxvY2F0aW9uLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLW5hdmlnYXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VOYXZpZ2F0ZSgpOiBOYXZpZ2F0ZUZ1bmN0aW9uIHtcbiAgaW52YXJpYW50KFxuICAgIHVzZUluUm91dGVyQ29udGV4dCgpLFxuICAgIC8vIFRPRE86IFRoaXMgZXJyb3IgaXMgcHJvYmFibHkgYmVjYXVzZSB0aGV5IHNvbWVob3cgaGF2ZSAyIHZlcnNpb25zIG9mIHRoZVxuICAgIC8vIHJvdXRlciBsb2FkZWQuIFdlIGNhbiBoZWxwIHRoZW0gdW5kZXJzdGFuZCBob3cgdG8gYXZvaWQgdGhhdC5cbiAgICBgdXNlTmF2aWdhdGUoKSBtYXkgYmUgdXNlZCBvbmx5IGluIHRoZSBjb250ZXh0IG9mIGEgPFJvdXRlcj4gY29tcG9uZW50LmBcbiAgKTtcblxuICBsZXQgeyBiYXNlbmFtZSwgbmF2aWdhdG9yIH0gPSBSZWFjdC51c2VDb250ZXh0KE5hdmlnYXRpb25Db250ZXh0KTtcbiAgbGV0IHsgbWF0Y2hlcyB9ID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICBsZXQgeyBwYXRobmFtZTogbG9jYXRpb25QYXRobmFtZSB9ID0gdXNlTG9jYXRpb24oKTtcblxuICBsZXQgcm91dGVQYXRobmFtZXNKc29uID0gSlNPTi5zdHJpbmdpZnkoXG4gICAgZ2V0UGF0aENvbnRyaWJ1dGluZ01hdGNoZXMobWF0Y2hlcykubWFwKChtYXRjaCkgPT4gbWF0Y2gucGF0aG5hbWVCYXNlKVxuICApO1xuXG4gIGxldCBhY3RpdmVSZWYgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGFjdGl2ZVJlZi5jdXJyZW50ID0gdHJ1ZTtcbiAgfSk7XG5cbiAgbGV0IG5hdmlnYXRlOiBOYXZpZ2F0ZUZ1bmN0aW9uID0gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgKHRvOiBUbyB8IG51bWJlciwgb3B0aW9uczogTmF2aWdhdGVPcHRpb25zID0ge30pID0+IHtcbiAgICAgIHdhcm5pbmcoXG4gICAgICAgIGFjdGl2ZVJlZi5jdXJyZW50LFxuICAgICAgICBgWW91IHNob3VsZCBjYWxsIG5hdmlnYXRlKCkgaW4gYSBSZWFjdC51c2VFZmZlY3QoKSwgbm90IHdoZW4gYCArXG4gICAgICAgICAgYHlvdXIgY29tcG9uZW50IGlzIGZpcnN0IHJlbmRlcmVkLmBcbiAgICAgICk7XG5cbiAgICAgIGlmICghYWN0aXZlUmVmLmN1cnJlbnQpIHJldHVybjtcblxuICAgICAgaWYgKHR5cGVvZiB0byA9PT0gXCJudW1iZXJcIikge1xuICAgICAgICBuYXZpZ2F0b3IuZ28odG8pO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGxldCBwYXRoID0gcmVzb2x2ZVRvKFxuICAgICAgICB0byxcbiAgICAgICAgSlNPTi5wYXJzZShyb3V0ZVBhdGhuYW1lc0pzb24pLFxuICAgICAgICBsb2NhdGlvblBhdGhuYW1lLFxuICAgICAgICBvcHRpb25zLnJlbGF0aXZlID09PSBcInBhdGhcIlxuICAgICAgKTtcblxuICAgICAgLy8gSWYgd2UncmUgb3BlcmF0aW5nIHdpdGhpbiBhIGJhc2VuYW1lLCBwcmVwZW5kIGl0IHRvIHRoZSBwYXRobmFtZSBwcmlvclxuICAgICAgLy8gdG8gaGFuZGluZyBvZmYgdG8gaGlzdG9yeS4gIElmIHRoaXMgaXMgYSByb290IG5hdmlnYXRpb24sIHRoZW4gd2VcbiAgICAgIC8vIG5hdmlnYXRlIHRvIHRoZSByYXcgYmFzZW5hbWUgd2hpY2ggYWxsb3dzIHRoZSBiYXNlbmFtZSB0byBoYXZlIGZ1bGxcbiAgICAgIC8vIGNvbnRyb2wgb3ZlciB0aGUgcHJlc2VuY2Ugb2YgYSB0cmFpbGluZyBzbGFzaCBvbiByb290IGxpbmtzXG4gICAgICBpZiAoYmFzZW5hbWUgIT09IFwiL1wiKSB7XG4gICAgICAgIHBhdGgucGF0aG5hbWUgPVxuICAgICAgICAgIHBhdGgucGF0aG5hbWUgPT09IFwiL1wiXG4gICAgICAgICAgICA/IGJhc2VuYW1lXG4gICAgICAgICAgICA6IGpvaW5QYXRocyhbYmFzZW5hbWUsIHBhdGgucGF0aG5hbWVdKTtcbiAgICAgIH1cblxuICAgICAgKCEhb3B0aW9ucy5yZXBsYWNlID8gbmF2aWdhdG9yLnJlcGxhY2UgOiBuYXZpZ2F0b3IucHVzaCkoXG4gICAgICAgIHBhdGgsXG4gICAgICAgIG9wdGlvbnMuc3RhdGUsXG4gICAgICAgIG9wdGlvbnNcbiAgICAgICk7XG4gICAgfSxcbiAgICBbYmFzZW5hbWUsIG5hdmlnYXRvciwgcm91dGVQYXRobmFtZXNKc29uLCBsb2NhdGlvblBhdGhuYW1lXVxuICApO1xuXG4gIHJldHVybiBuYXZpZ2F0ZTtcbn1cblxuY29uc3QgT3V0bGV0Q29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8dW5rbm93bj4obnVsbCk7XG5cbi8qKlxuICogUmV0dXJucyB0aGUgY29udGV4dCAoaWYgcHJvdmlkZWQpIGZvciB0aGUgY2hpbGQgcm91dGUgYXQgdGhpcyBsZXZlbCBvZiB0aGUgcm91dGVcbiAqIGhpZXJhcmNoeS5cbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vaG9va3MvdXNlLW91dGxldC1jb250ZXh0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VPdXRsZXRDb250ZXh0PENvbnRleHQgPSB1bmtub3duPigpOiBDb250ZXh0IHtcbiAgcmV0dXJuIFJlYWN0LnVzZUNvbnRleHQoT3V0bGV0Q29udGV4dCkgYXMgQ29udGV4dDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSBlbGVtZW50IGZvciB0aGUgY2hpbGQgcm91dGUgYXQgdGhpcyBsZXZlbCBvZiB0aGUgcm91dGVcbiAqIGhpZXJhcmNoeS4gVXNlZCBpbnRlcm5hbGx5IGJ5IDxPdXRsZXQ+IHRvIHJlbmRlciBjaGlsZCByb3V0ZXMuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2Utb3V0bGV0XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VPdXRsZXQoY29udGV4dD86IHVua25vd24pOiBSZWFjdC5SZWFjdEVsZW1lbnQgfCBudWxsIHtcbiAgbGV0IG91dGxldCA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KS5vdXRsZXQ7XG4gIGlmIChvdXRsZXQpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPE91dGxldENvbnRleHQuUHJvdmlkZXIgdmFsdWU9e2NvbnRleHR9PntvdXRsZXR9PC9PdXRsZXRDb250ZXh0LlByb3ZpZGVyPlxuICAgICk7XG4gIH1cbiAgcmV0dXJuIG91dGxldDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGFuIG9iamVjdCBvZiBrZXkvdmFsdWUgcGFpcnMgb2YgdGhlIGR5bmFtaWMgcGFyYW1zIGZyb20gdGhlIGN1cnJlbnRcbiAqIFVSTCB0aGF0IHdlcmUgbWF0Y2hlZCBieSB0aGUgcm91dGUgcGF0aC5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2hvb2tzL3VzZS1wYXJhbXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZVBhcmFtczxcbiAgUGFyYW1zT3JLZXkgZXh0ZW5kcyBzdHJpbmcgfCBSZWNvcmQ8c3RyaW5nLCBzdHJpbmcgfCB1bmRlZmluZWQ+ID0gc3RyaW5nXG4+KCk6IFJlYWRvbmx5PFxuICBbUGFyYW1zT3JLZXldIGV4dGVuZHMgW3N0cmluZ10gPyBQYXJhbXM8UGFyYW1zT3JLZXk+IDogUGFydGlhbDxQYXJhbXNPcktleT5cbj4ge1xuICBsZXQgeyBtYXRjaGVzIH0gPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gIGxldCByb3V0ZU1hdGNoID0gbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdO1xuICByZXR1cm4gcm91dGVNYXRjaCA/IChyb3V0ZU1hdGNoLnBhcmFtcyBhcyBhbnkpIDoge307XG59XG5cbi8qKlxuICogUmVzb2x2ZXMgdGhlIHBhdGhuYW1lIG9mIHRoZSBnaXZlbiBgdG9gIHZhbHVlIGFnYWluc3QgdGhlIGN1cnJlbnQgbG9jYXRpb24uXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2UtcmVzb2x2ZWQtcGF0aFxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlUmVzb2x2ZWRQYXRoKFxuICB0bzogVG8sXG4gIHsgcmVsYXRpdmUgfTogeyByZWxhdGl2ZT86IFJlbGF0aXZlUm91dGluZ1R5cGUgfSA9IHt9XG4pOiBQYXRoIHtcbiAgbGV0IHsgbWF0Y2hlcyB9ID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICBsZXQgeyBwYXRobmFtZTogbG9jYXRpb25QYXRobmFtZSB9ID0gdXNlTG9jYXRpb24oKTtcblxuICBsZXQgcm91dGVQYXRobmFtZXNKc29uID0gSlNPTi5zdHJpbmdpZnkoXG4gICAgZ2V0UGF0aENvbnRyaWJ1dGluZ01hdGNoZXMobWF0Y2hlcykubWFwKChtYXRjaCkgPT4gbWF0Y2gucGF0aG5hbWVCYXNlKVxuICApO1xuXG4gIHJldHVybiBSZWFjdC51c2VNZW1vKFxuICAgICgpID0+XG4gICAgICByZXNvbHZlVG8oXG4gICAgICAgIHRvLFxuICAgICAgICBKU09OLnBhcnNlKHJvdXRlUGF0aG5hbWVzSnNvbiksXG4gICAgICAgIGxvY2F0aW9uUGF0aG5hbWUsXG4gICAgICAgIHJlbGF0aXZlID09PSBcInBhdGhcIlxuICAgICAgKSxcbiAgICBbdG8sIHJvdXRlUGF0aG5hbWVzSnNvbiwgbG9jYXRpb25QYXRobmFtZSwgcmVsYXRpdmVdXG4gICk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgZWxlbWVudCBvZiB0aGUgcm91dGUgdGhhdCBtYXRjaGVkIHRoZSBjdXJyZW50IGxvY2F0aW9uLCBwcmVwYXJlZFxuICogd2l0aCB0aGUgY29ycmVjdCBjb250ZXh0IHRvIHJlbmRlciB0aGUgcmVtYWluZGVyIG9mIHRoZSByb3V0ZSB0cmVlLiBSb3V0ZVxuICogZWxlbWVudHMgaW4gdGhlIHRyZWUgbXVzdCByZW5kZXIgYW4gPE91dGxldD4gdG8gcmVuZGVyIHRoZWlyIGNoaWxkIHJvdXRlJ3NcbiAqIGVsZW1lbnQuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9ob29rcy91c2Utcm91dGVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VSb3V0ZXMoXG4gIHJvdXRlczogUm91dGVPYmplY3RbXSxcbiAgbG9jYXRpb25Bcmc/OiBQYXJ0aWFsPExvY2F0aW9uPiB8IHN0cmluZ1xuKTogUmVhY3QuUmVhY3RFbGVtZW50IHwgbnVsbCB7XG4gIGludmFyaWFudChcbiAgICB1c2VJblJvdXRlckNvbnRleHQoKSxcbiAgICAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZiB0aGVcbiAgICAvLyByb3V0ZXIgbG9hZGVkLiBXZSBjYW4gaGVscCB0aGVtIHVuZGVyc3RhbmQgaG93IHRvIGF2b2lkIHRoYXQuXG4gICAgYHVzZVJvdXRlcygpIG1heSBiZSB1c2VkIG9ubHkgaW4gdGhlIGNvbnRleHQgb2YgYSA8Um91dGVyPiBjb21wb25lbnQuYFxuICApO1xuXG4gIGxldCB7IG5hdmlnYXRvciB9ID0gUmVhY3QudXNlQ29udGV4dChOYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCBkYXRhUm91dGVyU3RhdGVDb250ZXh0ID0gUmVhY3QudXNlQ29udGV4dChEYXRhUm91dGVyU3RhdGVDb250ZXh0KTtcbiAgbGV0IHsgbWF0Y2hlczogcGFyZW50TWF0Y2hlcyB9ID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICBsZXQgcm91dGVNYXRjaCA9IHBhcmVudE1hdGNoZXNbcGFyZW50TWF0Y2hlcy5sZW5ndGggLSAxXTtcbiAgbGV0IHBhcmVudFBhcmFtcyA9IHJvdXRlTWF0Y2ggPyByb3V0ZU1hdGNoLnBhcmFtcyA6IHt9O1xuICBsZXQgcGFyZW50UGF0aG5hbWUgPSByb3V0ZU1hdGNoID8gcm91dGVNYXRjaC5wYXRobmFtZSA6IFwiL1wiO1xuICBsZXQgcGFyZW50UGF0aG5hbWVCYXNlID0gcm91dGVNYXRjaCA/IHJvdXRlTWF0Y2gucGF0aG5hbWVCYXNlIDogXCIvXCI7XG4gIGxldCBwYXJlbnRSb3V0ZSA9IHJvdXRlTWF0Y2ggJiYgcm91dGVNYXRjaC5yb3V0ZTtcblxuICBpZiAoX19ERVZfXykge1xuICAgIC8vIFlvdSB3b24ndCBnZXQgYSB3YXJuaW5nIGFib3V0IDIgZGlmZmVyZW50IDxSb3V0ZXM+IHVuZGVyIGEgPFJvdXRlPlxuICAgIC8vIHdpdGhvdXQgYSB0cmFpbGluZyAqLCBidXQgdGhpcyBpcyBhIGJlc3QtZWZmb3J0IHdhcm5pbmcgYW55d2F5IHNpbmNlIHdlXG4gICAgLy8gY2Fubm90IGV2ZW4gZ2l2ZSB0aGUgd2FybmluZyB1bmxlc3MgdGhleSBsYW5kIGF0IHRoZSBwYXJlbnQgcm91dGUuXG4gICAgLy9cbiAgICAvLyBFeGFtcGxlOlxuICAgIC8vXG4gICAgLy8gPFJvdXRlcz5cbiAgICAvLyAgIHsvKiBUaGlzIHJvdXRlIHBhdGggTVVTVCBlbmQgd2l0aCAvKiBiZWNhdXNlIG90aGVyd2lzZVxuICAgIC8vICAgICAgIGl0IHdpbGwgbmV2ZXIgbWF0Y2ggL2Jsb2cvcG9zdC8xMjMgKi99XG4gICAgLy8gICA8Um91dGUgcGF0aD1cImJsb2dcIiBlbGVtZW50PXs8QmxvZyAvPn0gLz5cbiAgICAvLyAgIDxSb3V0ZSBwYXRoPVwiYmxvZy9mZWVkXCIgZWxlbWVudD17PEJsb2dGZWVkIC8+fSAvPlxuICAgIC8vIDwvUm91dGVzPlxuICAgIC8vXG4gICAgLy8gZnVuY3Rpb24gQmxvZygpIHtcbiAgICAvLyAgIHJldHVybiAoXG4gICAgLy8gICAgIDxSb3V0ZXM+XG4gICAgLy8gICAgICAgPFJvdXRlIHBhdGg9XCJwb3N0LzppZFwiIGVsZW1lbnQ9ezxQb3N0IC8+fSAvPlxuICAgIC8vICAgICA8L1JvdXRlcz5cbiAgICAvLyAgICk7XG4gICAgLy8gfVxuICAgIGxldCBwYXJlbnRQYXRoID0gKHBhcmVudFJvdXRlICYmIHBhcmVudFJvdXRlLnBhdGgpIHx8IFwiXCI7XG4gICAgd2FybmluZ09uY2UoXG4gICAgICBwYXJlbnRQYXRobmFtZSxcbiAgICAgICFwYXJlbnRSb3V0ZSB8fCBwYXJlbnRQYXRoLmVuZHNXaXRoKFwiKlwiKSxcbiAgICAgIGBZb3UgcmVuZGVyZWQgZGVzY2VuZGFudCA8Um91dGVzPiAob3IgY2FsbGVkIFxcYHVzZVJvdXRlcygpXFxgKSBhdCBgICtcbiAgICAgICAgYFwiJHtwYXJlbnRQYXRobmFtZX1cIiAodW5kZXIgPFJvdXRlIHBhdGg9XCIke3BhcmVudFBhdGh9XCI+KSBidXQgdGhlIGAgK1xuICAgICAgICBgcGFyZW50IHJvdXRlIHBhdGggaGFzIG5vIHRyYWlsaW5nIFwiKlwiLiBUaGlzIG1lYW5zIGlmIHlvdSBuYXZpZ2F0ZSBgICtcbiAgICAgICAgYGRlZXBlciwgdGhlIHBhcmVudCB3b24ndCBtYXRjaCBhbnltb3JlIGFuZCB0aGVyZWZvcmUgdGhlIGNoaWxkIGAgK1xuICAgICAgICBgcm91dGVzIHdpbGwgbmV2ZXIgcmVuZGVyLlxcblxcbmAgK1xuICAgICAgICBgUGxlYXNlIGNoYW5nZSB0aGUgcGFyZW50IDxSb3V0ZSBwYXRoPVwiJHtwYXJlbnRQYXRofVwiPiB0byA8Um91dGUgYCArXG4gICAgICAgIGBwYXRoPVwiJHtwYXJlbnRQYXRoID09PSBcIi9cIiA/IFwiKlwiIDogYCR7cGFyZW50UGF0aH0vKmB9XCI+LmBcbiAgICApO1xuICB9XG5cbiAgbGV0IGxvY2F0aW9uRnJvbUNvbnRleHQgPSB1c2VMb2NhdGlvbigpO1xuXG4gIGxldCBsb2NhdGlvbjtcbiAgaWYgKGxvY2F0aW9uQXJnKSB7XG4gICAgbGV0IHBhcnNlZExvY2F0aW9uQXJnID1cbiAgICAgIHR5cGVvZiBsb2NhdGlvbkFyZyA9PT0gXCJzdHJpbmdcIiA/IHBhcnNlUGF0aChsb2NhdGlvbkFyZykgOiBsb2NhdGlvbkFyZztcblxuICAgIGludmFyaWFudChcbiAgICAgIHBhcmVudFBhdGhuYW1lQmFzZSA9PT0gXCIvXCIgfHxcbiAgICAgICAgcGFyc2VkTG9jYXRpb25BcmcucGF0aG5hbWU/LnN0YXJ0c1dpdGgocGFyZW50UGF0aG5hbWVCYXNlKSxcbiAgICAgIGBXaGVuIG92ZXJyaWRpbmcgdGhlIGxvY2F0aW9uIHVzaW5nIFxcYDxSb3V0ZXMgbG9jYXRpb24+XFxgIG9yIFxcYHVzZVJvdXRlcyhyb3V0ZXMsIGxvY2F0aW9uKVxcYCwgYCArXG4gICAgICAgIGB0aGUgbG9jYXRpb24gcGF0aG5hbWUgbXVzdCBiZWdpbiB3aXRoIHRoZSBwb3J0aW9uIG9mIHRoZSBVUkwgcGF0aG5hbWUgdGhhdCB3YXMgYCArXG4gICAgICAgIGBtYXRjaGVkIGJ5IGFsbCBwYXJlbnQgcm91dGVzLiBUaGUgY3VycmVudCBwYXRobmFtZSBiYXNlIGlzIFwiJHtwYXJlbnRQYXRobmFtZUJhc2V9XCIgYCArXG4gICAgICAgIGBidXQgcGF0aG5hbWUgXCIke3BhcnNlZExvY2F0aW9uQXJnLnBhdGhuYW1lfVwiIHdhcyBnaXZlbiBpbiB0aGUgXFxgbG9jYXRpb25cXGAgcHJvcC5gXG4gICAgKTtcblxuICAgIGxvY2F0aW9uID0gcGFyc2VkTG9jYXRpb25Bcmc7XG4gIH0gZWxzZSB7XG4gICAgbG9jYXRpb24gPSBsb2NhdGlvbkZyb21Db250ZXh0O1xuICB9XG5cbiAgbGV0IHBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWUgfHwgXCIvXCI7XG4gIGxldCByZW1haW5pbmdQYXRobmFtZSA9XG4gICAgcGFyZW50UGF0aG5hbWVCYXNlID09PSBcIi9cIlxuICAgICAgPyBwYXRobmFtZVxuICAgICAgOiBwYXRobmFtZS5zbGljZShwYXJlbnRQYXRobmFtZUJhc2UubGVuZ3RoKSB8fCBcIi9cIjtcblxuICBsZXQgbWF0Y2hlcyA9IG1hdGNoUm91dGVzKHJvdXRlcywgeyBwYXRobmFtZTogcmVtYWluaW5nUGF0aG5hbWUgfSk7XG5cbiAgaWYgKF9fREVWX18pIHtcbiAgICB3YXJuaW5nKFxuICAgICAgcGFyZW50Um91dGUgfHwgbWF0Y2hlcyAhPSBudWxsLFxuICAgICAgYE5vIHJvdXRlcyBtYXRjaGVkIGxvY2F0aW9uIFwiJHtsb2NhdGlvbi5wYXRobmFtZX0ke2xvY2F0aW9uLnNlYXJjaH0ke2xvY2F0aW9uLmhhc2h9XCIgYFxuICAgICk7XG5cbiAgICB3YXJuaW5nKFxuICAgICAgbWF0Y2hlcyA9PSBudWxsIHx8XG4gICAgICAgIG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXS5yb3V0ZS5lbGVtZW50ICE9PSB1bmRlZmluZWQsXG4gICAgICBgTWF0Y2hlZCBsZWFmIHJvdXRlIGF0IGxvY2F0aW9uIFwiJHtsb2NhdGlvbi5wYXRobmFtZX0ke2xvY2F0aW9uLnNlYXJjaH0ke2xvY2F0aW9uLmhhc2h9XCIgZG9lcyBub3QgaGF2ZSBhbiBlbGVtZW50LiBgICtcbiAgICAgICAgYFRoaXMgbWVhbnMgaXQgd2lsbCByZW5kZXIgYW4gPE91dGxldCAvPiB3aXRoIGEgbnVsbCB2YWx1ZSBieSBkZWZhdWx0IHJlc3VsdGluZyBpbiBhbiBcImVtcHR5XCIgcGFnZS5gXG4gICAgKTtcbiAgfVxuXG4gIGxldCByZW5kZXJlZE1hdGNoZXMgPSBfcmVuZGVyTWF0Y2hlcyhcbiAgICBtYXRjaGVzICYmXG4gICAgICBtYXRjaGVzLm1hcCgobWF0Y2gpID0+XG4gICAgICAgIE9iamVjdC5hc3NpZ24oe30sIG1hdGNoLCB7XG4gICAgICAgICAgcGFyYW1zOiBPYmplY3QuYXNzaWduKHt9LCBwYXJlbnRQYXJhbXMsIG1hdGNoLnBhcmFtcyksXG4gICAgICAgICAgcGF0aG5hbWU6IGpvaW5QYXRocyhbXG4gICAgICAgICAgICBwYXJlbnRQYXRobmFtZUJhc2UsXG4gICAgICAgICAgICAvLyBSZS1lbmNvZGUgcGF0aG5hbWVzIHRoYXQgd2VyZSBkZWNvZGVkIGluc2lkZSBtYXRjaFJvdXRlc1xuICAgICAgICAgICAgbmF2aWdhdG9yLmVuY29kZUxvY2F0aW9uXG4gICAgICAgICAgICAgID8gbmF2aWdhdG9yLmVuY29kZUxvY2F0aW9uKG1hdGNoLnBhdGhuYW1lKS5wYXRobmFtZVxuICAgICAgICAgICAgICA6IG1hdGNoLnBhdGhuYW1lLFxuICAgICAgICAgIF0pLFxuICAgICAgICAgIHBhdGhuYW1lQmFzZTpcbiAgICAgICAgICAgIG1hdGNoLnBhdGhuYW1lQmFzZSA9PT0gXCIvXCJcbiAgICAgICAgICAgICAgPyBwYXJlbnRQYXRobmFtZUJhc2VcbiAgICAgICAgICAgICAgOiBqb2luUGF0aHMoW1xuICAgICAgICAgICAgICAgICAgcGFyZW50UGF0aG5hbWVCYXNlLFxuICAgICAgICAgICAgICAgICAgLy8gUmUtZW5jb2RlIHBhdGhuYW1lcyB0aGF0IHdlcmUgZGVjb2RlZCBpbnNpZGUgbWF0Y2hSb3V0ZXNcbiAgICAgICAgICAgICAgICAgIG5hdmlnYXRvci5lbmNvZGVMb2NhdGlvblxuICAgICAgICAgICAgICAgICAgICA/IG5hdmlnYXRvci5lbmNvZGVMb2NhdGlvbihtYXRjaC5wYXRobmFtZUJhc2UpLnBhdGhuYW1lXG4gICAgICAgICAgICAgICAgICAgIDogbWF0Y2gucGF0aG5hbWVCYXNlLFxuICAgICAgICAgICAgICAgIF0pLFxuICAgICAgICB9KVxuICAgICAgKSxcbiAgICBwYXJlbnRNYXRjaGVzLFxuICAgIGRhdGFSb3V0ZXJTdGF0ZUNvbnRleHQgfHwgdW5kZWZpbmVkXG4gICk7XG5cbiAgLy8gV2hlbiBhIHVzZXIgcGFzc2VzIGluIGEgYGxvY2F0aW9uQXJnYCwgdGhlIGFzc29jaWF0ZWQgcm91dGVzIG5lZWQgdG9cbiAgLy8gYmUgd3JhcHBlZCBpbiBhIG5ldyBgTG9jYXRpb25Db250ZXh0LlByb3ZpZGVyYCBpbiBvcmRlciBmb3IgYHVzZUxvY2F0aW9uYFxuICAvLyB0byB1c2UgdGhlIHNjb3BlZCBsb2NhdGlvbiBpbnN0ZWFkIG9mIHRoZSBnbG9iYWwgbG9jYXRpb24uXG4gIGlmIChsb2NhdGlvbkFyZyAmJiByZW5kZXJlZE1hdGNoZXMpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPExvY2F0aW9uQ29udGV4dC5Qcm92aWRlclxuICAgICAgICB2YWx1ZT17e1xuICAgICAgICAgIGxvY2F0aW9uOiB7XG4gICAgICAgICAgICBwYXRobmFtZTogXCIvXCIsXG4gICAgICAgICAgICBzZWFyY2g6IFwiXCIsXG4gICAgICAgICAgICBoYXNoOiBcIlwiLFxuICAgICAgICAgICAgc3RhdGU6IG51bGwsXG4gICAgICAgICAgICBrZXk6IFwiZGVmYXVsdFwiLFxuICAgICAgICAgICAgLi4ubG9jYXRpb24sXG4gICAgICAgICAgfSxcbiAgICAgICAgICBuYXZpZ2F0aW9uVHlwZTogTmF2aWdhdGlvblR5cGUuUG9wLFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICB7cmVuZGVyZWRNYXRjaGVzfVxuICAgICAgPC9Mb2NhdGlvbkNvbnRleHQuUHJvdmlkZXI+XG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiByZW5kZXJlZE1hdGNoZXM7XG59XG5cbmZ1bmN0aW9uIERlZmF1bHRFcnJvckVsZW1lbnQoKSB7XG4gIGxldCBlcnJvciA9IHVzZVJvdXRlRXJyb3IoKTtcbiAgbGV0IG1lc3NhZ2UgPSBpc1JvdXRlRXJyb3JSZXNwb25zZShlcnJvcilcbiAgICA/IGAke2Vycm9yLnN0YXR1c30gJHtlcnJvci5zdGF0dXNUZXh0fWBcbiAgICA6IGVycm9yIGluc3RhbmNlb2YgRXJyb3JcbiAgICA/IGVycm9yLm1lc3NhZ2VcbiAgICA6IEpTT04uc3RyaW5naWZ5KGVycm9yKTtcbiAgbGV0IHN0YWNrID0gZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLnN0YWNrIDogbnVsbDtcbiAgbGV0IGxpZ2h0Z3JleSA9IFwicmdiYSgyMDAsMjAwLDIwMCwgMC41KVwiO1xuICBsZXQgcHJlU3R5bGVzID0geyBwYWRkaW5nOiBcIjAuNXJlbVwiLCBiYWNrZ3JvdW5kQ29sb3I6IGxpZ2h0Z3JleSB9O1xuICBsZXQgY29kZVN0eWxlcyA9IHsgcGFkZGluZzogXCIycHggNHB4XCIsIGJhY2tncm91bmRDb2xvcjogbGlnaHRncmV5IH07XG5cbiAgbGV0IGRldkluZm8gPSBudWxsO1xuICBpZiAoX19ERVZfXykge1xuICAgIGRldkluZm8gPSAoXG4gICAgICA8PlxuICAgICAgICA8cD7wn5K/IEhleSBkZXZlbG9wZXIg8J+RizwvcD5cbiAgICAgICAgPHA+XG4gICAgICAgICAgWW91IGNhbiBwcm92aWRlIGEgd2F5IGJldHRlciBVWCB0aGFuIHRoaXMgd2hlbiB5b3VyIGFwcCB0aHJvd3MgZXJyb3JzXG4gICAgICAgICAgYnkgcHJvdmlkaW5nIHlvdXIgb3duJm5ic3A7XG4gICAgICAgICAgPGNvZGUgc3R5bGU9e2NvZGVTdHlsZXN9PmVycm9yRWxlbWVudDwvY29kZT4gcHJvcHMgb24mbmJzcDtcbiAgICAgICAgICA8Y29kZSBzdHlsZT17Y29kZVN0eWxlc30+Jmx0O1JvdXRlJmd0OzwvY29kZT5cbiAgICAgICAgPC9wPlxuICAgICAgPC8+XG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIDxoMj5VbmV4cGVjdGVkIEFwcGxpY2F0aW9uIEVycm9yITwvaDI+XG4gICAgICA8aDMgc3R5bGU9e3sgZm9udFN0eWxlOiBcIml0YWxpY1wiIH19PnttZXNzYWdlfTwvaDM+XG4gICAgICB7c3RhY2sgPyA8cHJlIHN0eWxlPXtwcmVTdHlsZXN9PntzdGFja308L3ByZT4gOiBudWxsfVxuICAgICAge2RldkluZm99XG4gICAgPC8+XG4gICk7XG59XG5cbnR5cGUgUmVuZGVyRXJyb3JCb3VuZGFyeVByb3BzID0gUmVhY3QuUHJvcHNXaXRoQ2hpbGRyZW48e1xuICBsb2NhdGlvbjogTG9jYXRpb247XG4gIGVycm9yOiBhbnk7XG4gIGNvbXBvbmVudDogUmVhY3QuUmVhY3ROb2RlO1xuICByb3V0ZUNvbnRleHQ6IFJvdXRlQ29udGV4dE9iamVjdDtcbn0+O1xuXG50eXBlIFJlbmRlckVycm9yQm91bmRhcnlTdGF0ZSA9IHtcbiAgbG9jYXRpb246IExvY2F0aW9uO1xuICBlcnJvcjogYW55O1xufTtcblxuZXhwb3J0IGNsYXNzIFJlbmRlckVycm9yQm91bmRhcnkgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8XG4gIFJlbmRlckVycm9yQm91bmRhcnlQcm9wcyxcbiAgUmVuZGVyRXJyb3JCb3VuZGFyeVN0YXRlXG4+IHtcbiAgY29uc3RydWN0b3IocHJvcHM6IFJlbmRlckVycm9yQm91bmRhcnlQcm9wcykge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgbG9jYXRpb246IHByb3BzLmxvY2F0aW9uLFxuICAgICAgZXJyb3I6IHByb3BzLmVycm9yLFxuICAgIH07XG4gIH1cblxuICBzdGF0aWMgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yKGVycm9yOiBhbnkpIHtcbiAgICByZXR1cm4geyBlcnJvcjogZXJyb3IgfTtcbiAgfVxuXG4gIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMoXG4gICAgcHJvcHM6IFJlbmRlckVycm9yQm91bmRhcnlQcm9wcyxcbiAgICBzdGF0ZTogUmVuZGVyRXJyb3JCb3VuZGFyeVN0YXRlXG4gICkge1xuICAgIC8vIFdoZW4gd2UgZ2V0IGludG8gYW4gZXJyb3Igc3RhdGUsIHRoZSB1c2VyIHdpbGwgbGlrZWx5IGNsaWNrIFwiYmFja1wiIHRvIHRoZVxuICAgIC8vIHByZXZpb3VzIHBhZ2UgdGhhdCBkaWRuJ3QgaGF2ZSBhbiBlcnJvci4gQmVjYXVzZSB0aGlzIHdyYXBzIHRoZSBlbnRpcmVcbiAgICAvLyBhcHBsaWNhdGlvbiwgdGhhdCB3aWxsIGhhdmUgbm8gZWZmZWN0LS10aGUgZXJyb3IgcGFnZSBjb250aW51ZXMgdG8gZGlzcGxheS5cbiAgICAvLyBUaGlzIGdpdmVzIHVzIGEgbWVjaGFuaXNtIHRvIHJlY292ZXIgZnJvbSB0aGUgZXJyb3Igd2hlbiB0aGUgbG9jYXRpb24gY2hhbmdlcy5cbiAgICAvL1xuICAgIC8vIFdoZXRoZXIgd2UncmUgaW4gYW4gZXJyb3Igc3RhdGUgb3Igbm90LCB3ZSB1cGRhdGUgdGhlIGxvY2F0aW9uIGluIHN0YXRlXG4gICAgLy8gc28gdGhhdCB3aGVuIHdlIGFyZSBpbiBhbiBlcnJvciBzdGF0ZSwgaXQgZ2V0cyByZXNldCB3aGVuIGEgbmV3IGxvY2F0aW9uXG4gICAgLy8gY29tZXMgaW4gYW5kIHRoZSB1c2VyIHJlY292ZXJzIGZyb20gdGhlIGVycm9yLlxuICAgIGlmIChzdGF0ZS5sb2NhdGlvbiAhPT0gcHJvcHMubG9jYXRpb24pIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGVycm9yOiBwcm9wcy5lcnJvcixcbiAgICAgICAgbG9jYXRpb246IHByb3BzLmxvY2F0aW9uLFxuICAgICAgfTtcbiAgICB9XG5cbiAgICAvLyBJZiB3ZSdyZSBub3QgY2hhbmdpbmcgbG9jYXRpb25zLCBwcmVzZXJ2ZSB0aGUgbG9jYXRpb24gYnV0IHN0aWxsIHN1cmZhY2VcbiAgICAvLyBhbnkgbmV3IGVycm9ycyB0aGF0IG1heSBjb21lIHRocm91Z2guIFdlIHJldGFpbiB0aGUgZXhpc3RpbmcgZXJyb3IsIHdlIGRvXG4gICAgLy8gdGhpcyBiZWNhdXNlIHRoZSBlcnJvciBwcm92aWRlZCBmcm9tIHRoZSBhcHAgc3RhdGUgbWF5IGJlIGNsZWFyZWQgd2l0aG91dFxuICAgIC8vIHRoZSBsb2NhdGlvbiBjaGFuZ2luZy5cbiAgICByZXR1cm4ge1xuICAgICAgZXJyb3I6IHByb3BzLmVycm9yIHx8IHN0YXRlLmVycm9yLFxuICAgICAgbG9jYXRpb246IHN0YXRlLmxvY2F0aW9uLFxuICAgIH07XG4gIH1cblxuICBjb21wb25lbnREaWRDYXRjaChlcnJvcjogYW55LCBlcnJvckluZm86IGFueSkge1xuICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICBcIlJlYWN0IFJvdXRlciBjYXVnaHQgdGhlIGZvbGxvd2luZyBlcnJvciBkdXJpbmcgcmVuZGVyXCIsXG4gICAgICBlcnJvcixcbiAgICAgIGVycm9ySW5mb1xuICAgICk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIHRoaXMuc3RhdGUuZXJyb3IgPyAoXG4gICAgICA8Um91dGVDb250ZXh0LlByb3ZpZGVyIHZhbHVlPXt0aGlzLnByb3BzLnJvdXRlQ29udGV4dH0+XG4gICAgICAgIDxSb3V0ZUVycm9yQ29udGV4dC5Qcm92aWRlclxuICAgICAgICAgIHZhbHVlPXt0aGlzLnN0YXRlLmVycm9yfVxuICAgICAgICAgIGNoaWxkcmVuPXt0aGlzLnByb3BzLmNvbXBvbmVudH1cbiAgICAgICAgLz5cbiAgICAgIDwvUm91dGVDb250ZXh0LlByb3ZpZGVyPlxuICAgICkgOiAoXG4gICAgICB0aGlzLnByb3BzLmNoaWxkcmVuXG4gICAgKTtcbiAgfVxufVxuXG5pbnRlcmZhY2UgUmVuZGVyZWRSb3V0ZVByb3BzIHtcbiAgcm91dGVDb250ZXh0OiBSb3V0ZUNvbnRleHRPYmplY3Q7XG4gIG1hdGNoOiBSb3V0ZU1hdGNoPHN0cmluZywgUm91dGVPYmplY3Q+O1xuICBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlIHwgbnVsbDtcbn1cblxuZnVuY3Rpb24gUmVuZGVyZWRSb3V0ZSh7IHJvdXRlQ29udGV4dCwgbWF0Y2gsIGNoaWxkcmVuIH06IFJlbmRlcmVkUm91dGVQcm9wcykge1xuICBsZXQgZGF0YVJvdXRlckNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KERhdGFSb3V0ZXJDb250ZXh0KTtcblxuICAvLyBUcmFjayBob3cgZGVlcCB3ZSBnb3QgaW4gb3VyIHJlbmRlciBwYXNzIHRvIGVtdWxhdGUgU1NSIGNvbXBvbmVudERpZENhdGNoXG4gIC8vIGluIGEgRGF0YVN0YXRpY1JvdXRlclxuICBpZiAoXG4gICAgZGF0YVJvdXRlckNvbnRleHQgJiZcbiAgICBkYXRhUm91dGVyQ29udGV4dC5zdGF0aWMgJiZcbiAgICBkYXRhUm91dGVyQ29udGV4dC5zdGF0aWNDb250ZXh0ICYmXG4gICAgbWF0Y2gucm91dGUuZXJyb3JFbGVtZW50XG4gICkge1xuICAgIGRhdGFSb3V0ZXJDb250ZXh0LnN0YXRpY0NvbnRleHQuX2RlZXBlc3RSZW5kZXJlZEJvdW5kYXJ5SWQgPSBtYXRjaC5yb3V0ZS5pZDtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPFJvdXRlQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17cm91dGVDb250ZXh0fT5cbiAgICAgIHtjaGlsZHJlbn1cbiAgICA8L1JvdXRlQ29udGV4dC5Qcm92aWRlcj5cbiAgKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9yZW5kZXJNYXRjaGVzKFxuICBtYXRjaGVzOiBSb3V0ZU1hdGNoW10gfCBudWxsLFxuICBwYXJlbnRNYXRjaGVzOiBSb3V0ZU1hdGNoW10gPSBbXSxcbiAgZGF0YVJvdXRlclN0YXRlPzogUmVtaXhSb3V0ZXJbXCJzdGF0ZVwiXVxuKTogUmVhY3QuUmVhY3RFbGVtZW50IHwgbnVsbCB7XG4gIGlmIChtYXRjaGVzID09IG51bGwpIHtcbiAgICBpZiAoZGF0YVJvdXRlclN0YXRlPy5lcnJvcnMpIHtcbiAgICAgIC8vIERvbid0IGJhaWwgaWYgd2UgaGF2ZSBkYXRhIHJvdXRlciBlcnJvcnMgc28gd2UgY2FuIHJlbmRlciB0aGVtIGluIHRoZVxuICAgICAgLy8gYm91bmRhcnkuICBVc2UgdGhlIHByZS1tYXRjaGVkIChvciBzaGltbWVkKSBtYXRjaGVzXG4gICAgICBtYXRjaGVzID0gZGF0YVJvdXRlclN0YXRlLm1hdGNoZXMgYXMgRGF0YVJvdXRlTWF0Y2hbXTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICB9XG5cbiAgbGV0IHJlbmRlcmVkTWF0Y2hlcyA9IG1hdGNoZXM7XG5cbiAgLy8gSWYgd2UgaGF2ZSBkYXRhIGVycm9ycywgdHJpbSBtYXRjaGVzIHRvIHRoZSBoaWdoZXN0IGVycm9yIGJvdW5kYXJ5XG4gIGxldCBlcnJvcnMgPSBkYXRhUm91dGVyU3RhdGU/LmVycm9ycztcbiAgaWYgKGVycm9ycyAhPSBudWxsKSB7XG4gICAgbGV0IGVycm9ySW5kZXggPSByZW5kZXJlZE1hdGNoZXMuZmluZEluZGV4KFxuICAgICAgKG0pID0+IG0ucm91dGUuaWQgJiYgZXJyb3JzPy5bbS5yb3V0ZS5pZF1cbiAgICApO1xuICAgIGludmFyaWFudChcbiAgICAgIGVycm9ySW5kZXggPj0gMCxcbiAgICAgIGBDb3VsZCBub3QgZmluZCBhIG1hdGNoaW5nIHJvdXRlIGZvciB0aGUgY3VycmVudCBlcnJvcnM6ICR7ZXJyb3JzfWBcbiAgICApO1xuICAgIHJlbmRlcmVkTWF0Y2hlcyA9IHJlbmRlcmVkTWF0Y2hlcy5zbGljZShcbiAgICAgIDAsXG4gICAgICBNYXRoLm1pbihyZW5kZXJlZE1hdGNoZXMubGVuZ3RoLCBlcnJvckluZGV4ICsgMSlcbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIHJlbmRlcmVkTWF0Y2hlcy5yZWR1Y2VSaWdodCgob3V0bGV0LCBtYXRjaCwgaW5kZXgpID0+IHtcbiAgICBsZXQgZXJyb3IgPSBtYXRjaC5yb3V0ZS5pZCA/IGVycm9ycz8uW21hdGNoLnJvdXRlLmlkXSA6IG51bGw7XG4gICAgLy8gT25seSBkYXRhIHJvdXRlcnMgaGFuZGxlIGVycm9yc1xuICAgIGxldCBlcnJvckVsZW1lbnQgPSBkYXRhUm91dGVyU3RhdGVcbiAgICAgID8gbWF0Y2gucm91dGUuZXJyb3JFbGVtZW50IHx8IDxEZWZhdWx0RXJyb3JFbGVtZW50IC8+XG4gICAgICA6IG51bGw7XG4gICAgbGV0IG1hdGNoZXMgPSBwYXJlbnRNYXRjaGVzLmNvbmNhdChyZW5kZXJlZE1hdGNoZXMuc2xpY2UoMCwgaW5kZXggKyAxKSk7XG4gICAgbGV0IGdldENoaWxkcmVuID0gKCkgPT4gKFxuICAgICAgPFJlbmRlcmVkUm91dGUgbWF0Y2g9e21hdGNofSByb3V0ZUNvbnRleHQ9e3sgb3V0bGV0LCBtYXRjaGVzIH19PlxuICAgICAgICB7ZXJyb3JcbiAgICAgICAgICA/IGVycm9yRWxlbWVudFxuICAgICAgICAgIDogbWF0Y2gucm91dGUuZWxlbWVudCAhPT0gdW5kZWZpbmVkXG4gICAgICAgICAgPyBtYXRjaC5yb3V0ZS5lbGVtZW50XG4gICAgICAgICAgOiBvdXRsZXR9XG4gICAgICA8L1JlbmRlcmVkUm91dGU+XG4gICAgKTtcbiAgICAvLyBPbmx5IHdyYXAgaW4gYW4gZXJyb3IgYm91bmRhcnkgd2l0aGluIGRhdGEgcm91dGVyIHVzYWdlcyB3aGVuIHdlIGhhdmUgYW5cbiAgICAvLyBlcnJvckVsZW1lbnQgb24gdGhpcyByb3V0ZS4gIE90aGVyd2lzZSBsZXQgaXQgYnViYmxlIHVwIHRvIGFuIGFuY2VzdG9yXG4gICAgLy8gZXJyb3JFbGVtZW50XG4gICAgcmV0dXJuIGRhdGFSb3V0ZXJTdGF0ZSAmJiAobWF0Y2gucm91dGUuZXJyb3JFbGVtZW50IHx8IGluZGV4ID09PSAwKSA/IChcbiAgICAgIDxSZW5kZXJFcnJvckJvdW5kYXJ5XG4gICAgICAgIGxvY2F0aW9uPXtkYXRhUm91dGVyU3RhdGUubG9jYXRpb259XG4gICAgICAgIGNvbXBvbmVudD17ZXJyb3JFbGVtZW50fVxuICAgICAgICBlcnJvcj17ZXJyb3J9XG4gICAgICAgIGNoaWxkcmVuPXtnZXRDaGlsZHJlbigpfVxuICAgICAgICByb3V0ZUNvbnRleHQ9e3sgb3V0bGV0OiBudWxsLCBtYXRjaGVzIH19XG4gICAgICAvPlxuICAgICkgOiAoXG4gICAgICBnZXRDaGlsZHJlbigpXG4gICAgKTtcbiAgfSwgbnVsbCBhcyBSZWFjdC5SZWFjdEVsZW1lbnQgfCBudWxsKTtcbn1cblxuZW51bSBEYXRhUm91dGVySG9vayB7XG4gIFVzZUJsb2NrZXIgPSBcInVzZUJsb2NrZXJcIixcbiAgVXNlUmV2YWxpZGF0b3IgPSBcInVzZVJldmFsaWRhdG9yXCIsXG59XG5cbmVudW0gRGF0YVJvdXRlclN0YXRlSG9vayB7XG4gIFVzZUxvYWRlckRhdGEgPSBcInVzZUxvYWRlckRhdGFcIixcbiAgVXNlQWN0aW9uRGF0YSA9IFwidXNlQWN0aW9uRGF0YVwiLFxuICBVc2VSb3V0ZUVycm9yID0gXCJ1c2VSb3V0ZUVycm9yXCIsXG4gIFVzZU5hdmlnYXRpb24gPSBcInVzZU5hdmlnYXRpb25cIixcbiAgVXNlUm91dGVMb2FkZXJEYXRhID0gXCJ1c2VSb3V0ZUxvYWRlckRhdGFcIixcbiAgVXNlTWF0Y2hlcyA9IFwidXNlTWF0Y2hlc1wiLFxuICBVc2VSZXZhbGlkYXRvciA9IFwidXNlUmV2YWxpZGF0b3JcIixcbn1cblxuZnVuY3Rpb24gZ2V0RGF0YVJvdXRlckNvbnNvbGVFcnJvcihcbiAgaG9va05hbWU6IERhdGFSb3V0ZXJIb29rIHwgRGF0YVJvdXRlclN0YXRlSG9va1xuKSB7XG4gIHJldHVybiBgJHtob29rTmFtZX0gbXVzdCBiZSB1c2VkIHdpdGhpbiBhIGRhdGEgcm91dGVyLiAgU2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3JvdXRlcnMvcGlja2luZy1hLXJvdXRlci5gO1xufVxuXG5mdW5jdGlvbiB1c2VEYXRhUm91dGVyQ29udGV4dChob29rTmFtZTogRGF0YVJvdXRlckhvb2spIHtcbiAgbGV0IGN0eCA9IFJlYWN0LnVzZUNvbnRleHQoRGF0YVJvdXRlckNvbnRleHQpO1xuICBpbnZhcmlhbnQoY3R4LCBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSk7XG4gIHJldHVybiBjdHg7XG59XG5cbmZ1bmN0aW9uIHVzZURhdGFSb3V0ZXJTdGF0ZShob29rTmFtZTogRGF0YVJvdXRlclN0YXRlSG9vaykge1xuICBsZXQgc3RhdGUgPSBSZWFjdC51c2VDb250ZXh0KERhdGFSb3V0ZXJTdGF0ZUNvbnRleHQpO1xuICBpbnZhcmlhbnQoc3RhdGUsIGdldERhdGFSb3V0ZXJDb25zb2xlRXJyb3IoaG9va05hbWUpKTtcbiAgcmV0dXJuIHN0YXRlO1xufVxuXG5mdW5jdGlvbiB1c2VSb3V0ZUNvbnRleHQoaG9va05hbWU6IERhdGFSb3V0ZXJTdGF0ZUhvb2spIHtcbiAgbGV0IHJvdXRlID0gUmVhY3QudXNlQ29udGV4dChSb3V0ZUNvbnRleHQpO1xuICBpbnZhcmlhbnQocm91dGUsIGdldERhdGFSb3V0ZXJDb25zb2xlRXJyb3IoaG9va05hbWUpKTtcbiAgcmV0dXJuIHJvdXRlO1xufVxuXG5mdW5jdGlvbiB1c2VDdXJyZW50Um91dGVJZChob29rTmFtZTogRGF0YVJvdXRlclN0YXRlSG9vaykge1xuICBsZXQgcm91dGUgPSB1c2VSb3V0ZUNvbnRleHQoaG9va05hbWUpO1xuICBsZXQgdGhpc1JvdXRlID0gcm91dGUubWF0Y2hlc1tyb3V0ZS5tYXRjaGVzLmxlbmd0aCAtIDFdO1xuICBpbnZhcmlhbnQoXG4gICAgdGhpc1JvdXRlLnJvdXRlLmlkLFxuICAgIGAke2hvb2tOYW1lfSBjYW4gb25seSBiZSB1c2VkIG9uIHJvdXRlcyB0aGF0IGNvbnRhaW4gYSB1bmlxdWUgXCJpZFwiYFxuICApO1xuICByZXR1cm4gdGhpc1JvdXRlLnJvdXRlLmlkO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGN1cnJlbnQgbmF2aWdhdGlvbiwgZGVmYXVsdGluZyB0byBhbiBcImlkbGVcIiBuYXZpZ2F0aW9uIHdoZW5cbiAqIG5vIG5hdmlnYXRpb24gaXMgaW4gcHJvZ3Jlc3NcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZU5hdmlnYXRpb24oKSB7XG4gIGxldCBzdGF0ZSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZU5hdmlnYXRpb24pO1xuICByZXR1cm4gc3RhdGUubmF2aWdhdGlvbjtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgcmV2YWxpZGF0ZSBmdW5jdGlvbiBmb3IgbWFudWFsbHkgdHJpZ2dlcmluZyByZXZhbGlkYXRpb24sIGFzIHdlbGxcbiAqIGFzIHRoZSBjdXJyZW50IHN0YXRlIG9mIGFueSBtYW51YWwgcmV2YWxpZGF0aW9uc1xuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlUmV2YWxpZGF0b3IoKSB7XG4gIGxldCBkYXRhUm91dGVyQ29udGV4dCA9IHVzZURhdGFSb3V0ZXJDb250ZXh0KERhdGFSb3V0ZXJIb29rLlVzZVJldmFsaWRhdG9yKTtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlUmV2YWxpZGF0b3IpO1xuICByZXR1cm4ge1xuICAgIHJldmFsaWRhdGU6IGRhdGFSb3V0ZXJDb250ZXh0LnJvdXRlci5yZXZhbGlkYXRlLFxuICAgIHN0YXRlOiBzdGF0ZS5yZXZhbGlkYXRpb24sXG4gIH07XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgYWN0aXZlIHJvdXRlIG1hdGNoZXMsIHVzZWZ1bCBmb3IgYWNjZXNzaW5nIGxvYWRlckRhdGEgZm9yXG4gKiBwYXJlbnQvY2hpbGQgcm91dGVzIG9yIHRoZSByb3V0ZSBcImhhbmRsZVwiIHByb3BlcnR5XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VNYXRjaGVzKCkge1xuICBsZXQgeyBtYXRjaGVzLCBsb2FkZXJEYXRhIH0gPSB1c2VEYXRhUm91dGVyU3RhdGUoXG4gICAgRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VNYXRjaGVzXG4gICk7XG4gIHJldHVybiBSZWFjdC51c2VNZW1vKFxuICAgICgpID0+XG4gICAgICBtYXRjaGVzLm1hcCgobWF0Y2gpID0+IHtcbiAgICAgICAgbGV0IHsgcGF0aG5hbWUsIHBhcmFtcyB9ID0gbWF0Y2g7XG4gICAgICAgIC8vIE5vdGU6IFRoaXMgc3RydWN0dXJlIG1hdGNoZXMgdGhhdCBjcmVhdGVkIGJ5IGNyZWF0ZVVzZU1hdGNoZXNNYXRjaFxuICAgICAgICAvLyBpbiB0aGUgQHJlbWl4LXJ1bi9yb3V0ZXIgLCBzbyBpZiB5b3UgY2hhbmdlIHRoaXMgcGxlYXNlIGFsc28gY2hhbmdlXG4gICAgICAgIC8vIHRoYXQgOikgIEV2ZW50dWFsbHkgd2UnbGwgRFJZIHRoaXMgdXBcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBpZDogbWF0Y2gucm91dGUuaWQsXG4gICAgICAgICAgcGF0aG5hbWUsXG4gICAgICAgICAgcGFyYW1zLFxuICAgICAgICAgIGRhdGE6IGxvYWRlckRhdGFbbWF0Y2gucm91dGUuaWRdIGFzIHVua25vd24sXG4gICAgICAgICAgaGFuZGxlOiBtYXRjaC5yb3V0ZS5oYW5kbGUgYXMgdW5rbm93bixcbiAgICAgICAgfTtcbiAgICAgIH0pLFxuICAgIFttYXRjaGVzLCBsb2FkZXJEYXRhXVxuICApO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGxvYWRlciBkYXRhIGZvciB0aGUgbmVhcmVzdCBhbmNlc3RvciBSb3V0ZSBsb2FkZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUxvYWRlckRhdGEoKTogdW5rbm93biB7XG4gIGxldCBzdGF0ZSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZUxvYWRlckRhdGEpO1xuICBsZXQgcm91dGVJZCA9IHVzZUN1cnJlbnRSb3V0ZUlkKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlTG9hZGVyRGF0YSk7XG5cbiAgaWYgKHN0YXRlLmVycm9ycyAmJiBzdGF0ZS5lcnJvcnNbcm91dGVJZF0gIT0gbnVsbCkge1xuICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICBgWW91IGNhbm5vdCBcXGB1c2VMb2FkZXJEYXRhXFxgIGluIGFuIGVycm9yRWxlbWVudCAocm91dGVJZDogJHtyb3V0ZUlkfSlgXG4gICAgKTtcbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG4gIHJldHVybiBzdGF0ZS5sb2FkZXJEYXRhW3JvdXRlSWRdO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGxvYWRlckRhdGEgZm9yIHRoZSBnaXZlbiByb3V0ZUlkXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VSb3V0ZUxvYWRlckRhdGEocm91dGVJZDogc3RyaW5nKTogdW5rbm93biB7XG4gIGxldCBzdGF0ZSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZVJvdXRlTG9hZGVyRGF0YSk7XG4gIHJldHVybiBzdGF0ZS5sb2FkZXJEYXRhW3JvdXRlSWRdO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGFjdGlvbiBkYXRhIGZvciB0aGUgbmVhcmVzdCBhbmNlc3RvciBSb3V0ZSBhY3Rpb25cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUFjdGlvbkRhdGEoKTogdW5rbm93biB7XG4gIGxldCBzdGF0ZSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShEYXRhUm91dGVyU3RhdGVIb29rLlVzZUFjdGlvbkRhdGEpO1xuXG4gIGxldCByb3V0ZSA9IFJlYWN0LnVzZUNvbnRleHQoUm91dGVDb250ZXh0KTtcbiAgaW52YXJpYW50KHJvdXRlLCBgdXNlQWN0aW9uRGF0YSBtdXN0IGJlIHVzZWQgaW5zaWRlIGEgUm91dGVDb250ZXh0YCk7XG5cbiAgcmV0dXJuIE9iamVjdC52YWx1ZXMoc3RhdGU/LmFjdGlvbkRhdGEgfHwge30pWzBdO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIG5lYXJlc3QgYW5jZXN0b3IgUm91dGUgZXJyb3IsIHdoaWNoIGNvdWxkIGJlIGEgbG9hZGVyL2FjdGlvblxuICogZXJyb3Igb3IgYSByZW5kZXIgZXJyb3IuICBUaGlzIGlzIGludGVuZGVkIHRvIGJlIGNhbGxlZCBmcm9tIHlvdXJcbiAqIGVycm9yRWxlbWVudCB0byBkaXNwbGF5IGEgcHJvcGVyIGVycm9yIG1lc3NhZ2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VSb3V0ZUVycm9yKCk6IHVua25vd24ge1xuICBsZXQgZXJyb3IgPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlRXJyb3JDb250ZXh0KTtcbiAgbGV0IHN0YXRlID0gdXNlRGF0YVJvdXRlclN0YXRlKERhdGFSb3V0ZXJTdGF0ZUhvb2suVXNlUm91dGVFcnJvcik7XG4gIGxldCByb3V0ZUlkID0gdXNlQ3VycmVudFJvdXRlSWQoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VSb3V0ZUVycm9yKTtcblxuICAvLyBJZiB0aGlzIHdhcyBhIHJlbmRlciBlcnJvciwgd2UgcHV0IGl0IGluIGEgUm91dGVFcnJvciBjb250ZXh0IGluc2lkZVxuICAvLyBvZiBSZW5kZXJFcnJvckJvdW5kYXJ5XG4gIGlmIChlcnJvcikge1xuICAgIHJldHVybiBlcnJvcjtcbiAgfVxuXG4gIC8vIE90aGVyd2lzZSBsb29rIGZvciBlcnJvcnMgZnJvbSBvdXIgZGF0YSByb3V0ZXIgc3RhdGVcbiAgcmV0dXJuIHN0YXRlLmVycm9ycz8uW3JvdXRlSWRdO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGhhcHB5LXBhdGggZGF0YSBmcm9tIHRoZSBuZWFyZXN0IGFuY2VzdG9yIDxBd2FpdCAvPiB2YWx1ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlQXN5bmNWYWx1ZSgpOiB1bmtub3duIHtcbiAgbGV0IHZhbHVlID0gUmVhY3QudXNlQ29udGV4dChBd2FpdENvbnRleHQpO1xuICByZXR1cm4gdmFsdWU/Ll9kYXRhO1xufVxuXG4vKipcbiAqIFJldHVybnMgdGhlIGVycm9yIGZyb20gdGhlIG5lYXJlc3QgYW5jZXN0b3IgPEF3YWl0IC8+IHZhbHVlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VBc3luY0Vycm9yKCk6IHVua25vd24ge1xuICBsZXQgdmFsdWUgPSBSZWFjdC51c2VDb250ZXh0KEF3YWl0Q29udGV4dCk7XG4gIHJldHVybiB2YWx1ZT8uX2Vycm9yO1xufVxuXG5sZXQgYmxvY2tlcklkID0gMDtcblxuLyoqXG4gKiBBbGxvdyB0aGUgYXBwbGljYXRpb24gdG8gYmxvY2sgbmF2aWdhdGlvbnMgd2l0aGluIHRoZSBTUEEgYW5kIHByZXNlbnQgdGhlXG4gKiB1c2VyIGEgY29uZmlybWF0aW9uIGRpYWxvZyB0byBjb25maXJtIHRoZSBuYXZpZ2F0aW9uLiAgTW9zdGx5IHVzZWQgdG8gYXZvaWRcbiAqIHVzaW5nIGhhbGYtZmlsbGVkIGZvcm0gZGF0YS4gIFRoaXMgZG9lcyBub3QgaGFuZGxlIGhhcmQtcmVsb2FkcyBvclxuICogY3Jvc3Mtb3JpZ2luIG5hdmlnYXRpb25zLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdXNlQmxvY2tlcihzaG91bGRCbG9jazogYm9vbGVhbiB8IEJsb2NrZXJGdW5jdGlvbik6IEJsb2NrZXIge1xuICBsZXQgeyByb3V0ZXIgfSA9IHVzZURhdGFSb3V0ZXJDb250ZXh0KERhdGFSb3V0ZXJIb29rLlVzZUJsb2NrZXIpO1xuICBsZXQgW2Jsb2NrZXJLZXldID0gUmVhY3QudXNlU3RhdGUoKCkgPT4gU3RyaW5nKCsrYmxvY2tlcklkKSk7XG5cbiAgbGV0IGJsb2NrZXJGdW5jdGlvbiA9IFJlYWN0LnVzZUNhbGxiYWNrPEJsb2NrZXJGdW5jdGlvbj4oXG4gICAgKGFyZ3MpID0+IHtcbiAgICAgIHJldHVybiB0eXBlb2Ygc2hvdWxkQmxvY2sgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICA/ICEhc2hvdWxkQmxvY2soYXJncylcbiAgICAgICAgOiAhIXNob3VsZEJsb2NrO1xuICAgIH0sXG4gICAgW3Nob3VsZEJsb2NrXVxuICApO1xuXG4gIGxldCBibG9ja2VyID0gcm91dGVyLmdldEJsb2NrZXIoYmxvY2tlcktleSwgYmxvY2tlckZ1bmN0aW9uKTtcblxuICAvLyBDbGVhbnVwIG9uIHVubW91bnRcbiAgUmVhY3QudXNlRWZmZWN0KFxuICAgICgpID0+ICgpID0+IHJvdXRlci5kZWxldGVCbG9ja2VyKGJsb2NrZXJLZXkpLFxuICAgIFtyb3V0ZXIsIGJsb2NrZXJLZXldXG4gICk7XG5cbiAgcmV0dXJuIGJsb2NrZXI7XG59XG5cbmNvbnN0IGFscmVhZHlXYXJuZWQ6IFJlY29yZDxzdHJpbmcsIGJvb2xlYW4+ID0ge307XG5cbmZ1bmN0aW9uIHdhcm5pbmdPbmNlKGtleTogc3RyaW5nLCBjb25kOiBib29sZWFuLCBtZXNzYWdlOiBzdHJpbmcpIHtcbiAgaWYgKCFjb25kICYmICFhbHJlYWR5V2FybmVkW2tleV0pIHtcbiAgICBhbHJlYWR5V2FybmVkW2tleV0gPSB0cnVlO1xuICAgIHdhcm5pbmcoZmFsc2UsIG1lc3NhZ2UpO1xuICB9XG59XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB0eXBlIHtcbiAgVHJhY2tlZFByb21pc2UsXG4gIEluaXRpYWxFbnRyeSxcbiAgTG9jYXRpb24sXG4gIE1lbW9yeUhpc3RvcnksXG4gIFJvdXRlciBhcyBSZW1peFJvdXRlcixcbiAgUm91dGVyU3RhdGUsXG4gIFRvLFxufSBmcm9tIFwiQHJlbWl4LXJ1bi9yb3V0ZXJcIjtcbmltcG9ydCB7XG4gIEFjdGlvbiBhcyBOYXZpZ2F0aW9uVHlwZSxcbiAgQWJvcnRlZERlZmVycmVkRXJyb3IsXG4gIGNyZWF0ZU1lbW9yeUhpc3RvcnksXG4gIGludmFyaWFudCxcbiAgcGFyc2VQYXRoLFxuICBzdHJpcEJhc2VuYW1lLFxuICB3YXJuaW5nLFxufSBmcm9tIFwiQHJlbWl4LXJ1bi9yb3V0ZXJcIjtcbmltcG9ydCB7IHVzZVN5bmNFeHRlcm5hbFN0b3JlIGFzIHVzZVN5bmNFeHRlcm5hbFN0b3JlU2hpbSB9IGZyb20gXCIuL3VzZS1zeW5jLWV4dGVybmFsLXN0b3JlLXNoaW1cIjtcblxuaW1wb3J0IHR5cGUge1xuICBEYXRhUm91dGVPYmplY3QsXG4gIEluZGV4Um91dGVPYmplY3QsXG4gIFJvdXRlTWF0Y2gsXG4gIFJvdXRlT2JqZWN0LFxuICBOYXZpZ2F0b3IsXG4gIE5vbkluZGV4Um91dGVPYmplY3QsXG4gIFJlbGF0aXZlUm91dGluZ1R5cGUsXG59IGZyb20gXCIuL2NvbnRleHRcIjtcbmltcG9ydCB7XG4gIExvY2F0aW9uQ29udGV4dCxcbiAgTmF2aWdhdGlvbkNvbnRleHQsXG4gIERhdGFSb3V0ZXJDb250ZXh0LFxuICBEYXRhUm91dGVyU3RhdGVDb250ZXh0LFxuICBBd2FpdENvbnRleHQsXG59IGZyb20gXCIuL2NvbnRleHRcIjtcbmltcG9ydCB7XG4gIHVzZUFzeW5jVmFsdWUsXG4gIHVzZUluUm91dGVyQ29udGV4dCxcbiAgdXNlTmF2aWdhdGUsXG4gIHVzZU91dGxldCxcbiAgdXNlUm91dGVzLFxuICBfcmVuZGVyTWF0Y2hlcyxcbn0gZnJvbSBcIi4vaG9va3NcIjtcblxuZXhwb3J0IGludGVyZmFjZSBSb3V0ZXJQcm92aWRlclByb3BzIHtcbiAgZmFsbGJhY2tFbGVtZW50PzogUmVhY3QuUmVhY3ROb2RlO1xuICByb3V0ZXI6IFJlbWl4Um91dGVyO1xufVxuXG4vKipcbiAqIEdpdmVuIGEgUmVtaXggUm91dGVyIGluc3RhbmNlLCByZW5kZXIgdGhlIGFwcHJvcHJpYXRlIFVJXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBSb3V0ZXJQcm92aWRlcih7XG4gIGZhbGxiYWNrRWxlbWVudCxcbiAgcm91dGVyLFxufTogUm91dGVyUHJvdmlkZXJQcm9wcyk6IFJlYWN0LlJlYWN0RWxlbWVudCB7XG4gIC8vIFN5bmMgcm91dGVyIHN0YXRlIHRvIG91ciBjb21wb25lbnQgc3RhdGUgdG8gZm9yY2UgcmUtcmVuZGVyc1xuICBsZXQgc3RhdGU6IFJvdXRlclN0YXRlID0gdXNlU3luY0V4dGVybmFsU3RvcmVTaGltKFxuICAgIHJvdXRlci5zdWJzY3JpYmUsXG4gICAgKCkgPT4gcm91dGVyLnN0YXRlLFxuICAgIC8vIFdlIGhhdmUgdG8gcHJvdmlkZSB0aGlzIHNvIFJlYWN0QDE4IGRvZXNuJ3QgY29tcGxhaW4gZHVyaW5nIGh5ZHJhdGlvbixcbiAgICAvLyBidXQgd2UgcGFzcyBvdXIgc2VyaWFsaXplZCBoeWRyYXRpb24gZGF0YSBpbnRvIHRoZSByb3V0ZXIgc28gc3RhdGUgaGVyZVxuICAgIC8vIGlzIGFscmVhZHkgc3luY2VkIHdpdGggd2hhdCB0aGUgc2VydmVyIHNhd1xuICAgICgpID0+IHJvdXRlci5zdGF0ZVxuICApO1xuXG4gIGxldCBuYXZpZ2F0b3IgPSBSZWFjdC51c2VNZW1vKCgpOiBOYXZpZ2F0b3IgPT4ge1xuICAgIHJldHVybiB7XG4gICAgICBjcmVhdGVIcmVmOiByb3V0ZXIuY3JlYXRlSHJlZixcbiAgICAgIGVuY29kZUxvY2F0aW9uOiByb3V0ZXIuZW5jb2RlTG9jYXRpb24sXG4gICAgICBnbzogKG4pID0+IHJvdXRlci5uYXZpZ2F0ZShuKSxcbiAgICAgIHB1c2g6ICh0bywgc3RhdGUsIG9wdHMpID0+XG4gICAgICAgIHJvdXRlci5uYXZpZ2F0ZSh0bywge1xuICAgICAgICAgIHN0YXRlLFxuICAgICAgICAgIHByZXZlbnRTY3JvbGxSZXNldDogb3B0cz8ucHJldmVudFNjcm9sbFJlc2V0LFxuICAgICAgICB9KSxcbiAgICAgIHJlcGxhY2U6ICh0bywgc3RhdGUsIG9wdHMpID0+XG4gICAgICAgIHJvdXRlci5uYXZpZ2F0ZSh0bywge1xuICAgICAgICAgIHJlcGxhY2U6IHRydWUsXG4gICAgICAgICAgc3RhdGUsXG4gICAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0OiBvcHRzPy5wcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgICAgIH0pLFxuICAgIH07XG4gIH0sIFtyb3V0ZXJdKTtcblxuICBsZXQgYmFzZW5hbWUgPSByb3V0ZXIuYmFzZW5hbWUgfHwgXCIvXCI7XG5cbiAgLy8gVGhlIGZyYWdtZW50IGFuZCB7bnVsbH0gaGVyZSBhcmUgaW1wb3J0YW50ISAgV2UgbmVlZCB0aGVtIHRvIGtlZXAgUmVhY3QgMTgnc1xuICAvLyB1c2VJZCBoYXBweSB3aGVuIHdlIGFyZSBzZXJ2ZXItcmVuZGVyaW5nIHNpbmNlIHdlIG1heSBoYXZlIGEgPHNjcmlwdD4gaGVyZVxuICAvLyBjb250YWluaW5nIHRoZSBoeWRyYXRlZCBzZXJ2ZXItc2lkZSBzdGF0aWNDb250ZXh0IChmcm9tIFN0YXRpY1JvdXRlclByb3ZpZGVyKS5cbiAgLy8gdXNlSWQgcmVsaWVzIG9uIHRoZSBjb21wb25lbnQgdHJlZSBzdHJ1Y3R1cmUgdG8gZ2VuZXJhdGUgZGV0ZXJtaW5pc3RpYyBpZCdzXG4gIC8vIHNvIHdlIG5lZWQgdG8gZW5zdXJlIGl0IHJlbWFpbnMgdGhlIHNhbWUgb24gdGhlIGNsaWVudCBldmVuIHRob3VnaFxuICAvLyB3ZSBkb24ndCBuZWVkIHRoZSA8c2NyaXB0PiB0YWdcbiAgcmV0dXJuIChcbiAgICA8PlxuICAgICAgPERhdGFSb3V0ZXJDb250ZXh0LlByb3ZpZGVyXG4gICAgICAgIHZhbHVlPXt7XG4gICAgICAgICAgcm91dGVyLFxuICAgICAgICAgIG5hdmlnYXRvcixcbiAgICAgICAgICBzdGF0aWM6IGZhbHNlLFxuICAgICAgICAgIC8vIERvIHdlIG5lZWQgdGhpcz9cbiAgICAgICAgICBiYXNlbmFtZSxcbiAgICAgICAgfX1cbiAgICAgID5cbiAgICAgICAgPERhdGFSb3V0ZXJTdGF0ZUNvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3N0YXRlfT5cbiAgICAgICAgICA8Um91dGVyXG4gICAgICAgICAgICBiYXNlbmFtZT17cm91dGVyLmJhc2VuYW1lfVxuICAgICAgICAgICAgbG9jYXRpb249e3JvdXRlci5zdGF0ZS5sb2NhdGlvbn1cbiAgICAgICAgICAgIG5hdmlnYXRpb25UeXBlPXtyb3V0ZXIuc3RhdGUuaGlzdG9yeUFjdGlvbn1cbiAgICAgICAgICAgIG5hdmlnYXRvcj17bmF2aWdhdG9yfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtyb3V0ZXIuc3RhdGUuaW5pdGlhbGl6ZWQgPyA8Um91dGVzIC8+IDogZmFsbGJhY2tFbGVtZW50fVxuICAgICAgICAgIDwvUm91dGVyPlxuICAgICAgICA8L0RhdGFSb3V0ZXJTdGF0ZUNvbnRleHQuUHJvdmlkZXI+XG4gICAgICA8L0RhdGFSb3V0ZXJDb250ZXh0LlByb3ZpZGVyPlxuICAgICAge251bGx9XG4gICAgPC8+XG4gICk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgTWVtb3J5Um91dGVyUHJvcHMge1xuICBiYXNlbmFtZT86IHN0cmluZztcbiAgY2hpbGRyZW4/OiBSZWFjdC5SZWFjdE5vZGU7XG4gIGluaXRpYWxFbnRyaWVzPzogSW5pdGlhbEVudHJ5W107XG4gIGluaXRpYWxJbmRleD86IG51bWJlcjtcbn1cblxuLyoqXG4gKiBBIDxSb3V0ZXI+IHRoYXQgc3RvcmVzIGFsbCBlbnRyaWVzIGluIG1lbW9yeS5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL3JvdXRlci1jb21wb25lbnRzL21lbW9yeS1yb3V0ZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIE1lbW9yeVJvdXRlcih7XG4gIGJhc2VuYW1lLFxuICBjaGlsZHJlbixcbiAgaW5pdGlhbEVudHJpZXMsXG4gIGluaXRpYWxJbmRleCxcbn06IE1lbW9yeVJvdXRlclByb3BzKTogUmVhY3QuUmVhY3RFbGVtZW50IHtcbiAgbGV0IGhpc3RvcnlSZWYgPSBSZWFjdC51c2VSZWY8TWVtb3J5SGlzdG9yeT4oKTtcbiAgaWYgKGhpc3RvcnlSZWYuY3VycmVudCA9PSBudWxsKSB7XG4gICAgaGlzdG9yeVJlZi5jdXJyZW50ID0gY3JlYXRlTWVtb3J5SGlzdG9yeSh7XG4gICAgICBpbml0aWFsRW50cmllcyxcbiAgICAgIGluaXRpYWxJbmRleCxcbiAgICAgIHY1Q29tcGF0OiB0cnVlLFxuICAgIH0pO1xuICB9XG5cbiAgbGV0IGhpc3RvcnkgPSBoaXN0b3J5UmVmLmN1cnJlbnQ7XG4gIGxldCBbc3RhdGUsIHNldFN0YXRlXSA9IFJlYWN0LnVzZVN0YXRlKHtcbiAgICBhY3Rpb246IGhpc3RvcnkuYWN0aW9uLFxuICAgIGxvY2F0aW9uOiBoaXN0b3J5LmxvY2F0aW9uLFxuICB9KTtcblxuICBSZWFjdC51c2VMYXlvdXRFZmZlY3QoKCkgPT4gaGlzdG9yeS5saXN0ZW4oc2V0U3RhdGUpLCBbaGlzdG9yeV0pO1xuXG4gIHJldHVybiAoXG4gICAgPFJvdXRlclxuICAgICAgYmFzZW5hbWU9e2Jhc2VuYW1lfVxuICAgICAgY2hpbGRyZW49e2NoaWxkcmVufVxuICAgICAgbG9jYXRpb249e3N0YXRlLmxvY2F0aW9ufVxuICAgICAgbmF2aWdhdGlvblR5cGU9e3N0YXRlLmFjdGlvbn1cbiAgICAgIG5hdmlnYXRvcj17aGlzdG9yeX1cbiAgICAvPlxuICApO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE5hdmlnYXRlUHJvcHMge1xuICB0bzogVG87XG4gIHJlcGxhY2U/OiBib29sZWFuO1xuICBzdGF0ZT86IGFueTtcbiAgcmVsYXRpdmU/OiBSZWxhdGl2ZVJvdXRpbmdUeXBlO1xufVxuXG4vKipcbiAqIENoYW5nZXMgdGhlIGN1cnJlbnQgbG9jYXRpb24uXG4gKlxuICogTm90ZTogVGhpcyBBUEkgaXMgbW9zdGx5IHVzZWZ1bCBpbiBSZWFjdC5Db21wb25lbnQgc3ViY2xhc3NlcyB0aGF0IGFyZSBub3RcbiAqIGFibGUgdG8gdXNlIGhvb2tzLiBJbiBmdW5jdGlvbmFsIGNvbXBvbmVudHMsIHdlIHJlY29tbWVuZCB5b3UgdXNlIHRoZVxuICogYHVzZU5hdmlnYXRlYCBob29rIGluc3RlYWQuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9jb21wb25lbnRzL25hdmlnYXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBOYXZpZ2F0ZSh7XG4gIHRvLFxuICByZXBsYWNlLFxuICBzdGF0ZSxcbiAgcmVsYXRpdmUsXG59OiBOYXZpZ2F0ZVByb3BzKTogbnVsbCB7XG4gIGludmFyaWFudChcbiAgICB1c2VJblJvdXRlckNvbnRleHQoKSxcbiAgICAvLyBUT0RPOiBUaGlzIGVycm9yIGlzIHByb2JhYmx5IGJlY2F1c2UgdGhleSBzb21laG93IGhhdmUgMiB2ZXJzaW9ucyBvZlxuICAgIC8vIHRoZSByb3V0ZXIgbG9hZGVkLiBXZSBjYW4gaGVscCB0aGVtIHVuZGVyc3RhbmQgaG93IHRvIGF2b2lkIHRoYXQuXG4gICAgYDxOYXZpZ2F0ZT4gbWF5IGJlIHVzZWQgb25seSBpbiB0aGUgY29udGV4dCBvZiBhIDxSb3V0ZXI+IGNvbXBvbmVudC5gXG4gICk7XG5cbiAgd2FybmluZyhcbiAgICAhUmVhY3QudXNlQ29udGV4dChOYXZpZ2F0aW9uQ29udGV4dCkuc3RhdGljLFxuICAgIGA8TmF2aWdhdGU+IG11c3Qgbm90IGJlIHVzZWQgb24gdGhlIGluaXRpYWwgcmVuZGVyIGluIGEgPFN0YXRpY1JvdXRlcj4uIGAgK1xuICAgICAgYFRoaXMgaXMgYSBuby1vcCwgYnV0IHlvdSBzaG91bGQgbW9kaWZ5IHlvdXIgY29kZSBzbyB0aGUgPE5hdmlnYXRlPiBpcyBgICtcbiAgICAgIGBvbmx5IGV2ZXIgcmVuZGVyZWQgaW4gcmVzcG9uc2UgdG8gc29tZSB1c2VyIGludGVyYWN0aW9uIG9yIHN0YXRlIGNoYW5nZS5gXG4gICk7XG5cbiAgbGV0IGRhdGFSb3V0ZXJTdGF0ZSA9IFJlYWN0LnVzZUNvbnRleHQoRGF0YVJvdXRlclN0YXRlQ29udGV4dCk7XG4gIGxldCBuYXZpZ2F0ZSA9IHVzZU5hdmlnYXRlKCk7XG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICAvLyBBdm9pZCBraWNraW5nIG9mZiBtdWx0aXBsZSBuYXZpZ2F0aW9ucyBpZiB3ZSdyZSBpbiB0aGUgbWlkZGxlIG9mIGFcbiAgICAvLyBkYXRhLXJvdXRlciBuYXZpZ2F0aW9uLCBzaW5jZSBjb21wb25lbnRzIGdldCByZS1yZW5kZXJlZCB3aGVuIHdlIGVudGVyXG4gICAgLy8gYSBzdWJtaXR0aW5nL2xvYWRpbmcgc3RhdGVcbiAgICBpZiAoZGF0YVJvdXRlclN0YXRlICYmIGRhdGFSb3V0ZXJTdGF0ZS5uYXZpZ2F0aW9uLnN0YXRlICE9PSBcImlkbGVcIikge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBuYXZpZ2F0ZSh0bywgeyByZXBsYWNlLCBzdGF0ZSwgcmVsYXRpdmUgfSk7XG4gIH0pO1xuXG4gIHJldHVybiBudWxsO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE91dGxldFByb3BzIHtcbiAgY29udGV4dD86IHVua25vd247XG59XG5cbi8qKlxuICogUmVuZGVycyB0aGUgY2hpbGQgcm91dGUncyBlbGVtZW50LCBpZiB0aGVyZSBpcyBvbmUuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9jb21wb25lbnRzL291dGxldFxuICovXG5leHBvcnQgZnVuY3Rpb24gT3V0bGV0KHByb3BzOiBPdXRsZXRQcm9wcyk6IFJlYWN0LlJlYWN0RWxlbWVudCB8IG51bGwge1xuICByZXR1cm4gdXNlT3V0bGV0KHByb3BzLmNvbnRleHQpO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFBhdGhSb3V0ZVByb3BzIHtcbiAgY2FzZVNlbnNpdGl2ZT86IE5vbkluZGV4Um91dGVPYmplY3RbXCJjYXNlU2Vuc2l0aXZlXCJdO1xuICBwYXRoPzogTm9uSW5kZXhSb3V0ZU9iamVjdFtcInBhdGhcIl07XG4gIGlkPzogTm9uSW5kZXhSb3V0ZU9iamVjdFtcImlkXCJdO1xuICBsb2FkZXI/OiBOb25JbmRleFJvdXRlT2JqZWN0W1wibG9hZGVyXCJdO1xuICBhY3Rpb24/OiBOb25JbmRleFJvdXRlT2JqZWN0W1wiYWN0aW9uXCJdO1xuICBoYXNFcnJvckJvdW5kYXJ5PzogTm9uSW5kZXhSb3V0ZU9iamVjdFtcImhhc0Vycm9yQm91bmRhcnlcIl07XG4gIHNob3VsZFJldmFsaWRhdGU/OiBOb25JbmRleFJvdXRlT2JqZWN0W1wic2hvdWxkUmV2YWxpZGF0ZVwiXTtcbiAgaGFuZGxlPzogTm9uSW5kZXhSb3V0ZU9iamVjdFtcImhhbmRsZVwiXTtcbiAgaW5kZXg/OiBmYWxzZTtcbiAgY2hpbGRyZW4/OiBSZWFjdC5SZWFjdE5vZGU7XG4gIGVsZW1lbnQ/OiBSZWFjdC5SZWFjdE5vZGUgfCBudWxsO1xuICBlcnJvckVsZW1lbnQ/OiBSZWFjdC5SZWFjdE5vZGUgfCBudWxsO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIExheW91dFJvdXRlUHJvcHMgZXh0ZW5kcyBQYXRoUm91dGVQcm9wcyB7fVxuXG5leHBvcnQgaW50ZXJmYWNlIEluZGV4Um91dGVQcm9wcyB7XG4gIGNhc2VTZW5zaXRpdmU/OiBJbmRleFJvdXRlT2JqZWN0W1wiY2FzZVNlbnNpdGl2ZVwiXTtcbiAgcGF0aD86IEluZGV4Um91dGVPYmplY3RbXCJwYXRoXCJdO1xuICBpZD86IEluZGV4Um91dGVPYmplY3RbXCJpZFwiXTtcbiAgbG9hZGVyPzogSW5kZXhSb3V0ZU9iamVjdFtcImxvYWRlclwiXTtcbiAgYWN0aW9uPzogSW5kZXhSb3V0ZU9iamVjdFtcImFjdGlvblwiXTtcbiAgaGFzRXJyb3JCb3VuZGFyeT86IEluZGV4Um91dGVPYmplY3RbXCJoYXNFcnJvckJvdW5kYXJ5XCJdO1xuICBzaG91bGRSZXZhbGlkYXRlPzogSW5kZXhSb3V0ZU9iamVjdFtcInNob3VsZFJldmFsaWRhdGVcIl07XG4gIGhhbmRsZT86IEluZGV4Um91dGVPYmplY3RbXCJoYW5kbGVcIl07XG4gIGluZGV4OiB0cnVlO1xuICBjaGlsZHJlbj86IHVuZGVmaW5lZDtcbiAgZWxlbWVudD86IFJlYWN0LlJlYWN0Tm9kZSB8IG51bGw7XG4gIGVycm9yRWxlbWVudD86IFJlYWN0LlJlYWN0Tm9kZSB8IG51bGw7XG59XG5cbmV4cG9ydCB0eXBlIFJvdXRlUHJvcHMgPSBQYXRoUm91dGVQcm9wcyB8IExheW91dFJvdXRlUHJvcHMgfCBJbmRleFJvdXRlUHJvcHM7XG5cbi8qKlxuICogRGVjbGFyZXMgYW4gZWxlbWVudCB0aGF0IHNob3VsZCBiZSByZW5kZXJlZCBhdCBhIGNlcnRhaW4gVVJMIHBhdGguXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9jb21wb25lbnRzL3JvdXRlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBSb3V0ZShfcHJvcHM6IFJvdXRlUHJvcHMpOiBSZWFjdC5SZWFjdEVsZW1lbnQgfCBudWxsIHtcbiAgaW52YXJpYW50KFxuICAgIGZhbHNlLFxuICAgIGBBIDxSb3V0ZT4gaXMgb25seSBldmVyIHRvIGJlIHVzZWQgYXMgdGhlIGNoaWxkIG9mIDxSb3V0ZXM+IGVsZW1lbnQsIGAgK1xuICAgICAgYG5ldmVyIHJlbmRlcmVkIGRpcmVjdGx5LiBQbGVhc2Ugd3JhcCB5b3VyIDxSb3V0ZT4gaW4gYSA8Um91dGVzPi5gXG4gICk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUm91dGVyUHJvcHMge1xuICBiYXNlbmFtZT86IHN0cmluZztcbiAgY2hpbGRyZW4/OiBSZWFjdC5SZWFjdE5vZGU7XG4gIGxvY2F0aW9uOiBQYXJ0aWFsPExvY2F0aW9uPiB8IHN0cmluZztcbiAgbmF2aWdhdGlvblR5cGU/OiBOYXZpZ2F0aW9uVHlwZTtcbiAgbmF2aWdhdG9yOiBOYXZpZ2F0b3I7XG4gIHN0YXRpYz86IGJvb2xlYW47XG59XG5cbi8qKlxuICogUHJvdmlkZXMgbG9jYXRpb24gY29udGV4dCBmb3IgdGhlIHJlc3Qgb2YgdGhlIGFwcC5cbiAqXG4gKiBOb3RlOiBZb3UgdXN1YWxseSB3b24ndCByZW5kZXIgYSA8Um91dGVyPiBkaXJlY3RseS4gSW5zdGVhZCwgeW91J2xsIHJlbmRlciBhXG4gKiByb3V0ZXIgdGhhdCBpcyBtb3JlIHNwZWNpZmljIHRvIHlvdXIgZW52aXJvbm1lbnQgc3VjaCBhcyBhIDxCcm93c2VyUm91dGVyPlxuICogaW4gd2ViIGJyb3dzZXJzIG9yIGEgPFN0YXRpY1JvdXRlcj4gZm9yIHNlcnZlciByZW5kZXJpbmcuXG4gKlxuICogQHNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9yb3V0ZXItY29tcG9uZW50cy9yb3V0ZXJcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIFJvdXRlcih7XG4gIGJhc2VuYW1lOiBiYXNlbmFtZVByb3AgPSBcIi9cIixcbiAgY2hpbGRyZW4gPSBudWxsLFxuICBsb2NhdGlvbjogbG9jYXRpb25Qcm9wLFxuICBuYXZpZ2F0aW9uVHlwZSA9IE5hdmlnYXRpb25UeXBlLlBvcCxcbiAgbmF2aWdhdG9yLFxuICBzdGF0aWM6IHN0YXRpY1Byb3AgPSBmYWxzZSxcbn06IFJvdXRlclByb3BzKTogUmVhY3QuUmVhY3RFbGVtZW50IHwgbnVsbCB7XG4gIGludmFyaWFudChcbiAgICAhdXNlSW5Sb3V0ZXJDb250ZXh0KCksXG4gICAgYFlvdSBjYW5ub3QgcmVuZGVyIGEgPFJvdXRlcj4gaW5zaWRlIGFub3RoZXIgPFJvdXRlcj4uYCArXG4gICAgICBgIFlvdSBzaG91bGQgbmV2ZXIgaGF2ZSBtb3JlIHRoYW4gb25lIGluIHlvdXIgYXBwLmBcbiAgKTtcblxuICAvLyBQcmVzZXJ2ZSB0cmFpbGluZyBzbGFzaGVzIG9uIGJhc2VuYW1lLCBzbyB3ZSBjYW4gbGV0IHRoZSB1c2VyIGNvbnRyb2xcbiAgLy8gdGhlIGVuZm9yY2VtZW50IG9mIHRyYWlsaW5nIHNsYXNoZXMgdGhyb3VnaG91dCB0aGUgYXBwXG4gIGxldCBiYXNlbmFtZSA9IGJhc2VuYW1lUHJvcC5yZXBsYWNlKC9eXFwvKi8sIFwiL1wiKTtcbiAgbGV0IG5hdmlnYXRpb25Db250ZXh0ID0gUmVhY3QudXNlTWVtbyhcbiAgICAoKSA9PiAoeyBiYXNlbmFtZSwgbmF2aWdhdG9yLCBzdGF0aWM6IHN0YXRpY1Byb3AgfSksXG4gICAgW2Jhc2VuYW1lLCBuYXZpZ2F0b3IsIHN0YXRpY1Byb3BdXG4gICk7XG5cbiAgaWYgKHR5cGVvZiBsb2NhdGlvblByb3AgPT09IFwic3RyaW5nXCIpIHtcbiAgICBsb2NhdGlvblByb3AgPSBwYXJzZVBhdGgobG9jYXRpb25Qcm9wKTtcbiAgfVxuXG4gIGxldCB7XG4gICAgcGF0aG5hbWUgPSBcIi9cIixcbiAgICBzZWFyY2ggPSBcIlwiLFxuICAgIGhhc2ggPSBcIlwiLFxuICAgIHN0YXRlID0gbnVsbCxcbiAgICBrZXkgPSBcImRlZmF1bHRcIixcbiAgfSA9IGxvY2F0aW9uUHJvcDtcblxuICBsZXQgbG9jYXRpb24gPSBSZWFjdC51c2VNZW1vKCgpID0+IHtcbiAgICBsZXQgdHJhaWxpbmdQYXRobmFtZSA9IHN0cmlwQmFzZW5hbWUocGF0aG5hbWUsIGJhc2VuYW1lKTtcblxuICAgIGlmICh0cmFpbGluZ1BhdGhuYW1lID09IG51bGwpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBwYXRobmFtZTogdHJhaWxpbmdQYXRobmFtZSxcbiAgICAgIHNlYXJjaCxcbiAgICAgIGhhc2gsXG4gICAgICBzdGF0ZSxcbiAgICAgIGtleSxcbiAgICB9O1xuICB9LCBbYmFzZW5hbWUsIHBhdGhuYW1lLCBzZWFyY2gsIGhhc2gsIHN0YXRlLCBrZXldKTtcblxuICB3YXJuaW5nKFxuICAgIGxvY2F0aW9uICE9IG51bGwsXG4gICAgYDxSb3V0ZXIgYmFzZW5hbWU9XCIke2Jhc2VuYW1lfVwiPiBpcyBub3QgYWJsZSB0byBtYXRjaCB0aGUgVVJMIGAgK1xuICAgICAgYFwiJHtwYXRobmFtZX0ke3NlYXJjaH0ke2hhc2h9XCIgYmVjYXVzZSBpdCBkb2VzIG5vdCBzdGFydCB3aXRoIHRoZSBgICtcbiAgICAgIGBiYXNlbmFtZSwgc28gdGhlIDxSb3V0ZXI+IHdvbid0IHJlbmRlciBhbnl0aGluZy5gXG4gICk7XG5cbiAgaWYgKGxvY2F0aW9uID09IG51bGwpIHtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPE5hdmlnYXRpb25Db250ZXh0LlByb3ZpZGVyIHZhbHVlPXtuYXZpZ2F0aW9uQ29udGV4dH0+XG4gICAgICA8TG9jYXRpb25Db250ZXh0LlByb3ZpZGVyXG4gICAgICAgIGNoaWxkcmVuPXtjaGlsZHJlbn1cbiAgICAgICAgdmFsdWU9e3sgbG9jYXRpb24sIG5hdmlnYXRpb25UeXBlIH19XG4gICAgICAvPlxuICAgIDwvTmF2aWdhdGlvbkNvbnRleHQuUHJvdmlkZXI+XG4gICk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUm91dGVzUHJvcHMge1xuICBjaGlsZHJlbj86IFJlYWN0LlJlYWN0Tm9kZTtcbiAgbG9jYXRpb24/OiBQYXJ0aWFsPExvY2F0aW9uPiB8IHN0cmluZztcbn1cblxuLyoqXG4gKiBBIGNvbnRhaW5lciBmb3IgYSBuZXN0ZWQgdHJlZSBvZiA8Um91dGU+IGVsZW1lbnRzIHRoYXQgcmVuZGVycyB0aGUgYnJhbmNoXG4gKiB0aGF0IGJlc3QgbWF0Y2hlcyB0aGUgY3VycmVudCBsb2NhdGlvbi5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vcmVhY3Ryb3V0ZXIuY29tL2NvbXBvbmVudHMvcm91dGVzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBSb3V0ZXMoe1xuICBjaGlsZHJlbixcbiAgbG9jYXRpb24sXG59OiBSb3V0ZXNQcm9wcyk6IFJlYWN0LlJlYWN0RWxlbWVudCB8IG51bGwge1xuICBsZXQgZGF0YVJvdXRlckNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KERhdGFSb3V0ZXJDb250ZXh0KTtcbiAgLy8gV2hlbiBpbiBhIERhdGFSb3V0ZXJDb250ZXh0IF93aXRob3V0XyBjaGlsZHJlbiwgd2UgdXNlIHRoZSByb3V0ZXIgcm91dGVzXG4gIC8vIGRpcmVjdGx5LiAgSWYgd2UgaGF2ZSBjaGlsZHJlbiwgdGhlbiB3ZSdyZSBpbiBhIGRlc2NlbmRhbnQgdHJlZSBhbmQgd2VcbiAgLy8gbmVlZCB0byB1c2UgY2hpbGQgcm91dGVzLlxuICBsZXQgcm91dGVzID1cbiAgICBkYXRhUm91dGVyQ29udGV4dCAmJiAhY2hpbGRyZW5cbiAgICAgID8gKGRhdGFSb3V0ZXJDb250ZXh0LnJvdXRlci5yb3V0ZXMgYXMgRGF0YVJvdXRlT2JqZWN0W10pXG4gICAgICA6IGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbihjaGlsZHJlbik7XG4gIHJldHVybiB1c2VSb3V0ZXMocm91dGVzLCBsb2NhdGlvbik7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXdhaXRSZXNvbHZlUmVuZGVyRnVuY3Rpb24ge1xuICAoZGF0YTogQXdhaXRlZDxhbnk+KTogUmVhY3QuUmVhY3ROb2RlO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEF3YWl0UHJvcHMge1xuICBjaGlsZHJlbjogUmVhY3QuUmVhY3ROb2RlIHwgQXdhaXRSZXNvbHZlUmVuZGVyRnVuY3Rpb247XG4gIGVycm9yRWxlbWVudD86IFJlYWN0LlJlYWN0Tm9kZTtcbiAgcmVzb2x2ZTogVHJhY2tlZFByb21pc2UgfCBhbnk7XG59XG5cbi8qKlxuICogQ29tcG9uZW50IHRvIHVzZSBmb3IgcmVuZGVyaW5nIGxhemlseSBsb2FkZWQgZGF0YSBmcm9tIHJldHVybmluZyBkZWZlcigpXG4gKiBpbiBhIGxvYWRlciBmdW5jdGlvblxuICovXG5leHBvcnQgZnVuY3Rpb24gQXdhaXQoeyBjaGlsZHJlbiwgZXJyb3JFbGVtZW50LCByZXNvbHZlIH06IEF3YWl0UHJvcHMpIHtcbiAgcmV0dXJuIChcbiAgICA8QXdhaXRFcnJvckJvdW5kYXJ5IHJlc29sdmU9e3Jlc29sdmV9IGVycm9yRWxlbWVudD17ZXJyb3JFbGVtZW50fT5cbiAgICAgIDxSZXNvbHZlQXdhaXQ+e2NoaWxkcmVufTwvUmVzb2x2ZUF3YWl0PlxuICAgIDwvQXdhaXRFcnJvckJvdW5kYXJ5PlxuICApO1xufVxuXG50eXBlIEF3YWl0RXJyb3JCb3VuZGFyeVByb3BzID0gUmVhY3QuUHJvcHNXaXRoQ2hpbGRyZW48e1xuICBlcnJvckVsZW1lbnQ/OiBSZWFjdC5SZWFjdE5vZGU7XG4gIHJlc29sdmU6IFRyYWNrZWRQcm9taXNlIHwgYW55O1xufT47XG5cbnR5cGUgQXdhaXRFcnJvckJvdW5kYXJ5U3RhdGUgPSB7XG4gIGVycm9yOiBhbnk7XG59O1xuXG5lbnVtIEF3YWl0UmVuZGVyU3RhdHVzIHtcbiAgcGVuZGluZyxcbiAgc3VjY2VzcyxcbiAgZXJyb3IsXG59XG5cbmNvbnN0IG5ldmVyU2V0dGxlZFByb21pc2UgPSBuZXcgUHJvbWlzZSgoKSA9PiB7fSk7XG5cbmNsYXNzIEF3YWl0RXJyb3JCb3VuZGFyeSBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxcbiAgQXdhaXRFcnJvckJvdW5kYXJ5UHJvcHMsXG4gIEF3YWl0RXJyb3JCb3VuZGFyeVN0YXRlXG4+IHtcbiAgY29uc3RydWN0b3IocHJvcHM6IEF3YWl0RXJyb3JCb3VuZGFyeVByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7IGVycm9yOiBudWxsIH07XG4gIH1cblxuICBzdGF0aWMgZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yKGVycm9yOiBhbnkpIHtcbiAgICByZXR1cm4geyBlcnJvciB9O1xuICB9XG5cbiAgY29tcG9uZW50RGlkQ2F0Y2goZXJyb3I6IGFueSwgZXJyb3JJbmZvOiBhbnkpIHtcbiAgICBjb25zb2xlLmVycm9yKFxuICAgICAgXCI8QXdhaXQ+IGNhdWdodCB0aGUgZm9sbG93aW5nIGVycm9yIGR1cmluZyByZW5kZXJcIixcbiAgICAgIGVycm9yLFxuICAgICAgZXJyb3JJbmZvXG4gICAgKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBsZXQgeyBjaGlsZHJlbiwgZXJyb3JFbGVtZW50LCByZXNvbHZlIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgbGV0IHByb21pc2U6IFRyYWNrZWRQcm9taXNlIHwgbnVsbCA9IG51bGw7XG4gICAgbGV0IHN0YXR1czogQXdhaXRSZW5kZXJTdGF0dXMgPSBBd2FpdFJlbmRlclN0YXR1cy5wZW5kaW5nO1xuXG4gICAgaWYgKCEocmVzb2x2ZSBpbnN0YW5jZW9mIFByb21pc2UpKSB7XG4gICAgICAvLyBEaWRuJ3QgZ2V0IGEgcHJvbWlzZSAtIHByb3ZpZGUgYXMgYSByZXNvbHZlZCBwcm9taXNlXG4gICAgICBzdGF0dXMgPSBBd2FpdFJlbmRlclN0YXR1cy5zdWNjZXNzO1xuICAgICAgcHJvbWlzZSA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX3RyYWNrZWRcIiwgeyBnZXQ6ICgpID0+IHRydWUgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfZGF0YVwiLCB7IGdldDogKCkgPT4gcmVzb2x2ZSB9KTtcbiAgICB9IGVsc2UgaWYgKHRoaXMuc3RhdGUuZXJyb3IpIHtcbiAgICAgIC8vIENhdWdodCBhIHJlbmRlciBlcnJvciwgcHJvdmlkZSBpdCBhcyBhIHJlamVjdGVkIHByb21pc2VcbiAgICAgIHN0YXR1cyA9IEF3YWl0UmVuZGVyU3RhdHVzLmVycm9yO1xuICAgICAgbGV0IHJlbmRlckVycm9yID0gdGhpcy5zdGF0ZS5lcnJvcjtcbiAgICAgIHByb21pc2UgPSBQcm9taXNlLnJlamVjdCgpLmNhdGNoKCgpID0+IHt9KTsgLy8gQXZvaWQgdW5oYW5kbGVkIHJlamVjdGlvbiB3YXJuaW5nc1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb21pc2UsIFwiX3RyYWNrZWRcIiwgeyBnZXQ6ICgpID0+IHRydWUgfSk7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocHJvbWlzZSwgXCJfZXJyb3JcIiwgeyBnZXQ6ICgpID0+IHJlbmRlckVycm9yIH0pO1xuICAgIH0gZWxzZSBpZiAoKHJlc29sdmUgYXMgVHJhY2tlZFByb21pc2UpLl90cmFja2VkKSB7XG4gICAgICAvLyBBbHJlYWR5IHRyYWNrZWQgcHJvbWlzZSAtIGNoZWNrIGNvbnRlbnRzXG4gICAgICBwcm9taXNlID0gcmVzb2x2ZTtcbiAgICAgIHN0YXR1cyA9XG4gICAgICAgIHByb21pc2UuX2Vycm9yICE9PSB1bmRlZmluZWRcbiAgICAgICAgICA/IEF3YWl0UmVuZGVyU3RhdHVzLmVycm9yXG4gICAgICAgICAgOiBwcm9taXNlLl9kYXRhICE9PSB1bmRlZmluZWRcbiAgICAgICAgICA/IEF3YWl0UmVuZGVyU3RhdHVzLnN1Y2Nlc3NcbiAgICAgICAgICA6IEF3YWl0UmVuZGVyU3RhdHVzLnBlbmRpbmc7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIFJhdyAodW50cmFja2VkKSBwcm9taXNlIC0gdHJhY2sgaXRcbiAgICAgIHN0YXR1cyA9IEF3YWl0UmVuZGVyU3RhdHVzLnBlbmRpbmc7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocmVzb2x2ZSwgXCJfdHJhY2tlZFwiLCB7IGdldDogKCkgPT4gdHJ1ZSB9KTtcbiAgICAgIHByb21pc2UgPSByZXNvbHZlLnRoZW4oXG4gICAgICAgIChkYXRhOiBhbnkpID0+XG4gICAgICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHJlc29sdmUsIFwiX2RhdGFcIiwgeyBnZXQ6ICgpID0+IGRhdGEgfSksXG4gICAgICAgIChlcnJvcjogYW55KSA9PlxuICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShyZXNvbHZlLCBcIl9lcnJvclwiLCB7IGdldDogKCkgPT4gZXJyb3IgfSlcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgc3RhdHVzID09PSBBd2FpdFJlbmRlclN0YXR1cy5lcnJvciAmJlxuICAgICAgcHJvbWlzZS5fZXJyb3IgaW5zdGFuY2VvZiBBYm9ydGVkRGVmZXJyZWRFcnJvclxuICAgICkge1xuICAgICAgLy8gRnJlZXplIHRoZSBVSSBieSB0aHJvd2luZyBhIG5ldmVyIHJlc29sdmVkIHByb21pc2VcbiAgICAgIHRocm93IG5ldmVyU2V0dGxlZFByb21pc2U7XG4gICAgfVxuXG4gICAgaWYgKHN0YXR1cyA9PT0gQXdhaXRSZW5kZXJTdGF0dXMuZXJyb3IgJiYgIWVycm9yRWxlbWVudCkge1xuICAgICAgLy8gTm8gZXJyb3JFbGVtZW50LCB0aHJvdyB0byB0aGUgbmVhcmVzdCByb3V0ZS1sZXZlbCBlcnJvciBib3VuZGFyeVxuICAgICAgdGhyb3cgcHJvbWlzZS5fZXJyb3I7XG4gICAgfVxuXG4gICAgaWYgKHN0YXR1cyA9PT0gQXdhaXRSZW5kZXJTdGF0dXMuZXJyb3IpIHtcbiAgICAgIC8vIFJlbmRlciB2aWEgb3VyIGVycm9yRWxlbWVudFxuICAgICAgcmV0dXJuIDxBd2FpdENvbnRleHQuUHJvdmlkZXIgdmFsdWU9e3Byb21pc2V9IGNoaWxkcmVuPXtlcnJvckVsZW1lbnR9IC8+O1xuICAgIH1cblxuICAgIGlmIChzdGF0dXMgPT09IEF3YWl0UmVuZGVyU3RhdHVzLnN1Y2Nlc3MpIHtcbiAgICAgIC8vIFJlbmRlciBjaGlsZHJlbiB3aXRoIHJlc29sdmVkIHZhbHVlXG4gICAgICByZXR1cm4gPEF3YWl0Q29udGV4dC5Qcm92aWRlciB2YWx1ZT17cHJvbWlzZX0gY2hpbGRyZW49e2NoaWxkcmVufSAvPjtcbiAgICB9XG5cbiAgICAvLyBUaHJvdyB0byB0aGUgc3VzcGVuc2UgYm91bmRhcnlcbiAgICB0aHJvdyBwcm9taXNlO1xuICB9XG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqIEluZGlyZWN0aW9uIHRvIGxldmVyYWdlIHVzZUFzeW5jVmFsdWUgZm9yIGEgcmVuZGVyLXByb3AgQVBJIG9uIDxBd2FpdD5cbiAqL1xuZnVuY3Rpb24gUmVzb2x2ZUF3YWl0KHtcbiAgY2hpbGRyZW4sXG59OiB7XG4gIGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGUgfCBBd2FpdFJlc29sdmVSZW5kZXJGdW5jdGlvbjtcbn0pIHtcbiAgbGV0IGRhdGEgPSB1c2VBc3luY1ZhbHVlKCk7XG4gIGxldCB0b1JlbmRlciA9IHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiID8gY2hpbGRyZW4oZGF0YSkgOiBjaGlsZHJlbjtcbiAgcmV0dXJuIDw+e3RvUmVuZGVyfTwvPjtcbn1cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8gVVRJTFNcbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqXG4gKiBDcmVhdGVzIGEgcm91dGUgY29uZmlnIGZyb20gYSBSZWFjdCBcImNoaWxkcmVuXCIgb2JqZWN0LCB3aGljaCBpcyB1c3VhbGx5XG4gKiBlaXRoZXIgYSBgPFJvdXRlPmAgZWxlbWVudCBvciBhbiBhcnJheSBvZiB0aGVtLiBVc2VkIGludGVybmFsbHkgYnlcbiAqIGA8Um91dGVzPmAgdG8gY3JlYXRlIGEgcm91dGUgY29uZmlnIGZyb20gaXRzIGNoaWxkcmVuLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9yZWFjdHJvdXRlci5jb20vdXRpbHMvY3JlYXRlLXJvdXRlcy1mcm9tLWNoaWxkcmVuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4oXG4gIGNoaWxkcmVuOiBSZWFjdC5SZWFjdE5vZGUsXG4gIHBhcmVudFBhdGg6IG51bWJlcltdID0gW11cbik6IFJvdXRlT2JqZWN0W10ge1xuICBsZXQgcm91dGVzOiBSb3V0ZU9iamVjdFtdID0gW107XG5cbiAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaChjaGlsZHJlbiwgKGVsZW1lbnQsIGluZGV4KSA9PiB7XG4gICAgaWYgKCFSZWFjdC5pc1ZhbGlkRWxlbWVudChlbGVtZW50KSkge1xuICAgICAgLy8gSWdub3JlIG5vbi1lbGVtZW50cy4gVGhpcyBhbGxvd3MgcGVvcGxlIHRvIG1vcmUgZWFzaWx5IGlubGluZVxuICAgICAgLy8gY29uZGl0aW9uYWxzIGluIHRoZWlyIHJvdXRlIGNvbmZpZy5cbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoZWxlbWVudC50eXBlID09PSBSZWFjdC5GcmFnbWVudCkge1xuICAgICAgLy8gVHJhbnNwYXJlbnRseSBzdXBwb3J0IFJlYWN0LkZyYWdtZW50IGFuZCBpdHMgY2hpbGRyZW4uXG4gICAgICByb3V0ZXMucHVzaC5hcHBseShcbiAgICAgICAgcm91dGVzLFxuICAgICAgICBjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4oZWxlbWVudC5wcm9wcy5jaGlsZHJlbiwgcGFyZW50UGF0aClcbiAgICAgICk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaW52YXJpYW50KFxuICAgICAgZWxlbWVudC50eXBlID09PSBSb3V0ZSxcbiAgICAgIGBbJHtcbiAgICAgICAgdHlwZW9mIGVsZW1lbnQudHlwZSA9PT0gXCJzdHJpbmdcIiA/IGVsZW1lbnQudHlwZSA6IGVsZW1lbnQudHlwZS5uYW1lXG4gICAgICB9XSBpcyBub3QgYSA8Um91dGU+IGNvbXBvbmVudC4gQWxsIGNvbXBvbmVudCBjaGlsZHJlbiBvZiA8Um91dGVzPiBtdXN0IGJlIGEgPFJvdXRlPiBvciA8UmVhY3QuRnJhZ21lbnQ+YFxuICAgICk7XG5cbiAgICBpbnZhcmlhbnQoXG4gICAgICAhZWxlbWVudC5wcm9wcy5pbmRleCB8fCAhZWxlbWVudC5wcm9wcy5jaGlsZHJlbixcbiAgICAgIFwiQW4gaW5kZXggcm91dGUgY2Fubm90IGhhdmUgY2hpbGQgcm91dGVzLlwiXG4gICAgKTtcblxuICAgIGxldCB0cmVlUGF0aCA9IFsuLi5wYXJlbnRQYXRoLCBpbmRleF07XG4gICAgbGV0IHJvdXRlOiBSb3V0ZU9iamVjdCA9IHtcbiAgICAgIGlkOiBlbGVtZW50LnByb3BzLmlkIHx8IHRyZWVQYXRoLmpvaW4oXCItXCIpLFxuICAgICAgY2FzZVNlbnNpdGl2ZTogZWxlbWVudC5wcm9wcy5jYXNlU2Vuc2l0aXZlLFxuICAgICAgZWxlbWVudDogZWxlbWVudC5wcm9wcy5lbGVtZW50LFxuICAgICAgaW5kZXg6IGVsZW1lbnQucHJvcHMuaW5kZXgsXG4gICAgICBwYXRoOiBlbGVtZW50LnByb3BzLnBhdGgsXG4gICAgICBsb2FkZXI6IGVsZW1lbnQucHJvcHMubG9hZGVyLFxuICAgICAgYWN0aW9uOiBlbGVtZW50LnByb3BzLmFjdGlvbixcbiAgICAgIGVycm9yRWxlbWVudDogZWxlbWVudC5wcm9wcy5lcnJvckVsZW1lbnQsXG4gICAgICBoYXNFcnJvckJvdW5kYXJ5OiBlbGVtZW50LnByb3BzLmVycm9yRWxlbWVudCAhPSBudWxsLFxuICAgICAgc2hvdWxkUmV2YWxpZGF0ZTogZWxlbWVudC5wcm9wcy5zaG91bGRSZXZhbGlkYXRlLFxuICAgICAgaGFuZGxlOiBlbGVtZW50LnByb3BzLmhhbmRsZSxcbiAgICB9O1xuXG4gICAgaWYgKGVsZW1lbnQucHJvcHMuY2hpbGRyZW4pIHtcbiAgICAgIHJvdXRlLmNoaWxkcmVuID0gY3JlYXRlUm91dGVzRnJvbUNoaWxkcmVuKFxuICAgICAgICBlbGVtZW50LnByb3BzLmNoaWxkcmVuLFxuICAgICAgICB0cmVlUGF0aFxuICAgICAgKTtcbiAgICB9XG5cbiAgICByb3V0ZXMucHVzaChyb3V0ZSk7XG4gIH0pO1xuXG4gIHJldHVybiByb3V0ZXM7XG59XG5cbi8qKlxuICogUmVuZGVycyB0aGUgcmVzdWx0IG9mIGBtYXRjaFJvdXRlcygpYCBpbnRvIGEgUmVhY3QgZWxlbWVudC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlck1hdGNoZXMoXG4gIG1hdGNoZXM6IFJvdXRlTWF0Y2hbXSB8IG51bGxcbik6IFJlYWN0LlJlYWN0RWxlbWVudCB8IG51bGwge1xuICByZXR1cm4gX3JlbmRlck1hdGNoZXMobWF0Y2hlcyk7XG59XG5cbi8qKlxuICogQHByaXZhdGVcbiAqIFdhbGsgdGhlIHJvdXRlIHRyZWUgYW5kIGFkZCBoYXNFcnJvckJvdW5kYXJ5IGlmIGl0J3Mgbm90IHByb3ZpZGVkLCBzbyB0aGF0XG4gKiB1c2VycyBwcm92aWRpbmcgbWFudWFsIHJvdXRlIGFycmF5cyBjYW4ganVzdCBzcGVjaWZ5IGVycm9yRWxlbWVudFxuICovXG5leHBvcnQgZnVuY3Rpb24gZW5oYW5jZU1hbnVhbFJvdXRlT2JqZWN0cyhcbiAgcm91dGVzOiBSb3V0ZU9iamVjdFtdXG4pOiBSb3V0ZU9iamVjdFtdIHtcbiAgcmV0dXJuIHJvdXRlcy5tYXAoKHJvdXRlKSA9PiB7XG4gICAgbGV0IHJvdXRlQ2xvbmUgPSB7IC4uLnJvdXRlIH07XG4gICAgaWYgKHJvdXRlQ2xvbmUuaGFzRXJyb3JCb3VuZGFyeSA9PSBudWxsKSB7XG4gICAgICByb3V0ZUNsb25lLmhhc0Vycm9yQm91bmRhcnkgPSByb3V0ZUNsb25lLmVycm9yRWxlbWVudCAhPSBudWxsO1xuICAgIH1cbiAgICBpZiAocm91dGVDbG9uZS5jaGlsZHJlbikge1xuICAgICAgcm91dGVDbG9uZS5jaGlsZHJlbiA9IGVuaGFuY2VNYW51YWxSb3V0ZU9iamVjdHMocm91dGVDbG9uZS5jaGlsZHJlbik7XG4gICAgfVxuICAgIHJldHVybiByb3V0ZUNsb25lO1xuICB9KTtcbn1cbiIsImltcG9ydCB0eXBlIHsgRm9ybUVuY1R5cGUsIEZvcm1NZXRob2QgfSBmcm9tIFwiQHJlbWl4LXJ1bi9yb3V0ZXJcIjtcbmltcG9ydCB0eXBlIHsgUmVsYXRpdmVSb3V0aW5nVHlwZSB9IGZyb20gXCJyZWFjdC1yb3V0ZXJcIjtcblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRNZXRob2QgPSBcImdldFwiO1xuY29uc3QgZGVmYXVsdEVuY1R5cGUgPSBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiO1xuXG5leHBvcnQgZnVuY3Rpb24gaXNIdG1sRWxlbWVudChvYmplY3Q6IGFueSk6IG9iamVjdCBpcyBIVE1MRWxlbWVudCB7XG4gIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiB0eXBlb2Ygb2JqZWN0LnRhZ05hbWUgPT09IFwic3RyaW5nXCI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0J1dHRvbkVsZW1lbnQob2JqZWN0OiBhbnkpOiBvYmplY3QgaXMgSFRNTEJ1dHRvbkVsZW1lbnQge1xuICByZXR1cm4gaXNIdG1sRWxlbWVudChvYmplY3QpICYmIG9iamVjdC50YWdOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiYnV0dG9uXCI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0Zvcm1FbGVtZW50KG9iamVjdDogYW55KTogb2JqZWN0IGlzIEhUTUxGb3JtRWxlbWVudCB7XG4gIHJldHVybiBpc0h0bWxFbGVtZW50KG9iamVjdCkgJiYgb2JqZWN0LnRhZ05hbWUudG9Mb3dlckNhc2UoKSA9PT0gXCJmb3JtXCI7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0lucHV0RWxlbWVudChvYmplY3Q6IGFueSk6IG9iamVjdCBpcyBIVE1MSW5wdXRFbGVtZW50IHtcbiAgcmV0dXJuIGlzSHRtbEVsZW1lbnQob2JqZWN0KSAmJiBvYmplY3QudGFnTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCI7XG59XG5cbnR5cGUgTGltaXRlZE1vdXNlRXZlbnQgPSBQaWNrPFxuICBNb3VzZUV2ZW50LFxuICBcImJ1dHRvblwiIHwgXCJtZXRhS2V5XCIgfCBcImFsdEtleVwiIHwgXCJjdHJsS2V5XCIgfCBcInNoaWZ0S2V5XCJcbj47XG5cbmZ1bmN0aW9uIGlzTW9kaWZpZWRFdmVudChldmVudDogTGltaXRlZE1vdXNlRXZlbnQpIHtcbiAgcmV0dXJuICEhKGV2ZW50Lm1ldGFLZXkgfHwgZXZlbnQuYWx0S2V5IHx8IGV2ZW50LmN0cmxLZXkgfHwgZXZlbnQuc2hpZnRLZXkpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2hvdWxkUHJvY2Vzc0xpbmtDbGljayhcbiAgZXZlbnQ6IExpbWl0ZWRNb3VzZUV2ZW50LFxuICB0YXJnZXQ/OiBzdHJpbmdcbikge1xuICByZXR1cm4gKFxuICAgIGV2ZW50LmJ1dHRvbiA9PT0gMCAmJiAvLyBJZ25vcmUgZXZlcnl0aGluZyBidXQgbGVmdCBjbGlja3NcbiAgICAoIXRhcmdldCB8fCB0YXJnZXQgPT09IFwiX3NlbGZcIikgJiYgLy8gTGV0IGJyb3dzZXIgaGFuZGxlIFwidGFyZ2V0PV9ibGFua1wiIGV0Yy5cbiAgICAhaXNNb2RpZmllZEV2ZW50KGV2ZW50KSAvLyBJZ25vcmUgY2xpY2tzIHdpdGggbW9kaWZpZXIga2V5c1xuICApO1xufVxuXG5leHBvcnQgdHlwZSBQYXJhbUtleVZhbHVlUGFpciA9IFtzdHJpbmcsIHN0cmluZ107XG5cbmV4cG9ydCB0eXBlIFVSTFNlYXJjaFBhcmFtc0luaXQgPVxuICB8IHN0cmluZ1xuICB8IFBhcmFtS2V5VmFsdWVQYWlyW11cbiAgfCBSZWNvcmQ8c3RyaW5nLCBzdHJpbmcgfCBzdHJpbmdbXT5cbiAgfCBVUkxTZWFyY2hQYXJhbXM7XG5cbi8qKlxuICogQ3JlYXRlcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3QgdXNpbmcgdGhlIGdpdmVuIGluaXRpYWxpemVyLlxuICpcbiAqIFRoaXMgaXMgaWRlbnRpY2FsIHRvIGBuZXcgVVJMU2VhcmNoUGFyYW1zKGluaXQpYCBleGNlcHQgaXQgYWxzb1xuICogc3VwcG9ydHMgYXJyYXlzIGFzIHZhbHVlcyBpbiB0aGUgb2JqZWN0IGZvcm0gb2YgdGhlIGluaXRpYWxpemVyXG4gKiBpbnN0ZWFkIG9mIGp1c3Qgc3RyaW5ncy4gVGhpcyBpcyBjb252ZW5pZW50IHdoZW4geW91IG5lZWQgbXVsdGlwbGVcbiAqIHZhbHVlcyBmb3IgYSBnaXZlbiBrZXksIGJ1dCBkb24ndCB3YW50IHRvIHVzZSBhbiBhcnJheSBpbml0aWFsaXplci5cbiAqXG4gKiBGb3IgZXhhbXBsZSwgaW5zdGVhZCBvZjpcbiAqXG4gKiAgIGxldCBzZWFyY2hQYXJhbXMgPSBuZXcgVVJMU2VhcmNoUGFyYW1zKFtcbiAqICAgICBbJ3NvcnQnLCAnbmFtZSddLFxuICogICAgIFsnc29ydCcsICdwcmljZSddXG4gKiAgIF0pO1xuICpcbiAqIHlvdSBjYW4gZG86XG4gKlxuICogICBsZXQgc2VhcmNoUGFyYW1zID0gY3JlYXRlU2VhcmNoUGFyYW1zKHtcbiAqICAgICBzb3J0OiBbJ25hbWUnLCAncHJpY2UnXVxuICogICB9KTtcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVNlYXJjaFBhcmFtcyhcbiAgaW5pdDogVVJMU2VhcmNoUGFyYW1zSW5pdCA9IFwiXCJcbik6IFVSTFNlYXJjaFBhcmFtcyB7XG4gIHJldHVybiBuZXcgVVJMU2VhcmNoUGFyYW1zKFxuICAgIHR5cGVvZiBpbml0ID09PSBcInN0cmluZ1wiIHx8XG4gICAgQXJyYXkuaXNBcnJheShpbml0KSB8fFxuICAgIGluaXQgaW5zdGFuY2VvZiBVUkxTZWFyY2hQYXJhbXNcbiAgICAgID8gaW5pdFxuICAgICAgOiBPYmplY3Qua2V5cyhpbml0KS5yZWR1Y2UoKG1lbW8sIGtleSkgPT4ge1xuICAgICAgICAgIGxldCB2YWx1ZSA9IGluaXRba2V5XTtcbiAgICAgICAgICByZXR1cm4gbWVtby5jb25jYXQoXG4gICAgICAgICAgICBBcnJheS5pc0FycmF5KHZhbHVlKSA/IHZhbHVlLm1hcCgodikgPT4gW2tleSwgdl0pIDogW1trZXksIHZhbHVlXV1cbiAgICAgICAgICApO1xuICAgICAgICB9LCBbXSBhcyBQYXJhbUtleVZhbHVlUGFpcltdKVxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U2VhcmNoUGFyYW1zRm9yTG9jYXRpb24oXG4gIGxvY2F0aW9uU2VhcmNoOiBzdHJpbmcsXG4gIGRlZmF1bHRTZWFyY2hQYXJhbXM6IFVSTFNlYXJjaFBhcmFtcyB8IG51bGxcbikge1xuICBsZXQgc2VhcmNoUGFyYW1zID0gY3JlYXRlU2VhcmNoUGFyYW1zKGxvY2F0aW9uU2VhcmNoKTtcblxuICBpZiAoZGVmYXVsdFNlYXJjaFBhcmFtcykge1xuICAgIGZvciAobGV0IGtleSBvZiBkZWZhdWx0U2VhcmNoUGFyYW1zLmtleXMoKSkge1xuICAgICAgaWYgKCFzZWFyY2hQYXJhbXMuaGFzKGtleSkpIHtcbiAgICAgICAgZGVmYXVsdFNlYXJjaFBhcmFtcy5nZXRBbGwoa2V5KS5mb3JFYWNoKCh2YWx1ZSkgPT4ge1xuICAgICAgICAgIHNlYXJjaFBhcmFtcy5hcHBlbmQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzZWFyY2hQYXJhbXM7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgU3VibWl0T3B0aW9ucyB7XG4gIC8qKlxuICAgKiBUaGUgSFRUUCBtZXRob2QgdXNlZCB0byBzdWJtaXQgdGhlIGZvcm0uIE92ZXJyaWRlcyBgPGZvcm0gbWV0aG9kPmAuXG4gICAqIERlZmF1bHRzIHRvIFwiR0VUXCIuXG4gICAqL1xuICBtZXRob2Q/OiBGb3JtTWV0aG9kO1xuXG4gIC8qKlxuICAgKiBUaGUgYWN0aW9uIFVSTCBwYXRoIHVzZWQgdG8gc3VibWl0IHRoZSBmb3JtLiBPdmVycmlkZXMgYDxmb3JtIGFjdGlvbj5gLlxuICAgKiBEZWZhdWx0cyB0byB0aGUgcGF0aCBvZiB0aGUgY3VycmVudCByb3V0ZS5cbiAgICpcbiAgICogTm90ZTogSXQgaXMgYXNzdW1lZCB0aGUgcGF0aCBpcyBhbHJlYWR5IHJlc29sdmVkLiBJZiB5b3UgbmVlZCB0byByZXNvbHZlIGFcbiAgICogcmVsYXRpdmUgcGF0aCwgdXNlIGB1c2VGb3JtQWN0aW9uYC5cbiAgICovXG4gIGFjdGlvbj86IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGFjdGlvbiBVUkwgdXNlZCB0byBzdWJtaXQgdGhlIGZvcm0uIE92ZXJyaWRlcyBgPGZvcm0gZW5jVHlwZT5gLlxuICAgKiBEZWZhdWx0cyB0byBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZFwiLlxuICAgKi9cbiAgZW5jVHlwZT86IEZvcm1FbmNUeXBlO1xuXG4gIC8qKlxuICAgKiBTZXQgYHRydWVgIHRvIHJlcGxhY2UgdGhlIGN1cnJlbnQgZW50cnkgaW4gdGhlIGJyb3dzZXIncyBoaXN0b3J5IHN0YWNrXG4gICAqIGluc3RlYWQgb2YgY3JlYXRpbmcgYSBuZXcgb25lIChpLmUuIHN0YXkgb24gXCJ0aGUgc2FtZSBwYWdlXCIpLiBEZWZhdWx0c1xuICAgKiB0byBgZmFsc2VgLlxuICAgKi9cbiAgcmVwbGFjZT86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgd2hldGhlciB0aGUgZm9ybSBhY3Rpb24gaXMgcmVsYXRpdmUgdG8gdGhlIHJvdXRlIGhpZXJhcmNoeSBvclxuICAgKiB0aGUgcGF0aG5hbWUuICBVc2UgdGhpcyBpZiB5b3Ugd2FudCB0byBvcHQgb3V0IG9mIG5hdmlnYXRpbmcgdGhlIHJvdXRlXG4gICAqIGhpZXJhcmNoeSBhbmQgd2FudCB0byBpbnN0ZWFkIHJvdXRlIGJhc2VkIG9uIC8tZGVsaW1pdGVkIFVSTCBzZWdtZW50c1xuICAgKi9cbiAgcmVsYXRpdmU/OiBSZWxhdGl2ZVJvdXRpbmdUeXBlO1xuXG4gIC8qKlxuICAgKiBJbiBicm93c2VyLWJhc2VkIGVudmlyb25tZW50cywgcHJldmVudCByZXNldHRpbmcgc2Nyb2xsIGFmdGVyIHRoaXNcbiAgICogbmF2aWdhdGlvbiB3aGVuIHVzaW5nIHRoZSA8U2Nyb2xsUmVzdG9yYXRpb24+IGNvbXBvbmVudFxuICAgKi9cbiAgcHJldmVudFNjcm9sbFJlc2V0PzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEZvcm1TdWJtaXNzaW9uSW5mbyhcbiAgdGFyZ2V0OlxuICAgIHwgSFRNTEZvcm1FbGVtZW50XG4gICAgfCBIVE1MQnV0dG9uRWxlbWVudFxuICAgIHwgSFRNTElucHV0RWxlbWVudFxuICAgIHwgRm9ybURhdGFcbiAgICB8IFVSTFNlYXJjaFBhcmFtc1xuICAgIHwgeyBbbmFtZTogc3RyaW5nXTogc3RyaW5nIH1cbiAgICB8IG51bGwsXG4gIGRlZmF1bHRBY3Rpb246IHN0cmluZyxcbiAgb3B0aW9uczogU3VibWl0T3B0aW9uc1xuKToge1xuICB1cmw6IFVSTDtcbiAgbWV0aG9kOiBzdHJpbmc7XG4gIGVuY1R5cGU6IHN0cmluZztcbiAgZm9ybURhdGE6IEZvcm1EYXRhO1xufSB7XG4gIGxldCBtZXRob2Q6IHN0cmluZztcbiAgbGV0IGFjdGlvbjogc3RyaW5nO1xuICBsZXQgZW5jVHlwZTogc3RyaW5nO1xuICBsZXQgZm9ybURhdGE6IEZvcm1EYXRhO1xuXG4gIGlmIChpc0Zvcm1FbGVtZW50KHRhcmdldCkpIHtcbiAgICBsZXQgc3VibWlzc2lvblRyaWdnZXI6IEhUTUxCdXR0b25FbGVtZW50IHwgSFRNTElucHV0RWxlbWVudCA9IChcbiAgICAgIG9wdGlvbnMgYXMgYW55XG4gICAgKS5zdWJtaXNzaW9uVHJpZ2dlcjtcblxuICAgIG1ldGhvZCA9IG9wdGlvbnMubWV0aG9kIHx8IHRhcmdldC5nZXRBdHRyaWJ1dGUoXCJtZXRob2RcIikgfHwgZGVmYXVsdE1ldGhvZDtcbiAgICBhY3Rpb24gPSBvcHRpb25zLmFjdGlvbiB8fCB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiYWN0aW9uXCIpIHx8IGRlZmF1bHRBY3Rpb247XG4gICAgZW5jVHlwZSA9XG4gICAgICBvcHRpb25zLmVuY1R5cGUgfHwgdGFyZ2V0LmdldEF0dHJpYnV0ZShcImVuY3R5cGVcIikgfHwgZGVmYXVsdEVuY1R5cGU7XG5cbiAgICBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSh0YXJnZXQpO1xuXG4gICAgaWYgKHN1Ym1pc3Npb25UcmlnZ2VyICYmIHN1Ym1pc3Npb25UcmlnZ2VyLm5hbWUpIHtcbiAgICAgIGZvcm1EYXRhLmFwcGVuZChzdWJtaXNzaW9uVHJpZ2dlci5uYW1lLCBzdWJtaXNzaW9uVHJpZ2dlci52YWx1ZSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKFxuICAgIGlzQnV0dG9uRWxlbWVudCh0YXJnZXQpIHx8XG4gICAgKGlzSW5wdXRFbGVtZW50KHRhcmdldCkgJiZcbiAgICAgICh0YXJnZXQudHlwZSA9PT0gXCJzdWJtaXRcIiB8fCB0YXJnZXQudHlwZSA9PT0gXCJpbWFnZVwiKSlcbiAgKSB7XG4gICAgbGV0IGZvcm0gPSB0YXJnZXQuZm9ybTtcblxuICAgIGlmIChmb3JtID09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYENhbm5vdCBzdWJtaXQgYSA8YnV0dG9uPiBvciA8aW5wdXQgdHlwZT1cInN1Ym1pdFwiPiB3aXRob3V0IGEgPGZvcm0+YFxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyA8YnV0dG9uPi88aW5wdXQgdHlwZT1cInN1Ym1pdFwiPiBtYXkgb3ZlcnJpZGUgYXR0cmlidXRlcyBvZiA8Zm9ybT5cblxuICAgIG1ldGhvZCA9XG4gICAgICBvcHRpb25zLm1ldGhvZCB8fFxuICAgICAgdGFyZ2V0LmdldEF0dHJpYnV0ZShcImZvcm1tZXRob2RcIikgfHxcbiAgICAgIGZvcm0uZ2V0QXR0cmlidXRlKFwibWV0aG9kXCIpIHx8XG4gICAgICBkZWZhdWx0TWV0aG9kO1xuICAgIGFjdGlvbiA9XG4gICAgICBvcHRpb25zLmFjdGlvbiB8fFxuICAgICAgdGFyZ2V0LmdldEF0dHJpYnV0ZShcImZvcm1hY3Rpb25cIikgfHxcbiAgICAgIGZvcm0uZ2V0QXR0cmlidXRlKFwiYWN0aW9uXCIpIHx8XG4gICAgICBkZWZhdWx0QWN0aW9uO1xuICAgIGVuY1R5cGUgPVxuICAgICAgb3B0aW9ucy5lbmNUeXBlIHx8XG4gICAgICB0YXJnZXQuZ2V0QXR0cmlidXRlKFwiZm9ybWVuY3R5cGVcIikgfHxcbiAgICAgIGZvcm0uZ2V0QXR0cmlidXRlKFwiZW5jdHlwZVwiKSB8fFxuICAgICAgZGVmYXVsdEVuY1R5cGU7XG5cbiAgICBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YShmb3JtKTtcblxuICAgIC8vIEluY2x1ZGUgbmFtZSArIHZhbHVlIGZyb20gYSA8YnV0dG9uPiwgYXBwZW5kaW5nIGluIGNhc2UgdGhlIGJ1dHRvbiBuYW1lXG4gICAgLy8gbWF0Y2hlcyBhbiBleGlzdGluZyBpbnB1dCBuYW1lXG4gICAgaWYgKHRhcmdldC5uYW1lKSB7XG4gICAgICBmb3JtRGF0YS5hcHBlbmQodGFyZ2V0Lm5hbWUsIHRhcmdldC52YWx1ZSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzSHRtbEVsZW1lbnQodGFyZ2V0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBDYW5ub3Qgc3VibWl0IGVsZW1lbnQgdGhhdCBpcyBub3QgPGZvcm0+LCA8YnV0dG9uPiwgb3IgYCArXG4gICAgICAgIGA8aW5wdXQgdHlwZT1cInN1Ym1pdHxpbWFnZVwiPmBcbiAgICApO1xuICB9IGVsc2Uge1xuICAgIG1ldGhvZCA9IG9wdGlvbnMubWV0aG9kIHx8IGRlZmF1bHRNZXRob2Q7XG4gICAgYWN0aW9uID0gb3B0aW9ucy5hY3Rpb24gfHwgZGVmYXVsdEFjdGlvbjtcbiAgICBlbmNUeXBlID0gb3B0aW9ucy5lbmNUeXBlIHx8IGRlZmF1bHRFbmNUeXBlO1xuXG4gICAgaWYgKHRhcmdldCBpbnN0YW5jZW9mIEZvcm1EYXRhKSB7XG4gICAgICBmb3JtRGF0YSA9IHRhcmdldDtcbiAgICB9IGVsc2Uge1xuICAgICAgZm9ybURhdGEgPSBuZXcgRm9ybURhdGEoKTtcblxuICAgICAgaWYgKHRhcmdldCBpbnN0YW5jZW9mIFVSTFNlYXJjaFBhcmFtcykge1xuICAgICAgICBmb3IgKGxldCBbbmFtZSwgdmFsdWVdIG9mIHRhcmdldCkge1xuICAgICAgICAgIGZvcm1EYXRhLmFwcGVuZChuYW1lLCB2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodGFyZ2V0ICE9IG51bGwpIHtcbiAgICAgICAgZm9yIChsZXQgbmFtZSBvZiBPYmplY3Qua2V5cyh0YXJnZXQpKSB7XG4gICAgICAgICAgZm9ybURhdGEuYXBwZW5kKG5hbWUsIHRhcmdldFtuYW1lXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBsZXQgeyBwcm90b2NvbCwgaG9zdCB9ID0gd2luZG93LmxvY2F0aW9uO1xuICBsZXQgdXJsID0gbmV3IFVSTChhY3Rpb24sIGAke3Byb3RvY29sfS8vJHtob3N0fWApO1xuXG4gIHJldHVybiB7IHVybCwgbWV0aG9kOiBtZXRob2QudG9Mb3dlckNhc2UoKSwgZW5jVHlwZSwgZm9ybURhdGEgfTtcbn1cbiIsIi8qKlxuICogTk9URTogSWYgeW91IHJlZmFjdG9yIHRoaXMgdG8gc3BsaXQgdXAgdGhlIG1vZHVsZXMgaW50byBzZXBhcmF0ZSBmaWxlcyxcbiAqIHlvdSdsbCBuZWVkIHRvIHVwZGF0ZSB0aGUgcm9sbHVwIGNvbmZpZyBmb3IgcmVhY3Qtcm91dGVyLWRvbS12NS1jb21wYXQuXG4gKi9cbmltcG9ydCAqIGFzIFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHR5cGUge1xuICBOYXZpZ2F0ZU9wdGlvbnMsXG4gIFJlbGF0aXZlUm91dGluZ1R5cGUsXG4gIFJvdXRlT2JqZWN0LFxuICBUbyxcbn0gZnJvbSBcInJlYWN0LXJvdXRlclwiO1xuaW1wb3J0IHtcbiAgUm91dGVyLFxuICBjcmVhdGVQYXRoLFxuICB1c2VIcmVmLFxuICB1c2VMb2NhdGlvbixcbiAgdXNlTWF0Y2hlcyxcbiAgdXNlTmF2aWdhdGUsXG4gIHVzZU5hdmlnYXRpb24sXG4gIHVzZVJlc29sdmVkUGF0aCxcbiAgdW5zdGFibGVfdXNlQmxvY2tlciBhcyB1c2VCbG9ja2VyLFxuICBVTlNBRkVfRGF0YVJvdXRlckNvbnRleHQgYXMgRGF0YVJvdXRlckNvbnRleHQsXG4gIFVOU0FGRV9EYXRhUm91dGVyU3RhdGVDb250ZXh0IGFzIERhdGFSb3V0ZXJTdGF0ZUNvbnRleHQsXG4gIFVOU0FGRV9OYXZpZ2F0aW9uQ29udGV4dCBhcyBOYXZpZ2F0aW9uQ29udGV4dCxcbiAgVU5TQUZFX1JvdXRlQ29udGV4dCBhcyBSb3V0ZUNvbnRleHQsXG4gIFVOU0FGRV9lbmhhbmNlTWFudWFsUm91dGVPYmplY3RzIGFzIGVuaGFuY2VNYW51YWxSb3V0ZU9iamVjdHMsXG59IGZyb20gXCJyZWFjdC1yb3V0ZXJcIjtcbmltcG9ydCB0eXBlIHtcbiAgQnJvd3Nlckhpc3RvcnksXG4gIEZldGNoZXIsXG4gIEZvcm1FbmNUeXBlLFxuICBGb3JtTWV0aG9kLFxuICBHZXRTY3JvbGxSZXN0b3JhdGlvbktleUZ1bmN0aW9uLFxuICBIYXNoSGlzdG9yeSxcbiAgSGlzdG9yeSxcbiAgSHlkcmF0aW9uU3RhdGUsXG4gIFJvdXRlciBhcyBSZW1peFJvdXRlcixcbn0gZnJvbSBcIkByZW1peC1ydW4vcm91dGVyXCI7XG5pbXBvcnQge1xuICBjcmVhdGVSb3V0ZXIsXG4gIGNyZWF0ZUJyb3dzZXJIaXN0b3J5LFxuICBjcmVhdGVIYXNoSGlzdG9yeSxcbiAgaW52YXJpYW50LFxuICBqb2luUGF0aHMsXG4gIEVycm9yUmVzcG9uc2UsXG59IGZyb20gXCJAcmVtaXgtcnVuL3JvdXRlclwiO1xuXG5pbXBvcnQgdHlwZSB7XG4gIFN1Ym1pdE9wdGlvbnMsXG4gIFBhcmFtS2V5VmFsdWVQYWlyLFxuICBVUkxTZWFyY2hQYXJhbXNJbml0LFxufSBmcm9tIFwiLi9kb21cIjtcbmltcG9ydCB7XG4gIGNyZWF0ZVNlYXJjaFBhcmFtcyxcbiAgZGVmYXVsdE1ldGhvZCxcbiAgZ2V0Rm9ybVN1Ym1pc3Npb25JbmZvLFxuICBnZXRTZWFyY2hQYXJhbXNGb3JMb2NhdGlvbixcbiAgc2hvdWxkUHJvY2Vzc0xpbmtDbGljayxcbn0gZnJvbSBcIi4vZG9tXCI7XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyNyZWdpb24gUmUtZXhwb3J0c1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuZXhwb3J0IHR5cGUge1xuICBGb3JtRW5jVHlwZSxcbiAgRm9ybU1ldGhvZCxcbiAgR2V0U2Nyb2xsUmVzdG9yYXRpb25LZXlGdW5jdGlvbixcbiAgUGFyYW1LZXlWYWx1ZVBhaXIsXG4gIFN1Ym1pdE9wdGlvbnMsXG4gIFVSTFNlYXJjaFBhcmFtc0luaXQsXG59O1xuZXhwb3J0IHsgY3JlYXRlU2VhcmNoUGFyYW1zIH07XG5cbi8vIE5vdGU6IEtlZXAgaW4gc3luYyB3aXRoIHJlYWN0LXJvdXRlciBleHBvcnRzIVxuZXhwb3J0IHR5cGUge1xuICBBY3Rpb25GdW5jdGlvbixcbiAgQWN0aW9uRnVuY3Rpb25BcmdzLFxuICBBd2FpdFByb3BzLFxuICB1bnN0YWJsZV9CbG9ja2VyLFxuICB1bnN0YWJsZV9CbG9ja2VyRnVuY3Rpb24sXG4gIERhdGFSb3V0ZU1hdGNoLFxuICBEYXRhUm91dGVPYmplY3QsXG4gIEZldGNoZXIsXG4gIEhhc2gsXG4gIEluZGV4Um91dGVPYmplY3QsXG4gIEluZGV4Um91dGVQcm9wcyxcbiAgSnNvbkZ1bmN0aW9uLFxuICBMYXlvdXRSb3V0ZVByb3BzLFxuICBMb2FkZXJGdW5jdGlvbixcbiAgTG9hZGVyRnVuY3Rpb25BcmdzLFxuICBMb2NhdGlvbixcbiAgTWVtb3J5Um91dGVyUHJvcHMsXG4gIE5hdmlnYXRlRnVuY3Rpb24sXG4gIE5hdmlnYXRlT3B0aW9ucyxcbiAgTmF2aWdhdGVQcm9wcyxcbiAgTmF2aWdhdGlvbixcbiAgTmF2aWdhdG9yLFxuICBOb25JbmRleFJvdXRlT2JqZWN0LFxuICBPdXRsZXRQcm9wcyxcbiAgUGFyYW1zLFxuICBQYXJhbVBhcnNlS2V5LFxuICBQYXRoLFxuICBQYXRoTWF0Y2gsXG4gIFBhdGhuYW1lLFxuICBQYXRoUGF0dGVybixcbiAgUGF0aFJvdXRlUHJvcHMsXG4gIFJlZGlyZWN0RnVuY3Rpb24sXG4gIFJlbGF0aXZlUm91dGluZ1R5cGUsXG4gIFJvdXRlTWF0Y2gsXG4gIFJvdXRlT2JqZWN0LFxuICBSb3V0ZVByb3BzLFxuICBSb3V0ZXJQcm9wcyxcbiAgUm91dGVyUHJvdmlkZXJQcm9wcyxcbiAgUm91dGVzUHJvcHMsXG4gIFNlYXJjaCxcbiAgU2hvdWxkUmV2YWxpZGF0ZUZ1bmN0aW9uLFxuICBUbyxcbn0gZnJvbSBcInJlYWN0LXJvdXRlclwiO1xuZXhwb3J0IHtcbiAgQWJvcnRlZERlZmVycmVkRXJyb3IsXG4gIEF3YWl0LFxuICBNZW1vcnlSb3V0ZXIsXG4gIE5hdmlnYXRlLFxuICBOYXZpZ2F0aW9uVHlwZSxcbiAgT3V0bGV0LFxuICBSb3V0ZSxcbiAgUm91dGVyLFxuICBSb3V0ZXJQcm92aWRlcixcbiAgUm91dGVzLFxuICBjcmVhdGVNZW1vcnlSb3V0ZXIsXG4gIGNyZWF0ZVBhdGgsXG4gIGNyZWF0ZVJvdXRlc0Zyb21DaGlsZHJlbixcbiAgY3JlYXRlUm91dGVzRnJvbUVsZW1lbnRzLFxuICBkZWZlcixcbiAgaXNSb3V0ZUVycm9yUmVzcG9uc2UsXG4gIGdlbmVyYXRlUGF0aCxcbiAganNvbixcbiAgbWF0Y2hQYXRoLFxuICBtYXRjaFJvdXRlcyxcbiAgcGFyc2VQYXRoLFxuICByZWRpcmVjdCxcbiAgcmVuZGVyTWF0Y2hlcyxcbiAgcmVzb2x2ZVBhdGgsXG4gIHVzZUFjdGlvbkRhdGEsXG4gIHVzZUFzeW5jRXJyb3IsXG4gIHVzZUFzeW5jVmFsdWUsXG4gIHVuc3RhYmxlX3VzZUJsb2NrZXIsXG4gIHVzZUhyZWYsXG4gIHVzZUluUm91dGVyQ29udGV4dCxcbiAgdXNlTG9hZGVyRGF0YSxcbiAgdXNlTG9jYXRpb24sXG4gIHVzZU1hdGNoLFxuICB1c2VNYXRjaGVzLFxuICB1c2VOYXZpZ2F0ZSxcbiAgdXNlTmF2aWdhdGlvbixcbiAgdXNlTmF2aWdhdGlvblR5cGUsXG4gIHVzZU91dGxldCxcbiAgdXNlT3V0bGV0Q29udGV4dCxcbiAgdXNlUGFyYW1zLFxuICB1c2VSZXNvbHZlZFBhdGgsXG4gIHVzZVJldmFsaWRhdG9yLFxuICB1c2VSb3V0ZUVycm9yLFxuICB1c2VSb3V0ZUxvYWRlckRhdGEsXG4gIHVzZVJvdXRlcyxcbn0gZnJvbSBcInJlYWN0LXJvdXRlclwiO1xuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBEQU5HRVIhIFBMRUFTRSBSRUFEIE1FIVxuLy8gV2UgcHJvdmlkZSB0aGVzZSBleHBvcnRzIGFzIGFuIGVzY2FwZSBoYXRjaCBpbiB0aGUgZXZlbnQgdGhhdCB5b3UgbmVlZCBhbnlcbi8vIHJvdXRpbmcgZGF0YSB0aGF0IHdlIGRvbid0IHByb3ZpZGUgYW4gZXhwbGljaXQgQVBJIGZvci4gV2l0aCB0aGF0IHNhaWQsIHdlXG4vLyB3YW50IHRvIGNvdmVyIHlvdXIgdXNlIGNhc2UgaWYgd2UgY2FuLCBzbyBpZiB5b3UgZmVlbCB0aGUgbmVlZCB0byB1c2UgdGhlc2Vcbi8vIHdlIHdhbnQgdG8gaGVhciBmcm9tIHlvdS4gTGV0IHVzIGtub3cgd2hhdCB5b3UncmUgYnVpbGRpbmcgYW5kIHdlJ2xsIGRvIG91clxuLy8gYmVzdCB0byBtYWtlIHN1cmUgd2UgY2FuIHN1cHBvcnQgeW91IVxuLy9cbi8vIFdlIGNvbnNpZGVyIHRoZXNlIGV4cG9ydHMgYW4gaW1wbGVtZW50YXRpb24gZGV0YWlsIGFuZCBkbyBub3QgZ3VhcmFudGVlXG4vLyBhZ2FpbnN0IGFueSBicmVha2luZyBjaGFuZ2VzLCByZWdhcmRsZXNzIG9mIHRoZSBzZW12ZXIgcmVsZWFzZS4gVXNlIHdpdGhcbi8vIGV4dHJlbWUgY2F1dGlvbiBhbmQgb25seSBpZiB5b3UgdW5kZXJzdGFuZCB0aGUgY29uc2VxdWVuY2VzLiBHb2RzcGVlZC5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IHtcbiAgVU5TQUZFX0RhdGFSb3V0ZXJDb250ZXh0LFxuICBVTlNBRkVfRGF0YVJvdXRlclN0YXRlQ29udGV4dCxcbiAgVU5TQUZFX05hdmlnYXRpb25Db250ZXh0LFxuICBVTlNBRkVfTG9jYXRpb25Db250ZXh0LFxuICBVTlNBRkVfUm91dGVDb250ZXh0LFxuICBVTlNBRkVfZW5oYW5jZU1hbnVhbFJvdXRlT2JqZWN0cyxcbn0gZnJvbSBcInJlYWN0LXJvdXRlclwiO1xuLy8jZW5kcmVnaW9uXG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgdmFyIF9fc3RhdGljUm91dGVySHlkcmF0aW9uRGF0YTogSHlkcmF0aW9uU3RhdGUgfCB1bmRlZmluZWQ7XG59XG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyNyZWdpb24gUm91dGVyc1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJSb3V0ZXIoXG4gIHJvdXRlczogUm91dGVPYmplY3RbXSxcbiAgb3B0cz86IHtcbiAgICBiYXNlbmFtZT86IHN0cmluZztcbiAgICBoeWRyYXRpb25EYXRhPzogSHlkcmF0aW9uU3RhdGU7XG4gICAgd2luZG93PzogV2luZG93O1xuICB9XG4pOiBSZW1peFJvdXRlciB7XG4gIHJldHVybiBjcmVhdGVSb3V0ZXIoe1xuICAgIGJhc2VuYW1lOiBvcHRzPy5iYXNlbmFtZSxcbiAgICBoaXN0b3J5OiBjcmVhdGVCcm93c2VySGlzdG9yeSh7IHdpbmRvdzogb3B0cz8ud2luZG93IH0pLFxuICAgIGh5ZHJhdGlvbkRhdGE6IG9wdHM/Lmh5ZHJhdGlvbkRhdGEgfHwgcGFyc2VIeWRyYXRpb25EYXRhKCksXG4gICAgcm91dGVzOiBlbmhhbmNlTWFudWFsUm91dGVPYmplY3RzKHJvdXRlcyksXG4gIH0pLmluaXRpYWxpemUoKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUhhc2hSb3V0ZXIoXG4gIHJvdXRlczogUm91dGVPYmplY3RbXSxcbiAgb3B0cz86IHtcbiAgICBiYXNlbmFtZT86IHN0cmluZztcbiAgICBoeWRyYXRpb25EYXRhPzogSHlkcmF0aW9uU3RhdGU7XG4gICAgd2luZG93PzogV2luZG93O1xuICB9XG4pOiBSZW1peFJvdXRlciB7XG4gIHJldHVybiBjcmVhdGVSb3V0ZXIoe1xuICAgIGJhc2VuYW1lOiBvcHRzPy5iYXNlbmFtZSxcbiAgICBoaXN0b3J5OiBjcmVhdGVIYXNoSGlzdG9yeSh7IHdpbmRvdzogb3B0cz8ud2luZG93IH0pLFxuICAgIGh5ZHJhdGlvbkRhdGE6IG9wdHM/Lmh5ZHJhdGlvbkRhdGEgfHwgcGFyc2VIeWRyYXRpb25EYXRhKCksXG4gICAgcm91dGVzOiBlbmhhbmNlTWFudWFsUm91dGVPYmplY3RzKHJvdXRlcyksXG4gIH0pLmluaXRpYWxpemUoKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VIeWRyYXRpb25EYXRhKCk6IEh5ZHJhdGlvblN0YXRlIHwgdW5kZWZpbmVkIHtcbiAgbGV0IHN0YXRlID0gd2luZG93Py5fX3N0YXRpY1JvdXRlckh5ZHJhdGlvbkRhdGE7XG4gIGlmIChzdGF0ZSAmJiBzdGF0ZS5lcnJvcnMpIHtcbiAgICBzdGF0ZSA9IHtcbiAgICAgIC4uLnN0YXRlLFxuICAgICAgZXJyb3JzOiBkZXNlcmlhbGl6ZUVycm9ycyhzdGF0ZS5lcnJvcnMpLFxuICAgIH07XG4gIH1cbiAgcmV0dXJuIHN0YXRlO1xufVxuXG5mdW5jdGlvbiBkZXNlcmlhbGl6ZUVycm9ycyhcbiAgZXJyb3JzOiBSZW1peFJvdXRlcltcInN0YXRlXCJdW1wiZXJyb3JzXCJdXG4pOiBSZW1peFJvdXRlcltcInN0YXRlXCJdW1wiZXJyb3JzXCJdIHtcbiAgaWYgKCFlcnJvcnMpIHJldHVybiBudWxsO1xuICBsZXQgZW50cmllcyA9IE9iamVjdC5lbnRyaWVzKGVycm9ycyk7XG4gIGxldCBzZXJpYWxpemVkOiBSZW1peFJvdXRlcltcInN0YXRlXCJdW1wiZXJyb3JzXCJdID0ge307XG4gIGZvciAobGV0IFtrZXksIHZhbF0gb2YgZW50cmllcykge1xuICAgIC8vIEhleSB5b3UhICBJZiB5b3UgY2hhbmdlIHRoaXMsIHBsZWFzZSBjaGFuZ2UgdGhlIGNvcnJlc3BvbmRpbmcgbG9naWMgaW5cbiAgICAvLyBzZXJpYWxpemVFcnJvcnMgaW4gcmVhY3Qtcm91dGVyLWRvbS9zZXJ2ZXIudHN4IDopXG4gICAgaWYgKHZhbCAmJiB2YWwuX190eXBlID09PSBcIlJvdXRlRXJyb3JSZXNwb25zZVwiKSB7XG4gICAgICBzZXJpYWxpemVkW2tleV0gPSBuZXcgRXJyb3JSZXNwb25zZShcbiAgICAgICAgdmFsLnN0YXR1cyxcbiAgICAgICAgdmFsLnN0YXR1c1RleHQsXG4gICAgICAgIHZhbC5kYXRhLFxuICAgICAgICB2YWwuaW50ZXJuYWwgPT09IHRydWVcbiAgICAgICk7XG4gICAgfSBlbHNlIGlmICh2YWwgJiYgdmFsLl9fdHlwZSA9PT0gXCJFcnJvclwiKSB7XG4gICAgICBsZXQgZXJyb3IgPSBuZXcgRXJyb3IodmFsLm1lc3NhZ2UpO1xuICAgICAgLy8gV2lwZSBhd2F5IHRoZSBjbGllbnQtc2lkZSBzdGFjayB0cmFjZS4gIE5vdGhpbmcgdG8gZmlsbCBpdCBpbiB3aXRoXG4gICAgICAvLyBiZWNhdXNlIHdlIGRvbid0IHNlcmlhbGl6ZSBTU1Igc3RhY2sgdHJhY2VzIGZvciBzZWN1cml0eSByZWFzb25zXG4gICAgICBlcnJvci5zdGFjayA9IFwiXCI7XG4gICAgICBzZXJpYWxpemVkW2tleV0gPSBlcnJvcjtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VyaWFsaXplZFtrZXldID0gdmFsO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc2VyaWFsaXplZDtcbn1cblxuLy8jZW5kcmVnaW9uXG5cbi8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyNyZWdpb24gQ29tcG9uZW50c1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuZXhwb3J0IGludGVyZmFjZSBCcm93c2VyUm91dGVyUHJvcHMge1xuICBiYXNlbmFtZT86IHN0cmluZztcbiAgY2hpbGRyZW4/OiBSZWFjdC5SZWFjdE5vZGU7XG4gIHdpbmRvdz86IFdpbmRvdztcbn1cblxuLyoqXG4gKiBBIGA8Um91dGVyPmAgZm9yIHVzZSBpbiB3ZWIgYnJvd3NlcnMuIFByb3ZpZGVzIHRoZSBjbGVhbmVzdCBVUkxzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gQnJvd3NlclJvdXRlcih7XG4gIGJhc2VuYW1lLFxuICBjaGlsZHJlbixcbiAgd2luZG93LFxufTogQnJvd3NlclJvdXRlclByb3BzKSB7XG4gIGxldCBoaXN0b3J5UmVmID0gUmVhY3QudXNlUmVmPEJyb3dzZXJIaXN0b3J5PigpO1xuICBpZiAoaGlzdG9yeVJlZi5jdXJyZW50ID09IG51bGwpIHtcbiAgICBoaXN0b3J5UmVmLmN1cnJlbnQgPSBjcmVhdGVCcm93c2VySGlzdG9yeSh7IHdpbmRvdywgdjVDb21wYXQ6IHRydWUgfSk7XG4gIH1cblxuICBsZXQgaGlzdG9yeSA9IGhpc3RvcnlSZWYuY3VycmVudDtcbiAgbGV0IFtzdGF0ZSwgc2V0U3RhdGVdID0gUmVhY3QudXNlU3RhdGUoe1xuICAgIGFjdGlvbjogaGlzdG9yeS5hY3Rpb24sXG4gICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb24sXG4gIH0pO1xuXG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiBoaXN0b3J5Lmxpc3RlbihzZXRTdGF0ZSksIFtoaXN0b3J5XSk7XG5cbiAgcmV0dXJuIChcbiAgICA8Um91dGVyXG4gICAgICBiYXNlbmFtZT17YmFzZW5hbWV9XG4gICAgICBjaGlsZHJlbj17Y2hpbGRyZW59XG4gICAgICBsb2NhdGlvbj17c3RhdGUubG9jYXRpb259XG4gICAgICBuYXZpZ2F0aW9uVHlwZT17c3RhdGUuYWN0aW9ufVxuICAgICAgbmF2aWdhdG9yPXtoaXN0b3J5fVxuICAgIC8+XG4gICk7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSGFzaFJvdXRlclByb3BzIHtcbiAgYmFzZW5hbWU/OiBzdHJpbmc7XG4gIGNoaWxkcmVuPzogUmVhY3QuUmVhY3ROb2RlO1xuICB3aW5kb3c/OiBXaW5kb3c7XG59XG5cbi8qKlxuICogQSBgPFJvdXRlcj5gIGZvciB1c2UgaW4gd2ViIGJyb3dzZXJzLiBTdG9yZXMgdGhlIGxvY2F0aW9uIGluIHRoZSBoYXNoXG4gKiBwb3J0aW9uIG9mIHRoZSBVUkwgc28gaXQgaXMgbm90IHNlbnQgdG8gdGhlIHNlcnZlci5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIEhhc2hSb3V0ZXIoeyBiYXNlbmFtZSwgY2hpbGRyZW4sIHdpbmRvdyB9OiBIYXNoUm91dGVyUHJvcHMpIHtcbiAgbGV0IGhpc3RvcnlSZWYgPSBSZWFjdC51c2VSZWY8SGFzaEhpc3Rvcnk+KCk7XG4gIGlmIChoaXN0b3J5UmVmLmN1cnJlbnQgPT0gbnVsbCkge1xuICAgIGhpc3RvcnlSZWYuY3VycmVudCA9IGNyZWF0ZUhhc2hIaXN0b3J5KHsgd2luZG93LCB2NUNvbXBhdDogdHJ1ZSB9KTtcbiAgfVxuXG4gIGxldCBoaXN0b3J5ID0gaGlzdG9yeVJlZi5jdXJyZW50O1xuICBsZXQgW3N0YXRlLCBzZXRTdGF0ZV0gPSBSZWFjdC51c2VTdGF0ZSh7XG4gICAgYWN0aW9uOiBoaXN0b3J5LmFjdGlvbixcbiAgICBsb2NhdGlvbjogaGlzdG9yeS5sb2NhdGlvbixcbiAgfSk7XG5cbiAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IGhpc3RvcnkubGlzdGVuKHNldFN0YXRlKSwgW2hpc3RvcnldKTtcblxuICByZXR1cm4gKFxuICAgIDxSb3V0ZXJcbiAgICAgIGJhc2VuYW1lPXtiYXNlbmFtZX1cbiAgICAgIGNoaWxkcmVuPXtjaGlsZHJlbn1cbiAgICAgIGxvY2F0aW9uPXtzdGF0ZS5sb2NhdGlvbn1cbiAgICAgIG5hdmlnYXRpb25UeXBlPXtzdGF0ZS5hY3Rpb259XG4gICAgICBuYXZpZ2F0b3I9e2hpc3Rvcnl9XG4gICAgLz5cbiAgKTtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBIaXN0b3J5Um91dGVyUHJvcHMge1xuICBiYXNlbmFtZT86IHN0cmluZztcbiAgY2hpbGRyZW4/OiBSZWFjdC5SZWFjdE5vZGU7XG4gIGhpc3Rvcnk6IEhpc3Rvcnk7XG59XG5cbi8qKlxuICogQSBgPFJvdXRlcj5gIHRoYXQgYWNjZXB0cyBhIHByZS1pbnN0YW50aWF0ZWQgaGlzdG9yeSBvYmplY3QuIEl0J3MgaW1wb3J0YW50XG4gKiB0byBub3RlIHRoYXQgdXNpbmcgeW91ciBvd24gaGlzdG9yeSBvYmplY3QgaXMgaGlnaGx5IGRpc2NvdXJhZ2VkIGFuZCBtYXkgYWRkXG4gKiB0d28gdmVyc2lvbnMgb2YgdGhlIGhpc3RvcnkgbGlicmFyeSB0byB5b3VyIGJ1bmRsZXMgdW5sZXNzIHlvdSB1c2UgdGhlIHNhbWVcbiAqIHZlcnNpb24gb2YgdGhlIGhpc3RvcnkgbGlicmFyeSB0aGF0IFJlYWN0IFJvdXRlciB1c2VzIGludGVybmFsbHkuXG4gKi9cbmZ1bmN0aW9uIEhpc3RvcnlSb3V0ZXIoeyBiYXNlbmFtZSwgY2hpbGRyZW4sIGhpc3RvcnkgfTogSGlzdG9yeVJvdXRlclByb3BzKSB7XG4gIGNvbnN0IFtzdGF0ZSwgc2V0U3RhdGVdID0gUmVhY3QudXNlU3RhdGUoe1xuICAgIGFjdGlvbjogaGlzdG9yeS5hY3Rpb24sXG4gICAgbG9jYXRpb246IGhpc3RvcnkubG9jYXRpb24sXG4gIH0pO1xuXG4gIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiBoaXN0b3J5Lmxpc3RlbihzZXRTdGF0ZSksIFtoaXN0b3J5XSk7XG5cbiAgcmV0dXJuIChcbiAgICA8Um91dGVyXG4gICAgICBiYXNlbmFtZT17YmFzZW5hbWV9XG4gICAgICBjaGlsZHJlbj17Y2hpbGRyZW59XG4gICAgICBsb2NhdGlvbj17c3RhdGUubG9jYXRpb259XG4gICAgICBuYXZpZ2F0aW9uVHlwZT17c3RhdGUuYWN0aW9ufVxuICAgICAgbmF2aWdhdG9yPXtoaXN0b3J5fVxuICAgIC8+XG4gICk7XG59XG5cbmlmIChfX0RFVl9fKSB7XG4gIEhpc3RvcnlSb3V0ZXIuZGlzcGxheU5hbWUgPSBcInVuc3RhYmxlX0hpc3RvcnlSb3V0ZXJcIjtcbn1cblxuZXhwb3J0IHsgSGlzdG9yeVJvdXRlciBhcyB1bnN0YWJsZV9IaXN0b3J5Um91dGVyIH07XG5cbmV4cG9ydCBpbnRlcmZhY2UgTGlua1Byb3BzXG4gIGV4dGVuZHMgT21pdDxSZWFjdC5BbmNob3JIVE1MQXR0cmlidXRlczxIVE1MQW5jaG9yRWxlbWVudD4sIFwiaHJlZlwiPiB7XG4gIHJlbG9hZERvY3VtZW50PzogYm9vbGVhbjtcbiAgcmVwbGFjZT86IGJvb2xlYW47XG4gIHN0YXRlPzogYW55O1xuICBwcmV2ZW50U2Nyb2xsUmVzZXQ/OiBib29sZWFuO1xuICByZWxhdGl2ZT86IFJlbGF0aXZlUm91dGluZ1R5cGU7XG4gIHRvOiBUbztcbn1cblxuY29uc3QgaXNCcm93c2VyID1cbiAgdHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiICYmXG4gIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAhPT0gXCJ1bmRlZmluZWRcIjtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcmVuZGVyaW5nIGEgaGlzdG9yeS1hd2FyZSA8YT4uXG4gKi9cbmV4cG9ydCBjb25zdCBMaW5rID0gUmVhY3QuZm9yd2FyZFJlZjxIVE1MQW5jaG9yRWxlbWVudCwgTGlua1Byb3BzPihcbiAgZnVuY3Rpb24gTGlua1dpdGhSZWYoXG4gICAge1xuICAgICAgb25DbGljayxcbiAgICAgIHJlbGF0aXZlLFxuICAgICAgcmVsb2FkRG9jdW1lbnQsXG4gICAgICByZXBsYWNlLFxuICAgICAgc3RhdGUsXG4gICAgICB0YXJnZXQsXG4gICAgICB0byxcbiAgICAgIHByZXZlbnRTY3JvbGxSZXNldCxcbiAgICAgIC4uLnJlc3RcbiAgICB9LFxuICAgIHJlZlxuICApIHtcbiAgICAvLyBSZW5kZXJlZCBpbnRvIDxhIGhyZWY+IGZvciBhYnNvbHV0ZSBVUkxzXG4gICAgbGV0IGFic29sdXRlSHJlZjtcbiAgICBsZXQgaXNFeHRlcm5hbCA9IGZhbHNlO1xuXG4gICAgaWYgKFxuICAgICAgaXNCcm93c2VyICYmXG4gICAgICB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCIgJiZcbiAgICAgIC9eKD86W2Etel1bYS16MC05Ky4tXSo6fFxcL1xcLykvaS50ZXN0KHRvKVxuICAgICkge1xuICAgICAgYWJzb2x1dGVIcmVmID0gdG87XG4gICAgICBsZXQgY3VycmVudFVybCA9IG5ldyBVUkwod2luZG93LmxvY2F0aW9uLmhyZWYpO1xuICAgICAgbGV0IHRhcmdldFVybCA9IHRvLnN0YXJ0c1dpdGgoXCIvL1wiKVxuICAgICAgICA/IG5ldyBVUkwoY3VycmVudFVybC5wcm90b2NvbCArIHRvKVxuICAgICAgICA6IG5ldyBVUkwodG8pO1xuICAgICAgaWYgKHRhcmdldFVybC5vcmlnaW4gPT09IGN1cnJlbnRVcmwub3JpZ2luKSB7XG4gICAgICAgIC8vIFN0cmlwIHRoZSBwcm90b2NvbC9vcmlnaW4gZm9yIHNhbWUtb3JpZ2luIGFic29sdXRlIFVSTHNcbiAgICAgICAgdG8gPSB0YXJnZXRVcmwucGF0aG5hbWUgKyB0YXJnZXRVcmwuc2VhcmNoICsgdGFyZ2V0VXJsLmhhc2g7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpc0V4dGVybmFsID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZW5kZXJlZCBpbnRvIDxhIGhyZWY+IGZvciByZWxhdGl2ZSBVUkxzXG4gICAgbGV0IGhyZWYgPSB1c2VIcmVmKHRvLCB7IHJlbGF0aXZlIH0pO1xuXG4gICAgbGV0IGludGVybmFsT25DbGljayA9IHVzZUxpbmtDbGlja0hhbmRsZXIodG8sIHtcbiAgICAgIHJlcGxhY2UsXG4gICAgICBzdGF0ZSxcbiAgICAgIHRhcmdldCxcbiAgICAgIHByZXZlbnRTY3JvbGxSZXNldCxcbiAgICAgIHJlbGF0aXZlLFxuICAgIH0pO1xuICAgIGZ1bmN0aW9uIGhhbmRsZUNsaWNrKFxuICAgICAgZXZlbnQ6IFJlYWN0Lk1vdXNlRXZlbnQ8SFRNTEFuY2hvckVsZW1lbnQsIE1vdXNlRXZlbnQ+XG4gICAgKSB7XG4gICAgICBpZiAob25DbGljaykgb25DbGljayhldmVudCk7XG4gICAgICBpZiAoIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQpIHtcbiAgICAgICAgaW50ZXJuYWxPbkNsaWNrKGV2ZW50KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gKFxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzeC1hMTF5L2FuY2hvci1oYXMtY29udGVudFxuICAgICAgPGFcbiAgICAgICAgey4uLnJlc3R9XG4gICAgICAgIGhyZWY9e2Fic29sdXRlSHJlZiB8fCBocmVmfVxuICAgICAgICBvbkNsaWNrPXtpc0V4dGVybmFsIHx8IHJlbG9hZERvY3VtZW50ID8gb25DbGljayA6IGhhbmRsZUNsaWNrfVxuICAgICAgICByZWY9e3JlZn1cbiAgICAgICAgdGFyZ2V0PXt0YXJnZXR9XG4gICAgICAvPlxuICAgICk7XG4gIH1cbik7XG5cbmlmIChfX0RFVl9fKSB7XG4gIExpbmsuZGlzcGxheU5hbWUgPSBcIkxpbmtcIjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBOYXZMaW5rUHJvcHNcbiAgZXh0ZW5kcyBPbWl0PExpbmtQcm9wcywgXCJjbGFzc05hbWVcIiB8IFwic3R5bGVcIiB8IFwiY2hpbGRyZW5cIj4ge1xuICBjaGlsZHJlbj86XG4gICAgfCBSZWFjdC5SZWFjdE5vZGVcbiAgICB8ICgocHJvcHM6IHsgaXNBY3RpdmU6IGJvb2xlYW47IGlzUGVuZGluZzogYm9vbGVhbiB9KSA9PiBSZWFjdC5SZWFjdE5vZGUpO1xuICBjYXNlU2Vuc2l0aXZlPzogYm9vbGVhbjtcbiAgY2xhc3NOYW1lPzpcbiAgICB8IHN0cmluZ1xuICAgIHwgKChwcm9wczoge1xuICAgICAgICBpc0FjdGl2ZTogYm9vbGVhbjtcbiAgICAgICAgaXNQZW5kaW5nOiBib29sZWFuO1xuICAgICAgfSkgPT4gc3RyaW5nIHwgdW5kZWZpbmVkKTtcbiAgZW5kPzogYm9vbGVhbjtcbiAgc3R5bGU/OlxuICAgIHwgUmVhY3QuQ1NTUHJvcGVydGllc1xuICAgIHwgKChwcm9wczoge1xuICAgICAgICBpc0FjdGl2ZTogYm9vbGVhbjtcbiAgICAgICAgaXNQZW5kaW5nOiBib29sZWFuO1xuICAgICAgfSkgPT4gUmVhY3QuQ1NTUHJvcGVydGllcyB8IHVuZGVmaW5lZCk7XG59XG5cbi8qKlxuICogQSA8TGluaz4gd3JhcHBlciB0aGF0IGtub3dzIGlmIGl0J3MgXCJhY3RpdmVcIiBvciBub3QuXG4gKi9cbmV4cG9ydCBjb25zdCBOYXZMaW5rID0gUmVhY3QuZm9yd2FyZFJlZjxIVE1MQW5jaG9yRWxlbWVudCwgTmF2TGlua1Byb3BzPihcbiAgZnVuY3Rpb24gTmF2TGlua1dpdGhSZWYoXG4gICAge1xuICAgICAgXCJhcmlhLWN1cnJlbnRcIjogYXJpYUN1cnJlbnRQcm9wID0gXCJwYWdlXCIsXG4gICAgICBjYXNlU2Vuc2l0aXZlID0gZmFsc2UsXG4gICAgICBjbGFzc05hbWU6IGNsYXNzTmFtZVByb3AgPSBcIlwiLFxuICAgICAgZW5kID0gZmFsc2UsXG4gICAgICBzdHlsZTogc3R5bGVQcm9wLFxuICAgICAgdG8sXG4gICAgICBjaGlsZHJlbixcbiAgICAgIC4uLnJlc3RcbiAgICB9LFxuICAgIHJlZlxuICApIHtcbiAgICBsZXQgcGF0aCA9IHVzZVJlc29sdmVkUGF0aCh0bywgeyByZWxhdGl2ZTogcmVzdC5yZWxhdGl2ZSB9KTtcbiAgICBsZXQgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICAgIGxldCByb3V0ZXJTdGF0ZSA9IFJlYWN0LnVzZUNvbnRleHQoRGF0YVJvdXRlclN0YXRlQ29udGV4dCk7XG4gICAgbGV0IHsgbmF2aWdhdG9yIH0gPSBSZWFjdC51c2VDb250ZXh0KE5hdmlnYXRpb25Db250ZXh0KTtcblxuICAgIGxldCB0b1BhdGhuYW1lID0gbmF2aWdhdG9yLmVuY29kZUxvY2F0aW9uXG4gICAgICA/IG5hdmlnYXRvci5lbmNvZGVMb2NhdGlvbihwYXRoKS5wYXRobmFtZVxuICAgICAgOiBwYXRoLnBhdGhuYW1lO1xuICAgIGxldCBsb2NhdGlvblBhdGhuYW1lID0gbG9jYXRpb24ucGF0aG5hbWU7XG4gICAgbGV0IG5leHRMb2NhdGlvblBhdGhuYW1lID1cbiAgICAgIHJvdXRlclN0YXRlICYmIHJvdXRlclN0YXRlLm5hdmlnYXRpb24gJiYgcm91dGVyU3RhdGUubmF2aWdhdGlvbi5sb2NhdGlvblxuICAgICAgICA/IHJvdXRlclN0YXRlLm5hdmlnYXRpb24ubG9jYXRpb24ucGF0aG5hbWVcbiAgICAgICAgOiBudWxsO1xuXG4gICAgaWYgKCFjYXNlU2Vuc2l0aXZlKSB7XG4gICAgICBsb2NhdGlvblBhdGhuYW1lID0gbG9jYXRpb25QYXRobmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgbmV4dExvY2F0aW9uUGF0aG5hbWUgPSBuZXh0TG9jYXRpb25QYXRobmFtZVxuICAgICAgICA/IG5leHRMb2NhdGlvblBhdGhuYW1lLnRvTG93ZXJDYXNlKClcbiAgICAgICAgOiBudWxsO1xuICAgICAgdG9QYXRobmFtZSA9IHRvUGF0aG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICB9XG5cbiAgICBsZXQgaXNBY3RpdmUgPVxuICAgICAgbG9jYXRpb25QYXRobmFtZSA9PT0gdG9QYXRobmFtZSB8fFxuICAgICAgKCFlbmQgJiZcbiAgICAgICAgbG9jYXRpb25QYXRobmFtZS5zdGFydHNXaXRoKHRvUGF0aG5hbWUpICYmXG4gICAgICAgIGxvY2F0aW9uUGF0aG5hbWUuY2hhckF0KHRvUGF0aG5hbWUubGVuZ3RoKSA9PT0gXCIvXCIpO1xuXG4gICAgbGV0IGlzUGVuZGluZyA9XG4gICAgICBuZXh0TG9jYXRpb25QYXRobmFtZSAhPSBudWxsICYmXG4gICAgICAobmV4dExvY2F0aW9uUGF0aG5hbWUgPT09IHRvUGF0aG5hbWUgfHxcbiAgICAgICAgKCFlbmQgJiZcbiAgICAgICAgICBuZXh0TG9jYXRpb25QYXRobmFtZS5zdGFydHNXaXRoKHRvUGF0aG5hbWUpICYmXG4gICAgICAgICAgbmV4dExvY2F0aW9uUGF0aG5hbWUuY2hhckF0KHRvUGF0aG5hbWUubGVuZ3RoKSA9PT0gXCIvXCIpKTtcblxuICAgIGxldCBhcmlhQ3VycmVudCA9IGlzQWN0aXZlID8gYXJpYUN1cnJlbnRQcm9wIDogdW5kZWZpbmVkO1xuXG4gICAgbGV0IGNsYXNzTmFtZTogc3RyaW5nIHwgdW5kZWZpbmVkO1xuICAgIGlmICh0eXBlb2YgY2xhc3NOYW1lUHJvcCA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICBjbGFzc05hbWUgPSBjbGFzc05hbWVQcm9wKHsgaXNBY3RpdmUsIGlzUGVuZGluZyB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSWYgdGhlIGNsYXNzTmFtZSBwcm9wIGlzIG5vdCBhIGZ1bmN0aW9uLCB3ZSB1c2UgYSBkZWZhdWx0IGBhY3RpdmVgXG4gICAgICAvLyBjbGFzcyBmb3IgPE5hdkxpbmsgLz5zIHRoYXQgYXJlIGFjdGl2ZS4gSW4gdjUgYGFjdGl2ZWAgd2FzIHRoZSBkZWZhdWx0XG4gICAgICAvLyB2YWx1ZSBmb3IgYGFjdGl2ZUNsYXNzTmFtZWAsIGJ1dCB3ZSBhcmUgcmVtb3ZpbmcgdGhhdCBBUEkgYW5kIGNhbiBzdGlsbFxuICAgICAgLy8gdXNlIHRoZSBvbGQgZGVmYXVsdCBiZWhhdmlvciBmb3IgYSBjbGVhbmVyIHVwZ3JhZGUgcGF0aCBhbmQga2VlcCB0aGVcbiAgICAgIC8vIHNpbXBsZSBzdHlsaW5nIHJ1bGVzIHdvcmtpbmcgYXMgdGhleSBjdXJyZW50bHkgZG8uXG4gICAgICBjbGFzc05hbWUgPSBbXG4gICAgICAgIGNsYXNzTmFtZVByb3AsXG4gICAgICAgIGlzQWN0aXZlID8gXCJhY3RpdmVcIiA6IG51bGwsXG4gICAgICAgIGlzUGVuZGluZyA/IFwicGVuZGluZ1wiIDogbnVsbCxcbiAgICAgIF1cbiAgICAgICAgLmZpbHRlcihCb29sZWFuKVxuICAgICAgICAuam9pbihcIiBcIik7XG4gICAgfVxuXG4gICAgbGV0IHN0eWxlID1cbiAgICAgIHR5cGVvZiBzdHlsZVByb3AgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICA/IHN0eWxlUHJvcCh7IGlzQWN0aXZlLCBpc1BlbmRpbmcgfSlcbiAgICAgICAgOiBzdHlsZVByb3A7XG5cbiAgICByZXR1cm4gKFxuICAgICAgPExpbmtcbiAgICAgICAgey4uLnJlc3R9XG4gICAgICAgIGFyaWEtY3VycmVudD17YXJpYUN1cnJlbnR9XG4gICAgICAgIGNsYXNzTmFtZT17Y2xhc3NOYW1lfVxuICAgICAgICByZWY9e3JlZn1cbiAgICAgICAgc3R5bGU9e3N0eWxlfVxuICAgICAgICB0bz17dG99XG4gICAgICA+XG4gICAgICAgIHt0eXBlb2YgY2hpbGRyZW4gPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICAgID8gY2hpbGRyZW4oeyBpc0FjdGl2ZSwgaXNQZW5kaW5nIH0pXG4gICAgICAgICAgOiBjaGlsZHJlbn1cbiAgICAgIDwvTGluaz5cbiAgICApO1xuICB9XG4pO1xuXG5pZiAoX19ERVZfXykge1xuICBOYXZMaW5rLmRpc3BsYXlOYW1lID0gXCJOYXZMaW5rXCI7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgRm9ybVByb3BzIGV4dGVuZHMgUmVhY3QuRm9ybUhUTUxBdHRyaWJ1dGVzPEhUTUxGb3JtRWxlbWVudD4ge1xuICAvKipcbiAgICogVGhlIEhUVFAgdmVyYiB0byB1c2Ugd2hlbiB0aGUgZm9ybSBpcyBzdWJtaXQuIFN1cHBvcnRzIFwiZ2V0XCIsIFwicG9zdFwiLFxuICAgKiBcInB1dFwiLCBcImRlbGV0ZVwiLCBcInBhdGNoXCIuXG4gICAqL1xuICBtZXRob2Q/OiBGb3JtTWV0aG9kO1xuXG4gIC8qKlxuICAgKiBOb3JtYWwgYDxmb3JtIGFjdGlvbj5gIGJ1dCBzdXBwb3J0cyBSZWFjdCBSb3V0ZXIncyByZWxhdGl2ZSBwYXRocy5cbiAgICovXG4gIGFjdGlvbj86IHN0cmluZztcblxuICAvKipcbiAgICogRm9yY2VzIGEgZnVsbCBkb2N1bWVudCBuYXZpZ2F0aW9uIGluc3RlYWQgb2YgYSBmZXRjaC5cbiAgICovXG4gIHJlbG9hZERvY3VtZW50PzogYm9vbGVhbjtcblxuICAvKipcbiAgICogUmVwbGFjZXMgdGhlIGN1cnJlbnQgZW50cnkgaW4gdGhlIGJyb3dzZXIgaGlzdG9yeSBzdGFjayB3aGVuIHRoZSBmb3JtXG4gICAqIG5hdmlnYXRlcy4gVXNlIHRoaXMgaWYgeW91IGRvbid0IHdhbnQgdGhlIHVzZXIgdG8gYmUgYWJsZSB0byBjbGljayBcImJhY2tcIlxuICAgKiB0byB0aGUgcGFnZSB3aXRoIHRoZSBmb3JtIG9uIGl0LlxuICAgKi9cbiAgcmVwbGFjZT86IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIERldGVybWluZXMgd2hldGhlciB0aGUgZm9ybSBhY3Rpb24gaXMgcmVsYXRpdmUgdG8gdGhlIHJvdXRlIGhpZXJhcmNoeSBvclxuICAgKiB0aGUgcGF0aG5hbWUuICBVc2UgdGhpcyBpZiB5b3Ugd2FudCB0byBvcHQgb3V0IG9mIG5hdmlnYXRpbmcgdGhlIHJvdXRlXG4gICAqIGhpZXJhcmNoeSBhbmQgd2FudCB0byBpbnN0ZWFkIHJvdXRlIGJhc2VkIG9uIC8tZGVsaW1pdGVkIFVSTCBzZWdtZW50c1xuICAgKi9cbiAgcmVsYXRpdmU/OiBSZWxhdGl2ZVJvdXRpbmdUeXBlO1xuXG4gIC8qKlxuICAgKiBQcmV2ZW50IHRoZSBzY3JvbGwgcG9zaXRpb24gZnJvbSByZXNldHRpbmcgdG8gdGhlIHRvcCBvZiB0aGUgdmlld3BvcnQgb25cbiAgICogY29tcGxldGlvbiBvZiB0aGUgbmF2aWdhdGlvbiB3aGVuIHVzaW5nIHRoZSA8U2Nyb2xsUmVzdG9yYXRpb24+IGNvbXBvbmVudFxuICAgKi9cbiAgcHJldmVudFNjcm9sbFJlc2V0PzogYm9vbGVhbjtcblxuICAvKipcbiAgICogQSBmdW5jdGlvbiB0byBjYWxsIHdoZW4gdGhlIGZvcm0gaXMgc3VibWl0dGVkLiBJZiB5b3UgY2FsbFxuICAgKiBgZXZlbnQucHJldmVudERlZmF1bHQoKWAgdGhlbiB0aGlzIGZvcm0gd2lsbCBub3QgZG8gYW55dGhpbmcuXG4gICAqL1xuICBvblN1Ym1pdD86IFJlYWN0LkZvcm1FdmVudEhhbmRsZXI8SFRNTEZvcm1FbGVtZW50Pjtcbn1cblxuLyoqXG4gKiBBIGBAcmVtaXgtcnVuL3JvdXRlcmAtYXdhcmUgYDxmb3JtPmAuIEl0IGJlaGF2ZXMgbGlrZSBhIG5vcm1hbCBmb3JtIGV4Y2VwdFxuICogdGhhdCB0aGUgaW50ZXJhY3Rpb24gd2l0aCB0aGUgc2VydmVyIGlzIHdpdGggYGZldGNoYCBpbnN0ZWFkIG9mIG5ldyBkb2N1bWVudFxuICogcmVxdWVzdHMsIGFsbG93aW5nIGNvbXBvbmVudHMgdG8gYWRkIG5pY2VyIFVYIHRvIHRoZSBwYWdlIGFzIHRoZSBmb3JtIGlzXG4gKiBzdWJtaXR0ZWQgYW5kIHJldHVybnMgd2l0aCBkYXRhLlxuICovXG5leHBvcnQgY29uc3QgRm9ybSA9IFJlYWN0LmZvcndhcmRSZWY8SFRNTEZvcm1FbGVtZW50LCBGb3JtUHJvcHM+KFxuICAocHJvcHMsIHJlZikgPT4ge1xuICAgIHJldHVybiA8Rm9ybUltcGwgey4uLnByb3BzfSByZWY9e3JlZn0gLz47XG4gIH1cbik7XG5cbmlmIChfX0RFVl9fKSB7XG4gIEZvcm0uZGlzcGxheU5hbWUgPSBcIkZvcm1cIjtcbn1cblxudHlwZSBIVE1MU3VibWl0RXZlbnQgPSBSZWFjdC5CYXNlU3ludGhldGljRXZlbnQ8XG4gIFN1Ym1pdEV2ZW50LFxuICBFdmVudCxcbiAgSFRNTEZvcm1FbGVtZW50XG4+O1xuXG50eXBlIEhUTUxGb3JtU3VibWl0dGVyID0gSFRNTEJ1dHRvbkVsZW1lbnQgfCBIVE1MSW5wdXRFbGVtZW50O1xuXG5pbnRlcmZhY2UgRm9ybUltcGxQcm9wcyBleHRlbmRzIEZvcm1Qcm9wcyB7XG4gIGZldGNoZXJLZXk/OiBzdHJpbmc7XG4gIHJvdXRlSWQ/OiBzdHJpbmc7XG59XG5cbmNvbnN0IEZvcm1JbXBsID0gUmVhY3QuZm9yd2FyZFJlZjxIVE1MRm9ybUVsZW1lbnQsIEZvcm1JbXBsUHJvcHM+KFxuICAoXG4gICAge1xuICAgICAgcmVsb2FkRG9jdW1lbnQsXG4gICAgICByZXBsYWNlLFxuICAgICAgbWV0aG9kID0gZGVmYXVsdE1ldGhvZCxcbiAgICAgIGFjdGlvbixcbiAgICAgIG9uU3VibWl0LFxuICAgICAgZmV0Y2hlcktleSxcbiAgICAgIHJvdXRlSWQsXG4gICAgICByZWxhdGl2ZSxcbiAgICAgIHByZXZlbnRTY3JvbGxSZXNldCxcbiAgICAgIC4uLnByb3BzXG4gICAgfSxcbiAgICBmb3J3YXJkZWRSZWZcbiAgKSA9PiB7XG4gICAgbGV0IHN1Ym1pdCA9IHVzZVN1Ym1pdEltcGwoZmV0Y2hlcktleSwgcm91dGVJZCk7XG4gICAgbGV0IGZvcm1NZXRob2Q6IEZvcm1NZXRob2QgPVxuICAgICAgbWV0aG9kLnRvTG93ZXJDYXNlKCkgPT09IFwiZ2V0XCIgPyBcImdldFwiIDogXCJwb3N0XCI7XG4gICAgbGV0IGZvcm1BY3Rpb24gPSB1c2VGb3JtQWN0aW9uKGFjdGlvbiwgeyByZWxhdGl2ZSB9KTtcbiAgICBsZXQgc3VibWl0SGFuZGxlcjogUmVhY3QuRm9ybUV2ZW50SGFuZGxlcjxIVE1MRm9ybUVsZW1lbnQ+ID0gKGV2ZW50KSA9PiB7XG4gICAgICBvblN1Ym1pdCAmJiBvblN1Ym1pdChldmVudCk7XG4gICAgICBpZiAoZXZlbnQuZGVmYXVsdFByZXZlbnRlZCkgcmV0dXJuO1xuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcblxuICAgICAgbGV0IHN1Ym1pdHRlciA9IChldmVudCBhcyB1bmtub3duIGFzIEhUTUxTdWJtaXRFdmVudCkubmF0aXZlRXZlbnRcbiAgICAgICAgLnN1Ym1pdHRlciBhcyBIVE1MRm9ybVN1Ym1pdHRlciB8IG51bGw7XG5cbiAgICAgIGxldCBzdWJtaXRNZXRob2QgPVxuICAgICAgICAoc3VibWl0dGVyPy5nZXRBdHRyaWJ1dGUoXCJmb3JtbWV0aG9kXCIpIGFzIEZvcm1NZXRob2QgfCB1bmRlZmluZWQpIHx8XG4gICAgICAgIG1ldGhvZDtcblxuICAgICAgc3VibWl0KHN1Ym1pdHRlciB8fCBldmVudC5jdXJyZW50VGFyZ2V0LCB7XG4gICAgICAgIG1ldGhvZDogc3VibWl0TWV0aG9kLFxuICAgICAgICByZXBsYWNlLFxuICAgICAgICByZWxhdGl2ZSxcbiAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0LFxuICAgICAgfSk7XG4gICAgfTtcblxuICAgIHJldHVybiAoXG4gICAgICA8Zm9ybVxuICAgICAgICByZWY9e2ZvcndhcmRlZFJlZn1cbiAgICAgICAgbWV0aG9kPXtmb3JtTWV0aG9kfVxuICAgICAgICBhY3Rpb249e2Zvcm1BY3Rpb259XG4gICAgICAgIG9uU3VibWl0PXtyZWxvYWREb2N1bWVudCA/IG9uU3VibWl0IDogc3VibWl0SGFuZGxlcn1cbiAgICAgICAgey4uLnByb3BzfVxuICAgICAgLz5cbiAgICApO1xuICB9XG4pO1xuXG5pZiAoX19ERVZfXykge1xuICBGb3JtSW1wbC5kaXNwbGF5TmFtZSA9IFwiRm9ybUltcGxcIjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBTY3JvbGxSZXN0b3JhdGlvblByb3BzIHtcbiAgZ2V0S2V5PzogR2V0U2Nyb2xsUmVzdG9yYXRpb25LZXlGdW5jdGlvbjtcbiAgc3RvcmFnZUtleT86IHN0cmluZztcbn1cblxuLyoqXG4gKiBUaGlzIGNvbXBvbmVudCB3aWxsIGVtdWxhdGUgdGhlIGJyb3dzZXIncyBzY3JvbGwgcmVzdG9yYXRpb24gb24gbG9jYXRpb25cbiAqIGNoYW5nZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBTY3JvbGxSZXN0b3JhdGlvbih7XG4gIGdldEtleSxcbiAgc3RvcmFnZUtleSxcbn06IFNjcm9sbFJlc3RvcmF0aW9uUHJvcHMpIHtcbiAgdXNlU2Nyb2xsUmVzdG9yYXRpb24oeyBnZXRLZXksIHN0b3JhZ2VLZXkgfSk7XG4gIHJldHVybiBudWxsO1xufVxuXG5pZiAoX19ERVZfXykge1xuICBTY3JvbGxSZXN0b3JhdGlvbi5kaXNwbGF5TmFtZSA9IFwiU2Nyb2xsUmVzdG9yYXRpb25cIjtcbn1cbi8vI2VuZHJlZ2lvblxuXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuLy8jcmVnaW9uIEhvb2tzXG4vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXG5lbnVtIERhdGFSb3V0ZXJIb29rIHtcbiAgVXNlU2Nyb2xsUmVzdG9yYXRpb24gPSBcInVzZVNjcm9sbFJlc3RvcmF0aW9uXCIsXG4gIFVzZVN1Ym1pdEltcGwgPSBcInVzZVN1Ym1pdEltcGxcIixcbiAgVXNlRmV0Y2hlciA9IFwidXNlRmV0Y2hlclwiLFxufVxuXG5lbnVtIERhdGFSb3V0ZXJTdGF0ZUhvb2sge1xuICBVc2VGZXRjaGVycyA9IFwidXNlRmV0Y2hlcnNcIixcbiAgVXNlU2Nyb2xsUmVzdG9yYXRpb24gPSBcInVzZVNjcm9sbFJlc3RvcmF0aW9uXCIsXG59XG5cbmZ1bmN0aW9uIGdldERhdGFSb3V0ZXJDb25zb2xlRXJyb3IoXG4gIGhvb2tOYW1lOiBEYXRhUm91dGVySG9vayB8IERhdGFSb3V0ZXJTdGF0ZUhvb2tcbikge1xuICByZXR1cm4gYCR7aG9va05hbWV9IG11c3QgYmUgdXNlZCB3aXRoaW4gYSBkYXRhIHJvdXRlci4gIFNlZSBodHRwczovL3JlYWN0cm91dGVyLmNvbS9yb3V0ZXJzL3BpY2tpbmctYS1yb3V0ZXIuYDtcbn1cblxuZnVuY3Rpb24gdXNlRGF0YVJvdXRlckNvbnRleHQoaG9va05hbWU6IERhdGFSb3V0ZXJIb29rKSB7XG4gIGxldCBjdHggPSBSZWFjdC51c2VDb250ZXh0KERhdGFSb3V0ZXJDb250ZXh0KTtcbiAgaW52YXJpYW50KGN0eCwgZ2V0RGF0YVJvdXRlckNvbnNvbGVFcnJvcihob29rTmFtZSkpO1xuICByZXR1cm4gY3R4O1xufVxuXG5mdW5jdGlvbiB1c2VEYXRhUm91dGVyU3RhdGUoaG9va05hbWU6IERhdGFSb3V0ZXJTdGF0ZUhvb2spIHtcbiAgbGV0IHN0YXRlID0gUmVhY3QudXNlQ29udGV4dChEYXRhUm91dGVyU3RhdGVDb250ZXh0KTtcbiAgaW52YXJpYW50KHN0YXRlLCBnZXREYXRhUm91dGVyQ29uc29sZUVycm9yKGhvb2tOYW1lKSk7XG4gIHJldHVybiBzdGF0ZTtcbn1cblxuLyoqXG4gKiBIYW5kbGVzIHRoZSBjbGljayBiZWhhdmlvciBmb3Igcm91dGVyIGA8TGluaz5gIGNvbXBvbmVudHMuIFRoaXMgaXMgdXNlZnVsIGlmXG4gKiB5b3UgbmVlZCB0byBjcmVhdGUgY3VzdG9tIGA8TGluaz5gIGNvbXBvbmVudHMgd2l0aCB0aGUgc2FtZSBjbGljayBiZWhhdmlvciB3ZVxuICogdXNlIGluIG91ciBleHBvcnRlZCBgPExpbms+YC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUxpbmtDbGlja0hhbmRsZXI8RSBleHRlbmRzIEVsZW1lbnQgPSBIVE1MQW5jaG9yRWxlbWVudD4oXG4gIHRvOiBUbyxcbiAge1xuICAgIHRhcmdldCxcbiAgICByZXBsYWNlOiByZXBsYWNlUHJvcCxcbiAgICBzdGF0ZSxcbiAgICBwcmV2ZW50U2Nyb2xsUmVzZXQsXG4gICAgcmVsYXRpdmUsXG4gIH06IHtcbiAgICB0YXJnZXQ/OiBSZWFjdC5IVE1MQXR0cmlidXRlQW5jaG9yVGFyZ2V0O1xuICAgIHJlcGxhY2U/OiBib29sZWFuO1xuICAgIHN0YXRlPzogYW55O1xuICAgIHByZXZlbnRTY3JvbGxSZXNldD86IGJvb2xlYW47XG4gICAgcmVsYXRpdmU/OiBSZWxhdGl2ZVJvdXRpbmdUeXBlO1xuICB9ID0ge31cbik6IChldmVudDogUmVhY3QuTW91c2VFdmVudDxFLCBNb3VzZUV2ZW50PikgPT4gdm9pZCB7XG4gIGxldCBuYXZpZ2F0ZSA9IHVzZU5hdmlnYXRlKCk7XG4gIGxldCBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCBwYXRoID0gdXNlUmVzb2x2ZWRQYXRoKHRvLCB7IHJlbGF0aXZlIH0pO1xuXG4gIHJldHVybiBSZWFjdC51c2VDYWxsYmFjayhcbiAgICAoZXZlbnQ6IFJlYWN0Lk1vdXNlRXZlbnQ8RSwgTW91c2VFdmVudD4pID0+IHtcbiAgICAgIGlmIChzaG91bGRQcm9jZXNzTGlua0NsaWNrKGV2ZW50LCB0YXJnZXQpKSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgLy8gSWYgdGhlIFVSTCBoYXNuJ3QgY2hhbmdlZCwgYSByZWd1bGFyIDxhPiB3aWxsIGRvIGEgcmVwbGFjZSBpbnN0ZWFkIG9mXG4gICAgICAgIC8vIGEgcHVzaCwgc28gZG8gdGhlIHNhbWUgaGVyZSB1bmxlc3MgdGhlIHJlcGxhY2UgcHJvcCBpcyBleHBsaWNpdGx5IHNldFxuICAgICAgICBsZXQgcmVwbGFjZSA9XG4gICAgICAgICAgcmVwbGFjZVByb3AgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyByZXBsYWNlUHJvcFxuICAgICAgICAgICAgOiBjcmVhdGVQYXRoKGxvY2F0aW9uKSA9PT0gY3JlYXRlUGF0aChwYXRoKTtcblxuICAgICAgICBuYXZpZ2F0ZSh0bywgeyByZXBsYWNlLCBzdGF0ZSwgcHJldmVudFNjcm9sbFJlc2V0LCByZWxhdGl2ZSB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIFtcbiAgICAgIGxvY2F0aW9uLFxuICAgICAgbmF2aWdhdGUsXG4gICAgICBwYXRoLFxuICAgICAgcmVwbGFjZVByb3AsXG4gICAgICBzdGF0ZSxcbiAgICAgIHRhcmdldCxcbiAgICAgIHRvLFxuICAgICAgcHJldmVudFNjcm9sbFJlc2V0LFxuICAgICAgcmVsYXRpdmUsXG4gICAgXVxuICApO1xufVxuXG4vKipcbiAqIEEgY29udmVuaWVudCB3cmFwcGVyIGZvciByZWFkaW5nIGFuZCB3cml0aW5nIHNlYXJjaCBwYXJhbWV0ZXJzIHZpYSB0aGVcbiAqIFVSTFNlYXJjaFBhcmFtcyBpbnRlcmZhY2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VTZWFyY2hQYXJhbXMoXG4gIGRlZmF1bHRJbml0PzogVVJMU2VhcmNoUGFyYW1zSW5pdFxuKTogW1VSTFNlYXJjaFBhcmFtcywgU2V0VVJMU2VhcmNoUGFyYW1zXSB7XG4gIHdhcm5pbmcoXG4gICAgdHlwZW9mIFVSTFNlYXJjaFBhcmFtcyAhPT0gXCJ1bmRlZmluZWRcIixcbiAgICBgWW91IGNhbm5vdCB1c2UgdGhlIFxcYHVzZVNlYXJjaFBhcmFtc1xcYCBob29rIGluIGEgYnJvd3NlciB0aGF0IGRvZXMgbm90IGAgK1xuICAgICAgYHN1cHBvcnQgdGhlIFVSTFNlYXJjaFBhcmFtcyBBUEkuIElmIHlvdSBuZWVkIHRvIHN1cHBvcnQgSW50ZXJuZXQgYCArXG4gICAgICBgRXhwbG9yZXIgMTEsIHdlIHJlY29tbWVuZCB5b3UgbG9hZCBhIHBvbHlmaWxsIHN1Y2ggYXMgYCArXG4gICAgICBgaHR0cHM6Ly9naXRodWIuY29tL3VuZ2FwL3VybC1zZWFyY2gtcGFyYW1zXFxuXFxuYCArXG4gICAgICBgSWYgeW91J3JlIHVuc3VyZSBob3cgdG8gbG9hZCBwb2x5ZmlsbHMsIHdlIHJlY29tbWVuZCB5b3UgY2hlY2sgb3V0IGAgK1xuICAgICAgYGh0dHBzOi8vcG9seWZpbGwuaW8vdjMvIHdoaWNoIHByb3ZpZGVzIHNvbWUgcmVjb21tZW5kYXRpb25zIGFib3V0IGhvdyBgICtcbiAgICAgIGB0byBsb2FkIHBvbHlmaWxscyBvbmx5IGZvciB1c2VycyB0aGF0IG5lZWQgdGhlbSwgaW5zdGVhZCBvZiBmb3IgZXZlcnkgYCArXG4gICAgICBgdXNlci5gXG4gICk7XG5cbiAgbGV0IGRlZmF1bHRTZWFyY2hQYXJhbXNSZWYgPSBSZWFjdC51c2VSZWYoY3JlYXRlU2VhcmNoUGFyYW1zKGRlZmF1bHRJbml0KSk7XG4gIGxldCBoYXNTZXRTZWFyY2hQYXJhbXNSZWYgPSBSZWFjdC51c2VSZWYoZmFsc2UpO1xuXG4gIGxldCBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCBzZWFyY2hQYXJhbXMgPSBSZWFjdC51c2VNZW1vKFxuICAgICgpID0+XG4gICAgICAvLyBPbmx5IG1lcmdlIGluIHRoZSBkZWZhdWx0cyBpZiB3ZSBoYXZlbid0IHlldCBjYWxsZWQgc2V0U2VhcmNoUGFyYW1zLlxuICAgICAgLy8gT25jZSB3ZSBjYWxsIHRoYXQgd2Ugd2FudCB0aG9zZSB0byB0YWtlIHByZWNlZGVuY2UsIG90aGVyd2lzZSB5b3UgY2FuJ3RcbiAgICAgIC8vIHJlbW92ZSBhIHBhcmFtIHdpdGggc2V0U2VhcmNoUGFyYW1zKHt9KSBpZiBpdCBoYXMgYW4gaW5pdGlhbCB2YWx1ZVxuICAgICAgZ2V0U2VhcmNoUGFyYW1zRm9yTG9jYXRpb24oXG4gICAgICAgIGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgICAgaGFzU2V0U2VhcmNoUGFyYW1zUmVmLmN1cnJlbnQgPyBudWxsIDogZGVmYXVsdFNlYXJjaFBhcmFtc1JlZi5jdXJyZW50XG4gICAgICApLFxuICAgIFtsb2NhdGlvbi5zZWFyY2hdXG4gICk7XG5cbiAgbGV0IG5hdmlnYXRlID0gdXNlTmF2aWdhdGUoKTtcbiAgbGV0IHNldFNlYXJjaFBhcmFtcyA9IFJlYWN0LnVzZUNhbGxiYWNrPFNldFVSTFNlYXJjaFBhcmFtcz4oXG4gICAgKG5leHRJbml0LCBuYXZpZ2F0ZU9wdGlvbnMpID0+IHtcbiAgICAgIGNvbnN0IG5ld1NlYXJjaFBhcmFtcyA9IGNyZWF0ZVNlYXJjaFBhcmFtcyhcbiAgICAgICAgdHlwZW9mIG5leHRJbml0ID09PSBcImZ1bmN0aW9uXCIgPyBuZXh0SW5pdChzZWFyY2hQYXJhbXMpIDogbmV4dEluaXRcbiAgICAgICk7XG4gICAgICBoYXNTZXRTZWFyY2hQYXJhbXNSZWYuY3VycmVudCA9IHRydWU7XG4gICAgICBuYXZpZ2F0ZShcIj9cIiArIG5ld1NlYXJjaFBhcmFtcywgbmF2aWdhdGVPcHRpb25zKTtcbiAgICB9LFxuICAgIFtuYXZpZ2F0ZSwgc2VhcmNoUGFyYW1zXVxuICApO1xuXG4gIHJldHVybiBbc2VhcmNoUGFyYW1zLCBzZXRTZWFyY2hQYXJhbXNdO1xufVxuXG50eXBlIFNldFVSTFNlYXJjaFBhcmFtcyA9IChcbiAgbmV4dEluaXQ/OlxuICAgIHwgVVJMU2VhcmNoUGFyYW1zSW5pdFxuICAgIHwgKChwcmV2OiBVUkxTZWFyY2hQYXJhbXMpID0+IFVSTFNlYXJjaFBhcmFtc0luaXQpLFxuICBuYXZpZ2F0ZU9wdHM/OiBOYXZpZ2F0ZU9wdGlvbnNcbikgPT4gdm9pZDtcblxudHlwZSBTdWJtaXRUYXJnZXQgPVxuICB8IEhUTUxGb3JtRWxlbWVudFxuICB8IEhUTUxCdXR0b25FbGVtZW50XG4gIHwgSFRNTElucHV0RWxlbWVudFxuICB8IEZvcm1EYXRhXG4gIHwgVVJMU2VhcmNoUGFyYW1zXG4gIHwgeyBbbmFtZTogc3RyaW5nXTogc3RyaW5nIH1cbiAgfCBudWxsO1xuXG4vKipcbiAqIFN1Ym1pdHMgYSBIVE1MIGA8Zm9ybT5gIHRvIHRoZSBzZXJ2ZXIgd2l0aG91dCByZWxvYWRpbmcgdGhlIHBhZ2UuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgU3VibWl0RnVuY3Rpb24ge1xuICAoXG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBgPGZvcm0+YCB0byBiZSBzdWJtaXR0ZWQgdG8gdGhlIHNlcnZlciwgYSBzcGVjaWZpY1xuICAgICAqIGA8YnV0dG9uPmAgb3IgYDxpbnB1dCB0eXBlPVwic3VibWl0XCI+YCB0byB1c2UgdG8gc3VibWl0IHRoZSBmb3JtLCBvciBzb21lXG4gICAgICogYXJiaXRyYXJ5IGRhdGEgdG8gc3VibWl0LlxuICAgICAqXG4gICAgICogTm90ZTogV2hlbiB1c2luZyBhIGA8YnV0dG9uPmAgaXRzIGBuYW1lYCBhbmQgYHZhbHVlYCB3aWxsIGFsc28gYmVcbiAgICAgKiBpbmNsdWRlZCBpbiB0aGUgZm9ybSBkYXRhIHRoYXQgaXMgc3VibWl0dGVkLlxuICAgICAqL1xuICAgIHRhcmdldDogU3VibWl0VGFyZ2V0LFxuXG4gICAgLyoqXG4gICAgICogT3B0aW9ucyB0aGF0IG92ZXJyaWRlIHRoZSBgPGZvcm0+YCdzIG93biBhdHRyaWJ1dGVzLiBSZXF1aXJlZCB3aGVuXG4gICAgICogc3VibWl0dGluZyBhcmJpdHJhcnkgZGF0YSB3aXRob3V0IGEgYmFja2luZyBgPGZvcm0+YC5cbiAgICAgKi9cbiAgICBvcHRpb25zPzogU3VibWl0T3B0aW9uc1xuICApOiB2b2lkO1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0aGF0IG1heSBiZSB1c2VkIHRvIHByb2dyYW1tYXRpY2FsbHkgc3VibWl0IGEgZm9ybSAob3JcbiAqIHNvbWUgYXJiaXRyYXJ5IGRhdGEpIHRvIHRoZSBzZXJ2ZXIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VTdWJtaXQoKTogU3VibWl0RnVuY3Rpb24ge1xuICByZXR1cm4gdXNlU3VibWl0SW1wbCgpO1xufVxuXG5mdW5jdGlvbiB1c2VTdWJtaXRJbXBsKGZldGNoZXJLZXk/OiBzdHJpbmcsIHJvdXRlSWQ/OiBzdHJpbmcpOiBTdWJtaXRGdW5jdGlvbiB7XG4gIGxldCB7IHJvdXRlciB9ID0gdXNlRGF0YVJvdXRlckNvbnRleHQoRGF0YVJvdXRlckhvb2suVXNlU3VibWl0SW1wbCk7XG4gIGxldCBkZWZhdWx0QWN0aW9uID0gdXNlRm9ybUFjdGlvbigpO1xuXG4gIHJldHVybiBSZWFjdC51c2VDYWxsYmFjayhcbiAgICAodGFyZ2V0LCBvcHRpb25zID0ge30pID0+IHtcbiAgICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgIFwiWW91IGFyZSBjYWxsaW5nIHN1Ym1pdCBkdXJpbmcgdGhlIHNlcnZlciByZW5kZXIuIFwiICtcbiAgICAgICAgICAgIFwiVHJ5IGNhbGxpbmcgc3VibWl0IHdpdGhpbiBhIGB1c2VFZmZlY3RgIG9yIGNhbGxiYWNrIGluc3RlYWQuXCJcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgbGV0IHsgbWV0aG9kLCBlbmNUeXBlLCBmb3JtRGF0YSwgdXJsIH0gPSBnZXRGb3JtU3VibWlzc2lvbkluZm8oXG4gICAgICAgIHRhcmdldCxcbiAgICAgICAgZGVmYXVsdEFjdGlvbixcbiAgICAgICAgb3B0aW9uc1xuICAgICAgKTtcblxuICAgICAgbGV0IGhyZWYgPSB1cmwucGF0aG5hbWUgKyB1cmwuc2VhcmNoO1xuICAgICAgbGV0IG9wdHMgPSB7XG4gICAgICAgIHJlcGxhY2U6IG9wdGlvbnMucmVwbGFjZSxcbiAgICAgICAgcHJldmVudFNjcm9sbFJlc2V0OiBvcHRpb25zLnByZXZlbnRTY3JvbGxSZXNldCxcbiAgICAgICAgZm9ybURhdGEsXG4gICAgICAgIGZvcm1NZXRob2Q6IG1ldGhvZCBhcyBGb3JtTWV0aG9kLFxuICAgICAgICBmb3JtRW5jVHlwZTogZW5jVHlwZSBhcyBGb3JtRW5jVHlwZSxcbiAgICAgIH07XG4gICAgICBpZiAoZmV0Y2hlcktleSkge1xuICAgICAgICBpbnZhcmlhbnQocm91dGVJZCAhPSBudWxsLCBcIk5vIHJvdXRlSWQgYXZhaWxhYmxlIGZvciB1c2VGZXRjaGVyKClcIik7XG4gICAgICAgIHJvdXRlci5mZXRjaChmZXRjaGVyS2V5LCByb3V0ZUlkLCBocmVmLCBvcHRzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJvdXRlci5uYXZpZ2F0ZShocmVmLCBvcHRzKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIFtkZWZhdWx0QWN0aW9uLCByb3V0ZXIsIGZldGNoZXJLZXksIHJvdXRlSWRdXG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VGb3JtQWN0aW9uKFxuICBhY3Rpb24/OiBzdHJpbmcsXG4gIHsgcmVsYXRpdmUgfTogeyByZWxhdGl2ZT86IFJlbGF0aXZlUm91dGluZ1R5cGUgfSA9IHt9XG4pOiBzdHJpbmcge1xuICBsZXQgeyBiYXNlbmFtZSB9ID0gUmVhY3QudXNlQ29udGV4dChOYXZpZ2F0aW9uQ29udGV4dCk7XG4gIGxldCByb3V0ZUNvbnRleHQgPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gIGludmFyaWFudChyb3V0ZUNvbnRleHQsIFwidXNlRm9ybUFjdGlvbiBtdXN0IGJlIHVzZWQgaW5zaWRlIGEgUm91dGVDb250ZXh0XCIpO1xuXG4gIGxldCBbbWF0Y2hdID0gcm91dGVDb250ZXh0Lm1hdGNoZXMuc2xpY2UoLTEpO1xuICAvLyBTaGFsbG93IGNsb25lIHBhdGggc28gd2UgY2FuIG1vZGlmeSBpdCBiZWxvdywgb3RoZXJ3aXNlIHdlIG1vZGlmeSB0aGVcbiAgLy8gb2JqZWN0IHJlZmVyZW5jZWQgYnkgdXNlTWVtbyBpbnNpZGUgdXNlUmVzb2x2ZWRQYXRoXG4gIGxldCBwYXRoID0geyAuLi51c2VSZXNvbHZlZFBhdGgoYWN0aW9uID8gYWN0aW9uIDogXCIuXCIsIHsgcmVsYXRpdmUgfSkgfTtcblxuICAvLyBQcmV2aW91c2x5IHdlIHNldCB0aGUgZGVmYXVsdCBhY3Rpb24gdG8gXCIuXCIuIFRoZSBwcm9ibGVtIHdpdGggdGhpcyBpcyB0aGF0XG4gIC8vIGB1c2VSZXNvbHZlZFBhdGgoXCIuXCIpYCBleGNsdWRlcyBzZWFyY2ggcGFyYW1zIGFuZCB0aGUgaGFzaCBvZiB0aGUgcmVzb2x2ZWRcbiAgLy8gVVJMLiBUaGlzIGlzIHRoZSBpbnRlbmRlZCBiZWhhdmlvciBvZiB3aGVuIFwiLlwiIGlzIHNwZWNpZmljYWxseSBwcm92aWRlZCBhc1xuICAvLyB0aGUgZm9ybSBhY3Rpb24sIGJ1dCBpbmNvbnNpc3RlbnQgdy8gYnJvd3NlcnMgd2hlbiB0aGUgYWN0aW9uIGlzIG9taXR0ZWQuXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9yZW1peC1ydW4vcmVtaXgvaXNzdWVzLzkyN1xuICBsZXQgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICBpZiAoYWN0aW9uID09IG51bGwpIHtcbiAgICAvLyBTYWZlIHRvIHdyaXRlIHRvIHRoZXNlIGRpcmVjdGx5IGhlcmUgc2luY2UgaWYgYWN0aW9uIHdhcyB1bmRlZmluZWQsIHdlXG4gICAgLy8gd291bGQgaGF2ZSBjYWxsZWQgdXNlUmVzb2x2ZWRQYXRoKFwiLlwiKSB3aGljaCB3aWxsIG5ldmVyIGluY2x1ZGUgYSBzZWFyY2hcbiAgICAvLyBvciBoYXNoXG4gICAgcGF0aC5zZWFyY2ggPSBsb2NhdGlvbi5zZWFyY2g7XG4gICAgcGF0aC5oYXNoID0gbG9jYXRpb24uaGFzaDtcblxuICAgIC8vIFdoZW4gZ3JhYmJpbmcgc2VhcmNoIHBhcmFtcyBmcm9tIHRoZSBVUkwsIHJlbW92ZSB0aGUgYXV0b21hdGljYWxseVxuICAgIC8vIGluc2VydGVkID9pbmRleCBwYXJhbSBzbyB3ZSBtYXRjaCB0aGUgdXNlUmVzb2x2ZWRQYXRoIHNlYXJjaCBiZWhhdmlvclxuICAgIC8vIHdoaWNoIHdvdWxkIG5vdCBpbmNsdWRlID9pbmRleFxuICAgIGlmIChtYXRjaC5yb3V0ZS5pbmRleCkge1xuICAgICAgbGV0IHBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMocGF0aC5zZWFyY2gpO1xuICAgICAgcGFyYW1zLmRlbGV0ZShcImluZGV4XCIpO1xuICAgICAgcGF0aC5zZWFyY2ggPSBwYXJhbXMudG9TdHJpbmcoKSA/IGA/JHtwYXJhbXMudG9TdHJpbmcoKX1gIDogXCJcIjtcbiAgICB9XG4gIH1cblxuICBpZiAoKCFhY3Rpb24gfHwgYWN0aW9uID09PSBcIi5cIikgJiYgbWF0Y2gucm91dGUuaW5kZXgpIHtcbiAgICBwYXRoLnNlYXJjaCA9IHBhdGguc2VhcmNoXG4gICAgICA/IHBhdGguc2VhcmNoLnJlcGxhY2UoL15cXD8vLCBcIj9pbmRleCZcIilcbiAgICAgIDogXCI/aW5kZXhcIjtcbiAgfVxuXG4gIC8vIElmIHdlJ3JlIG9wZXJhdGluZyB3aXRoaW4gYSBiYXNlbmFtZSwgcHJlcGVuZCBpdCB0byB0aGUgcGF0aG5hbWUgcHJpb3JcbiAgLy8gdG8gY3JlYXRpbmcgdGhlIGZvcm0gYWN0aW9uLiAgSWYgdGhpcyBpcyBhIHJvb3QgbmF2aWdhdGlvbiwgdGhlbiBqdXN0IHVzZVxuICAvLyB0aGUgcmF3IGJhc2VuYW1lIHdoaWNoIGFsbG93cyB0aGUgYmFzZW5hbWUgdG8gaGF2ZSBmdWxsIGNvbnRyb2wgb3ZlciB0aGVcbiAgLy8gcHJlc2VuY2Ugb2YgYSB0cmFpbGluZyBzbGFzaCBvbiByb290IGFjdGlvbnNcbiAgaWYgKGJhc2VuYW1lICE9PSBcIi9cIikge1xuICAgIHBhdGgucGF0aG5hbWUgPVxuICAgICAgcGF0aC5wYXRobmFtZSA9PT0gXCIvXCIgPyBiYXNlbmFtZSA6IGpvaW5QYXRocyhbYmFzZW5hbWUsIHBhdGgucGF0aG5hbWVdKTtcbiAgfVxuXG4gIHJldHVybiBjcmVhdGVQYXRoKHBhdGgpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVGZXRjaGVyRm9ybShmZXRjaGVyS2V5OiBzdHJpbmcsIHJvdXRlSWQ6IHN0cmluZykge1xuICBsZXQgRmV0Y2hlckZvcm0gPSBSZWFjdC5mb3J3YXJkUmVmPEhUTUxGb3JtRWxlbWVudCwgRm9ybVByb3BzPihcbiAgICAocHJvcHMsIHJlZikgPT4ge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgPEZvcm1JbXBsXG4gICAgICAgICAgey4uLnByb3BzfVxuICAgICAgICAgIHJlZj17cmVmfVxuICAgICAgICAgIGZldGNoZXJLZXk9e2ZldGNoZXJLZXl9XG4gICAgICAgICAgcm91dGVJZD17cm91dGVJZH1cbiAgICAgICAgLz5cbiAgICAgICk7XG4gICAgfVxuICApO1xuICBpZiAoX19ERVZfXykge1xuICAgIEZldGNoZXJGb3JtLmRpc3BsYXlOYW1lID0gXCJmZXRjaGVyLkZvcm1cIjtcbiAgfVxuICByZXR1cm4gRmV0Y2hlckZvcm07XG59XG5cbmxldCBmZXRjaGVySWQgPSAwO1xuXG5leHBvcnQgdHlwZSBGZXRjaGVyV2l0aENvbXBvbmVudHM8VERhdGE+ID0gRmV0Y2hlcjxURGF0YT4gJiB7XG4gIEZvcm06IFJldHVyblR5cGU8dHlwZW9mIGNyZWF0ZUZldGNoZXJGb3JtPjtcbiAgc3VibWl0OiAoXG4gICAgdGFyZ2V0OiBTdWJtaXRUYXJnZXQsXG4gICAgLy8gRmV0Y2hlcnMgY2Fubm90IHJlcGxhY2UvcHJldmVudFNjcm9sbFJlc2V0IGJlY2F1c2UgdGhleSBhcmUgbm90XG4gICAgLy8gbmF2aWdhdGlvbiBldmVudHNcbiAgICBvcHRpb25zPzogT21pdDxTdWJtaXRPcHRpb25zLCBcInJlcGxhY2VcIiB8IFwicHJldmVudFNjcm9sbFJlc2V0XCI+XG4gICkgPT4gdm9pZDtcbiAgbG9hZDogKGhyZWY6IHN0cmluZykgPT4gdm9pZDtcbn07XG5cbi8qKlxuICogSW50ZXJhY3RzIHdpdGggcm91dGUgbG9hZGVycyBhbmQgYWN0aW9ucyB3aXRob3V0IGNhdXNpbmcgYSBuYXZpZ2F0aW9uLiBHcmVhdFxuICogZm9yIGFueSBpbnRlcmFjdGlvbiB0aGF0IHN0YXlzIG9uIHRoZSBzYW1lIHBhZ2UuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VGZXRjaGVyPFREYXRhID0gYW55PigpOiBGZXRjaGVyV2l0aENvbXBvbmVudHM8VERhdGE+IHtcbiAgbGV0IHsgcm91dGVyIH0gPSB1c2VEYXRhUm91dGVyQ29udGV4dChEYXRhUm91dGVySG9vay5Vc2VGZXRjaGVyKTtcblxuICBsZXQgcm91dGUgPSBSZWFjdC51c2VDb250ZXh0KFJvdXRlQ29udGV4dCk7XG4gIGludmFyaWFudChyb3V0ZSwgYHVzZUZldGNoZXIgbXVzdCBiZSB1c2VkIGluc2lkZSBhIFJvdXRlQ29udGV4dGApO1xuXG4gIGxldCByb3V0ZUlkID0gcm91dGUubWF0Y2hlc1tyb3V0ZS5tYXRjaGVzLmxlbmd0aCAtIDFdPy5yb3V0ZS5pZDtcbiAgaW52YXJpYW50KFxuICAgIHJvdXRlSWQgIT0gbnVsbCxcbiAgICBgdXNlRmV0Y2hlciBjYW4gb25seSBiZSB1c2VkIG9uIHJvdXRlcyB0aGF0IGNvbnRhaW4gYSB1bmlxdWUgXCJpZFwiYFxuICApO1xuXG4gIGxldCBbZmV0Y2hlcktleV0gPSBSZWFjdC51c2VTdGF0ZSgoKSA9PiBTdHJpbmcoKytmZXRjaGVySWQpKTtcbiAgbGV0IFtGb3JtXSA9IFJlYWN0LnVzZVN0YXRlKCgpID0+IHtcbiAgICBpbnZhcmlhbnQocm91dGVJZCwgYE5vIHJvdXRlSWQgYXZhaWxhYmxlIGZvciBmZXRjaGVyLkZvcm0oKWApO1xuICAgIHJldHVybiBjcmVhdGVGZXRjaGVyRm9ybShmZXRjaGVyS2V5LCByb3V0ZUlkKTtcbiAgfSk7XG4gIGxldCBbbG9hZF0gPSBSZWFjdC51c2VTdGF0ZSgoKSA9PiAoaHJlZjogc3RyaW5nKSA9PiB7XG4gICAgaW52YXJpYW50KHJvdXRlciwgXCJObyByb3V0ZXIgYXZhaWxhYmxlIGZvciBmZXRjaGVyLmxvYWQoKVwiKTtcbiAgICBpbnZhcmlhbnQocm91dGVJZCwgXCJObyByb3V0ZUlkIGF2YWlsYWJsZSBmb3IgZmV0Y2hlci5sb2FkKClcIik7XG4gICAgcm91dGVyLmZldGNoKGZldGNoZXJLZXksIHJvdXRlSWQsIGhyZWYpO1xuICB9KTtcbiAgbGV0IHN1Ym1pdCA9IHVzZVN1Ym1pdEltcGwoZmV0Y2hlcktleSwgcm91dGVJZCk7XG5cbiAgbGV0IGZldGNoZXIgPSByb3V0ZXIuZ2V0RmV0Y2hlcjxURGF0YT4oZmV0Y2hlcktleSk7XG5cbiAgbGV0IGZldGNoZXJXaXRoQ29tcG9uZW50cyA9IFJlYWN0LnVzZU1lbW8oXG4gICAgKCkgPT4gKHtcbiAgICAgIEZvcm0sXG4gICAgICBzdWJtaXQsXG4gICAgICBsb2FkLFxuICAgICAgLi4uZmV0Y2hlcixcbiAgICB9KSxcbiAgICBbZmV0Y2hlciwgRm9ybSwgc3VibWl0LCBsb2FkXVxuICApO1xuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgLy8gSXMgdGhpcyBidXN0ZWQgd2hlbiB0aGUgUmVhY3QgdGVhbSBnZXRzIHJlYWwgd2VpcmQgYW5kIGNhbGxzIGVmZmVjdHNcbiAgICAvLyB0d2ljZSBvbiBtb3VudD8gIFdlIHJlYWxseSBqdXN0IG5lZWQgdG8gZ2FyYmFnZSBjb2xsZWN0IGhlcmUgd2hlbiB0aGlzXG4gICAgLy8gZmV0Y2hlciBpcyBubyBsb25nZXIgYXJvdW5kLlxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBpZiAoIXJvdXRlcikge1xuICAgICAgICBjb25zb2xlLndhcm4oYE5vIGZldGNoZXIgYXZhaWxhYmxlIHRvIGNsZWFuIHVwIGZyb20gdXNlRmV0Y2hlcigpYCk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHJvdXRlci5kZWxldGVGZXRjaGVyKGZldGNoZXJLZXkpO1xuICAgIH07XG4gIH0sIFtyb3V0ZXIsIGZldGNoZXJLZXldKTtcblxuICByZXR1cm4gZmV0Y2hlcldpdGhDb21wb25lbnRzO1xufVxuXG4vKipcbiAqIFByb3ZpZGVzIGFsbCBmZXRjaGVycyBjdXJyZW50bHkgb24gdGhlIHBhZ2UuIFVzZWZ1bCBmb3IgbGF5b3V0cyBhbmQgcGFyZW50XG4gKiByb3V0ZXMgdGhhdCBuZWVkIHRvIHByb3ZpZGUgcGVuZGluZy9vcHRpbWlzdGljIFVJIHJlZ2FyZGluZyB0aGUgZmV0Y2guXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1c2VGZXRjaGVycygpOiBGZXRjaGVyW10ge1xuICBsZXQgc3RhdGUgPSB1c2VEYXRhUm91dGVyU3RhdGUoRGF0YVJvdXRlclN0YXRlSG9vay5Vc2VGZXRjaGVycyk7XG4gIHJldHVybiBbLi4uc3RhdGUuZmV0Y2hlcnMudmFsdWVzKCldO1xufVxuXG5jb25zdCBTQ1JPTExfUkVTVE9SQVRJT05fU1RPUkFHRV9LRVkgPSBcInJlYWN0LXJvdXRlci1zY3JvbGwtcG9zaXRpb25zXCI7XG5sZXQgc2F2ZWRTY3JvbGxQb3NpdGlvbnM6IFJlY29yZDxzdHJpbmcsIG51bWJlcj4gPSB7fTtcblxuLyoqXG4gKiBXaGVuIHJlbmRlcmVkIGluc2lkZSBhIFJvdXRlclByb3ZpZGVyLCB3aWxsIHJlc3RvcmUgc2Nyb2xsIHBvc2l0aW9ucyBvbiBuYXZpZ2F0aW9uc1xuICovXG5mdW5jdGlvbiB1c2VTY3JvbGxSZXN0b3JhdGlvbih7XG4gIGdldEtleSxcbiAgc3RvcmFnZUtleSxcbn06IHtcbiAgZ2V0S2V5PzogR2V0U2Nyb2xsUmVzdG9yYXRpb25LZXlGdW5jdGlvbjtcbiAgc3RvcmFnZUtleT86IHN0cmluZztcbn0gPSB7fSkge1xuICBsZXQgeyByb3V0ZXIgfSA9IHVzZURhdGFSb3V0ZXJDb250ZXh0KERhdGFSb3V0ZXJIb29rLlVzZVNjcm9sbFJlc3RvcmF0aW9uKTtcbiAgbGV0IHsgcmVzdG9yZVNjcm9sbFBvc2l0aW9uLCBwcmV2ZW50U2Nyb2xsUmVzZXQgfSA9IHVzZURhdGFSb3V0ZXJTdGF0ZShcbiAgICBEYXRhUm91dGVyU3RhdGVIb29rLlVzZVNjcm9sbFJlc3RvcmF0aW9uXG4gICk7XG4gIGxldCBsb2NhdGlvbiA9IHVzZUxvY2F0aW9uKCk7XG4gIGxldCBtYXRjaGVzID0gdXNlTWF0Y2hlcygpO1xuICBsZXQgbmF2aWdhdGlvbiA9IHVzZU5hdmlnYXRpb24oKTtcblxuICAvLyBUcmlnZ2VyIG1hbnVhbCBzY3JvbGwgcmVzdG9yYXRpb24gd2hpbGUgd2UncmUgYWN0aXZlXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgd2luZG93Lmhpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb24gPSBcIm1hbnVhbFwiO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB3aW5kb3cuaGlzdG9yeS5zY3JvbGxSZXN0b3JhdGlvbiA9IFwiYXV0b1wiO1xuICAgIH07XG4gIH0sIFtdKTtcblxuICAvLyBTYXZlIHBvc2l0aW9ucyBvbiBwYWdlaGlkZVxuICB1c2VQYWdlSGlkZShcbiAgICBSZWFjdC51c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgICBpZiAobmF2aWdhdGlvbi5zdGF0ZSA9PT0gXCJpZGxlXCIpIHtcbiAgICAgICAgbGV0IGtleSA9IChnZXRLZXkgPyBnZXRLZXkobG9jYXRpb24sIG1hdGNoZXMpIDogbnVsbCkgfHwgbG9jYXRpb24ua2V5O1xuICAgICAgICBzYXZlZFNjcm9sbFBvc2l0aW9uc1trZXldID0gd2luZG93LnNjcm9sbFk7XG4gICAgICB9XG4gICAgICBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKFxuICAgICAgICBzdG9yYWdlS2V5IHx8IFNDUk9MTF9SRVNUT1JBVElPTl9TVE9SQUdFX0tFWSxcbiAgICAgICAgSlNPTi5zdHJpbmdpZnkoc2F2ZWRTY3JvbGxQb3NpdGlvbnMpXG4gICAgICApO1xuICAgICAgd2luZG93Lmhpc3Rvcnkuc2Nyb2xsUmVzdG9yYXRpb24gPSBcImF1dG9cIjtcbiAgICB9LCBbc3RvcmFnZUtleSwgZ2V0S2V5LCBuYXZpZ2F0aW9uLnN0YXRlLCBsb2NhdGlvbiwgbWF0Y2hlc10pXG4gICk7XG5cbiAgLy8gUmVhZCBpbiBhbnkgc2F2ZWQgc2Nyb2xsIGxvY2F0aW9uc1xuICBpZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlYWN0LWhvb2tzL3J1bGVzLW9mLWhvb2tzXG4gICAgUmVhY3QudXNlTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGxldCBzZXNzaW9uUG9zaXRpb25zID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbShcbiAgICAgICAgICBzdG9yYWdlS2V5IHx8IFNDUk9MTF9SRVNUT1JBVElPTl9TVE9SQUdFX0tFWVxuICAgICAgICApO1xuICAgICAgICBpZiAoc2Vzc2lvblBvc2l0aW9ucykge1xuICAgICAgICAgIHNhdmVkU2Nyb2xsUG9zaXRpb25zID0gSlNPTi5wYXJzZShzZXNzaW9uUG9zaXRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBuby1vcCwgdXNlIGRlZmF1bHQgZW1wdHkgb2JqZWN0XG4gICAgICB9XG4gICAgfSwgW3N0b3JhZ2VLZXldKTtcblxuICAgIC8vIEVuYWJsZSBzY3JvbGwgcmVzdG9yYXRpb24gaW4gdGhlIHJvdXRlclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgICBsZXQgZGlzYWJsZVNjcm9sbFJlc3RvcmF0aW9uID0gcm91dGVyPy5lbmFibGVTY3JvbGxSZXN0b3JhdGlvbihcbiAgICAgICAgc2F2ZWRTY3JvbGxQb3NpdGlvbnMsXG4gICAgICAgICgpID0+IHdpbmRvdy5zY3JvbGxZLFxuICAgICAgICBnZXRLZXlcbiAgICAgICk7XG4gICAgICByZXR1cm4gKCkgPT4gZGlzYWJsZVNjcm9sbFJlc3RvcmF0aW9uICYmIGRpc2FibGVTY3JvbGxSZXN0b3JhdGlvbigpO1xuICAgIH0sIFtyb3V0ZXIsIGdldEtleV0pO1xuXG4gICAgLy8gUmVzdG9yZSBzY3JvbGxpbmcgd2hlbiBzdGF0ZS5yZXN0b3JlU2Nyb2xsUG9zaXRpb24gY2hhbmdlc1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSByZWFjdC1ob29rcy9ydWxlcy1vZi1ob29rc1xuICAgIFJlYWN0LnVzZUxheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgICAvLyBFeHBsaWNpdCBmYWxzZSBtZWFucyBkb24ndCBkbyBhbnl0aGluZyAodXNlZCBmb3Igc3VibWlzc2lvbnMpXG4gICAgICBpZiAocmVzdG9yZVNjcm9sbFBvc2l0aW9uID09PSBmYWxzZSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIC8vIGJlZW4gaGVyZSBiZWZvcmUsIHNjcm9sbCB0byBpdFxuICAgICAgaWYgKHR5cGVvZiByZXN0b3JlU2Nyb2xsUG9zaXRpb24gPT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgd2luZG93LnNjcm9sbFRvKDAsIHJlc3RvcmVTY3JvbGxQb3NpdGlvbik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgLy8gdHJ5IHRvIHNjcm9sbCB0byB0aGUgaGFzaFxuICAgICAgaWYgKGxvY2F0aW9uLmhhc2gpIHtcbiAgICAgICAgbGV0IGVsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobG9jYXRpb24uaGFzaC5zbGljZSgxKSk7XG4gICAgICAgIGlmIChlbCkge1xuICAgICAgICAgIGVsLnNjcm9sbEludG9WaWV3KCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIERvbid0IHJlc2V0IGlmIHRoaXMgbmF2aWdhdGlvbiBvcHRlZCBvdXRcbiAgICAgIGlmIChwcmV2ZW50U2Nyb2xsUmVzZXQgPT09IHRydWUpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICAvLyBvdGhlcndpc2UgZ28gdG8gdGhlIHRvcCBvbiBuZXcgbG9jYXRpb25zXG4gICAgICB3aW5kb3cuc2Nyb2xsVG8oMCwgMCk7XG4gICAgfSwgW2xvY2F0aW9uLCByZXN0b3JlU2Nyb2xsUG9zaXRpb24sIHByZXZlbnRTY3JvbGxSZXNldF0pO1xuICB9XG59XG5cbi8qKlxuICogU2V0dXAgYSBjYWxsYmFjayB0byBiZSBmaXJlZCBvbiB0aGUgd2luZG93J3MgYGJlZm9yZXVubG9hZGAgZXZlbnQuIFRoaXMgaXNcbiAqIHVzZWZ1bCBmb3Igc2F2aW5nIHNvbWUgZGF0YSB0byBgd2luZG93LmxvY2FsU3RvcmFnZWAganVzdCBiZWZvcmUgdGhlIHBhZ2VcbiAqIHJlZnJlc2hlcy5cbiAqXG4gKiBOb3RlOiBUaGUgYGNhbGxiYWNrYCBhcmd1bWVudCBzaG91bGQgYmUgYSBmdW5jdGlvbiBjcmVhdGVkIHdpdGhcbiAqIGBSZWFjdC51c2VDYWxsYmFjaygpYC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHVzZUJlZm9yZVVubG9hZChcbiAgY2FsbGJhY2s6IChldmVudDogQmVmb3JlVW5sb2FkRXZlbnQpID0+IGFueSxcbiAgb3B0aW9ucz86IHsgY2FwdHVyZT86IGJvb2xlYW4gfVxuKTogdm9pZCB7XG4gIGxldCB7IGNhcHR1cmUgfSA9IG9wdGlvbnMgfHwge307XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgbGV0IG9wdHMgPSBjYXB0dXJlICE9IG51bGwgPyB7IGNhcHR1cmUgfSA6IHVuZGVmaW5lZDtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImJlZm9yZXVubG9hZFwiLCBjYWxsYmFjaywgb3B0cyk7XG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwiYmVmb3JldW5sb2FkXCIsIGNhbGxiYWNrLCBvcHRzKTtcbiAgICB9O1xuICB9LCBbY2FsbGJhY2ssIGNhcHR1cmVdKTtcbn1cblxuLyoqXG4gKiBTZXR1cCBhIGNhbGxiYWNrIHRvIGJlIGZpcmVkIG9uIHRoZSB3aW5kb3cncyBgcGFnZWhpZGVgIGV2ZW50LiBUaGlzIGlzXG4gKiB1c2VmdWwgZm9yIHNhdmluZyBzb21lIGRhdGEgdG8gYHdpbmRvdy5sb2NhbFN0b3JhZ2VgIGp1c3QgYmVmb3JlIHRoZSBwYWdlXG4gKiByZWZyZXNoZXMuICBUaGlzIGV2ZW50IGlzIGJldHRlciBzdXBwb3J0ZWQgdGhhbiBiZWZvcmV1bmxvYWQgYWNyb3NzIGJyb3dzZXJzLlxuICpcbiAqIE5vdGU6IFRoZSBgY2FsbGJhY2tgIGFyZ3VtZW50IHNob3VsZCBiZSBhIGZ1bmN0aW9uIGNyZWF0ZWQgd2l0aFxuICogYFJlYWN0LnVzZUNhbGxiYWNrKClgLlxuICovXG5mdW5jdGlvbiB1c2VQYWdlSGlkZShcbiAgY2FsbGJhY2s6IChldmVudDogUGFnZVRyYW5zaXRpb25FdmVudCkgPT4gYW55LFxuICBvcHRpb25zPzogeyBjYXB0dXJlPzogYm9vbGVhbiB9XG4pOiB2b2lkIHtcbiAgbGV0IHsgY2FwdHVyZSB9ID0gb3B0aW9ucyB8fCB7fTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBsZXQgb3B0cyA9IGNhcHR1cmUgIT0gbnVsbCA/IHsgY2FwdHVyZSB9IDogdW5kZWZpbmVkO1xuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicGFnZWhpZGVcIiwgY2FsbGJhY2ssIG9wdHMpO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInBhZ2VoaWRlXCIsIGNhbGxiYWNrLCBvcHRzKTtcbiAgICB9O1xuICB9LCBbY2FsbGJhY2ssIGNhcHR1cmVdKTtcbn1cblxuLyoqXG4gKiBXcmFwcGVyIGFyb3VuZCB1c2VCbG9ja2VyIHRvIHNob3cgYSB3aW5kb3cuY29uZmlybSBwcm9tcHQgdG8gdXNlcnMgaW5zdGVhZFxuICogb2YgYnVpbGRpbmcgYSBjdXN0b20gVUkgd2l0aCB1c2VCbG9ja2VyLlxuICpcbiAqIFdhcm5pbmc6IFRoaXMgaGFzICphIGxvdCBvZiByb3VnaCBlZGdlcyogYW5kIGJlaGF2ZXMgdmVyeSBkaWZmZXJlbnRseSAoYW5kXG4gKiB2ZXJ5IGluY29ycmVjdGx5IGluIHNvbWUgY2FzZXMpIGFjcm9zcyBicm93c2VycyBpZiB1c2VyIGNsaWNrIGFkZGl0aW9uXG4gKiBiYWNrL2ZvcndhcmQgbmF2aWdhdGlvbnMgd2hpbGUgdGhlIGNvbmZpcm0gaXMgb3Blbi4gIFVzZSBhdCB5b3VyIG93biByaXNrLlxuICovXG5mdW5jdGlvbiB1c2VQcm9tcHQoeyB3aGVuLCBtZXNzYWdlIH06IHsgd2hlbjogYm9vbGVhbjsgbWVzc2FnZTogc3RyaW5nIH0pIHtcbiAgbGV0IGJsb2NrZXIgPSB1c2VCbG9ja2VyKHdoZW4pO1xuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGJsb2NrZXIuc3RhdGUgPT09IFwiYmxvY2tlZFwiICYmICF3aGVuKSB7XG4gICAgICBibG9ja2VyLnJlc2V0KCk7XG4gICAgfVxuICB9LCBbYmxvY2tlciwgd2hlbl0pO1xuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGJsb2NrZXIuc3RhdGUgPT09IFwiYmxvY2tlZFwiKSB7XG4gICAgICBsZXQgcHJvY2VlZCA9IHdpbmRvdy5jb25maXJtKG1lc3NhZ2UpO1xuICAgICAgaWYgKHByb2NlZWQpIHtcbiAgICAgICAgc2V0VGltZW91dChibG9ja2VyLnByb2NlZWQsIDApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYmxvY2tlci5yZXNldCgpO1xuICAgICAgfVxuICAgIH1cbiAgfSwgW2Jsb2NrZXIsIG1lc3NhZ2VdKTtcbn1cblxuZXhwb3J0IHsgdXNlUHJvbXB0IGFzIHVuc3RhYmxlX3VzZVByb21wdCB9O1xuXG4vLyNlbmRyZWdpb25cblxuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbi8vI3JlZ2lvbiBVdGlsc1xuLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuZnVuY3Rpb24gd2FybmluZyhjb25kOiBib29sZWFuLCBtZXNzYWdlOiBzdHJpbmcpOiB2b2lkIHtcbiAgaWYgKCFjb25kKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09IFwidW5kZWZpbmVkXCIpIGNvbnNvbGUud2FybihtZXNzYWdlKTtcblxuICAgIHRyeSB7XG4gICAgICAvLyBXZWxjb21lIHRvIGRlYnVnZ2luZyBSZWFjdCBSb3V0ZXIhXG4gICAgICAvL1xuICAgICAgLy8gVGhpcyBlcnJvciBpcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB5b3UgY2FuIG1vcmUgZWFzaWx5XG4gICAgICAvLyBmaW5kIHRoZSBzb3VyY2UgZm9yIGEgd2FybmluZyB0aGF0IGFwcGVhcnMgaW4gdGhlIGNvbnNvbGUgYnlcbiAgICAgIC8vIGVuYWJsaW5nIFwicGF1c2Ugb24gZXhjZXB0aW9uc1wiIGluIHlvdXIgSmF2YVNjcmlwdCBkZWJ1Z2dlci5cbiAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lbXB0eVxuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbn1cbi8vI2VuZHJlZ2lvblxuXG5leHBvcnQgeyB1c2VTY3JvbGxSZXN0b3JhdGlvbiBhcyBVTlNBRkVfdXNlU2Nyb2xsUmVzdG9yYXRpb24gfTtcbiIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IGRlZmF1bHQge1wiYnV0dG9uXCI6XCJzcmMtY29tcG9uZW50cy1CdXR0b24tQnV0dG9uLW1vZHVsZV9fYnV0dG9uXCIsXCJidXR0b25fZGlzYWJsZWRcIjpcInNyYy1jb21wb25lbnRzLUJ1dHRvbi1CdXR0b24tbW9kdWxlX19idXR0b25fZGlzYWJsZWRcIixcImxvYWRpbmdcIjpcInNyYy1jb21wb25lbnRzLUJ1dHRvbi1CdXR0b24tbW9kdWxlX19sb2FkaW5nXCIsXCJjaGlsZHJlblwiOlwic3JjLWNvbXBvbmVudHMtQnV0dG9uLUJ1dHRvbi1tb2R1bGVfX2NoaWxkcmVuXCJ9OyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJiMjA4N2RjZWU5MWIxZjVmZDU5ZTMzOTI5MDM4YzA3Zi5zdmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYjNhZjU2NTY2ODJjYzA4YmIwM2EzMGIzNTk2NWZjODcuc3ZnXCI7IiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjRlNWM4NDNkMjFkNzg5NWRiYjNhMmJkNjliOTE2NjVmLnN2Z1wiOyIsImltcG9ydCBMb2FkZXJMIGZyb20gXCJAaWNvbnMvTG9hZGVyLWwuc3ZnXCI7XG5pbXBvcnQgTG9hZGVyTSBmcm9tIFwiQGljb25zL0xvYWRlci1tLnN2Z1wiO1xuaW1wb3J0IExvYWRlclMgZnJvbSBcIkBpY29ucy9Mb2FkZXItcy5zdmdcIjtcbmltcG9ydCBjbiBmcm9tIFwiY2xhc3NuYW1lc1wiO1xuXG5pbXBvcnQgY2xzIGZyb20gXCIuL0xvYWRlci5tb2R1bGUuc2Nzc1wiO1xuXG5leHBvcnQgZW51bSBMb2FkZXJTaXplIHtcbiAgcyA9IFwic1wiLFxuICBtID0gXCJtXCIsXG4gIGwgPSBcImxcIixcbn1cblxuZXhwb3J0IHR5cGUgTG9hZGVyUHJvcHMgPSB7XG4gIGxvYWRpbmc/OiBib29sZWFuO1xuICBzaXplPzogTG9hZGVyU2l6ZTtcbiAgY2xhc3NOYW1lPzogc3RyaW5nO1xufTtcblxuZXhwb3J0IGNvbnN0IExvYWRlcjogUmVhY3QuRkM8TG9hZGVyUHJvcHM+ID0gKHtcbiAgbG9hZGluZyA9IHRydWUsXG4gIHNpemUgPSBMb2FkZXJTaXplLm0sXG4gIGNsYXNzTmFtZSxcbn0pID0+IHtcbiAgY29uc3QgbG9hZGVySW1hZ2UgPSB7XG4gICAgW0xvYWRlclNpemUuc106IExvYWRlclMsXG4gICAgW0xvYWRlclNpemUubV06IExvYWRlck0sXG4gICAgW0xvYWRlclNpemUubF06IExvYWRlckwsXG4gIH07XG4gIHJldHVybiAoXG4gICAgPD5cbiAgICAgIHtsb2FkaW5nICYmIHNpemUgJiYgKFxuICAgICAgICA8aW1nXG4gICAgICAgICAgY2xhc3NOYW1lPXtjbihjbHMuTG9hZGVyLCBjbGFzc05hbWUpfVxuICAgICAgICAgIHNyYz17bG9hZGVySW1hZ2Vbc2l6ZV19XG4gICAgICAgICAgYWx0PVwibG9hZGVyXCJcbiAgICAgICAgLz5cbiAgICAgICl9XG4gICAgPC8+XG4gICk7XG59O1xuIiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQgZGVmYXVsdCB7XCJMb2FkZXJcIjpcInNyYy1jb21wb25lbnRzLUxvYWRlci1Mb2FkZXItbW9kdWxlX19Mb2FkZXJcIixcInJvdGF0ZVwiOlwic3JjLWNvbXBvbmVudHMtTG9hZGVyLUxvYWRlci1tb2R1bGVfX3JvdGF0ZVwifTsiLCJpbXBvcnQgeyBGQywgbWVtbyB9IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgY24gZnJvbSBcImNsYXNzbmFtZXNcIjtcblxuaW1wb3J0IGNscyBmcm9tIFwiLi9CdXR0b24ubW9kdWxlLnNjc3NcIjtcbmltcG9ydCB7IExvYWRlciwgTG9hZGVyU2l6ZSB9IGZyb20gXCIuLi9Mb2FkZXJcIjtcblxuZXhwb3J0IHR5cGUgQnV0dG9uUHJvcHMgPSBSZWFjdC5Qcm9wc1dpdGhDaGlsZHJlbjx7XG4gIGxvYWRpbmc/OiBib29sZWFuO1xufT4gJlxuICBSZWFjdC5CdXR0b25IVE1MQXR0cmlidXRlczxIVE1MQnV0dG9uRWxlbWVudD47XG5cbmV4cG9ydCBjb25zdCBCdXR0b246IEZDPEJ1dHRvblByb3BzPiA9IG1lbW8oXG4gICh7IGNsYXNzTmFtZSwgY2hpbGRyZW4sIGxvYWRpbmcsIGRpc2FibGVkLCAuLi5vdGhlclByb3BzIH0pID0+IChcbiAgICA8YnV0dG9uXG4gICAgICBjbGFzc05hbWU9e2NuKFxuICAgICAgICBjbGFzc05hbWUsXG4gICAgICAgIGNscy5idXR0b24sXG4gICAgICAgIGxvYWRpbmcgJiYgY2xzLmxvYWRpbmcsXG4gICAgICAgIGRpc2FibGVkICYmIGNscy5idXR0b25fZGlzYWJsZWRcbiAgICAgICl9XG4gICAgICBkaXNhYmxlZD17bG9hZGluZyB8fCBkaXNhYmxlZH1cbiAgICAgIHsuLi5vdGhlclByb3BzfVxuICAgID5cbiAgICAgIHtsb2FkaW5nID8gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xzLmNoaWxkcmVufT5cbiAgICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPExvYWRlciBzaXplPXtMb2FkZXJTaXplLnN9IC8+XG4gICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgPGRpdj57Y2hpbGRyZW59PC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKSA6IChcbiAgICAgICAgY2hpbGRyZW5cbiAgICAgICl9XG4gICAgPC9idXR0b24+XG4gIClcbik7XG4iLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiYTAxZmYxYjYwZDZjOWVmYjE2ZjdjNzdmMDU2MjE5YTcuc3ZnXCI7IiwiZXhwb3J0IGNvbnN0IENBUlRfTE9DQUxTVE9SQUdFX0tFWSA9IFwiY2FydFwiO1xuIiwiY29uc3QgbmljZUVycm9ycyA9IHtcbiAgICAwOiBgSW52YWxpZCB2YWx1ZSBmb3IgY29uZmlndXJhdGlvbiAnZW5mb3JjZUFjdGlvbnMnLCBleHBlY3RlZCAnbmV2ZXInLCAnYWx3YXlzJyBvciAnb2JzZXJ2ZWQnYCxcbiAgICAxKGFubm90YXRpb25UeXBlLCBrZXk6IFByb3BlcnR5S2V5KSB7XG4gICAgICAgIHJldHVybiBgQ2Fubm90IGFwcGx5ICcke2Fubm90YXRpb25UeXBlfScgdG8gJyR7a2V5LnRvU3RyaW5nKCl9JzogRmllbGQgbm90IGZvdW5kLmBcbiAgICB9LFxuICAgIC8qXG4gICAgMihwcm9wKSB7XG4gICAgICAgIHJldHVybiBgaW52YWxpZCBkZWNvcmF0b3IgZm9yICcke3Byb3AudG9TdHJpbmcoKX0nYFxuICAgIH0sXG4gICAgMyhwcm9wKSB7XG4gICAgICAgIHJldHVybiBgQ2Fubm90IGRlY29yYXRlICcke3Byb3AudG9TdHJpbmcoKX0nOiBhY3Rpb24gY2FuIG9ubHkgYmUgdXNlZCBvbiBwcm9wZXJ0aWVzIHdpdGggYSBmdW5jdGlvbiB2YWx1ZS5gXG4gICAgfSxcbiAgICA0KHByb3ApIHtcbiAgICAgICAgcmV0dXJuIGBDYW5ub3QgZGVjb3JhdGUgJyR7cHJvcC50b1N0cmluZygpfSc6IGNvbXB1dGVkIGNhbiBvbmx5IGJlIHVzZWQgb24gZ2V0dGVyIHByb3BlcnRpZXMuYFxuICAgIH0sXG4gICAgKi9cbiAgICA1OiBcIidrZXlzKCknIGNhbiBvbmx5IGJlIHVzZWQgb24gb2JzZXJ2YWJsZSBvYmplY3RzLCBhcnJheXMsIHNldHMgYW5kIG1hcHNcIixcbiAgICA2OiBcIid2YWx1ZXMoKScgY2FuIG9ubHkgYmUgdXNlZCBvbiBvYnNlcnZhYmxlIG9iamVjdHMsIGFycmF5cywgc2V0cyBhbmQgbWFwc1wiLFxuICAgIDc6IFwiJ2VudHJpZXMoKScgY2FuIG9ubHkgYmUgdXNlZCBvbiBvYnNlcnZhYmxlIG9iamVjdHMsIGFycmF5cyBhbmQgbWFwc1wiLFxuICAgIDg6IFwiJ3NldCgpJyBjYW4gb25seSBiZSB1c2VkIG9uIG9ic2VydmFibGUgb2JqZWN0cywgYXJyYXlzIGFuZCBtYXBzXCIsXG4gICAgOTogXCIncmVtb3ZlKCknIGNhbiBvbmx5IGJlIHVzZWQgb24gb2JzZXJ2YWJsZSBvYmplY3RzLCBhcnJheXMgYW5kIG1hcHNcIixcbiAgICAxMDogXCInaGFzKCknIGNhbiBvbmx5IGJlIHVzZWQgb24gb2JzZXJ2YWJsZSBvYmplY3RzLCBhcnJheXMgYW5kIG1hcHNcIixcbiAgICAxMTogXCInZ2V0KCknIGNhbiBvbmx5IGJlIHVzZWQgb24gb2JzZXJ2YWJsZSBvYmplY3RzLCBhcnJheXMgYW5kIG1hcHNcIixcbiAgICAxMjogYEludmFsaWQgYW5ub3RhdGlvbmAsXG4gICAgMTM6IGBEeW5hbWljIG9ic2VydmFibGUgb2JqZWN0cyBjYW5ub3QgYmUgZnJvemVuLiBJZiB5b3UncmUgcGFzc2luZyBvYnNlcnZhYmxlcyB0byAzcmQgcGFydHkgY29tcG9uZW50L2Z1bmN0aW9uIHRoYXQgY2FsbHMgT2JqZWN0LmZyZWV6ZSwgcGFzcyBjb3B5IGluc3RlYWQ6IHRvSlMob2JzZXJ2YWJsZSlgLFxuICAgIDE0OiBcIkludGVyY2VwdCBoYW5kbGVycyBzaG91bGQgcmV0dXJuIG5vdGhpbmcgb3IgYSBjaGFuZ2Ugb2JqZWN0XCIsXG4gICAgMTU6IGBPYnNlcnZhYmxlIGFycmF5cyBjYW5ub3QgYmUgZnJvemVuLiBJZiB5b3UncmUgcGFzc2luZyBvYnNlcnZhYmxlcyB0byAzcmQgcGFydHkgY29tcG9uZW50L2Z1bmN0aW9uIHRoYXQgY2FsbHMgT2JqZWN0LmZyZWV6ZSwgcGFzcyBjb3B5IGluc3RlYWQ6IHRvSlMob2JzZXJ2YWJsZSlgLFxuICAgIDE2OiBgTW9kaWZpY2F0aW9uIGV4Y2VwdGlvbjogdGhlIGludGVybmFsIHN0cnVjdHVyZSBvZiBhbiBvYnNlcnZhYmxlIGFycmF5IHdhcyBjaGFuZ2VkLmAsXG4gICAgMTcoaW5kZXgsIGxlbmd0aCkge1xuICAgICAgICByZXR1cm4gYFttb2J4LmFycmF5XSBJbmRleCBvdXQgb2YgYm91bmRzLCAke2luZGV4fSBpcyBsYXJnZXIgdGhhbiAke2xlbmd0aH1gXG4gICAgfSxcbiAgICAxODogXCJtb2J4Lm1hcCByZXF1aXJlcyBNYXAgcG9seWZpbGwgZm9yIHRoZSBjdXJyZW50IGJyb3dzZXIuIENoZWNrIGJhYmVsLXBvbHlmaWxsIG9yIGNvcmUtanMvZXM2L21hcC5qc1wiLFxuICAgIDE5KG90aGVyKSB7XG4gICAgICAgIHJldHVybiBcIkNhbm5vdCBpbml0aWFsaXplIGZyb20gY2xhc3NlcyB0aGF0IGluaGVyaXQgZnJvbSBNYXA6IFwiICsgb3RoZXIuY29uc3RydWN0b3IubmFtZVxuICAgIH0sXG4gICAgMjAob3RoZXIpIHtcbiAgICAgICAgcmV0dXJuIFwiQ2Fubm90IGluaXRpYWxpemUgbWFwIGZyb20gXCIgKyBvdGhlclxuICAgIH0sXG4gICAgMjEoZGF0YVN0cnVjdHVyZSkge1xuICAgICAgICByZXR1cm4gYENhbm5vdCBjb252ZXJ0IHRvIG1hcCBmcm9tICcke2RhdGFTdHJ1Y3R1cmV9J2BcbiAgICB9LFxuICAgIDIyOiBcIm1vYnguc2V0IHJlcXVpcmVzIFNldCBwb2x5ZmlsbCBmb3IgdGhlIGN1cnJlbnQgYnJvd3Nlci4gQ2hlY2sgYmFiZWwtcG9seWZpbGwgb3IgY29yZS1qcy9lczYvc2V0LmpzXCIsXG4gICAgMjM6IFwiSXQgaXMgbm90IHBvc3NpYmxlIHRvIGdldCBpbmRleCBhdG9tcyBmcm9tIGFycmF5c1wiLFxuICAgIDI0KHRoaW5nKSB7XG4gICAgICAgIHJldHVybiBcIkNhbm5vdCBvYnRhaW4gYWRtaW5pc3RyYXRpb24gZnJvbSBcIiArIHRoaW5nXG4gICAgfSxcbiAgICAyNShwcm9wZXJ0eSwgbmFtZSkge1xuICAgICAgICByZXR1cm4gYHRoZSBlbnRyeSAnJHtwcm9wZXJ0eX0nIGRvZXMgbm90IGV4aXN0IGluIHRoZSBvYnNlcnZhYmxlIG1hcCAnJHtuYW1lfSdgXG4gICAgfSxcbiAgICAyNjogXCJwbGVhc2Ugc3BlY2lmeSBhIHByb3BlcnR5XCIsXG4gICAgMjcocHJvcGVydHksIG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGBubyBvYnNlcnZhYmxlIHByb3BlcnR5ICcke3Byb3BlcnR5LnRvU3RyaW5nKCl9JyBmb3VuZCBvbiB0aGUgb2JzZXJ2YWJsZSBvYmplY3QgJyR7bmFtZX0nYFxuICAgIH0sXG4gICAgMjgodGhpbmcpIHtcbiAgICAgICAgcmV0dXJuIFwiQ2Fubm90IG9idGFpbiBhdG9tIGZyb20gXCIgKyB0aGluZ1xuICAgIH0sXG4gICAgMjk6IFwiRXhwZWN0aW5nIHNvbWUgb2JqZWN0XCIsXG4gICAgMzA6IFwiaW52YWxpZCBhY3Rpb24gc3RhY2suIGRpZCB5b3UgZm9yZ2V0IHRvIGZpbmlzaCBhbiBhY3Rpb24/XCIsXG4gICAgMzE6IFwibWlzc2luZyBvcHRpb24gZm9yIGNvbXB1dGVkOiBnZXRcIixcbiAgICAzMihuYW1lLCBkZXJpdmF0aW9uKSB7XG4gICAgICAgIHJldHVybiBgQ3ljbGUgZGV0ZWN0ZWQgaW4gY29tcHV0YXRpb24gJHtuYW1lfTogJHtkZXJpdmF0aW9ufWBcbiAgICB9LFxuICAgIDMzKG5hbWUpIHtcbiAgICAgICAgcmV0dXJuIGBUaGUgc2V0dGVyIG9mIGNvbXB1dGVkIHZhbHVlICcke25hbWV9JyBpcyB0cnlpbmcgdG8gdXBkYXRlIGl0c2VsZi4gRGlkIHlvdSBpbnRlbmQgdG8gdXBkYXRlIGFuIF9vYnNlcnZhYmxlXyB2YWx1ZSwgaW5zdGVhZCBvZiB0aGUgY29tcHV0ZWQgcHJvcGVydHk/YFxuICAgIH0sXG4gICAgMzQobmFtZSkge1xuICAgICAgICByZXR1cm4gYFtDb21wdXRlZFZhbHVlICcke25hbWV9J10gSXQgaXMgbm90IHBvc3NpYmxlIHRvIGFzc2lnbiBhIG5ldyB2YWx1ZSB0byBhIGNvbXB1dGVkIHZhbHVlLmBcbiAgICB9LFxuICAgIDM1OiBcIlRoZXJlIGFyZSBtdWx0aXBsZSwgZGlmZmVyZW50IHZlcnNpb25zIG9mIE1vYlggYWN0aXZlLiBNYWtlIHN1cmUgTW9iWCBpcyBsb2FkZWQgb25seSBvbmNlIG9yIHVzZSBgY29uZmlndXJlKHsgaXNvbGF0ZUdsb2JhbFN0YXRlOiB0cnVlIH0pYFwiLFxuICAgIDM2OiBcImlzb2xhdGVHbG9iYWxTdGF0ZSBzaG91bGQgYmUgY2FsbGVkIGJlZm9yZSBNb2JYIGlzIHJ1bm5pbmcgYW55IHJlYWN0aW9uc1wiLFxuICAgIDM3KG1ldGhvZCkge1xuICAgICAgICByZXR1cm4gYFttb2J4XSBcXGBvYnNlcnZhYmxlQXJyYXkuJHttZXRob2R9KClcXGAgbXV0YXRlcyB0aGUgYXJyYXkgaW4tcGxhY2UsIHdoaWNoIGlzIG5vdCBhbGxvd2VkIGluc2lkZSBhIGRlcml2YXRpb24uIFVzZSBcXGBhcnJheS5zbGljZSgpLiR7bWV0aG9kfSgpXFxgIGluc3RlYWRgXG4gICAgfSxcbiAgICAzODogXCInb3duS2V5cygpJyBjYW4gb25seSBiZSB1c2VkIG9uIG9ic2VydmFibGUgb2JqZWN0c1wiLFxuICAgIDM5OiBcIidkZWZpbmVQcm9wZXJ0eSgpJyBjYW4gb25seSBiZSB1c2VkIG9uIG9ic2VydmFibGUgb2JqZWN0c1wiXG59IGFzIGNvbnN0XG5cbmNvbnN0IGVycm9yczogdHlwZW9mIG5pY2VFcnJvcnMgPSBfX0RFVl9fID8gbmljZUVycm9ycyA6ICh7fSBhcyBhbnkpXG5cbmV4cG9ydCBmdW5jdGlvbiBkaWUoZXJyb3I6IHN0cmluZyB8IGtleW9mIHR5cGVvZiBlcnJvcnMsIC4uLmFyZ3M6IGFueVtdKTogbmV2ZXIge1xuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICAgIGxldCBlOiBhbnkgPSB0eXBlb2YgZXJyb3IgPT09IFwic3RyaW5nXCIgPyBlcnJvciA6IGVycm9yc1tlcnJvcl1cbiAgICAgICAgaWYgKHR5cGVvZiBlID09PSBcImZ1bmN0aW9uXCIpIGUgPSBlLmFwcGx5KG51bGwsIGFyZ3MgYXMgYW55KVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFtNb2JYXSAke2V9YClcbiAgICB9XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICB0eXBlb2YgZXJyb3IgPT09IFwibnVtYmVyXCJcbiAgICAgICAgICAgID8gYFtNb2JYXSBtaW5pZmllZCBlcnJvciBucjogJHtlcnJvcn0ke1xuICAgICAgICAgICAgICAgICAgYXJncy5sZW5ndGggPyBcIiBcIiArIGFyZ3MubWFwKFN0cmluZykuam9pbihcIixcIikgOiBcIlwiXG4gICAgICAgICAgICAgIH0uIEZpbmQgdGhlIGZ1bGwgZXJyb3IgYXQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9tb2J4anMvbW9ieC9ibG9iL21haW4vcGFja2FnZXMvbW9ieC9zcmMvZXJyb3JzLnRzYFxuICAgICAgICAgICAgOiBgW01vYlhdICR7ZXJyb3J9YFxuICAgIClcbn1cbiIsImRlY2xhcmUgY29uc3Qgd2luZG93OiBhbnlcbmRlY2xhcmUgY29uc3Qgc2VsZjogYW55XG5cbmNvbnN0IG1vY2tHbG9iYWwgPSB7fVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0R2xvYmFsKCkge1xuICAgIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICByZXR1cm4gZ2xvYmFsVGhpc1xuICAgIH1cbiAgICBpZiAodHlwZW9mIHdpbmRvdyAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICByZXR1cm4gd2luZG93XG4gICAgfVxuICAgIGlmICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJldHVybiBnbG9iYWxcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIHJldHVybiBzZWxmXG4gICAgfVxuICAgIHJldHVybiBtb2NrR2xvYmFsXG59XG4iLCJpbXBvcnQgeyBnbG9iYWxTdGF0ZSwgZGllIH0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuLy8gV2Ugc2hvcnRlbiBhbnl0aGluZyB1c2VkID4gNSB0aW1lc1xuZXhwb3J0IGNvbnN0IGFzc2lnbiA9IE9iamVjdC5hc3NpZ25cbmV4cG9ydCBjb25zdCBnZXREZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvclxuZXhwb3J0IGNvbnN0IGRlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5XG5leHBvcnQgY29uc3Qgb2JqZWN0UHJvdG90eXBlID0gT2JqZWN0LnByb3RvdHlwZVxuXG5leHBvcnQgY29uc3QgRU1QVFlfQVJSQVkgPSBbXVxuT2JqZWN0LmZyZWV6ZShFTVBUWV9BUlJBWSlcblxuZXhwb3J0IGNvbnN0IEVNUFRZX09CSkVDVCA9IHt9XG5PYmplY3QuZnJlZXplKEVNUFRZX09CSkVDVClcblxuZXhwb3J0IGludGVyZmFjZSBMYW1iZGEge1xuICAgICgpOiB2b2lkXG4gICAgbmFtZT86IHN0cmluZ1xufVxuXG5jb25zdCBoYXNQcm94eSA9IHR5cGVvZiBQcm94eSAhPT0gXCJ1bmRlZmluZWRcIlxuY29uc3QgcGxhaW5PYmplY3RTdHJpbmcgPSBPYmplY3QudG9TdHJpbmcoKVxuXG5leHBvcnQgZnVuY3Rpb24gYXNzZXJ0UHJveGllcygpIHtcbiAgICBpZiAoIWhhc1Byb3h5KSB7XG4gICAgICAgIGRpZShcbiAgICAgICAgICAgIF9fREVWX19cbiAgICAgICAgICAgICAgICA/IFwiYFByb3h5YCBvYmplY3RzIGFyZSBub3QgYXZhaWxhYmxlIGluIHRoZSBjdXJyZW50IGVudmlyb25tZW50LiBQbGVhc2UgY29uZmlndXJlIE1vYlggdG8gZW5hYmxlIGEgZmFsbGJhY2sgaW1wbGVtZW50YXRpb24uYFwiXG4gICAgICAgICAgICAgICAgOiBcIlByb3h5IG5vdCBhdmFpbGFibGVcIlxuICAgICAgICApXG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gd2FybkFib3V0UHJveHlSZXF1aXJlbWVudChtc2c6IHN0cmluZykge1xuICAgIGlmIChfX0RFVl9fICYmIGdsb2JhbFN0YXRlLnZlcmlmeVByb3hpZXMpIHtcbiAgICAgICAgZGllKFxuICAgICAgICAgICAgXCJNb2JYIGlzIGN1cnJlbnRseSBjb25maWd1cmVkIHRvIGJlIGFibGUgdG8gcnVuIGluIEVTNSBtb2RlLCBidXQgaW4gRVM1IE1vYlggd29uJ3QgYmUgYWJsZSB0byBcIiArXG4gICAgICAgICAgICAgICAgbXNnXG4gICAgICAgIClcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXROZXh0SWQoKSB7XG4gICAgcmV0dXJuICsrZ2xvYmFsU3RhdGUubW9ieEd1aWRcbn1cblxuLyoqXG4gKiBNYWtlcyBzdXJlIHRoYXQgdGhlIHByb3ZpZGVkIGZ1bmN0aW9uIGlzIGludm9rZWQgYXQgbW9zdCBvbmNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gb25jZShmdW5jOiBMYW1iZGEpOiBMYW1iZGEge1xuICAgIGxldCBpbnZva2VkID0gZmFsc2VcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoaW52b2tlZCkge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgaW52b2tlZCA9IHRydWVcbiAgICAgICAgcmV0dXJuIChmdW5jIGFzIGFueSkuYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IG5vb3AgPSAoKSA9PiB7fVxuXG5leHBvcnQgZnVuY3Rpb24gaXNGdW5jdGlvbihmbjogYW55KTogZm4gaXMgRnVuY3Rpb24ge1xuICAgIHJldHVybiB0eXBlb2YgZm4gPT09IFwiZnVuY3Rpb25cIlxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNTdHJpbmcodmFsdWU6IGFueSk6IHZhbHVlIGlzIHN0cmluZyB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIlxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNTdHJpbmdpc2godmFsdWU6IGFueSk6IHZhbHVlIGlzIHN0cmluZyB8IG51bWJlciB8IHN5bWJvbCB7XG4gICAgY29uc3QgdCA9IHR5cGVvZiB2YWx1ZVxuICAgIHN3aXRjaCAodCkge1xuICAgICAgICBjYXNlIFwic3RyaW5nXCI6XG4gICAgICAgIGNhc2UgXCJzeW1ib2xcIjpcbiAgICAgICAgY2FzZSBcIm51bWJlclwiOlxuICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc09iamVjdCh2YWx1ZTogYW55KTogdmFsdWUgaXMgT2JqZWN0IHtcbiAgICByZXR1cm4gdmFsdWUgIT09IG51bGwgJiYgdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlOiBhbnkpIHtcbiAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgY29uc3QgcHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWUpXG4gICAgaWYgKHByb3RvID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgY29uc3QgcHJvdG9Db25zdHJ1Y3RvciA9IE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3RvLCBcImNvbnN0cnVjdG9yXCIpICYmIHByb3RvLmNvbnN0cnVjdG9yXG4gICAgcmV0dXJuIChcbiAgICAgICAgdHlwZW9mIHByb3RvQ29uc3RydWN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBwcm90b0NvbnN0cnVjdG9yLnRvU3RyaW5nKCkgPT09IHBsYWluT2JqZWN0U3RyaW5nXG4gICAgKVxufVxuXG4vLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzc4NjUxNzBcbmV4cG9ydCBmdW5jdGlvbiBpc0dlbmVyYXRvcihvYmo6IGFueSk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGNvbnN0cnVjdG9yID0gb2JqPy5jb25zdHJ1Y3RvclxuICAgIGlmICghY29uc3RydWN0b3IpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIGlmIChcbiAgICAgICAgXCJHZW5lcmF0b3JGdW5jdGlvblwiID09PSBjb25zdHJ1Y3Rvci5uYW1lIHx8XG4gICAgICAgIFwiR2VuZXJhdG9yRnVuY3Rpb25cIiA9PT0gY29uc3RydWN0b3IuZGlzcGxheU5hbWVcbiAgICApIHtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRIaWRkZW5Qcm9wKG9iamVjdDogYW55LCBwcm9wTmFtZTogUHJvcGVydHlLZXksIHZhbHVlOiBhbnkpIHtcbiAgICBkZWZpbmVQcm9wZXJ0eShvYmplY3QsIHByb3BOYW1lLCB7XG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZVxuICAgIH0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRIaWRkZW5GaW5hbFByb3Aob2JqZWN0OiBhbnksIHByb3BOYW1lOiBQcm9wZXJ0eUtleSwgdmFsdWU6IGFueSkge1xuICAgIGRlZmluZVByb3BlcnR5KG9iamVjdCwgcHJvcE5hbWUsIHtcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZVxuICAgIH0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVJbnN0YW5jZW9mUHJlZGljYXRlPFQ+KFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICB0aGVDbGFzczogbmV3ICguLi5hcmdzOiBhbnlbXSkgPT4gVFxuKTogKHg6IGFueSkgPT4geCBpcyBUIHtcbiAgICBjb25zdCBwcm9wTmFtZSA9IFwiaXNNb2JYXCIgKyBuYW1lXG4gICAgdGhlQ2xhc3MucHJvdG90eXBlW3Byb3BOYW1lXSA9IHRydWVcbiAgICByZXR1cm4gZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgcmV0dXJuIGlzT2JqZWN0KHgpICYmIHhbcHJvcE5hbWVdID09PSB0cnVlXG4gICAgfSBhcyBhbnlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRVM2TWFwKHRoaW5nOiBhbnkpOiB0aGluZyBpcyBNYXA8YW55LCBhbnk+IHtcbiAgICByZXR1cm4gdGhpbmcgaW5zdGFuY2VvZiBNYXBcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRVM2U2V0KHRoaW5nOiBhbnkpOiB0aGluZyBpcyBTZXQ8YW55PiB7XG4gICAgcmV0dXJuIHRoaW5nIGluc3RhbmNlb2YgU2V0XG59XG5cbmNvbnN0IGhhc0dldE93blByb3BlcnR5U3ltYm9scyA9IHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzICE9PSBcInVuZGVmaW5lZFwiXG5cbi8qKlxuICogUmV0dXJucyB0aGUgZm9sbG93aW5nOiBvd24gZW51bWVyYWJsZSBrZXlzIGFuZCBzeW1ib2xzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGxhaW5PYmplY3RLZXlzKG9iamVjdDogYW55KSB7XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdClcbiAgICAvLyBOb3Qgc3VwcG9ydGVkIGluIElFLCBzbyB0aGVyZSBhcmUgbm90IGdvaW5nIHRvIGJlIHN5bWJvbCBwcm9wcyBhbnl3YXkuLi5cbiAgICBpZiAoIWhhc0dldE93blByb3BlcnR5U3ltYm9scykge1xuICAgICAgICByZXR1cm4ga2V5c1xuICAgIH1cbiAgICBjb25zdCBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpXG4gICAgaWYgKCFzeW1ib2xzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4ga2V5c1xuICAgIH1cbiAgICByZXR1cm4gWy4uLmtleXMsIC4uLnN5bWJvbHMuZmlsdGVyKHMgPT4gb2JqZWN0UHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqZWN0LCBzKSldXG59XG5cbi8vIEZyb20gSW1tZXIgdXRpbHNcbi8vIFJldHVybnMgYWxsIG93biBrZXlzLCBpbmNsdWRpbmcgbm9uLWVudW1lcmFibGUgYW5kIHN5bWJvbGljXG5leHBvcnQgY29uc3Qgb3duS2V5czogKHRhcmdldDogYW55KSA9PiBBcnJheTxzdHJpbmcgfCBzeW1ib2w+ID1cbiAgICB0eXBlb2YgUmVmbGVjdCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBSZWZsZWN0Lm93bktleXNcbiAgICAgICAgPyBSZWZsZWN0Lm93bktleXNcbiAgICAgICAgOiBoYXNHZXRPd25Qcm9wZXJ0eVN5bWJvbHNcbiAgICAgICAgPyBvYmogPT4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKS5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmopIGFzIGFueSlcbiAgICAgICAgOiAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc1xuXG5leHBvcnQgZnVuY3Rpb24gc3RyaW5naWZ5S2V5KGtleTogYW55KTogc3RyaW5nIHtcbiAgICBpZiAodHlwZW9mIGtleSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICByZXR1cm4ga2V5XG4gICAgfVxuICAgIGlmICh0eXBlb2Yga2V5ID09PSBcInN5bWJvbFwiKSB7XG4gICAgICAgIHJldHVybiBrZXkudG9TdHJpbmcoKVxuICAgIH1cbiAgICByZXR1cm4gbmV3IFN0cmluZyhrZXkpLnRvU3RyaW5nKClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvUHJpbWl0aXZlKHZhbHVlOiBhbnkpIHtcbiAgICByZXR1cm4gdmFsdWUgPT09IG51bGwgPyBudWxsIDogdHlwZW9mIHZhbHVlID09PSBcIm9iamVjdFwiID8gXCJcIiArIHZhbHVlIDogdmFsdWVcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhc1Byb3AodGFyZ2V0OiBPYmplY3QsIHByb3A6IFByb3BlcnR5S2V5KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIG9iamVjdFByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHRhcmdldCwgcHJvcClcbn1cblxuLy8gRnJvbSBJbW1lciB1dGlsc1xuZXhwb3J0IGNvbnN0IGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPVxuICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIHx8XG4gICAgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyh0YXJnZXQ6IGFueSkge1xuICAgICAgICAvLyBQb2x5ZmlsbCBuZWVkZWQgZm9yIEhlcm1lcyBhbmQgSUUsIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svaGVybWVzL2lzc3Vlcy8yNzRcbiAgICAgICAgY29uc3QgcmVzOiBhbnkgPSB7fVxuICAgICAgICAvLyBOb3RlOiB3aXRob3V0IHBvbHlmaWxsIGZvciBvd25LZXlzLCBzeW1ib2xzIHdvbid0IGJlIHBpY2tlZCB1cFxuICAgICAgICBvd25LZXlzKHRhcmdldCkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgICAgICAgcmVzW2tleV0gPSBnZXREZXNjcmlwdG9yKHRhcmdldCwga2V5KVxuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gcmVzXG4gICAgfVxuIiwiaW1wb3J0IHsgQW5ub3RhdGlvbiwgYWRkSGlkZGVuUHJvcCwgQW5ub3RhdGlvbnNNYXAsIGhhc1Byb3AsIGRpZSwgaXNPdmVycmlkZSB9IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbmV4cG9ydCBjb25zdCBzdG9yZWRBbm5vdGF0aW9uc1N5bWJvbCA9IFN5bWJvbChcIm1vYngtc3RvcmVkLWFubm90YXRpb25zXCIpXG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgYWN0cyBhc1xuICogLSBkZWNvcmF0b3JcbiAqIC0gYW5ub3RhdGlvbiBvYmplY3RcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURlY29yYXRvckFubm90YXRpb24oYW5ub3RhdGlvbjogQW5ub3RhdGlvbik6IFByb3BlcnR5RGVjb3JhdG9yICYgQW5ub3RhdGlvbiB7XG4gICAgZnVuY3Rpb24gZGVjb3JhdG9yKHRhcmdldCwgcHJvcGVydHkpIHtcbiAgICAgICAgc3RvcmVBbm5vdGF0aW9uKHRhcmdldCwgcHJvcGVydHksIGFubm90YXRpb24pXG4gICAgfVxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKGRlY29yYXRvciwgYW5ub3RhdGlvbilcbn1cblxuLyoqXG4gKiBTdG9yZXMgYW5ub3RhdGlvbiB0byBwcm90b3R5cGUsXG4gKiBzbyBpdCBjYW4gYmUgaW5zcGVjdGVkIGxhdGVyIGJ5IGBtYWtlT2JzZXJ2YWJsZWAgY2FsbGVkIGZyb20gY29uc3RydWN0b3JcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHN0b3JlQW5ub3RhdGlvbihwcm90b3R5cGU6IGFueSwga2V5OiBQcm9wZXJ0eUtleSwgYW5ub3RhdGlvbjogQW5ub3RhdGlvbikge1xuICAgIGlmICghaGFzUHJvcChwcm90b3R5cGUsIHN0b3JlZEFubm90YXRpb25zU3ltYm9sKSkge1xuICAgICAgICBhZGRIaWRkZW5Qcm9wKHByb3RvdHlwZSwgc3RvcmVkQW5ub3RhdGlvbnNTeW1ib2wsIHtcbiAgICAgICAgICAgIC8vIEluaGVyaXQgYW5ub3RhdGlvbnNcbiAgICAgICAgICAgIC4uLnByb3RvdHlwZVtzdG9yZWRBbm5vdGF0aW9uc1N5bWJvbF1cbiAgICAgICAgfSlcbiAgICB9XG4gICAgLy8gQG92ZXJyaWRlIG11c3Qgb3ZlcnJpZGUgc29tZXRoaW5nXG4gICAgaWYgKF9fREVWX18gJiYgaXNPdmVycmlkZShhbm5vdGF0aW9uKSAmJiAhaGFzUHJvcChwcm90b3R5cGVbc3RvcmVkQW5ub3RhdGlvbnNTeW1ib2xdLCBrZXkpKSB7XG4gICAgICAgIGNvbnN0IGZpZWxkTmFtZSA9IGAke3Byb3RvdHlwZS5jb25zdHJ1Y3Rvci5uYW1lfS5wcm90b3R5cGUuJHtrZXkudG9TdHJpbmcoKX1gXG4gICAgICAgIGRpZShcbiAgICAgICAgICAgIGAnJHtmaWVsZE5hbWV9JyBpcyBkZWNvcmF0ZWQgd2l0aCAnb3ZlcnJpZGUnLCBgICtcbiAgICAgICAgICAgICAgICBgYnV0IG5vIHN1Y2ggZGVjb3JhdGVkIG1lbWJlciB3YXMgZm91bmQgb24gcHJvdG90eXBlLmBcbiAgICAgICAgKVxuICAgIH1cbiAgICAvLyBDYW5ub3QgcmUtZGVjb3JhdGVcbiAgICBhc3NlcnROb3REZWNvcmF0ZWQocHJvdG90eXBlLCBhbm5vdGF0aW9uLCBrZXkpXG5cbiAgICAvLyBJZ25vcmUgb3ZlcnJpZGVcbiAgICBpZiAoIWlzT3ZlcnJpZGUoYW5ub3RhdGlvbikpIHtcbiAgICAgICAgcHJvdG90eXBlW3N0b3JlZEFubm90YXRpb25zU3ltYm9sXVtrZXldID0gYW5ub3RhdGlvblxuICAgIH1cbn1cblxuZnVuY3Rpb24gYXNzZXJ0Tm90RGVjb3JhdGVkKHByb3RvdHlwZTogb2JqZWN0LCBhbm5vdGF0aW9uOiBBbm5vdGF0aW9uLCBrZXk6IFByb3BlcnR5S2V5KSB7XG4gICAgaWYgKF9fREVWX18gJiYgIWlzT3ZlcnJpZGUoYW5ub3RhdGlvbikgJiYgaGFzUHJvcChwcm90b3R5cGVbc3RvcmVkQW5ub3RhdGlvbnNTeW1ib2xdLCBrZXkpKSB7XG4gICAgICAgIGNvbnN0IGZpZWxkTmFtZSA9IGAke3Byb3RvdHlwZS5jb25zdHJ1Y3Rvci5uYW1lfS5wcm90b3R5cGUuJHtrZXkudG9TdHJpbmcoKX1gXG4gICAgICAgIGNvbnN0IGN1cnJlbnRBbm5vdGF0aW9uVHlwZSA9IHByb3RvdHlwZVtzdG9yZWRBbm5vdGF0aW9uc1N5bWJvbF1ba2V5XS5hbm5vdGF0aW9uVHlwZV9cbiAgICAgICAgY29uc3QgcmVxdWVzdGVkQW5ub3RhdGlvblR5cGUgPSBhbm5vdGF0aW9uLmFubm90YXRpb25UeXBlX1xuICAgICAgICBkaWUoXG4gICAgICAgICAgICBgQ2Fubm90IGFwcGx5ICdAJHtyZXF1ZXN0ZWRBbm5vdGF0aW9uVHlwZX0nIHRvICcke2ZpZWxkTmFtZX0nOmAgK1xuICAgICAgICAgICAgICAgIGBcXG5UaGUgZmllbGQgaXMgYWxyZWFkeSBkZWNvcmF0ZWQgd2l0aCAnQCR7Y3VycmVudEFubm90YXRpb25UeXBlfScuYCArXG4gICAgICAgICAgICAgICAgYFxcblJlLWRlY29yYXRpbmcgZmllbGRzIGlzIG5vdCBhbGxvd2VkLmAgK1xuICAgICAgICAgICAgICAgIGBcXG5Vc2UgJ0BvdmVycmlkZScgZGVjb3JhdG9yIGZvciBtZXRob2RzIG92ZXJyaWRkZW4gYnkgc3ViY2xhc3MuYFxuICAgICAgICApXG4gICAgfVxufVxuXG4vKipcbiAqIENvbGxlY3RzIGFubm90YXRpb25zIGZyb20gcHJvdG90eXBlcyBhbmQgc3RvcmVzIHRoZW0gb24gdGFyZ2V0IChpbnN0YW5jZSlcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbGxlY3RTdG9yZWRBbm5vdGF0aW9ucyh0YXJnZXQpOiBBbm5vdGF0aW9uc01hcDxhbnksIGFueT4ge1xuICAgIGlmICghaGFzUHJvcCh0YXJnZXQsIHN0b3JlZEFubm90YXRpb25zU3ltYm9sKSkge1xuICAgICAgICBpZiAoX19ERVZfXyAmJiAhdGFyZ2V0W3N0b3JlZEFubm90YXRpb25zU3ltYm9sXSkge1xuICAgICAgICAgICAgZGllKFxuICAgICAgICAgICAgICAgIGBObyBhbm5vdGF0aW9ucyB3ZXJlIHBhc3NlZCB0byBtYWtlT2JzZXJ2YWJsZSwgYnV0IG5vIGRlY29yYXRlZCBtZW1iZXJzIGhhdmUgYmVlbiBmb3VuZCBlaXRoZXJgXG4gICAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgICAgLy8gV2UgbmVlZCBhIGNvcHkgYXMgd2Ugd2lsbCByZW1vdmUgYW5ub3RhdGlvbiBmcm9tIHRoZSBsaXN0IG9uY2UgaXQncyBhcHBsaWVkLlxuICAgICAgICBhZGRIaWRkZW5Qcm9wKHRhcmdldCwgc3RvcmVkQW5ub3RhdGlvbnNTeW1ib2wsIHsgLi4udGFyZ2V0W3N0b3JlZEFubm90YXRpb25zU3ltYm9sXSB9KVxuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0W3N0b3JlZEFubm90YXRpb25zU3ltYm9sXVxufVxuIiwiaW1wb3J0IHtcbiAgICBkaWUsXG4gICAgQW5ub3RhdGlvbixcbiAgICBoYXNQcm9wLFxuICAgIGNyZWF0ZURlY29yYXRvckFubm90YXRpb24sXG4gICAgT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uLFxuICAgIE1ha2VSZXN1bHRcbn0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuY29uc3QgT1ZFUlJJREUgPSBcIm92ZXJyaWRlXCJcblxuZXhwb3J0IGNvbnN0IG92ZXJyaWRlOiBBbm5vdGF0aW9uICYgUHJvcGVydHlEZWNvcmF0b3IgPSBjcmVhdGVEZWNvcmF0b3JBbm5vdGF0aW9uKHtcbiAgICBhbm5vdGF0aW9uVHlwZV86IE9WRVJSSURFLFxuICAgIG1ha2VfLFxuICAgIGV4dGVuZF9cbn0pXG5cbmV4cG9ydCBmdW5jdGlvbiBpc092ZXJyaWRlKGFubm90YXRpb246IEFubm90YXRpb24pOiBib29sZWFuIHtcbiAgICByZXR1cm4gYW5ub3RhdGlvbi5hbm5vdGF0aW9uVHlwZV8gPT09IE9WRVJSSURFXG59XG5cbmZ1bmN0aW9uIG1ha2VfKGFkbTogT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uLCBrZXkpOiBNYWtlUmVzdWx0IHtcbiAgICAvLyBNdXN0IG5vdCBiZSBwbGFpbiBvYmplY3RcbiAgICBpZiAoX19ERVZfXyAmJiBhZG0uaXNQbGFpbk9iamVjdF8pIHtcbiAgICAgICAgZGllKFxuICAgICAgICAgICAgYENhbm5vdCBhcHBseSAnJHt0aGlzLmFubm90YXRpb25UeXBlX30nIHRvICcke2FkbS5uYW1lX30uJHtrZXkudG9TdHJpbmcoKX0nOmAgK1xuICAgICAgICAgICAgICAgIGBcXG4nJHt0aGlzLmFubm90YXRpb25UeXBlX30nIGNhbm5vdCBiZSB1c2VkIG9uIHBsYWluIG9iamVjdHMuYFxuICAgICAgICApXG4gICAgfVxuICAgIC8vIE11c3Qgb3ZlcnJpZGUgc29tZXRoaW5nXG4gICAgaWYgKF9fREVWX18gJiYgIWhhc1Byb3AoYWRtLmFwcGxpZWRBbm5vdGF0aW9uc18hLCBrZXkpKSB7XG4gICAgICAgIGRpZShcbiAgICAgICAgICAgIGAnJHthZG0ubmFtZV99LiR7a2V5LnRvU3RyaW5nKCl9JyBpcyBhbm5vdGF0ZWQgd2l0aCAnJHt0aGlzLmFubm90YXRpb25UeXBlX30nLCBgICtcbiAgICAgICAgICAgICAgICBgYnV0IG5vIHN1Y2ggYW5ub3RhdGVkIG1lbWJlciB3YXMgZm91bmQgb24gcHJvdG90eXBlLmBcbiAgICAgICAgKVxuICAgIH1cbiAgICByZXR1cm4gTWFrZVJlc3VsdC5DYW5jZWxcbn1cblxuZnVuY3Rpb24gZXh0ZW5kXyhhZG0sIGtleSwgZGVzY3JpcHRvciwgcHJveHlUcmFwKTogYm9vbGVhbiB7XG4gICAgZGllKGAnJHt0aGlzLmFubm90YXRpb25UeXBlX30nIGNhbiBvbmx5IGJlIHVzZWQgd2l0aCAnbWFrZU9ic2VydmFibGUnYClcbn1cbiIsImltcG9ydCB7XG4gICAgSURlcml2YXRpb25TdGF0ZV8sXG4gICAgSU9ic2VydmFibGUsXG4gICAgSURlcml2YXRpb24sXG4gICAgY3JlYXRlSW5zdGFuY2VvZlByZWRpY2F0ZSxcbiAgICBlbmRCYXRjaCxcbiAgICBnZXROZXh0SWQsXG4gICAgbm9vcCxcbiAgICBvbkJlY29tZU9ic2VydmVkLFxuICAgIG9uQmVjb21lVW5vYnNlcnZlZCxcbiAgICBwcm9wYWdhdGVDaGFuZ2VkLFxuICAgIHJlcG9ydE9ic2VydmVkLFxuICAgIHN0YXJ0QmF0Y2gsXG4gICAgTGFtYmRhXG59IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbmV4cG9ydCBjb25zdCAkbW9ieCA9IFN5bWJvbChcIm1vYnggYWRtaW5pc3RyYXRpb25cIilcblxuZXhwb3J0IGludGVyZmFjZSBJQXRvbSBleHRlbmRzIElPYnNlcnZhYmxlIHtcbiAgICByZXBvcnRPYnNlcnZlZCgpOiBib29sZWFuXG4gICAgcmVwb3J0Q2hhbmdlZCgpXG59XG5cbmV4cG9ydCBjbGFzcyBBdG9tIGltcGxlbWVudHMgSUF0b20ge1xuICAgIGlzUGVuZGluZ1Vub2JzZXJ2YXRpb25fID0gZmFsc2UgLy8gZm9yIGVmZmVjdGl2ZSB1bm9ic2VydmluZy4gQmFzZUF0b20gaGFzIHRydWUsIGZvciBleHRyYSBvcHRpbWl6YXRpb24sIHNvIGl0cyBvbkJlY29tZVVub2JzZXJ2ZWQgbmV2ZXIgZ2V0cyBjYWxsZWQsIGJlY2F1c2UgaXQncyBub3QgbmVlZGVkXG4gICAgaXNCZWluZ09ic2VydmVkXyA9IGZhbHNlXG4gICAgb2JzZXJ2ZXJzXyA9IG5ldyBTZXQ8SURlcml2YXRpb24+KClcblxuICAgIGRpZmZWYWx1ZV8gPSAwXG4gICAgbGFzdEFjY2Vzc2VkQnlfID0gMFxuICAgIGxvd2VzdE9ic2VydmVyU3RhdGVfID0gSURlcml2YXRpb25TdGF0ZV8uTk9UX1RSQUNLSU5HX1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBhdG9tLiBGb3IgZGVidWdnaW5nIHB1cnBvc2VzIGl0IGlzIHJlY29tbWVuZGVkIHRvIGdpdmUgaXQgYSBuYW1lLlxuICAgICAqIFRoZSBvbkJlY29tZU9ic2VydmVkIGFuZCBvbkJlY29tZVVub2JzZXJ2ZWQgY2FsbGJhY2tzIGNhbiBiZSB1c2VkIGZvciByZXNvdXJjZSBtYW5hZ2VtZW50LlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBuYW1lXyA9IF9fREVWX18gPyBcIkF0b21AXCIgKyBnZXROZXh0SWQoKSA6IFwiQXRvbVwiKSB7fVxuXG4gICAgLy8gb25CZWNvbWVPYnNlcnZlZExpc3RlbmVyc1xuICAgIHB1YmxpYyBvbkJPTDogU2V0PExhbWJkYT4gfCB1bmRlZmluZWRcbiAgICAvLyBvbkJlY29tZVVub2JzZXJ2ZWRMaXN0ZW5lcnNcbiAgICBwdWJsaWMgb25CVU9MOiBTZXQ8TGFtYmRhPiB8IHVuZGVmaW5lZFxuXG4gICAgcHVibGljIG9uQk8oKSB7XG4gICAgICAgIGlmICh0aGlzLm9uQk9MKSB7XG4gICAgICAgICAgICB0aGlzLm9uQk9MLmZvckVhY2gobGlzdGVuZXIgPT4gbGlzdGVuZXIoKSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBvbkJVTygpIHtcbiAgICAgICAgaWYgKHRoaXMub25CVU9MKSB7XG4gICAgICAgICAgICB0aGlzLm9uQlVPTC5mb3JFYWNoKGxpc3RlbmVyID0+IGxpc3RlbmVyKCkpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBJbnZva2UgdGhpcyBtZXRob2QgdG8gbm90aWZ5IG1vYnggdGhhdCB5b3VyIGF0b20gaGFzIGJlZW4gdXNlZCBzb21laG93LlxuICAgICAqIFJldHVybnMgdHJ1ZSBpZiB0aGVyZSBpcyBjdXJyZW50bHkgYSByZWFjdGl2ZSBjb250ZXh0LlxuICAgICAqL1xuICAgIHB1YmxpYyByZXBvcnRPYnNlcnZlZCgpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHJlcG9ydE9ic2VydmVkKHRoaXMpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogSW52b2tlIHRoaXMgbWV0aG9kIF9hZnRlcl8gdGhpcyBtZXRob2QgaGFzIGNoYW5nZWQgdG8gc2lnbmFsIG1vYnggdGhhdCBhbGwgaXRzIG9ic2VydmVycyBzaG91bGQgaW52YWxpZGF0ZS5cbiAgICAgKi9cbiAgICBwdWJsaWMgcmVwb3J0Q2hhbmdlZCgpIHtcbiAgICAgICAgc3RhcnRCYXRjaCgpXG4gICAgICAgIHByb3BhZ2F0ZUNoYW5nZWQodGhpcylcbiAgICAgICAgZW5kQmF0Y2goKVxuICAgIH1cblxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5uYW1lX1xuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IGlzQXRvbSA9IGNyZWF0ZUluc3RhbmNlb2ZQcmVkaWNhdGUoXCJBdG9tXCIsIEF0b20pXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVBdG9tKFxuICAgIG5hbWU6IHN0cmluZyxcbiAgICBvbkJlY29tZU9ic2VydmVkSGFuZGxlcjogKCkgPT4gdm9pZCA9IG5vb3AsXG4gICAgb25CZWNvbWVVbm9ic2VydmVkSGFuZGxlcjogKCkgPT4gdm9pZCA9IG5vb3Bcbik6IElBdG9tIHtcbiAgICBjb25zdCBhdG9tID0gbmV3IEF0b20obmFtZSlcbiAgICAvLyBkZWZhdWx0IGBub29wYCBsaXN0ZW5lciB3aWxsIG5vdCBpbml0aWFsaXplIHRoZSBob29rIFNldFxuICAgIGlmIChvbkJlY29tZU9ic2VydmVkSGFuZGxlciAhPT0gbm9vcCkge1xuICAgICAgICBvbkJlY29tZU9ic2VydmVkKGF0b20sIG9uQmVjb21lT2JzZXJ2ZWRIYW5kbGVyKVxuICAgIH1cblxuICAgIGlmIChvbkJlY29tZVVub2JzZXJ2ZWRIYW5kbGVyICE9PSBub29wKSB7XG4gICAgICAgIG9uQmVjb21lVW5vYnNlcnZlZChhdG9tLCBvbkJlY29tZVVub2JzZXJ2ZWRIYW5kbGVyKVxuICAgIH1cbiAgICByZXR1cm4gYXRvbVxufVxuIiwiaW1wb3J0IHtcbiAgICBJQ29tcHV0ZWRWYWx1ZSxcbiAgICBJT2JzZXJ2YWJsZSxcbiAgICBJT2JzZXJ2YWJsZUFycmF5LFxuICAgIExhbWJkYSxcbiAgICBPYnNlcnZhYmxlTWFwLFxuICAgIGdldEF0b20sXG4gICAgT2JzZXJ2YWJsZVNldCxcbiAgICBpc0Z1bmN0aW9uLFxuICAgIElPYnNlcnZhYmxlVmFsdWVcbn0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuY29uc3QgT05fQkVDT01FX09CU0VSVkVEID0gXCJvbkJPXCJcbmNvbnN0IE9OX0JFQ09NRV9VTk9CU0VSVkVEID0gXCJvbkJVT1wiXG5cbmV4cG9ydCBmdW5jdGlvbiBvbkJlY29tZU9ic2VydmVkKFxuICAgIHZhbHVlOlxuICAgICAgICB8IElPYnNlcnZhYmxlXG4gICAgICAgIHwgSUNvbXB1dGVkVmFsdWU8YW55PlxuICAgICAgICB8IElPYnNlcnZhYmxlQXJyYXk8YW55PlxuICAgICAgICB8IE9ic2VydmFibGVNYXA8YW55LCBhbnk+XG4gICAgICAgIHwgT2JzZXJ2YWJsZVNldDxhbnk+XG4gICAgICAgIHwgSU9ic2VydmFibGVWYWx1ZTxhbnk+LFxuICAgIGxpc3RlbmVyOiBMYW1iZGFcbik6IExhbWJkYVxuZXhwb3J0IGZ1bmN0aW9uIG9uQmVjb21lT2JzZXJ2ZWQ8SywgViA9IGFueT4oXG4gICAgdmFsdWU6IE9ic2VydmFibGVNYXA8SywgVj4gfCBPYmplY3QsXG4gICAgcHJvcGVydHk6IEssXG4gICAgbGlzdGVuZXI6IExhbWJkYVxuKTogTGFtYmRhXG5leHBvcnQgZnVuY3Rpb24gb25CZWNvbWVPYnNlcnZlZCh0aGluZywgYXJnMiwgYXJnMz8pOiBMYW1iZGEge1xuICAgIHJldHVybiBpbnRlcmNlcHRIb29rKE9OX0JFQ09NRV9PQlNFUlZFRCwgdGhpbmcsIGFyZzIsIGFyZzMpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvbkJlY29tZVVub2JzZXJ2ZWQoXG4gICAgdmFsdWU6XG4gICAgICAgIHwgSU9ic2VydmFibGVcbiAgICAgICAgfCBJQ29tcHV0ZWRWYWx1ZTxhbnk+XG4gICAgICAgIHwgSU9ic2VydmFibGVBcnJheTxhbnk+XG4gICAgICAgIHwgT2JzZXJ2YWJsZU1hcDxhbnksIGFueT5cbiAgICAgICAgfCBPYnNlcnZhYmxlU2V0PGFueT5cbiAgICAgICAgfCBJT2JzZXJ2YWJsZVZhbHVlPGFueT4sXG4gICAgbGlzdGVuZXI6IExhbWJkYVxuKTogTGFtYmRhXG5leHBvcnQgZnVuY3Rpb24gb25CZWNvbWVVbm9ic2VydmVkPEssIFYgPSBhbnk+KFxuICAgIHZhbHVlOiBPYnNlcnZhYmxlTWFwPEssIFY+IHwgT2JqZWN0LFxuICAgIHByb3BlcnR5OiBLLFxuICAgIGxpc3RlbmVyOiBMYW1iZGFcbik6IExhbWJkYVxuZXhwb3J0IGZ1bmN0aW9uIG9uQmVjb21lVW5vYnNlcnZlZCh0aGluZywgYXJnMiwgYXJnMz8pOiBMYW1iZGEge1xuICAgIHJldHVybiBpbnRlcmNlcHRIb29rKE9OX0JFQ09NRV9VTk9CU0VSVkVELCB0aGluZywgYXJnMiwgYXJnMylcbn1cblxuZnVuY3Rpb24gaW50ZXJjZXB0SG9vayhob29rOiBcIm9uQk9cIiB8IFwib25CVU9cIiwgdGhpbmcsIGFyZzIsIGFyZzMpIHtcbiAgICBjb25zdCBhdG9tOiBJT2JzZXJ2YWJsZSA9XG4gICAgICAgIHR5cGVvZiBhcmczID09PSBcImZ1bmN0aW9uXCIgPyBnZXRBdG9tKHRoaW5nLCBhcmcyKSA6IChnZXRBdG9tKHRoaW5nKSBhcyBhbnkpXG4gICAgY29uc3QgY2IgPSBpc0Z1bmN0aW9uKGFyZzMpID8gYXJnMyA6IGFyZzJcbiAgICBjb25zdCBsaXN0ZW5lcnNLZXkgPSBgJHtob29rfUxgIGFzIFwib25CT0xcIiB8IFwib25CVU9MXCJcblxuICAgIGlmIChhdG9tW2xpc3RlbmVyc0tleV0pIHtcbiAgICAgICAgYXRvbVtsaXN0ZW5lcnNLZXldIS5hZGQoY2IpXG4gICAgfSBlbHNlIHtcbiAgICAgICAgYXRvbVtsaXN0ZW5lcnNLZXldID0gbmV3IFNldDxMYW1iZGE+KFtjYl0pXG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3QgaG9va0xpc3RlbmVycyA9IGF0b21bbGlzdGVuZXJzS2V5XVxuICAgICAgICBpZiAoaG9va0xpc3RlbmVycykge1xuICAgICAgICAgICAgaG9va0xpc3RlbmVycy5kZWxldGUoY2IpXG4gICAgICAgICAgICBpZiAoaG9va0xpc3RlbmVycy5zaXplID09PSAwKSB7XG4gICAgICAgICAgICAgICAgZGVsZXRlIGF0b21bbGlzdGVuZXJzS2V5XVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgZGVlcEVxdWFsIH0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuZXhwb3J0IGludGVyZmFjZSBJRXF1YWxzQ29tcGFyZXI8VD4ge1xuICAgIChhOiBULCBiOiBUKTogYm9vbGVhblxufVxuXG5mdW5jdGlvbiBpZGVudGl0eUNvbXBhcmVyKGE6IGFueSwgYjogYW55KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGEgPT09IGJcbn1cblxuZnVuY3Rpb24gc3RydWN0dXJhbENvbXBhcmVyKGE6IGFueSwgYjogYW55KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGRlZXBFcXVhbChhLCBiKVxufVxuXG5mdW5jdGlvbiBzaGFsbG93Q29tcGFyZXIoYTogYW55LCBiOiBhbnkpOiBib29sZWFuIHtcbiAgICByZXR1cm4gZGVlcEVxdWFsKGEsIGIsIDEpXG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRDb21wYXJlcihhOiBhbnksIGI6IGFueSk6IGJvb2xlYW4ge1xuICAgIGlmIChPYmplY3QuaXMpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5pcyhhLCBiKVxuICAgIH1cblxuICAgIHJldHVybiBhID09PSBiID8gYSAhPT0gMCB8fCAxIC8gYSA9PT0gMSAvIGIgOiBhICE9PSBhICYmIGIgIT09IGJcbn1cblxuZXhwb3J0IGNvbnN0IGNvbXBhcmVyID0ge1xuICAgIGlkZW50aXR5OiBpZGVudGl0eUNvbXBhcmVyLFxuICAgIHN0cnVjdHVyYWw6IHN0cnVjdHVyYWxDb21wYXJlcixcbiAgICBkZWZhdWx0OiBkZWZhdWx0Q29tcGFyZXIsXG4gICAgc2hhbGxvdzogc2hhbGxvd0NvbXBhcmVyXG59XG4iLCJpbXBvcnQge1xuICAgIGRlZXBFcXVhbCxcbiAgICBpc0VTNk1hcCxcbiAgICBpc0VTNlNldCxcbiAgICBpc09ic2VydmFibGUsXG4gICAgaXNPYnNlcnZhYmxlQXJyYXksXG4gICAgaXNPYnNlcnZhYmxlTWFwLFxuICAgIGlzT2JzZXJ2YWJsZVNldCxcbiAgICBpc09ic2VydmFibGVPYmplY3QsXG4gICAgaXNQbGFpbk9iamVjdCxcbiAgICBvYnNlcnZhYmxlLFxuICAgIGRpZSxcbiAgICBpc0FjdGlvbixcbiAgICBhdXRvQWN0aW9uLFxuICAgIGZsb3csXG4gICAgaXNGbG93LFxuICAgIGlzR2VuZXJhdG9yXG59IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbmV4cG9ydCBpbnRlcmZhY2UgSUVuaGFuY2VyPFQ+IHtcbiAgICAobmV3VmFsdWU6IFQsIG9sZFZhbHVlOiBUIHwgdW5kZWZpbmVkLCBuYW1lOiBzdHJpbmcpOiBUXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWVwRW5oYW5jZXIodiwgXywgbmFtZSkge1xuICAgIC8vIGl0IGlzIGFuIG9ic2VydmFibGUgYWxyZWFkeSwgZG9uZVxuICAgIGlmIChpc09ic2VydmFibGUodikpIHtcbiAgICAgICAgcmV0dXJuIHZcbiAgICB9XG5cbiAgICAvLyBzb21ldGhpbmcgdGhhdCBjYW4gYmUgY29udmVydGVkIGFuZCBtdXRhdGVkP1xuICAgIGlmIChBcnJheS5pc0FycmF5KHYpKSB7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlLmFycmF5KHYsIHsgbmFtZSB9KVxuICAgIH1cbiAgICBpZiAoaXNQbGFpbk9iamVjdCh2KSkge1xuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZS5vYmplY3QodiwgdW5kZWZpbmVkLCB7IG5hbWUgfSlcbiAgICB9XG4gICAgaWYgKGlzRVM2TWFwKHYpKSB7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlLm1hcCh2LCB7IG5hbWUgfSlcbiAgICB9XG4gICAgaWYgKGlzRVM2U2V0KHYpKSB7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlLnNldCh2LCB7IG5hbWUgfSlcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2ID09PSBcImZ1bmN0aW9uXCIgJiYgIWlzQWN0aW9uKHYpICYmICFpc0Zsb3codikpIHtcbiAgICAgICAgaWYgKGlzR2VuZXJhdG9yKHYpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmxvdyh2KVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGF1dG9BY3Rpb24obmFtZSwgdilcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdlxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2hhbGxvd0VuaGFuY2VyKHYsIF8sIG5hbWUpOiBhbnkge1xuICAgIGlmICh2ID09PSB1bmRlZmluZWQgfHwgdiA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdlxuICAgIH1cbiAgICBpZiAoaXNPYnNlcnZhYmxlT2JqZWN0KHYpIHx8IGlzT2JzZXJ2YWJsZUFycmF5KHYpIHx8IGlzT2JzZXJ2YWJsZU1hcCh2KSB8fCBpc09ic2VydmFibGVTZXQodikpIHtcbiAgICAgICAgcmV0dXJuIHZcbiAgICB9XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodikpIHtcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGUuYXJyYXkodiwgeyBuYW1lLCBkZWVwOiBmYWxzZSB9KVxuICAgIH1cbiAgICBpZiAoaXNQbGFpbk9iamVjdCh2KSkge1xuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZS5vYmplY3QodiwgdW5kZWZpbmVkLCB7IG5hbWUsIGRlZXA6IGZhbHNlIH0pXG4gICAgfVxuICAgIGlmIChpc0VTNk1hcCh2KSkge1xuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZS5tYXAodiwgeyBuYW1lLCBkZWVwOiBmYWxzZSB9KVxuICAgIH1cbiAgICBpZiAoaXNFUzZTZXQodikpIHtcbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGUuc2V0KHYsIHsgbmFtZSwgZGVlcDogZmFsc2UgfSlcbiAgICB9XG5cbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgICBkaWUoXG4gICAgICAgICAgICBcIlRoZSBzaGFsbG93IG1vZGlmaWVyIC8gZGVjb3JhdG9yIGNhbiBvbmx5IHVzZWQgaW4gY29tYmluYXRpb24gd2l0aCBhcnJheXMsIG9iamVjdHMsIG1hcHMgYW5kIHNldHNcIlxuICAgICAgICApXG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVmZXJlbmNlRW5oYW5jZXIobmV3VmFsdWU/KSB7XG4gICAgLy8gbmV2ZXIgdHVybiBpbnRvIGFuIG9ic2VydmFibGVcbiAgICByZXR1cm4gbmV3VmFsdWVcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlZlN0cnVjdEVuaGFuY2VyKHYsIG9sZFZhbHVlKTogYW55IHtcbiAgICBpZiAoX19ERVZfXyAmJiBpc09ic2VydmFibGUodikpIHtcbiAgICAgICAgZGllKGBvYnNlcnZhYmxlLnN0cnVjdCBzaG91bGQgbm90IGJlIHVzZWQgd2l0aCBvYnNlcnZhYmxlIHZhbHVlc2ApXG4gICAgfVxuICAgIGlmIChkZWVwRXF1YWwodiwgb2xkVmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBvbGRWYWx1ZVxuICAgIH1cbiAgICByZXR1cm4gdlxufVxuIiwiaW1wb3J0IHtcbiAgICBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24sXG4gICAgY3JlYXRlQWN0aW9uLFxuICAgIGlzQWN0aW9uLFxuICAgIGRlZmluZVByb3BlcnR5LFxuICAgIGRpZSxcbiAgICBpc0Z1bmN0aW9uLFxuICAgIEFubm90YXRpb24sXG4gICAgZ2xvYmFsU3RhdGUsXG4gICAgTWFrZVJlc3VsdFxufSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQWN0aW9uQW5ub3RhdGlvbihuYW1lOiBzdHJpbmcsIG9wdGlvbnM/OiBvYmplY3QpOiBBbm5vdGF0aW9uIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBhbm5vdGF0aW9uVHlwZV86IG5hbWUsXG4gICAgICAgIG9wdGlvbnNfOiBvcHRpb25zLFxuICAgICAgICBtYWtlXyxcbiAgICAgICAgZXh0ZW5kX1xuICAgIH1cbn1cblxuZnVuY3Rpb24gbWFrZV8oXG4gICAgYWRtOiBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24sXG4gICAga2V5OiBQcm9wZXJ0eUtleSxcbiAgICBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3IsXG4gICAgc291cmNlOiBvYmplY3Rcbik6IE1ha2VSZXN1bHQge1xuICAgIC8vIGJvdW5kXG4gICAgaWYgKHRoaXMub3B0aW9uc18/LmJvdW5kKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmV4dGVuZF8oYWRtLCBrZXksIGRlc2NyaXB0b3IsIGZhbHNlKSA9PT0gbnVsbFxuICAgICAgICAgICAgPyBNYWtlUmVzdWx0LkNhbmNlbFxuICAgICAgICAgICAgOiBNYWtlUmVzdWx0LkJyZWFrXG4gICAgfVxuICAgIC8vIG93blxuICAgIGlmIChzb3VyY2UgPT09IGFkbS50YXJnZXRfKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmV4dGVuZF8oYWRtLCBrZXksIGRlc2NyaXB0b3IsIGZhbHNlKSA9PT0gbnVsbFxuICAgICAgICAgICAgPyBNYWtlUmVzdWx0LkNhbmNlbFxuICAgICAgICAgICAgOiBNYWtlUmVzdWx0LkNvbnRpbnVlXG4gICAgfVxuICAgIC8vIHByb3RvdHlwZVxuICAgIGlmIChpc0FjdGlvbihkZXNjcmlwdG9yLnZhbHVlKSkge1xuICAgICAgICAvLyBBIHByb3RvdHlwZSBjb3VsZCBoYXZlIGJlZW4gYW5ub3RhdGVkIGFscmVhZHkgYnkgb3RoZXIgY29uc3RydWN0b3IsXG4gICAgICAgIC8vIHJlc3Qgb2YgdGhlIHByb3RvIGNoYWluIG11c3QgYmUgYW5ub3RhdGVkIGFscmVhZHlcbiAgICAgICAgcmV0dXJuIE1ha2VSZXN1bHQuQnJlYWtcbiAgICB9XG4gICAgY29uc3QgYWN0aW9uRGVzY3JpcHRvciA9IGNyZWF0ZUFjdGlvbkRlc2NyaXB0b3IoYWRtLCB0aGlzLCBrZXksIGRlc2NyaXB0b3IsIGZhbHNlKVxuICAgIGRlZmluZVByb3BlcnR5KHNvdXJjZSwga2V5LCBhY3Rpb25EZXNjcmlwdG9yKVxuICAgIHJldHVybiBNYWtlUmVzdWx0LkNvbnRpbnVlXG59XG5cbmZ1bmN0aW9uIGV4dGVuZF8oXG4gICAgYWRtOiBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24sXG4gICAga2V5OiBQcm9wZXJ0eUtleSxcbiAgICBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3IsXG4gICAgcHJveHlUcmFwOiBib29sZWFuXG4pOiBib29sZWFuIHwgbnVsbCB7XG4gICAgY29uc3QgYWN0aW9uRGVzY3JpcHRvciA9IGNyZWF0ZUFjdGlvbkRlc2NyaXB0b3IoYWRtLCB0aGlzLCBrZXksIGRlc2NyaXB0b3IpXG4gICAgcmV0dXJuIGFkbS5kZWZpbmVQcm9wZXJ0eV8oa2V5LCBhY3Rpb25EZXNjcmlwdG9yLCBwcm94eVRyYXApXG59XG5cbmZ1bmN0aW9uIGFzc2VydEFjdGlvbkRlc2NyaXB0b3IoXG4gICAgYWRtOiBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24sXG4gICAgeyBhbm5vdGF0aW9uVHlwZV8gfTogQW5ub3RhdGlvbixcbiAgICBrZXk6IFByb3BlcnR5S2V5LFxuICAgIHsgdmFsdWUgfTogUHJvcGVydHlEZXNjcmlwdG9yXG4pIHtcbiAgICBpZiAoX19ERVZfXyAmJiAhaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICAgICAgZGllKFxuICAgICAgICAgICAgYENhbm5vdCBhcHBseSAnJHthbm5vdGF0aW9uVHlwZV99JyB0byAnJHthZG0ubmFtZV99LiR7a2V5LnRvU3RyaW5nKCl9JzpgICtcbiAgICAgICAgICAgICAgICBgXFxuJyR7YW5ub3RhdGlvblR5cGVffScgY2FuIG9ubHkgYmUgdXNlZCBvbiBwcm9wZXJ0aWVzIHdpdGggYSBmdW5jdGlvbiB2YWx1ZS5gXG4gICAgICAgIClcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVBY3Rpb25EZXNjcmlwdG9yKFxuICAgIGFkbTogT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uLFxuICAgIGFubm90YXRpb246IEFubm90YXRpb24sXG4gICAga2V5OiBQcm9wZXJ0eUtleSxcbiAgICBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3IsXG4gICAgLy8gcHJvdmlkZXMgYWJpbGl0eSB0byBkaXNhYmxlIHNhZmVEZXNjcmlwdG9ycyBmb3IgcHJvdG90eXBlc1xuICAgIHNhZmVEZXNjcmlwdG9yczogYm9vbGVhbiA9IGdsb2JhbFN0YXRlLnNhZmVEZXNjcmlwdG9yc1xuKSB7XG4gICAgYXNzZXJ0QWN0aW9uRGVzY3JpcHRvcihhZG0sIGFubm90YXRpb24sIGtleSwgZGVzY3JpcHRvcilcbiAgICBsZXQgeyB2YWx1ZSB9ID0gZGVzY3JpcHRvclxuICAgIGlmIChhbm5vdGF0aW9uLm9wdGlvbnNfPy5ib3VuZCkge1xuICAgICAgICB2YWx1ZSA9IHZhbHVlLmJpbmQoYWRtLnByb3h5XyA/PyBhZG0udGFyZ2V0XylcbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWU6IGNyZWF0ZUFjdGlvbihcbiAgICAgICAgICAgIGFubm90YXRpb24ub3B0aW9uc18/Lm5hbWUgPz8ga2V5LnRvU3RyaW5nKCksXG4gICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgIGFubm90YXRpb24ub3B0aW9uc18/LmF1dG9BY3Rpb24gPz8gZmFsc2UsXG4gICAgICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbW9ieGpzL21vYngvZGlzY3Vzc2lvbnMvMzE0MFxuICAgICAgICAgICAgYW5ub3RhdGlvbi5vcHRpb25zXz8uYm91bmQgPyBhZG0ucHJveHlfID8/IGFkbS50YXJnZXRfIDogdW5kZWZpbmVkXG4gICAgICAgICksXG4gICAgICAgIC8vIE5vbi1jb25maWd1cmFibGUgZm9yIGNsYXNzZXNcbiAgICAgICAgLy8gcHJldmVudHMgYWNjaWRlbnRhbCBmaWVsZCByZWRlZmluaXRpb24gaW4gc3ViY2xhc3NcbiAgICAgICAgY29uZmlndXJhYmxlOiBzYWZlRGVzY3JpcHRvcnMgPyBhZG0uaXNQbGFpbk9iamVjdF8gOiB0cnVlLFxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbW9ieGpzL21vYngvcHVsbC8yNjQxI2lzc3VlY29tbWVudC03MzcyOTIwNThcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIC8vIE5vbi1vYnNldmFibGUsIHRoZXJlZm9yZSBub24td3JpdGFibGVcbiAgICAgICAgLy8gQWxzbyBwcmV2ZW50cyByZXdyaXRpbmcgaW4gc3ViY2xhc3MgY29uc3RydWN0b3JcbiAgICAgICAgd3JpdGFibGU6IHNhZmVEZXNjcmlwdG9ycyA/IGZhbHNlIDogdHJ1ZVxuICAgIH1cbn1cbiIsImltcG9ydCB7XG4gICAgT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uLFxuICAgIEFubm90YXRpb24sXG4gICAgZGVmaW5lUHJvcGVydHksXG4gICAgZGllLFxuICAgIGZsb3csXG4gICAgaXNGbG93LFxuICAgIGlzRnVuY3Rpb24sXG4gICAgZ2xvYmFsU3RhdGUsXG4gICAgTWFrZVJlc3VsdCxcbiAgICBoYXNQcm9wXG59IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVGbG93QW5ub3RhdGlvbihuYW1lOiBzdHJpbmcsIG9wdGlvbnM/OiBvYmplY3QpOiBBbm5vdGF0aW9uIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBhbm5vdGF0aW9uVHlwZV86IG5hbWUsXG4gICAgICAgIG9wdGlvbnNfOiBvcHRpb25zLFxuICAgICAgICBtYWtlXyxcbiAgICAgICAgZXh0ZW5kX1xuICAgIH1cbn1cblxuZnVuY3Rpb24gbWFrZV8oXG4gICAgYWRtOiBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24sXG4gICAga2V5OiBQcm9wZXJ0eUtleSxcbiAgICBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3IsXG4gICAgc291cmNlOiBvYmplY3Rcbik6IE1ha2VSZXN1bHQge1xuICAgIC8vIG93blxuICAgIGlmIChzb3VyY2UgPT09IGFkbS50YXJnZXRfKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmV4dGVuZF8oYWRtLCBrZXksIGRlc2NyaXB0b3IsIGZhbHNlKSA9PT0gbnVsbFxuICAgICAgICAgICAgPyBNYWtlUmVzdWx0LkNhbmNlbFxuICAgICAgICAgICAgOiBNYWtlUmVzdWx0LkNvbnRpbnVlXG4gICAgfVxuICAgIC8vIHByb3RvdHlwZVxuICAgIC8vIGJvdW5kIC0gbXVzdCBhbm5vdGF0ZSBwcm90b3MgdG8gc3VwcG9ydCBzdXBlci5mbG93KClcbiAgICBpZiAodGhpcy5vcHRpb25zXz8uYm91bmQgJiYgKCFoYXNQcm9wKGFkbS50YXJnZXRfLCBrZXkpIHx8ICFpc0Zsb3coYWRtLnRhcmdldF9ba2V5XSkpKSB7XG4gICAgICAgIGlmICh0aGlzLmV4dGVuZF8oYWRtLCBrZXksIGRlc2NyaXB0b3IsIGZhbHNlKSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIE1ha2VSZXN1bHQuQ2FuY2VsXG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzRmxvdyhkZXNjcmlwdG9yLnZhbHVlKSkge1xuICAgICAgICAvLyBBIHByb3RvdHlwZSBjb3VsZCBoYXZlIGJlZW4gYW5ub3RhdGVkIGFscmVhZHkgYnkgb3RoZXIgY29uc3RydWN0b3IsXG4gICAgICAgIC8vIHJlc3Qgb2YgdGhlIHByb3RvIGNoYWluIG11c3QgYmUgYW5ub3RhdGVkIGFscmVhZHlcbiAgICAgICAgcmV0dXJuIE1ha2VSZXN1bHQuQnJlYWtcbiAgICB9XG4gICAgY29uc3QgZmxvd0Rlc2NyaXB0b3IgPSBjcmVhdGVGbG93RGVzY3JpcHRvcihhZG0sIHRoaXMsIGtleSwgZGVzY3JpcHRvciwgZmFsc2UsIGZhbHNlKVxuICAgIGRlZmluZVByb3BlcnR5KHNvdXJjZSwga2V5LCBmbG93RGVzY3JpcHRvcilcbiAgICByZXR1cm4gTWFrZVJlc3VsdC5Db250aW51ZVxufVxuXG5mdW5jdGlvbiBleHRlbmRfKFxuICAgIGFkbTogT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uLFxuICAgIGtleTogUHJvcGVydHlLZXksXG4gICAgZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yLFxuICAgIHByb3h5VHJhcDogYm9vbGVhblxuKTogYm9vbGVhbiB8IG51bGwge1xuICAgIGNvbnN0IGZsb3dEZXNjcmlwdG9yID0gY3JlYXRlRmxvd0Rlc2NyaXB0b3IoYWRtLCB0aGlzLCBrZXksIGRlc2NyaXB0b3IsIHRoaXMub3B0aW9uc18/LmJvdW5kKVxuICAgIHJldHVybiBhZG0uZGVmaW5lUHJvcGVydHlfKGtleSwgZmxvd0Rlc2NyaXB0b3IsIHByb3h5VHJhcClcbn1cblxuZnVuY3Rpb24gYXNzZXJ0Rmxvd0Rlc2NyaXB0b3IoXG4gICAgYWRtOiBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24sXG4gICAgeyBhbm5vdGF0aW9uVHlwZV8gfTogQW5ub3RhdGlvbixcbiAgICBrZXk6IFByb3BlcnR5S2V5LFxuICAgIHsgdmFsdWUgfTogUHJvcGVydHlEZXNjcmlwdG9yXG4pIHtcbiAgICBpZiAoX19ERVZfXyAmJiAhaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICAgICAgZGllKFxuICAgICAgICAgICAgYENhbm5vdCBhcHBseSAnJHthbm5vdGF0aW9uVHlwZV99JyB0byAnJHthZG0ubmFtZV99LiR7a2V5LnRvU3RyaW5nKCl9JzpgICtcbiAgICAgICAgICAgICAgICBgXFxuJyR7YW5ub3RhdGlvblR5cGVffScgY2FuIG9ubHkgYmUgdXNlZCBvbiBwcm9wZXJ0aWVzIHdpdGggYSBnZW5lcmF0b3IgZnVuY3Rpb24gdmFsdWUuYFxuICAgICAgICApXG4gICAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVGbG93RGVzY3JpcHRvcihcbiAgICBhZG06IE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbixcbiAgICBhbm5vdGF0aW9uOiBBbm5vdGF0aW9uLFxuICAgIGtleTogUHJvcGVydHlLZXksXG4gICAgZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yLFxuICAgIGJvdW5kOiBib29sZWFuLFxuICAgIC8vIHByb3ZpZGVzIGFiaWxpdHkgdG8gZGlzYWJsZSBzYWZlRGVzY3JpcHRvcnMgZm9yIHByb3RvdHlwZXNcbiAgICBzYWZlRGVzY3JpcHRvcnM6IGJvb2xlYW4gPSBnbG9iYWxTdGF0ZS5zYWZlRGVzY3JpcHRvcnNcbik6IFByb3BlcnR5RGVzY3JpcHRvciB7XG4gICAgYXNzZXJ0Rmxvd0Rlc2NyaXB0b3IoYWRtLCBhbm5vdGF0aW9uLCBrZXksIGRlc2NyaXB0b3IpXG4gICAgbGV0IHsgdmFsdWUgfSA9IGRlc2NyaXB0b3JcbiAgICAvLyBJbiBjYXNlIG9mIGZsb3cuYm91bmQsIHRoZSBkZXNjcmlwdG9yIGNhbiBiZSBmcm9tIGFscmVhZHkgYW5ub3RhdGVkIHByb3RvdHlwZVxuICAgIGlmICghaXNGbG93KHZhbHVlKSkge1xuICAgICAgICB2YWx1ZSA9IGZsb3codmFsdWUpXG4gICAgfVxuICAgIGlmIChib3VuZCkge1xuICAgICAgICAvLyBXZSBkbyBub3Qga2VlcCBvcmlnaW5hbCBmdW5jdGlvbiBhcm91bmQsIHNvIHdlIGJpbmQgdGhlIGV4aXN0aW5nIGZsb3dcbiAgICAgICAgdmFsdWUgPSB2YWx1ZS5iaW5kKGFkbS5wcm94eV8gPz8gYWRtLnRhcmdldF8pXG4gICAgICAgIC8vIFRoaXMgaXMgbm9ybWFsbHkgc2V0IGJ5IGBmbG93YCwgYnV0IGBiaW5kYCByZXR1cm5zIG5ldyBmdW5jdGlvbi4uLlxuICAgICAgICB2YWx1ZS5pc01vYlhGbG93ID0gdHJ1ZVxuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZSxcbiAgICAgICAgLy8gTm9uLWNvbmZpZ3VyYWJsZSBmb3IgY2xhc3Nlc1xuICAgICAgICAvLyBwcmV2ZW50cyBhY2NpZGVudGFsIGZpZWxkIHJlZGVmaW5pdGlvbiBpbiBzdWJjbGFzc1xuICAgICAgICBjb25maWd1cmFibGU6IHNhZmVEZXNjcmlwdG9ycyA/IGFkbS5pc1BsYWluT2JqZWN0XyA6IHRydWUsXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tb2J4anMvbW9ieC9wdWxsLzI2NDEjaXNzdWVjb21tZW50LTczNzI5MjA1OFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgLy8gTm9uLW9ic2V2YWJsZSwgdGhlcmVmb3JlIG5vbi13cml0YWJsZVxuICAgICAgICAvLyBBbHNvIHByZXZlbnRzIHJld3JpdGluZyBpbiBzdWJjbGFzcyBjb25zdHJ1Y3RvclxuICAgICAgICB3cml0YWJsZTogc2FmZURlc2NyaXB0b3JzID8gZmFsc2UgOiB0cnVlXG4gICAgfVxufVxuIiwiaW1wb3J0IHsgT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uLCBkaWUsIEFubm90YXRpb24sIE1ha2VSZXN1bHQgfSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlQ29tcHV0ZWRBbm5vdGF0aW9uKG5hbWU6IHN0cmluZywgb3B0aW9ucz86IG9iamVjdCk6IEFubm90YXRpb24ge1xuICAgIHJldHVybiB7XG4gICAgICAgIGFubm90YXRpb25UeXBlXzogbmFtZSxcbiAgICAgICAgb3B0aW9uc186IG9wdGlvbnMsXG4gICAgICAgIG1ha2VfLFxuICAgICAgICBleHRlbmRfXG4gICAgfVxufVxuXG5mdW5jdGlvbiBtYWtlXyhcbiAgICBhZG06IE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbixcbiAgICBrZXk6IFByb3BlcnR5S2V5LFxuICAgIGRlc2NyaXB0b3I6IFByb3BlcnR5RGVzY3JpcHRvclxuKTogTWFrZVJlc3VsdCB7XG4gICAgcmV0dXJuIHRoaXMuZXh0ZW5kXyhhZG0sIGtleSwgZGVzY3JpcHRvciwgZmFsc2UpID09PSBudWxsID8gTWFrZVJlc3VsdC5DYW5jZWwgOiBNYWtlUmVzdWx0LkJyZWFrXG59XG5cbmZ1bmN0aW9uIGV4dGVuZF8oXG4gICAgYWRtOiBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24sXG4gICAga2V5OiBQcm9wZXJ0eUtleSxcbiAgICBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3IsXG4gICAgcHJveHlUcmFwOiBib29sZWFuXG4pOiBib29sZWFuIHwgbnVsbCB7XG4gICAgYXNzZXJ0Q29tcHV0ZWREZXNjcmlwdG9yKGFkbSwgdGhpcywga2V5LCBkZXNjcmlwdG9yKVxuICAgIHJldHVybiBhZG0uZGVmaW5lQ29tcHV0ZWRQcm9wZXJ0eV8oXG4gICAgICAgIGtleSxcbiAgICAgICAge1xuICAgICAgICAgICAgLi4udGhpcy5vcHRpb25zXyxcbiAgICAgICAgICAgIGdldDogZGVzY3JpcHRvci5nZXQsXG4gICAgICAgICAgICBzZXQ6IGRlc2NyaXB0b3Iuc2V0XG4gICAgICAgIH0sXG4gICAgICAgIHByb3h5VHJhcFxuICAgIClcbn1cblxuZnVuY3Rpb24gYXNzZXJ0Q29tcHV0ZWREZXNjcmlwdG9yKFxuICAgIGFkbTogT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uLFxuICAgIHsgYW5ub3RhdGlvblR5cGVfIH06IEFubm90YXRpb24sXG4gICAga2V5OiBQcm9wZXJ0eUtleSxcbiAgICB7IGdldCB9OiBQcm9wZXJ0eURlc2NyaXB0b3Jcbikge1xuICAgIGlmIChfX0RFVl9fICYmICFnZXQpIHtcbiAgICAgICAgZGllKFxuICAgICAgICAgICAgYENhbm5vdCBhcHBseSAnJHthbm5vdGF0aW9uVHlwZV99JyB0byAnJHthZG0ubmFtZV99LiR7a2V5LnRvU3RyaW5nKCl9JzpgICtcbiAgICAgICAgICAgICAgICBgXFxuJyR7YW5ub3RhdGlvblR5cGVffScgY2FuIG9ubHkgYmUgdXNlZCBvbiBnZXR0ZXIoK3NldHRlcikgcHJvcGVydGllcy5gXG4gICAgICAgIClcbiAgICB9XG59XG4iLCJpbXBvcnQge1xuICAgIE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbixcbiAgICBkZWVwRW5oYW5jZXIsXG4gICAgZGllLFxuICAgIEFubm90YXRpb24sXG4gICAgTWFrZVJlc3VsdFxufSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlT2JzZXJ2YWJsZUFubm90YXRpb24obmFtZTogc3RyaW5nLCBvcHRpb25zPzogb2JqZWN0KTogQW5ub3RhdGlvbiB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgYW5ub3RhdGlvblR5cGVfOiBuYW1lLFxuICAgICAgICBvcHRpb25zXzogb3B0aW9ucyxcbiAgICAgICAgbWFrZV8sXG4gICAgICAgIGV4dGVuZF9cbiAgICB9XG59XG5cbmZ1bmN0aW9uIG1ha2VfKFxuICAgIGFkbTogT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uLFxuICAgIGtleTogUHJvcGVydHlLZXksXG4gICAgZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yXG4pOiBNYWtlUmVzdWx0IHtcbiAgICByZXR1cm4gdGhpcy5leHRlbmRfKGFkbSwga2V5LCBkZXNjcmlwdG9yLCBmYWxzZSkgPT09IG51bGwgPyBNYWtlUmVzdWx0LkNhbmNlbCA6IE1ha2VSZXN1bHQuQnJlYWtcbn1cblxuZnVuY3Rpb24gZXh0ZW5kXyhcbiAgICBhZG06IE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbixcbiAgICBrZXk6IFByb3BlcnR5S2V5LFxuICAgIGRlc2NyaXB0b3I6IFByb3BlcnR5RGVzY3JpcHRvcixcbiAgICBwcm94eVRyYXA6IGJvb2xlYW5cbik6IGJvb2xlYW4gfCBudWxsIHtcbiAgICBhc3NlcnRPYnNlcnZhYmxlRGVzY3JpcHRvcihhZG0sIHRoaXMsIGtleSwgZGVzY3JpcHRvcilcbiAgICByZXR1cm4gYWRtLmRlZmluZU9ic2VydmFibGVQcm9wZXJ0eV8oXG4gICAgICAgIGtleSxcbiAgICAgICAgZGVzY3JpcHRvci52YWx1ZSxcbiAgICAgICAgdGhpcy5vcHRpb25zXz8uZW5oYW5jZXIgPz8gZGVlcEVuaGFuY2VyLFxuICAgICAgICBwcm94eVRyYXBcbiAgICApXG59XG5cbmZ1bmN0aW9uIGFzc2VydE9ic2VydmFibGVEZXNjcmlwdG9yKFxuICAgIGFkbTogT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uLFxuICAgIHsgYW5ub3RhdGlvblR5cGVfIH06IEFubm90YXRpb24sXG4gICAga2V5OiBQcm9wZXJ0eUtleSxcbiAgICBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3Jcbikge1xuICAgIGlmIChfX0RFVl9fICYmICEoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpKSB7XG4gICAgICAgIGRpZShcbiAgICAgICAgICAgIGBDYW5ub3QgYXBwbHkgJyR7YW5ub3RhdGlvblR5cGVffScgdG8gJyR7YWRtLm5hbWVffS4ke2tleS50b1N0cmluZygpfSc6YCArXG4gICAgICAgICAgICAgICAgYFxcbicke2Fubm90YXRpb25UeXBlX30nIGNhbm5vdCBiZSB1c2VkIG9uIGdldHRlci9zZXR0ZXIgcHJvcGVydGllc2BcbiAgICAgICAgKVxuICAgIH1cbn1cbiIsImltcG9ydCB7XG4gICAgT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uLFxuICAgIG9ic2VydmFibGUsXG4gICAgQW5ub3RhdGlvbixcbiAgICBkZWZpbmVQcm9wZXJ0eSxcbiAgICBjcmVhdGVBY3Rpb24sXG4gICAgZ2xvYmFsU3RhdGUsXG4gICAgZmxvdyxcbiAgICBjb21wdXRlZCxcbiAgICBhdXRvQWN0aW9uLFxuICAgIGlzR2VuZXJhdG9yLFxuICAgIE1ha2VSZXN1bHRcbn0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuY29uc3QgQVVUTyA9IFwidHJ1ZVwiXG5cbmV4cG9ydCBjb25zdCBhdXRvQW5ub3RhdGlvbjogQW5ub3RhdGlvbiA9IGNyZWF0ZUF1dG9Bbm5vdGF0aW9uKClcblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUF1dG9Bbm5vdGF0aW9uKG9wdGlvbnM/OiBvYmplY3QpOiBBbm5vdGF0aW9uIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBhbm5vdGF0aW9uVHlwZV86IEFVVE8sXG4gICAgICAgIG9wdGlvbnNfOiBvcHRpb25zLFxuICAgICAgICBtYWtlXyxcbiAgICAgICAgZXh0ZW5kX1xuICAgIH1cbn1cblxuZnVuY3Rpb24gbWFrZV8oXG4gICAgYWRtOiBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24sXG4gICAga2V5OiBQcm9wZXJ0eUtleSxcbiAgICBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3IsXG4gICAgc291cmNlOiBvYmplY3Rcbik6IE1ha2VSZXN1bHQge1xuICAgIC8vIGdldHRlciAtPiBjb21wdXRlZFxuICAgIGlmIChkZXNjcmlwdG9yLmdldCkge1xuICAgICAgICByZXR1cm4gY29tcHV0ZWQubWFrZV8oYWRtLCBrZXksIGRlc2NyaXB0b3IsIHNvdXJjZSlcbiAgICB9XG4gICAgLy8gbG9uZSBzZXR0ZXIgLT4gYWN0aW9uIHNldHRlclxuICAgIGlmIChkZXNjcmlwdG9yLnNldCkge1xuICAgICAgICAvLyBUT0RPIG1ha2UgYWN0aW9uIGFwcGxpY2FibGUgdG8gc2V0dGVyIGFuZCBkZWxlZ2F0ZSB0byBhY3Rpb24ubWFrZV9cbiAgICAgICAgY29uc3Qgc2V0ID0gY3JlYXRlQWN0aW9uKGtleS50b1N0cmluZygpLCBkZXNjcmlwdG9yLnNldCkgYXMgKHY6IGFueSkgPT4gdm9pZFxuICAgICAgICAvLyBvd25cbiAgICAgICAgaWYgKHNvdXJjZSA9PT0gYWRtLnRhcmdldF8pIHtcbiAgICAgICAgICAgIHJldHVybiBhZG0uZGVmaW5lUHJvcGVydHlfKGtleSwge1xuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogZ2xvYmFsU3RhdGUuc2FmZURlc2NyaXB0b3JzID8gYWRtLmlzUGxhaW5PYmplY3RfIDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBzZXRcbiAgICAgICAgICAgIH0pID09PSBudWxsXG4gICAgICAgICAgICAgICAgPyBNYWtlUmVzdWx0LkNhbmNlbFxuICAgICAgICAgICAgICAgIDogTWFrZVJlc3VsdC5Db250aW51ZVxuICAgICAgICB9XG4gICAgICAgIC8vIHByb3RvXG4gICAgICAgIGRlZmluZVByb3BlcnR5KHNvdXJjZSwga2V5LCB7XG4gICAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgICBzZXRcbiAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuIE1ha2VSZXN1bHQuQ29udGludWVcbiAgICB9XG4gICAgLy8gZnVuY3Rpb24gb24gcHJvdG8gLT4gYXV0b0FjdGlvbi9mbG93XG4gICAgaWYgKHNvdXJjZSAhPT0gYWRtLnRhcmdldF8gJiYgdHlwZW9mIGRlc2NyaXB0b3IudmFsdWUgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBpZiAoaXNHZW5lcmF0b3IoZGVzY3JpcHRvci52YWx1ZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGZsb3dBbm5vdGF0aW9uID0gdGhpcy5vcHRpb25zXz8uYXV0b0JpbmQgPyBmbG93LmJvdW5kIDogZmxvd1xuICAgICAgICAgICAgcmV0dXJuIGZsb3dBbm5vdGF0aW9uLm1ha2VfKGFkbSwga2V5LCBkZXNjcmlwdG9yLCBzb3VyY2UpXG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgYWN0aW9uQW5ub3RhdGlvbiA9IHRoaXMub3B0aW9uc18/LmF1dG9CaW5kID8gYXV0b0FjdGlvbi5ib3VuZCA6IGF1dG9BY3Rpb25cbiAgICAgICAgcmV0dXJuIGFjdGlvbkFubm90YXRpb24ubWFrZV8oYWRtLCBrZXksIGRlc2NyaXB0b3IsIHNvdXJjZSlcbiAgICB9XG4gICAgLy8gb3RoZXIgLT4gb2JzZXJ2YWJsZVxuICAgIC8vIENvcHkgcHJvcHMgZnJvbSBwcm90byBhcyB3ZWxsLCBzZWUgdGVzdDpcbiAgICAvLyBcImRlY29yYXRlIHNob3VsZCB3b3JrIHdpdGggT2JqZWN0LmNyZWF0ZVwiXG4gICAgbGV0IG9ic2VydmFibGVBbm5vdGF0aW9uID0gdGhpcy5vcHRpb25zXz8uZGVlcCA9PT0gZmFsc2UgPyBvYnNlcnZhYmxlLnJlZiA6IG9ic2VydmFibGVcbiAgICAvLyBpZiBmdW5jdGlvbiByZXNwZWN0IGF1dG9CaW5kIG9wdGlvblxuICAgIGlmICh0eXBlb2YgZGVzY3JpcHRvci52YWx1ZSA9PT0gXCJmdW5jdGlvblwiICYmIHRoaXMub3B0aW9uc18/LmF1dG9CaW5kKSB7XG4gICAgICAgIGRlc2NyaXB0b3IudmFsdWUgPSBkZXNjcmlwdG9yLnZhbHVlLmJpbmQoYWRtLnByb3h5XyA/PyBhZG0udGFyZ2V0XylcbiAgICB9XG4gICAgcmV0dXJuIG9ic2VydmFibGVBbm5vdGF0aW9uLm1ha2VfKGFkbSwga2V5LCBkZXNjcmlwdG9yLCBzb3VyY2UpXG59XG5cbmZ1bmN0aW9uIGV4dGVuZF8oXG4gICAgYWRtOiBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24sXG4gICAga2V5OiBQcm9wZXJ0eUtleSxcbiAgICBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3IsXG4gICAgcHJveHlUcmFwOiBib29sZWFuXG4pOiBib29sZWFuIHwgbnVsbCB7XG4gICAgLy8gZ2V0dGVyIC0+IGNvbXB1dGVkXG4gICAgaWYgKGRlc2NyaXB0b3IuZ2V0KSB7XG4gICAgICAgIHJldHVybiBjb21wdXRlZC5leHRlbmRfKGFkbSwga2V5LCBkZXNjcmlwdG9yLCBwcm94eVRyYXApXG4gICAgfVxuICAgIC8vIGxvbmUgc2V0dGVyIC0+IGFjdGlvbiBzZXR0ZXJcbiAgICBpZiAoZGVzY3JpcHRvci5zZXQpIHtcbiAgICAgICAgLy8gVE9ETyBtYWtlIGFjdGlvbiBhcHBsaWNhYmxlIHRvIHNldHRlciBhbmQgZGVsZWdhdGUgdG8gYWN0aW9uLmV4dGVuZF9cbiAgICAgICAgcmV0dXJuIGFkbS5kZWZpbmVQcm9wZXJ0eV8oXG4gICAgICAgICAgICBrZXksXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY29uZmlndXJhYmxlOiBnbG9iYWxTdGF0ZS5zYWZlRGVzY3JpcHRvcnMgPyBhZG0uaXNQbGFpbk9iamVjdF8gOiB0cnVlLFxuICAgICAgICAgICAgICAgIHNldDogY3JlYXRlQWN0aW9uKGtleS50b1N0cmluZygpLCBkZXNjcmlwdG9yLnNldCkgYXMgKHY6IGFueSkgPT4gdm9pZFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHByb3h5VHJhcFxuICAgICAgICApXG4gICAgfVxuICAgIC8vIG90aGVyIC0+IG9ic2VydmFibGVcbiAgICAvLyBpZiBmdW5jdGlvbiByZXNwZWN0IGF1dG9CaW5kIG9wdGlvblxuICAgIGlmICh0eXBlb2YgZGVzY3JpcHRvci52YWx1ZSA9PT0gXCJmdW5jdGlvblwiICYmIHRoaXMub3B0aW9uc18/LmF1dG9CaW5kKSB7XG4gICAgICAgIGRlc2NyaXB0b3IudmFsdWUgPSBkZXNjcmlwdG9yLnZhbHVlLmJpbmQoYWRtLnByb3h5XyA/PyBhZG0udGFyZ2V0XylcbiAgICB9XG4gICAgbGV0IG9ic2VydmFibGVBbm5vdGF0aW9uID0gdGhpcy5vcHRpb25zXz8uZGVlcCA9PT0gZmFsc2UgPyBvYnNlcnZhYmxlLnJlZiA6IG9ic2VydmFibGVcbiAgICByZXR1cm4gb2JzZXJ2YWJsZUFubm90YXRpb24uZXh0ZW5kXyhhZG0sIGtleSwgZGVzY3JpcHRvciwgcHJveHlUcmFwKVxufVxuIiwiaW1wb3J0IHtcbiAgICBJRW5oYW5jZXIsXG4gICAgSUVxdWFsc0NvbXBhcmVyLFxuICAgIElPYnNlcnZhYmxlQXJyYXksXG4gICAgSU9ic2VydmFibGVNYXBJbml0aWFsVmFsdWVzLFxuICAgIElPYnNlcnZhYmxlU2V0SW5pdGlhbFZhbHVlcyxcbiAgICBJT2JzZXJ2YWJsZVZhbHVlLFxuICAgIE9ic2VydmFibGVNYXAsXG4gICAgT2JzZXJ2YWJsZVNldCxcbiAgICBPYnNlcnZhYmxlVmFsdWUsXG4gICAgYXNEeW5hbWljT2JzZXJ2YWJsZU9iamVjdCxcbiAgICBjcmVhdGVPYnNlcnZhYmxlQXJyYXksXG4gICAgZGVlcEVuaGFuY2VyLFxuICAgIGV4dGVuZE9ic2VydmFibGUsXG4gICAgaXNFUzZNYXAsXG4gICAgaXNFUzZTZXQsXG4gICAgaXNPYnNlcnZhYmxlLFxuICAgIGlzUGxhaW5PYmplY3QsXG4gICAgcmVmZXJlbmNlRW5oYW5jZXIsXG4gICAgQW5ub3RhdGlvbixcbiAgICBzaGFsbG93RW5oYW5jZXIsXG4gICAgcmVmU3RydWN0RW5oYW5jZXIsXG4gICAgQW5ub3RhdGlvbnNNYXAsXG4gICAgYXNPYnNlcnZhYmxlT2JqZWN0LFxuICAgIHN0b3JlQW5ub3RhdGlvbixcbiAgICBjcmVhdGVEZWNvcmF0b3JBbm5vdGF0aW9uLFxuICAgIGNyZWF0ZUxlZ2FjeUFycmF5LFxuICAgIGdsb2JhbFN0YXRlLFxuICAgIGFzc2lnbixcbiAgICBpc1N0cmluZ2lzaCxcbiAgICBjcmVhdGVPYnNlcnZhYmxlQW5ub3RhdGlvbixcbiAgICBjcmVhdGVBdXRvQW5ub3RhdGlvblxufSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5leHBvcnQgY29uc3QgT0JTRVJWQUJMRSA9IFwib2JzZXJ2YWJsZVwiXG5leHBvcnQgY29uc3QgT0JTRVJWQUJMRV9SRUYgPSBcIm9ic2VydmFibGUucmVmXCJcbmV4cG9ydCBjb25zdCBPQlNFUlZBQkxFX1NIQUxMT1cgPSBcIm9ic2VydmFibGUuc2hhbGxvd1wiXG5leHBvcnQgY29uc3QgT0JTRVJWQUJMRV9TVFJVQ1QgPSBcIm9ic2VydmFibGUuc3RydWN0XCJcblxuZXhwb3J0IHR5cGUgQ3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnMgPSB7XG4gICAgbmFtZT86IHN0cmluZ1xuICAgIGVxdWFscz86IElFcXVhbHNDb21wYXJlcjxhbnk+XG4gICAgZGVlcD86IGJvb2xlYW5cbiAgICBkZWZhdWx0RGVjb3JhdG9yPzogQW5ub3RhdGlvblxuICAgIHByb3h5PzogYm9vbGVhblxuICAgIGF1dG9CaW5kPzogYm9vbGVhblxufVxuXG4vLyBQcmVkZWZpbmVkIGJhZ3Mgb2YgY3JlYXRlIG9ic2VydmFibGUgb3B0aW9ucywgdG8gYXZvaWQgYWxsb2NhdGluZyB0ZW1wb3JhcmlseSBvcHRpb24gb2JqZWN0c1xuLy8gaW4gdGhlIG1ham9yaXR5IG9mIGNhc2VzXG5leHBvcnQgY29uc3QgZGVmYXVsdENyZWF0ZU9ic2VydmFibGVPcHRpb25zOiBDcmVhdGVPYnNlcnZhYmxlT3B0aW9ucyA9IHtcbiAgICBkZWVwOiB0cnVlLFxuICAgIG5hbWU6IHVuZGVmaW5lZCxcbiAgICBkZWZhdWx0RGVjb3JhdG9yOiB1bmRlZmluZWQsXG4gICAgcHJveHk6IHRydWVcbn1cbk9iamVjdC5mcmVlemUoZGVmYXVsdENyZWF0ZU9ic2VydmFibGVPcHRpb25zKVxuXG5leHBvcnQgZnVuY3Rpb24gYXNDcmVhdGVPYnNlcnZhYmxlT3B0aW9ucyh0aGluZzogYW55KTogQ3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnMge1xuICAgIHJldHVybiB0aGluZyB8fCBkZWZhdWx0Q3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnNcbn1cblxuY29uc3Qgb2JzZXJ2YWJsZUFubm90YXRpb24gPSBjcmVhdGVPYnNlcnZhYmxlQW5ub3RhdGlvbihPQlNFUlZBQkxFKVxuY29uc3Qgb2JzZXJ2YWJsZVJlZkFubm90YXRpb24gPSBjcmVhdGVPYnNlcnZhYmxlQW5ub3RhdGlvbihPQlNFUlZBQkxFX1JFRiwge1xuICAgIGVuaGFuY2VyOiByZWZlcmVuY2VFbmhhbmNlclxufSlcbmNvbnN0IG9ic2VydmFibGVTaGFsbG93QW5ub3RhdGlvbiA9IGNyZWF0ZU9ic2VydmFibGVBbm5vdGF0aW9uKE9CU0VSVkFCTEVfU0hBTExPVywge1xuICAgIGVuaGFuY2VyOiBzaGFsbG93RW5oYW5jZXJcbn0pXG5jb25zdCBvYnNlcnZhYmxlU3RydWN0QW5ub3RhdGlvbiA9IGNyZWF0ZU9ic2VydmFibGVBbm5vdGF0aW9uKE9CU0VSVkFCTEVfU1RSVUNULCB7XG4gICAgZW5oYW5jZXI6IHJlZlN0cnVjdEVuaGFuY2VyXG59KVxuY29uc3Qgb2JzZXJ2YWJsZURlY29yYXRvckFubm90YXRpb24gPSBjcmVhdGVEZWNvcmF0b3JBbm5vdGF0aW9uKG9ic2VydmFibGVBbm5vdGF0aW9uKVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RW5oYW5jZXJGcm9tT3B0aW9ucyhvcHRpb25zOiBDcmVhdGVPYnNlcnZhYmxlT3B0aW9ucyk6IElFbmhhbmNlcjxhbnk+IHtcbiAgICByZXR1cm4gb3B0aW9ucy5kZWVwID09PSB0cnVlXG4gICAgICAgID8gZGVlcEVuaGFuY2VyXG4gICAgICAgIDogb3B0aW9ucy5kZWVwID09PSBmYWxzZVxuICAgICAgICA/IHJlZmVyZW5jZUVuaGFuY2VyXG4gICAgICAgIDogZ2V0RW5oYW5jZXJGcm9tQW5ub3RhdGlvbihvcHRpb25zLmRlZmF1bHREZWNvcmF0b3IpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRBbm5vdGF0aW9uRnJvbU9wdGlvbnMoXG4gICAgb3B0aW9ucz86IENyZWF0ZU9ic2VydmFibGVPcHRpb25zXG4pOiBBbm5vdGF0aW9uIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gb3B0aW9ucyA/IG9wdGlvbnMuZGVmYXVsdERlY29yYXRvciA/PyBjcmVhdGVBdXRvQW5ub3RhdGlvbihvcHRpb25zKSA6IHVuZGVmaW5lZFxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RW5oYW5jZXJGcm9tQW5ub3RhdGlvbihhbm5vdGF0aW9uPzogQW5ub3RhdGlvbik6IElFbmhhbmNlcjxhbnk+IHtcbiAgICByZXR1cm4gIWFubm90YXRpb24gPyBkZWVwRW5oYW5jZXIgOiBhbm5vdGF0aW9uLm9wdGlvbnNfPy5lbmhhbmNlciA/PyBkZWVwRW5oYW5jZXJcbn1cblxuLyoqXG4gKiBUdXJucyBhbiBvYmplY3QsIGFycmF5IG9yIGZ1bmN0aW9uIGludG8gYSByZWFjdGl2ZSBzdHJ1Y3R1cmUuXG4gKiBAcGFyYW0gdiB0aGUgdmFsdWUgd2hpY2ggc2hvdWxkIGJlY29tZSBvYnNlcnZhYmxlLlxuICovXG5mdW5jdGlvbiBjcmVhdGVPYnNlcnZhYmxlKHY6IGFueSwgYXJnMj86IGFueSwgYXJnMz86IGFueSkge1xuICAgIC8vIEBvYnNlcnZhYmxlIHNvbWVQcm9wO1xuICAgIGlmIChpc1N0cmluZ2lzaChhcmcyKSkge1xuICAgICAgICBzdG9yZUFubm90YXRpb24odiwgYXJnMiwgb2JzZXJ2YWJsZUFubm90YXRpb24pXG4gICAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIGFscmVhZHkgb2JzZXJ2YWJsZSAtIGlnbm9yZVxuICAgIGlmIChpc09ic2VydmFibGUodikpIHtcbiAgICAgICAgcmV0dXJuIHZcbiAgICB9XG5cbiAgICAvLyBwbGFpbiBvYmplY3RcbiAgICBpZiAoaXNQbGFpbk9iamVjdCh2KSkge1xuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZS5vYmplY3QodiwgYXJnMiwgYXJnMylcbiAgICB9XG5cbiAgICAvLyBBcnJheVxuICAgIGlmIChBcnJheS5pc0FycmF5KHYpKSB7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlLmFycmF5KHYsIGFyZzIpXG4gICAgfVxuXG4gICAgLy8gTWFwXG4gICAgaWYgKGlzRVM2TWFwKHYpKSB7XG4gICAgICAgIHJldHVybiBvYnNlcnZhYmxlLm1hcCh2LCBhcmcyKVxuICAgIH1cblxuICAgIC8vIFNldFxuICAgIGlmIChpc0VTNlNldCh2KSkge1xuICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZS5zZXQodiwgYXJnMilcbiAgICB9XG5cbiAgICAvLyBvdGhlciBvYmplY3QgLSBpZ25vcmVcbiAgICBpZiAodHlwZW9mIHYgPT09IFwib2JqZWN0XCIgJiYgdiAhPT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gdlxuICAgIH1cblxuICAgIC8vIGFueXRoaW5nIGVsc2VcbiAgICByZXR1cm4gb2JzZXJ2YWJsZS5ib3godiwgYXJnMilcbn1cbmFzc2lnbihjcmVhdGVPYnNlcnZhYmxlLCBvYnNlcnZhYmxlRGVjb3JhdG9yQW5ub3RhdGlvbilcblxuZXhwb3J0IGludGVyZmFjZSBJT2JzZXJ2YWJsZVZhbHVlRmFjdG9yeSB7XG4gICAgPFQ+KHZhbHVlOiBULCBvcHRpb25zPzogQ3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnMpOiBJT2JzZXJ2YWJsZVZhbHVlPFQ+XG4gICAgPFQ+KHZhbHVlPzogVCwgb3B0aW9ucz86IENyZWF0ZU9ic2VydmFibGVPcHRpb25zKTogSU9ic2VydmFibGVWYWx1ZTxUIHwgdW5kZWZpbmVkPlxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElPYnNlcnZhYmxlRmFjdG9yeSBleHRlbmRzIEFubm90YXRpb24sIFByb3BlcnR5RGVjb3JhdG9yIHtcbiAgICA8VCA9IGFueT4odmFsdWU6IFRbXSwgb3B0aW9ucz86IENyZWF0ZU9ic2VydmFibGVPcHRpb25zKTogSU9ic2VydmFibGVBcnJheTxUPlxuICAgIDxUID0gYW55Pih2YWx1ZTogU2V0PFQ+LCBvcHRpb25zPzogQ3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnMpOiBPYnNlcnZhYmxlU2V0PFQ+XG4gICAgPEsgPSBhbnksIFYgPSBhbnk+KHZhbHVlOiBNYXA8SywgVj4sIG9wdGlvbnM/OiBDcmVhdGVPYnNlcnZhYmxlT3B0aW9ucyk6IE9ic2VydmFibGVNYXA8SywgVj5cbiAgICA8VCBleHRlbmRzIG9iamVjdD4oXG4gICAgICAgIHZhbHVlOiBULFxuICAgICAgICBkZWNvcmF0b3JzPzogQW5ub3RhdGlvbnNNYXA8VCwgbmV2ZXI+LFxuICAgICAgICBvcHRpb25zPzogQ3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnNcbiAgICApOiBUXG5cbiAgICBib3g6IElPYnNlcnZhYmxlVmFsdWVGYWN0b3J5XG4gICAgYXJyYXk6IDxUID0gYW55Pihpbml0aWFsVmFsdWVzPzogVFtdLCBvcHRpb25zPzogQ3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnMpID0+IElPYnNlcnZhYmxlQXJyYXk8VD5cbiAgICBzZXQ6IDxUID0gYW55PihcbiAgICAgICAgaW5pdGlhbFZhbHVlcz86IElPYnNlcnZhYmxlU2V0SW5pdGlhbFZhbHVlczxUPixcbiAgICAgICAgb3B0aW9ucz86IENyZWF0ZU9ic2VydmFibGVPcHRpb25zXG4gICAgKSA9PiBPYnNlcnZhYmxlU2V0PFQ+XG4gICAgbWFwOiA8SyA9IGFueSwgViA9IGFueT4oXG4gICAgICAgIGluaXRpYWxWYWx1ZXM/OiBJT2JzZXJ2YWJsZU1hcEluaXRpYWxWYWx1ZXM8SywgVj4sXG4gICAgICAgIG9wdGlvbnM/OiBDcmVhdGVPYnNlcnZhYmxlT3B0aW9uc1xuICAgICkgPT4gT2JzZXJ2YWJsZU1hcDxLLCBWPlxuICAgIG9iamVjdDogPFQgPSBhbnk+KFxuICAgICAgICBwcm9wczogVCxcbiAgICAgICAgZGVjb3JhdG9ycz86IEFubm90YXRpb25zTWFwPFQsIG5ldmVyPixcbiAgICAgICAgb3B0aW9ucz86IENyZWF0ZU9ic2VydmFibGVPcHRpb25zXG4gICAgKSA9PiBUXG5cbiAgICAvKipcbiAgICAgKiBEZWNvcmF0b3IgdGhhdCBjcmVhdGVzIGFuIG9ic2VydmFibGUgdGhhdCBvbmx5IG9ic2VydmVzIHRoZSByZWZlcmVuY2VzLCBidXQgZG9lc24ndCB0cnkgdG8gdHVybiB0aGUgYXNzaWduZWQgdmFsdWUgaW50byBhbiBvYnNlcnZhYmxlLnRzLlxuICAgICAqL1xuICAgIHJlZjogQW5ub3RhdGlvbiAmIFByb3BlcnR5RGVjb3JhdG9yXG4gICAgLyoqXG4gICAgICogRGVjb3JhdG9yIHRoYXQgY3JlYXRlcyBhbiBvYnNlcnZhYmxlIGNvbnZlcnRzIGl0cyB2YWx1ZSAob2JqZWN0cywgbWFwcyBvciBhcnJheXMpIGludG8gYSBzaGFsbG93IG9ic2VydmFibGUgc3RydWN0dXJlXG4gICAgICovXG4gICAgc2hhbGxvdzogQW5ub3RhdGlvbiAmIFByb3BlcnR5RGVjb3JhdG9yXG4gICAgZGVlcDogQW5ub3RhdGlvbiAmIFByb3BlcnR5RGVjb3JhdG9yXG4gICAgc3RydWN0OiBBbm5vdGF0aW9uICYgUHJvcGVydHlEZWNvcmF0b3Jcbn1cblxuY29uc3Qgb2JzZXJ2YWJsZUZhY3RvcmllczogSU9ic2VydmFibGVGYWN0b3J5ID0ge1xuICAgIGJveDxUID0gYW55Pih2YWx1ZTogVCwgb3B0aW9ucz86IENyZWF0ZU9ic2VydmFibGVPcHRpb25zKTogSU9ic2VydmFibGVWYWx1ZTxUPiB7XG4gICAgICAgIGNvbnN0IG8gPSBhc0NyZWF0ZU9ic2VydmFibGVPcHRpb25zKG9wdGlvbnMpXG4gICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZVZhbHVlKHZhbHVlLCBnZXRFbmhhbmNlckZyb21PcHRpb25zKG8pLCBvLm5hbWUsIHRydWUsIG8uZXF1YWxzKVxuICAgIH0sXG4gICAgYXJyYXk8VCA9IGFueT4oaW5pdGlhbFZhbHVlcz86IFRbXSwgb3B0aW9ucz86IENyZWF0ZU9ic2VydmFibGVPcHRpb25zKTogSU9ic2VydmFibGVBcnJheTxUPiB7XG4gICAgICAgIGNvbnN0IG8gPSBhc0NyZWF0ZU9ic2VydmFibGVPcHRpb25zKG9wdGlvbnMpXG4gICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICBnbG9iYWxTdGF0ZS51c2VQcm94aWVzID09PSBmYWxzZSB8fCBvLnByb3h5ID09PSBmYWxzZVxuICAgICAgICAgICAgICAgID8gY3JlYXRlTGVnYWN5QXJyYXlcbiAgICAgICAgICAgICAgICA6IGNyZWF0ZU9ic2VydmFibGVBcnJheVxuICAgICAgICApKGluaXRpYWxWYWx1ZXMsIGdldEVuaGFuY2VyRnJvbU9wdGlvbnMobyksIG8ubmFtZSlcbiAgICB9LFxuICAgIG1hcDxLID0gYW55LCBWID0gYW55PihcbiAgICAgICAgaW5pdGlhbFZhbHVlcz86IElPYnNlcnZhYmxlTWFwSW5pdGlhbFZhbHVlczxLLCBWPixcbiAgICAgICAgb3B0aW9ucz86IENyZWF0ZU9ic2VydmFibGVPcHRpb25zXG4gICAgKTogT2JzZXJ2YWJsZU1hcDxLLCBWPiB7XG4gICAgICAgIGNvbnN0IG8gPSBhc0NyZWF0ZU9ic2VydmFibGVPcHRpb25zKG9wdGlvbnMpXG4gICAgICAgIHJldHVybiBuZXcgT2JzZXJ2YWJsZU1hcDxLLCBWPihpbml0aWFsVmFsdWVzLCBnZXRFbmhhbmNlckZyb21PcHRpb25zKG8pLCBvLm5hbWUpXG4gICAgfSxcbiAgICBzZXQ8VCA9IGFueT4oXG4gICAgICAgIGluaXRpYWxWYWx1ZXM/OiBJT2JzZXJ2YWJsZVNldEluaXRpYWxWYWx1ZXM8VD4sXG4gICAgICAgIG9wdGlvbnM/OiBDcmVhdGVPYnNlcnZhYmxlT3B0aW9uc1xuICAgICk6IE9ic2VydmFibGVTZXQ8VD4ge1xuICAgICAgICBjb25zdCBvID0gYXNDcmVhdGVPYnNlcnZhYmxlT3B0aW9ucyhvcHRpb25zKVxuICAgICAgICByZXR1cm4gbmV3IE9ic2VydmFibGVTZXQ8VD4oaW5pdGlhbFZhbHVlcywgZ2V0RW5oYW5jZXJGcm9tT3B0aW9ucyhvKSwgby5uYW1lKVxuICAgIH0sXG4gICAgb2JqZWN0PFQgZXh0ZW5kcyBvYmplY3QgPSBhbnk+KFxuICAgICAgICBwcm9wczogVCxcbiAgICAgICAgZGVjb3JhdG9ycz86IEFubm90YXRpb25zTWFwPFQsIG5ldmVyPixcbiAgICAgICAgb3B0aW9ucz86IENyZWF0ZU9ic2VydmFibGVPcHRpb25zXG4gICAgKTogVCB7XG4gICAgICAgIHJldHVybiBleHRlbmRPYnNlcnZhYmxlKFxuICAgICAgICAgICAgZ2xvYmFsU3RhdGUudXNlUHJveGllcyA9PT0gZmFsc2UgfHwgb3B0aW9ucz8ucHJveHkgPT09IGZhbHNlXG4gICAgICAgICAgICAgICAgPyBhc09ic2VydmFibGVPYmplY3Qoe30sIG9wdGlvbnMpXG4gICAgICAgICAgICAgICAgOiBhc0R5bmFtaWNPYnNlcnZhYmxlT2JqZWN0KHt9LCBvcHRpb25zKSxcbiAgICAgICAgICAgIHByb3BzLFxuICAgICAgICAgICAgZGVjb3JhdG9yc1xuICAgICAgICApXG4gICAgfSxcbiAgICByZWY6IGNyZWF0ZURlY29yYXRvckFubm90YXRpb24ob2JzZXJ2YWJsZVJlZkFubm90YXRpb24pLFxuICAgIHNoYWxsb3c6IGNyZWF0ZURlY29yYXRvckFubm90YXRpb24ob2JzZXJ2YWJsZVNoYWxsb3dBbm5vdGF0aW9uKSxcbiAgICBkZWVwOiBvYnNlcnZhYmxlRGVjb3JhdG9yQW5ub3RhdGlvbixcbiAgICBzdHJ1Y3Q6IGNyZWF0ZURlY29yYXRvckFubm90YXRpb24ob2JzZXJ2YWJsZVN0cnVjdEFubm90YXRpb24pXG59IGFzIGFueVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbmV4cG9ydCB2YXIgb2JzZXJ2YWJsZTogSU9ic2VydmFibGVGYWN0b3J5ID0gYXNzaWduKGNyZWF0ZU9ic2VydmFibGUsIG9ic2VydmFibGVGYWN0b3JpZXMpXG4iLCJpbXBvcnQge1xuICAgIENyZWF0ZU9ic2VydmFibGVPcHRpb25zLFxuICAgIGlzT2JzZXJ2YWJsZU1hcCxcbiAgICBBbm5vdGF0aW9uc01hcCxcbiAgICBzdGFydEJhdGNoLFxuICAgIGVuZEJhdGNoLFxuICAgIGFzT2JzZXJ2YWJsZU9iamVjdCxcbiAgICBpc1BsYWluT2JqZWN0LFxuICAgIE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbixcbiAgICBpc09ic2VydmFibGUsXG4gICAgZGllLFxuICAgIGdldE93blByb3BlcnR5RGVzY3JpcHRvcnMsXG4gICAgJG1vYngsXG4gICAgb3duS2V5c1xufSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5leHBvcnQgZnVuY3Rpb24gZXh0ZW5kT2JzZXJ2YWJsZTxBIGV4dGVuZHMgT2JqZWN0LCBCIGV4dGVuZHMgT2JqZWN0PihcbiAgICB0YXJnZXQ6IEEsXG4gICAgcHJvcGVydGllczogQixcbiAgICBhbm5vdGF0aW9ucz86IEFubm90YXRpb25zTWFwPEIsIG5ldmVyPixcbiAgICBvcHRpb25zPzogQ3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnNcbik6IEEgJiBCIHtcbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDQpIHtcbiAgICAgICAgICAgIGRpZShcIidleHRlbmRPYnNlcnZhYmxlJyBleHBlY3RlZCAyLTQgYXJndW1lbnRzXCIpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiB0YXJnZXQgIT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgIGRpZShcIidleHRlbmRPYnNlcnZhYmxlJyBleHBlY3RzIGFuIG9iamVjdCBhcyBmaXJzdCBhcmd1bWVudFwiKVxuICAgICAgICB9XG4gICAgICAgIGlmIChpc09ic2VydmFibGVNYXAodGFyZ2V0KSkge1xuICAgICAgICAgICAgZGllKFwiJ2V4dGVuZE9ic2VydmFibGUnIHNob3VsZCBub3QgYmUgdXNlZCBvbiBtYXBzLCB1c2UgbWFwLm1lcmdlIGluc3RlYWRcIilcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzUGxhaW5PYmplY3QocHJvcGVydGllcykpIHtcbiAgICAgICAgICAgIGRpZShgJ2V4dGVuZE9ic2VydmFibGUnIG9ubHkgYWNjZXB0cyBwbGFpbiBvYmplY3RzIGFzIHNlY29uZCBhcmd1bWVudGApXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzT2JzZXJ2YWJsZShwcm9wZXJ0aWVzKSB8fCBpc09ic2VydmFibGUoYW5ub3RhdGlvbnMpKSB7XG4gICAgICAgICAgICBkaWUoYEV4dGVuZGluZyBhbiBvYmplY3Qgd2l0aCBhbm90aGVyIG9ic2VydmFibGUgKG9iamVjdCkgaXMgbm90IHN1cHBvcnRlZGApXG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gUHVsbCBkZXNjcmlwdG9ycyBmaXJzdCwgc28gd2UgZG9uJ3QgaGF2ZSB0byBkZWFsIHdpdGggcHJvcHMgYWRkZWQgYnkgYWRtaW5pc3RyYXRpb24gKCRtb2J4KVxuICAgIGNvbnN0IGRlc2NyaXB0b3JzID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyhwcm9wZXJ0aWVzKVxuXG4gICAgY29uc3QgYWRtOiBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24gPSBhc09ic2VydmFibGVPYmplY3QodGFyZ2V0LCBvcHRpb25zKVskbW9ieF1cbiAgICBzdGFydEJhdGNoKClcbiAgICB0cnkge1xuICAgICAgICBvd25LZXlzKGRlc2NyaXB0b3JzKS5mb3JFYWNoKGtleSA9PiB7XG4gICAgICAgICAgICBhZG0uZXh0ZW5kXyhcbiAgICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgICAgZGVzY3JpcHRvcnNba2V5IGFzIGFueV0sXG4gICAgICAgICAgICAgICAgLy8gbXVzdCBwYXNzIFwidW5kZWZpbmVkXCIgZm9yIHsga2V5OiB1bmRlZmluZWQgfVxuICAgICAgICAgICAgICAgICFhbm5vdGF0aW9ucyA/IHRydWUgOiBrZXkgaW4gYW5ub3RhdGlvbnMgPyBhbm5vdGF0aW9uc1trZXldIDogdHJ1ZVxuICAgICAgICAgICAgKVxuICAgICAgICB9KVxuICAgIH0gZmluYWxseSB7XG4gICAgICAgIGVuZEJhdGNoKClcbiAgICB9XG4gICAgcmV0dXJuIHRhcmdldCBhcyBhbnlcbn1cbiIsImltcG9ydCB7XG4gICAgJG1vYngsXG4gICAgSUlzT2JzZXJ2YWJsZU9iamVjdCxcbiAgICBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24sXG4gICAgd2FybkFib3V0UHJveHlSZXF1aXJlbWVudCxcbiAgICBhc3NlcnRQcm94aWVzLFxuICAgIGRpZSxcbiAgICBpc1N0cmluZ2lzaCxcbiAgICBnbG9iYWxTdGF0ZSxcbiAgICBDcmVhdGVPYnNlcnZhYmxlT3B0aW9ucyxcbiAgICBhc09ic2VydmFibGVPYmplY3Rcbn0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuZnVuY3Rpb24gZ2V0QWRtKHRhcmdldCk6IE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbiB7XG4gICAgcmV0dXJuIHRhcmdldFskbW9ieF1cbn1cblxuLy8gT3B0aW1pemF0aW9uOiB3ZSBkb24ndCBuZWVkIHRoZSBpbnRlcm1lZGlhdGUgb2JqZWN0cyBhbmQgY291bGQgaGF2ZSBhIGNvbXBsZXRlbHkgY3VzdG9tIGFkbWluaXN0cmF0aW9uIGZvciBEeW5hbWljT2JqZWN0cyxcbi8vIGFuZCBza2lwIGVpdGhlciB0aGUgaW50ZXJuYWwgdmFsdWVzIG1hcCwgb3IgdGhlIGJhc2Ugb2JqZWN0IHdpdGggaXRzIHByb3BlcnR5IGRlc2NyaXB0b3JzIVxuY29uc3Qgb2JqZWN0UHJveHlUcmFwczogUHJveHlIYW5kbGVyPGFueT4gPSB7XG4gICAgaGFzKHRhcmdldDogSUlzT2JzZXJ2YWJsZU9iamVjdCwgbmFtZTogUHJvcGVydHlLZXkpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKF9fREVWX18gJiYgZ2xvYmFsU3RhdGUudHJhY2tpbmdEZXJpdmF0aW9uKSB7XG4gICAgICAgICAgICB3YXJuQWJvdXRQcm94eVJlcXVpcmVtZW50KFxuICAgICAgICAgICAgICAgIFwiZGV0ZWN0IG5ldyBwcm9wZXJ0aWVzIHVzaW5nIHRoZSAnaW4nIG9wZXJhdG9yLiBVc2UgJ2hhcycgZnJvbSAnbW9ieCcgaW5zdGVhZC5cIlxuICAgICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBnZXRBZG0odGFyZ2V0KS5oYXNfKG5hbWUpXG4gICAgfSxcbiAgICBnZXQodGFyZ2V0OiBJSXNPYnNlcnZhYmxlT2JqZWN0LCBuYW1lOiBQcm9wZXJ0eUtleSk6IGFueSB7XG4gICAgICAgIHJldHVybiBnZXRBZG0odGFyZ2V0KS5nZXRfKG5hbWUpXG4gICAgfSxcbiAgICBzZXQodGFyZ2V0OiBJSXNPYnNlcnZhYmxlT2JqZWN0LCBuYW1lOiBQcm9wZXJ0eUtleSwgdmFsdWU6IGFueSk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAoIWlzU3RyaW5naXNoKG5hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgICAgICBpZiAoX19ERVZfXyAmJiAhZ2V0QWRtKHRhcmdldCkudmFsdWVzXy5oYXMobmFtZSkpIHtcbiAgICAgICAgICAgIHdhcm5BYm91dFByb3h5UmVxdWlyZW1lbnQoXG4gICAgICAgICAgICAgICAgXCJhZGQgYSBuZXcgb2JzZXJ2YWJsZSBwcm9wZXJ0eSB0aHJvdWdoIGRpcmVjdCBhc3NpZ25tZW50LiBVc2UgJ3NldCcgZnJvbSAnbW9ieCcgaW5zdGVhZC5cIlxuICAgICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICAgIC8vIG51bGwgKGludGVyY2VwdGVkKSAtPiB0cnVlIChzdWNjZXNzKVxuICAgICAgICByZXR1cm4gZ2V0QWRtKHRhcmdldCkuc2V0XyhuYW1lLCB2YWx1ZSwgdHJ1ZSkgPz8gdHJ1ZVxuICAgIH0sXG4gICAgZGVsZXRlUHJvcGVydHkodGFyZ2V0OiBJSXNPYnNlcnZhYmxlT2JqZWN0LCBuYW1lOiBQcm9wZXJ0eUtleSk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAoX19ERVZfXykge1xuICAgICAgICAgICAgd2FybkFib3V0UHJveHlSZXF1aXJlbWVudChcbiAgICAgICAgICAgICAgICBcImRlbGV0ZSBwcm9wZXJ0aWVzIGZyb20gYW4gb2JzZXJ2YWJsZSBvYmplY3QuIFVzZSAncmVtb3ZlJyBmcm9tICdtb2J4JyBpbnN0ZWFkLlwiXG4gICAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1N0cmluZ2lzaChuYW1lKSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgICAgLy8gbnVsbCAoaW50ZXJjZXB0ZWQpIC0+IHRydWUgKHN1Y2Nlc3MpXG4gICAgICAgIHJldHVybiBnZXRBZG0odGFyZ2V0KS5kZWxldGVfKG5hbWUsIHRydWUpID8/IHRydWVcbiAgICB9LFxuICAgIGRlZmluZVByb3BlcnR5KFxuICAgICAgICB0YXJnZXQ6IElJc09ic2VydmFibGVPYmplY3QsXG4gICAgICAgIG5hbWU6IFByb3BlcnR5S2V5LFxuICAgICAgICBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3JcbiAgICApOiBib29sZWFuIHtcbiAgICAgICAgaWYgKF9fREVWX18pIHtcbiAgICAgICAgICAgIHdhcm5BYm91dFByb3h5UmVxdWlyZW1lbnQoXG4gICAgICAgICAgICAgICAgXCJkZWZpbmUgcHJvcGVydHkgb24gYW4gb2JzZXJ2YWJsZSBvYmplY3QuIFVzZSAnZGVmaW5lUHJvcGVydHknIGZyb20gJ21vYngnIGluc3RlYWQuXCJcbiAgICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgICAvLyBudWxsIChpbnRlcmNlcHRlZCkgLT4gdHJ1ZSAoc3VjY2VzcylcbiAgICAgICAgcmV0dXJuIGdldEFkbSh0YXJnZXQpLmRlZmluZVByb3BlcnR5XyhuYW1lLCBkZXNjcmlwdG9yKSA/PyB0cnVlXG4gICAgfSxcbiAgICBvd25LZXlzKHRhcmdldDogSUlzT2JzZXJ2YWJsZU9iamVjdCk6IEFycmF5TGlrZTxzdHJpbmcgfCBzeW1ib2w+IHtcbiAgICAgICAgaWYgKF9fREVWX18gJiYgZ2xvYmFsU3RhdGUudHJhY2tpbmdEZXJpdmF0aW9uKSB7XG4gICAgICAgICAgICB3YXJuQWJvdXRQcm94eVJlcXVpcmVtZW50KFxuICAgICAgICAgICAgICAgIFwiaXRlcmF0ZSBrZXlzIHRvIGRldGVjdCBhZGRlZCAvIHJlbW92ZWQgcHJvcGVydGllcy4gVXNlICdrZXlzJyBmcm9tICdtb2J4JyBpbnN0ZWFkLlwiXG4gICAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGdldEFkbSh0YXJnZXQpLm93bktleXNfKClcbiAgICB9LFxuICAgIHByZXZlbnRFeHRlbnNpb25zKHRhcmdldCkge1xuICAgICAgICBkaWUoMTMpXG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNEeW5hbWljT2JzZXJ2YWJsZU9iamVjdChcbiAgICB0YXJnZXQ6IGFueSxcbiAgICBvcHRpb25zPzogQ3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnNcbik6IElJc09ic2VydmFibGVPYmplY3Qge1xuICAgIGFzc2VydFByb3hpZXMoKVxuICAgIHRhcmdldCA9IGFzT2JzZXJ2YWJsZU9iamVjdCh0YXJnZXQsIG9wdGlvbnMpXG4gICAgcmV0dXJuICh0YXJnZXRbJG1vYnhdLnByb3h5XyA/Pz0gbmV3IFByb3h5KHRhcmdldCwgb2JqZWN0UHJveHlUcmFwcykpXG59XG4iLCJpbXBvcnQge1xuICAgIENvbXB1dGVkVmFsdWUsXG4gICAgSUNvbXB1dGVkVmFsdWVPcHRpb25zLFxuICAgIEFubm90YXRpb24sXG4gICAgc3RvcmVBbm5vdGF0aW9uLFxuICAgIGNyZWF0ZURlY29yYXRvckFubm90YXRpb24sXG4gICAgaXNTdHJpbmdpc2gsXG4gICAgaXNQbGFpbk9iamVjdCxcbiAgICBpc0Z1bmN0aW9uLFxuICAgIGRpZSxcbiAgICBJQ29tcHV0ZWRWYWx1ZSxcbiAgICBjcmVhdGVDb21wdXRlZEFubm90YXRpb24sXG4gICAgY29tcGFyZXJcbn0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuZXhwb3J0IGNvbnN0IENPTVBVVEVEID0gXCJjb21wdXRlZFwiXG5leHBvcnQgY29uc3QgQ09NUFVURURfU1RSVUNUID0gXCJjb21wdXRlZC5zdHJ1Y3RcIlxuXG5leHBvcnQgaW50ZXJmYWNlIElDb21wdXRlZEZhY3RvcnkgZXh0ZW5kcyBBbm5vdGF0aW9uLCBQcm9wZXJ0eURlY29yYXRvciB7XG4gICAgLy8gQGNvbXB1dGVkKG9wdHMpXG4gICAgPFQ+KG9wdGlvbnM6IElDb21wdXRlZFZhbHVlT3B0aW9uczxUPik6IEFubm90YXRpb24gJiBQcm9wZXJ0eURlY29yYXRvclxuICAgIC8vIGNvbXB1dGVkKGZuLCBvcHRzKVxuICAgIDxUPihmdW5jOiAoKSA9PiBULCBvcHRpb25zPzogSUNvbXB1dGVkVmFsdWVPcHRpb25zPFQ+KTogSUNvbXB1dGVkVmFsdWU8VD5cblxuICAgIHN0cnVjdDogQW5ub3RhdGlvbiAmIFByb3BlcnR5RGVjb3JhdG9yXG59XG5cbmNvbnN0IGNvbXB1dGVkQW5ub3RhdGlvbiA9IGNyZWF0ZUNvbXB1dGVkQW5ub3RhdGlvbihDT01QVVRFRClcbmNvbnN0IGNvbXB1dGVkU3RydWN0QW5ub3RhdGlvbiA9IGNyZWF0ZUNvbXB1dGVkQW5ub3RhdGlvbihDT01QVVRFRF9TVFJVQ1QsIHtcbiAgICBlcXVhbHM6IGNvbXBhcmVyLnN0cnVjdHVyYWxcbn0pXG5cbi8qKlxuICogRGVjb3JhdG9yIGZvciBjbGFzcyBwcm9wZXJ0aWVzOiBAY29tcHV0ZWQgZ2V0IHZhbHVlKCkgeyByZXR1cm4gZXhwcjsgfS5cbiAqIEZvciBsZWdhY3kgcHVycG9zZXMgYWxzbyBpbnZva2FibGUgYXMgRVM1IG9ic2VydmFibGUgY3JlYXRlZDogYGNvbXB1dGVkKCgpID0+IGV4cHIpYDtcbiAqL1xuZXhwb3J0IGNvbnN0IGNvbXB1dGVkOiBJQ29tcHV0ZWRGYWN0b3J5ID0gZnVuY3Rpb24gY29tcHV0ZWQoYXJnMSwgYXJnMikge1xuICAgIGlmIChpc1N0cmluZ2lzaChhcmcyKSkge1xuICAgICAgICAvLyBAY29tcHV0ZWRcbiAgICAgICAgcmV0dXJuIHN0b3JlQW5ub3RhdGlvbihhcmcxLCBhcmcyLCBjb21wdXRlZEFubm90YXRpb24pXG4gICAgfVxuICAgIGlmIChpc1BsYWluT2JqZWN0KGFyZzEpKSB7XG4gICAgICAgIC8vIEBjb21wdXRlZCh7IG9wdGlvbnMgfSlcbiAgICAgICAgcmV0dXJuIGNyZWF0ZURlY29yYXRvckFubm90YXRpb24oY3JlYXRlQ29tcHV0ZWRBbm5vdGF0aW9uKENPTVBVVEVELCBhcmcxKSlcbiAgICB9XG5cbiAgICAvLyBjb21wdXRlZChleHByLCBvcHRpb25zPylcbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgICBpZiAoIWlzRnVuY3Rpb24oYXJnMSkpIHtcbiAgICAgICAgICAgIGRpZShcIkZpcnN0IGFyZ3VtZW50IHRvIGBjb21wdXRlZGAgc2hvdWxkIGJlIGFuIGV4cHJlc3Npb24uXCIpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzRnVuY3Rpb24oYXJnMikpIHtcbiAgICAgICAgICAgIGRpZShcbiAgICAgICAgICAgICAgICBcIkEgc2V0dGVyIGFzIHNlY29uZCBhcmd1bWVudCBpcyBubyBsb25nZXIgc3VwcG9ydGVkLCB1c2UgYHsgc2V0OiBmbiB9YCBvcHRpb24gaW5zdGVhZFwiXG4gICAgICAgICAgICApXG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3Qgb3B0czogSUNvbXB1dGVkVmFsdWVPcHRpb25zPGFueT4gPSBpc1BsYWluT2JqZWN0KGFyZzIpID8gYXJnMiA6IHt9XG4gICAgb3B0cy5nZXQgPSBhcmcxXG4gICAgb3B0cy5uYW1lIHx8PSBhcmcxLm5hbWUgfHwgXCJcIiAvKiBmb3IgZ2VuZXJhdGVkIG5hbWUgKi9cblxuICAgIHJldHVybiBuZXcgQ29tcHV0ZWRWYWx1ZShvcHRzKVxufSBhcyBhbnlcblxuT2JqZWN0LmFzc2lnbihjb21wdXRlZCwgY29tcHV0ZWRBbm5vdGF0aW9uKVxuXG5jb21wdXRlZC5zdHJ1Y3QgPSBjcmVhdGVEZWNvcmF0b3JBbm5vdGF0aW9uKGNvbXB1dGVkU3RydWN0QW5ub3RhdGlvbilcbiIsImltcG9ydCB7XG4gICAgSURlcml2YXRpb24sXG4gICAgZW5kQmF0Y2gsXG4gICAgZ2xvYmFsU3RhdGUsXG4gICAgaXNTcHlFbmFibGVkLFxuICAgIHNweVJlcG9ydEVuZCxcbiAgICBzcHlSZXBvcnRTdGFydCxcbiAgICBzdGFydEJhdGNoLFxuICAgIHVudHJhY2tlZEVuZCxcbiAgICB1bnRyYWNrZWRTdGFydCxcbiAgICBpc0Z1bmN0aW9uLFxuICAgIGFsbG93U3RhdGVSZWFkc1N0YXJ0LFxuICAgIGFsbG93U3RhdGVSZWFkc0VuZCxcbiAgICBBQ1RJT04sXG4gICAgRU1QVFlfQVJSQVksXG4gICAgZGllLFxuICAgIGdldERlc2NyaXB0b3IsXG4gICAgZGVmaW5lUHJvcGVydHlcbn0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuLy8gd2UgZG9uJ3QgdXNlIGdsb2JhbFN0YXRlIGZvciB0aGVzZSBpbiBvcmRlciB0byBhdm9pZCBwb3NzaWJsZSBpc3N1ZXMgd2l0aCBtdWx0aXBsZVxuLy8gbW9ieCB2ZXJzaW9uc1xubGV0IGN1cnJlbnRBY3Rpb25JZCA9IDBcbmxldCBuZXh0QWN0aW9uSWQgPSAxXG5jb25zdCBpc0Z1bmN0aW9uTmFtZUNvbmZpZ3VyYWJsZSA9IGdldERlc2NyaXB0b3IoKCkgPT4ge30sIFwibmFtZVwiKT8uY29uZmlndXJhYmxlID8/IGZhbHNlXG5cbi8vIHdlIGNhbiBzYWZlbHkgcmVjeWNsZSB0aGlzIG9iamVjdFxuY29uc3QgdG1wTmFtZURlc2NyaXB0b3I6IFByb3BlcnR5RGVzY3JpcHRvciA9IHtcbiAgICB2YWx1ZTogXCJhY3Rpb25cIixcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgd3JpdGFibGU6IGZhbHNlLFxuICAgIGVudW1lcmFibGU6IGZhbHNlXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVBY3Rpb24oXG4gICAgYWN0aW9uTmFtZTogc3RyaW5nLFxuICAgIGZuOiBGdW5jdGlvbixcbiAgICBhdXRvQWN0aW9uOiBib29sZWFuID0gZmFsc2UsXG4gICAgcmVmPzogT2JqZWN0XG4pOiBGdW5jdGlvbiB7XG4gICAgaWYgKF9fREVWX18pIHtcbiAgICAgICAgaWYgKCFpc0Z1bmN0aW9uKGZuKSkge1xuICAgICAgICAgICAgZGllKFwiYGFjdGlvbmAgY2FuIG9ubHkgYmUgaW52b2tlZCBvbiBmdW5jdGlvbnNcIilcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIGFjdGlvbk5hbWUgIT09IFwic3RyaW5nXCIgfHwgIWFjdGlvbk5hbWUpIHtcbiAgICAgICAgICAgIGRpZShgYWN0aW9ucyBzaG91bGQgaGF2ZSB2YWxpZCBuYW1lcywgZ290OiAnJHthY3Rpb25OYW1lfSdgKVxuICAgICAgICB9XG4gICAgfVxuICAgIGZ1bmN0aW9uIHJlcygpIHtcbiAgICAgICAgcmV0dXJuIGV4ZWN1dGVBY3Rpb24oYWN0aW9uTmFtZSwgYXV0b0FjdGlvbiwgZm4sIHJlZiB8fCB0aGlzLCBhcmd1bWVudHMpXG4gICAgfVxuICAgIHJlcy5pc01vYnhBY3Rpb24gPSB0cnVlXG4gICAgaWYgKGlzRnVuY3Rpb25OYW1lQ29uZmlndXJhYmxlKSB7XG4gICAgICAgIHRtcE5hbWVEZXNjcmlwdG9yLnZhbHVlID0gYWN0aW9uTmFtZVxuICAgICAgICBkZWZpbmVQcm9wZXJ0eShyZXMsIFwibmFtZVwiLCB0bXBOYW1lRGVzY3JpcHRvcilcbiAgICB9XG4gICAgcmV0dXJuIHJlc1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZXhlY3V0ZUFjdGlvbihcbiAgICBhY3Rpb25OYW1lOiBzdHJpbmcsXG4gICAgY2FuUnVuQXNEZXJpdmF0aW9uOiBib29sZWFuLFxuICAgIGZuOiBGdW5jdGlvbixcbiAgICBzY29wZT86IGFueSxcbiAgICBhcmdzPzogSUFyZ3VtZW50c1xuKSB7XG4gICAgY29uc3QgcnVuSW5mbyA9IF9zdGFydEFjdGlvbihhY3Rpb25OYW1lLCBjYW5SdW5Bc0Rlcml2YXRpb24sIHNjb3BlLCBhcmdzKVxuICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBmbi5hcHBseShzY29wZSwgYXJncylcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgcnVuSW5mby5lcnJvcl8gPSBlcnJcbiAgICAgICAgdGhyb3cgZXJyXG4gICAgfSBmaW5hbGx5IHtcbiAgICAgICAgX2VuZEFjdGlvbihydW5JbmZvKVxuICAgIH1cbn1cblxuZXhwb3J0IGludGVyZmFjZSBJQWN0aW9uUnVuSW5mbyB7XG4gICAgcHJldkRlcml2YXRpb25fOiBJRGVyaXZhdGlvbiB8IG51bGxcbiAgICBwcmV2QWxsb3dTdGF0ZUNoYW5nZXNfOiBib29sZWFuXG4gICAgcHJldkFsbG93U3RhdGVSZWFkc186IGJvb2xlYW5cbiAgICBub3RpZnlTcHlfOiBib29sZWFuXG4gICAgc3RhcnRUaW1lXzogbnVtYmVyXG4gICAgZXJyb3JfPzogYW55XG4gICAgcGFyZW50QWN0aW9uSWRfOiBudW1iZXJcbiAgICBhY3Rpb25JZF86IG51bWJlclxuICAgIHJ1bkFzQWN0aW9uXz86IGJvb2xlYW5cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIF9zdGFydEFjdGlvbihcbiAgICBhY3Rpb25OYW1lOiBzdHJpbmcsXG4gICAgY2FuUnVuQXNEZXJpdmF0aW9uOiBib29sZWFuLCAvLyB0cnVlIGZvciBhdXRvQWN0aW9uXG4gICAgc2NvcGU6IGFueSxcbiAgICBhcmdzPzogSUFyZ3VtZW50c1xuKTogSUFjdGlvblJ1bkluZm8ge1xuICAgIGNvbnN0IG5vdGlmeVNweV8gPSBfX0RFVl9fICYmIGlzU3B5RW5hYmxlZCgpICYmICEhYWN0aW9uTmFtZVxuICAgIGxldCBzdGFydFRpbWVfOiBudW1iZXIgPSAwXG4gICAgaWYgKF9fREVWX18gJiYgbm90aWZ5U3B5Xykge1xuICAgICAgICBzdGFydFRpbWVfID0gRGF0ZS5ub3coKVxuICAgICAgICBjb25zdCBmbGF0dGVuZWRBcmdzID0gYXJncyA/IEFycmF5LmZyb20oYXJncykgOiBFTVBUWV9BUlJBWVxuICAgICAgICBzcHlSZXBvcnRTdGFydCh7XG4gICAgICAgICAgICB0eXBlOiBBQ1RJT04sXG4gICAgICAgICAgICBuYW1lOiBhY3Rpb25OYW1lLFxuICAgICAgICAgICAgb2JqZWN0OiBzY29wZSxcbiAgICAgICAgICAgIGFyZ3VtZW50czogZmxhdHRlbmVkQXJnc1xuICAgICAgICB9KVxuICAgIH1cbiAgICBjb25zdCBwcmV2RGVyaXZhdGlvbl8gPSBnbG9iYWxTdGF0ZS50cmFja2luZ0Rlcml2YXRpb25cbiAgICBjb25zdCBydW5Bc0FjdGlvbiA9ICFjYW5SdW5Bc0Rlcml2YXRpb24gfHwgIXByZXZEZXJpdmF0aW9uX1xuICAgIHN0YXJ0QmF0Y2goKVxuICAgIGxldCBwcmV2QWxsb3dTdGF0ZUNoYW5nZXNfID0gZ2xvYmFsU3RhdGUuYWxsb3dTdGF0ZUNoYW5nZXMgLy8gYnkgZGVmYXVsdCBwcmVzZXJ2ZSBwcmV2aW91cyBhbGxvd1xuICAgIGlmIChydW5Bc0FjdGlvbikge1xuICAgICAgICB1bnRyYWNrZWRTdGFydCgpXG4gICAgICAgIHByZXZBbGxvd1N0YXRlQ2hhbmdlc18gPSBhbGxvd1N0YXRlQ2hhbmdlc1N0YXJ0KHRydWUpXG4gICAgfVxuICAgIGNvbnN0IHByZXZBbGxvd1N0YXRlUmVhZHNfID0gYWxsb3dTdGF0ZVJlYWRzU3RhcnQodHJ1ZSlcbiAgICBjb25zdCBydW5JbmZvID0ge1xuICAgICAgICBydW5Bc0FjdGlvbl86IHJ1bkFzQWN0aW9uLFxuICAgICAgICBwcmV2RGVyaXZhdGlvbl8sXG4gICAgICAgIHByZXZBbGxvd1N0YXRlQ2hhbmdlc18sXG4gICAgICAgIHByZXZBbGxvd1N0YXRlUmVhZHNfLFxuICAgICAgICBub3RpZnlTcHlfLFxuICAgICAgICBzdGFydFRpbWVfLFxuICAgICAgICBhY3Rpb25JZF86IG5leHRBY3Rpb25JZCsrLFxuICAgICAgICBwYXJlbnRBY3Rpb25JZF86IGN1cnJlbnRBY3Rpb25JZFxuICAgIH1cbiAgICBjdXJyZW50QWN0aW9uSWQgPSBydW5JbmZvLmFjdGlvbklkX1xuICAgIHJldHVybiBydW5JbmZvXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBfZW5kQWN0aW9uKHJ1bkluZm86IElBY3Rpb25SdW5JbmZvKSB7XG4gICAgaWYgKGN1cnJlbnRBY3Rpb25JZCAhPT0gcnVuSW5mby5hY3Rpb25JZF8pIHtcbiAgICAgICAgZGllKDMwKVxuICAgIH1cbiAgICBjdXJyZW50QWN0aW9uSWQgPSBydW5JbmZvLnBhcmVudEFjdGlvbklkX1xuXG4gICAgaWYgKHJ1bkluZm8uZXJyb3JfICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgZ2xvYmFsU3RhdGUuc3VwcHJlc3NSZWFjdGlvbkVycm9ycyA9IHRydWVcbiAgICB9XG4gICAgYWxsb3dTdGF0ZUNoYW5nZXNFbmQocnVuSW5mby5wcmV2QWxsb3dTdGF0ZUNoYW5nZXNfKVxuICAgIGFsbG93U3RhdGVSZWFkc0VuZChydW5JbmZvLnByZXZBbGxvd1N0YXRlUmVhZHNfKVxuICAgIGVuZEJhdGNoKClcbiAgICBpZiAocnVuSW5mby5ydW5Bc0FjdGlvbl8pIHtcbiAgICAgICAgdW50cmFja2VkRW5kKHJ1bkluZm8ucHJldkRlcml2YXRpb25fKVxuICAgIH1cbiAgICBpZiAoX19ERVZfXyAmJiBydW5JbmZvLm5vdGlmeVNweV8pIHtcbiAgICAgICAgc3B5UmVwb3J0RW5kKHsgdGltZTogRGF0ZS5ub3coKSAtIHJ1bkluZm8uc3RhcnRUaW1lXyB9KVxuICAgIH1cbiAgICBnbG9iYWxTdGF0ZS5zdXBwcmVzc1JlYWN0aW9uRXJyb3JzID0gZmFsc2Vcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFsbG93U3RhdGVDaGFuZ2VzPFQ+KGFsbG93U3RhdGVDaGFuZ2VzOiBib29sZWFuLCBmdW5jOiAoKSA9PiBUKTogVCB7XG4gICAgY29uc3QgcHJldiA9IGFsbG93U3RhdGVDaGFuZ2VzU3RhcnQoYWxsb3dTdGF0ZUNoYW5nZXMpXG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGZ1bmMoKVxuICAgIH0gZmluYWxseSB7XG4gICAgICAgIGFsbG93U3RhdGVDaGFuZ2VzRW5kKHByZXYpXG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYWxsb3dTdGF0ZUNoYW5nZXNTdGFydChhbGxvd1N0YXRlQ2hhbmdlczogYm9vbGVhbikge1xuICAgIGNvbnN0IHByZXYgPSBnbG9iYWxTdGF0ZS5hbGxvd1N0YXRlQ2hhbmdlc1xuICAgIGdsb2JhbFN0YXRlLmFsbG93U3RhdGVDaGFuZ2VzID0gYWxsb3dTdGF0ZUNoYW5nZXNcbiAgICByZXR1cm4gcHJldlxufVxuXG5leHBvcnQgZnVuY3Rpb24gYWxsb3dTdGF0ZUNoYW5nZXNFbmQocHJldjogYm9vbGVhbikge1xuICAgIGdsb2JhbFN0YXRlLmFsbG93U3RhdGVDaGFuZ2VzID0gcHJldlxufVxuIiwiaW1wb3J0IHtcbiAgICBBdG9tLFxuICAgIElFbmhhbmNlcixcbiAgICBJSW50ZXJjZXB0YWJsZSxcbiAgICBJRXF1YWxzQ29tcGFyZXIsXG4gICAgSUludGVyY2VwdG9yLFxuICAgIElMaXN0ZW5hYmxlLFxuICAgIExhbWJkYSxcbiAgICBjaGVja0lmU3RhdGVNb2RpZmljYXRpb25zQXJlQWxsb3dlZCxcbiAgICBjb21wYXJlcixcbiAgICBjcmVhdGVJbnN0YW5jZW9mUHJlZGljYXRlLFxuICAgIGdldE5leHRJZCxcbiAgICBoYXNJbnRlcmNlcHRvcnMsXG4gICAgaGFzTGlzdGVuZXJzLFxuICAgIGludGVyY2VwdENoYW5nZSxcbiAgICBpc1NweUVuYWJsZWQsXG4gICAgbm90aWZ5TGlzdGVuZXJzLFxuICAgIHJlZ2lzdGVySW50ZXJjZXB0b3IsXG4gICAgcmVnaXN0ZXJMaXN0ZW5lcixcbiAgICBzcHlSZXBvcnQsXG4gICAgc3B5UmVwb3J0RW5kLFxuICAgIHNweVJlcG9ydFN0YXJ0LFxuICAgIHRvUHJpbWl0aXZlLFxuICAgIGdsb2JhbFN0YXRlLFxuICAgIElVTkNIQU5HRUQsXG4gICAgVVBEQVRFXG59IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbmV4cG9ydCBpbnRlcmZhY2UgSVZhbHVlV2lsbENoYW5nZTxUPiB7XG4gICAgb2JqZWN0OiBJT2JzZXJ2YWJsZVZhbHVlPFQ+XG4gICAgdHlwZTogXCJ1cGRhdGVcIlxuICAgIG5ld1ZhbHVlOiBUXG59XG5cbmV4cG9ydCB0eXBlIElWYWx1ZURpZENoYW5nZTxUID0gYW55PiA9IHtcbiAgICB0eXBlOiBcInVwZGF0ZVwiXG4gICAgb2JzZXJ2YWJsZUtpbmQ6IFwidmFsdWVcIlxuICAgIG9iamVjdDogSU9ic2VydmFibGVWYWx1ZTxUPlxuICAgIGRlYnVnT2JqZWN0TmFtZTogc3RyaW5nXG4gICAgbmV3VmFsdWU6IFRcbiAgICBvbGRWYWx1ZTogVCB8IHVuZGVmaW5lZFxufVxuZXhwb3J0IHR5cGUgSUJveERpZENoYW5nZTxUID0gYW55PiA9XG4gICAgfCB7XG4gICAgICAgICAgdHlwZTogXCJjcmVhdGVcIlxuICAgICAgICAgIG9ic2VydmFibGVLaW5kOiBcInZhbHVlXCJcbiAgICAgICAgICBvYmplY3Q6IElPYnNlcnZhYmxlVmFsdWU8VD5cbiAgICAgICAgICBkZWJ1Z09iamVjdE5hbWU6IHN0cmluZ1xuICAgICAgICAgIG5ld1ZhbHVlOiBUXG4gICAgICB9XG4gICAgfCBJVmFsdWVEaWRDaGFuZ2U8VD5cblxuZXhwb3J0IGludGVyZmFjZSBJT2JzZXJ2YWJsZVZhbHVlPFQ+IHtcbiAgICBnZXQoKTogVFxuICAgIHNldCh2YWx1ZTogVCk6IHZvaWRcbn1cblxuY29uc3QgQ1JFQVRFID0gXCJjcmVhdGVcIlxuXG5leHBvcnQgY2xhc3MgT2JzZXJ2YWJsZVZhbHVlPFQ+XG4gICAgZXh0ZW5kcyBBdG9tXG4gICAgaW1wbGVtZW50cyBJT2JzZXJ2YWJsZVZhbHVlPFQ+LCBJSW50ZXJjZXB0YWJsZTxJVmFsdWVXaWxsQ2hhbmdlPFQ+PiwgSUxpc3RlbmFibGVcbntcbiAgICBoYXNVbnJlcG9ydGVkQ2hhbmdlXyA9IGZhbHNlXG4gICAgaW50ZXJjZXB0b3JzX1xuICAgIGNoYW5nZUxpc3RlbmVyc19cbiAgICB2YWx1ZV9cbiAgICBkZWhhbmNlcjogYW55XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgdmFsdWU6IFQsXG4gICAgICAgIHB1YmxpYyBlbmhhbmNlcjogSUVuaGFuY2VyPFQ+LFxuICAgICAgICBwdWJsaWMgbmFtZV8gPSBfX0RFVl9fID8gXCJPYnNlcnZhYmxlVmFsdWVAXCIgKyBnZXROZXh0SWQoKSA6IFwiT2JzZXJ2YWJsZVZhbHVlXCIsXG4gICAgICAgIG5vdGlmeVNweSA9IHRydWUsXG4gICAgICAgIHByaXZhdGUgZXF1YWxzOiBJRXF1YWxzQ29tcGFyZXI8YW55PiA9IGNvbXBhcmVyLmRlZmF1bHRcbiAgICApIHtcbiAgICAgICAgc3VwZXIobmFtZV8pXG4gICAgICAgIHRoaXMudmFsdWVfID0gZW5oYW5jZXIodmFsdWUsIHVuZGVmaW5lZCwgbmFtZV8pXG4gICAgICAgIGlmIChfX0RFVl9fICYmIG5vdGlmeVNweSAmJiBpc1NweUVuYWJsZWQoKSkge1xuICAgICAgICAgICAgLy8gb25seSBub3RpZnkgc3B5IGlmIHRoaXMgaXMgYSBzdGFuZC1hbG9uZSBvYnNlcnZhYmxlXG4gICAgICAgICAgICBzcHlSZXBvcnQoe1xuICAgICAgICAgICAgICAgIHR5cGU6IENSRUFURSxcbiAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMsXG4gICAgICAgICAgICAgICAgb2JzZXJ2YWJsZUtpbmQ6IFwidmFsdWVcIixcbiAgICAgICAgICAgICAgICBkZWJ1Z09iamVjdE5hbWU6IHRoaXMubmFtZV8sXG4gICAgICAgICAgICAgICAgbmV3VmFsdWU6IFwiXCIgKyB0aGlzLnZhbHVlX1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgZGVoYW5jZVZhbHVlKHZhbHVlOiBUKTogVCB7XG4gICAgICAgIGlmICh0aGlzLmRlaGFuY2VyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRlaGFuY2VyKHZhbHVlKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZVxuICAgIH1cblxuICAgIHB1YmxpYyBzZXQobmV3VmFsdWU6IFQpIHtcbiAgICAgICAgY29uc3Qgb2xkVmFsdWUgPSB0aGlzLnZhbHVlX1xuICAgICAgICBuZXdWYWx1ZSA9IHRoaXMucHJlcGFyZU5ld1ZhbHVlXyhuZXdWYWx1ZSkgYXMgYW55XG4gICAgICAgIGlmIChuZXdWYWx1ZSAhPT0gZ2xvYmFsU3RhdGUuVU5DSEFOR0VEKSB7XG4gICAgICAgICAgICBjb25zdCBub3RpZnlTcHkgPSBpc1NweUVuYWJsZWQoKVxuICAgICAgICAgICAgaWYgKF9fREVWX18gJiYgbm90aWZ5U3B5KSB7XG4gICAgICAgICAgICAgICAgc3B5UmVwb3J0U3RhcnQoe1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBVUERBVEUsXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2YWJsZUtpbmQ6IFwidmFsdWVcIixcbiAgICAgICAgICAgICAgICAgICAgZGVidWdPYmplY3ROYW1lOiB0aGlzLm5hbWVfLFxuICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgb2xkVmFsdWVcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5zZXROZXdWYWx1ZV8obmV3VmFsdWUpXG4gICAgICAgICAgICBpZiAoX19ERVZfXyAmJiBub3RpZnlTcHkpIHtcbiAgICAgICAgICAgICAgICBzcHlSZXBvcnRFbmQoKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBwcmVwYXJlTmV3VmFsdWVfKG5ld1ZhbHVlKTogVCB8IElVTkNIQU5HRUQge1xuICAgICAgICBjaGVja0lmU3RhdGVNb2RpZmljYXRpb25zQXJlQWxsb3dlZCh0aGlzKVxuICAgICAgICBpZiAoaGFzSW50ZXJjZXB0b3JzKHRoaXMpKSB7XG4gICAgICAgICAgICBjb25zdCBjaGFuZ2UgPSBpbnRlcmNlcHRDaGFuZ2U8SVZhbHVlV2lsbENoYW5nZTxUPj4odGhpcywge1xuICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcyxcbiAgICAgICAgICAgICAgICB0eXBlOiBVUERBVEUsXG4gICAgICAgICAgICAgICAgbmV3VmFsdWVcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBpZiAoIWNoYW5nZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBnbG9iYWxTdGF0ZS5VTkNIQU5HRURcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5ld1ZhbHVlID0gY2hhbmdlLm5ld1ZhbHVlXG4gICAgICAgIH1cbiAgICAgICAgLy8gYXBwbHkgbW9kaWZpZXJcbiAgICAgICAgbmV3VmFsdWUgPSB0aGlzLmVuaGFuY2VyKG5ld1ZhbHVlLCB0aGlzLnZhbHVlXywgdGhpcy5uYW1lXylcbiAgICAgICAgcmV0dXJuIHRoaXMuZXF1YWxzKHRoaXMudmFsdWVfLCBuZXdWYWx1ZSkgPyBnbG9iYWxTdGF0ZS5VTkNIQU5HRUQgOiBuZXdWYWx1ZVxuICAgIH1cblxuICAgIHNldE5ld1ZhbHVlXyhuZXdWYWx1ZTogVCkge1xuICAgICAgICBjb25zdCBvbGRWYWx1ZSA9IHRoaXMudmFsdWVfXG4gICAgICAgIHRoaXMudmFsdWVfID0gbmV3VmFsdWVcbiAgICAgICAgdGhpcy5yZXBvcnRDaGFuZ2VkKClcbiAgICAgICAgaWYgKGhhc0xpc3RlbmVycyh0aGlzKSkge1xuICAgICAgICAgICAgbm90aWZ5TGlzdGVuZXJzKHRoaXMsIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBVUERBVEUsXG4gICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLFxuICAgICAgICAgICAgICAgIG5ld1ZhbHVlLFxuICAgICAgICAgICAgICAgIG9sZFZhbHVlXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGdldCgpOiBUIHtcbiAgICAgICAgdGhpcy5yZXBvcnRPYnNlcnZlZCgpXG4gICAgICAgIHJldHVybiB0aGlzLmRlaGFuY2VWYWx1ZSh0aGlzLnZhbHVlXylcbiAgICB9XG5cbiAgICBpbnRlcmNlcHRfKGhhbmRsZXI6IElJbnRlcmNlcHRvcjxJVmFsdWVXaWxsQ2hhbmdlPFQ+Pik6IExhbWJkYSB7XG4gICAgICAgIHJldHVybiByZWdpc3RlckludGVyY2VwdG9yKHRoaXMsIGhhbmRsZXIpXG4gICAgfVxuXG4gICAgb2JzZXJ2ZV8obGlzdGVuZXI6IChjaGFuZ2U6IElWYWx1ZURpZENoYW5nZTxUPikgPT4gdm9pZCwgZmlyZUltbWVkaWF0ZWx5PzogYm9vbGVhbik6IExhbWJkYSB7XG4gICAgICAgIGlmIChmaXJlSW1tZWRpYXRlbHkpIHtcbiAgICAgICAgICAgIGxpc3RlbmVyKHtcbiAgICAgICAgICAgICAgICBvYnNlcnZhYmxlS2luZDogXCJ2YWx1ZVwiLFxuICAgICAgICAgICAgICAgIGRlYnVnT2JqZWN0TmFtZTogdGhpcy5uYW1lXyxcbiAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMsXG4gICAgICAgICAgICAgICAgdHlwZTogVVBEQVRFLFxuICAgICAgICAgICAgICAgIG5ld1ZhbHVlOiB0aGlzLnZhbHVlXyxcbiAgICAgICAgICAgICAgICBvbGRWYWx1ZTogdW5kZWZpbmVkXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZWdpc3Rlckxpc3RlbmVyKHRoaXMsIGxpc3RlbmVyKVxuICAgIH1cblxuICAgIHJhdygpIHtcbiAgICAgICAgLy8gdXNlZCBieSBNU1Qgb3QgZ2V0IHVuZGVoYW5jZWQgdmFsdWVcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVfXG4gICAgfVxuXG4gICAgdG9KU09OKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXQoKVxuICAgIH1cblxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gYCR7dGhpcy5uYW1lX31bJHt0aGlzLnZhbHVlX31dYFxuICAgIH1cblxuICAgIHZhbHVlT2YoKTogVCB7XG4gICAgICAgIHJldHVybiB0b1ByaW1pdGl2ZSh0aGlzLmdldCgpKVxuICAgIH1cblxuICAgIFtTeW1ib2wudG9QcmltaXRpdmVdKCkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZU9mKClcbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBpc09ic2VydmFibGVWYWx1ZSA9IGNyZWF0ZUluc3RhbmNlb2ZQcmVkaWNhdGUoXCJPYnNlcnZhYmxlVmFsdWVcIiwgT2JzZXJ2YWJsZVZhbHVlKSBhcyAoXG4gICAgeDogYW55XG4pID0+IHggaXMgSU9ic2VydmFibGVWYWx1ZTxhbnk+XG4iLCJpbXBvcnQge1xuICAgIENhdWdodEV4Y2VwdGlvbixcbiAgICBJRGVyaXZhdGlvbixcbiAgICBJRGVyaXZhdGlvblN0YXRlXyxcbiAgICBJRXF1YWxzQ29tcGFyZXIsXG4gICAgSU9ic2VydmFibGUsXG4gICAgTGFtYmRhLFxuICAgIFRyYWNlTW9kZSxcbiAgICBhdXRvcnVuLFxuICAgIGNsZWFyT2JzZXJ2aW5nLFxuICAgIGNvbXBhcmVyLFxuICAgIGNyZWF0ZUFjdGlvbixcbiAgICBjcmVhdGVJbnN0YW5jZW9mUHJlZGljYXRlLFxuICAgIGVuZEJhdGNoLFxuICAgIGdldE5leHRJZCxcbiAgICBnbG9iYWxTdGF0ZSxcbiAgICBpc0NhdWdodEV4Y2VwdGlvbixcbiAgICBpc1NweUVuYWJsZWQsXG4gICAgcHJvcGFnYXRlQ2hhbmdlQ29uZmlybWVkLFxuICAgIHByb3BhZ2F0ZU1heWJlQ2hhbmdlZCxcbiAgICByZXBvcnRPYnNlcnZlZCxcbiAgICBzaG91bGRDb21wdXRlLFxuICAgIHNweVJlcG9ydCxcbiAgICBzdGFydEJhdGNoLFxuICAgIHRvUHJpbWl0aXZlLFxuICAgIHRyYWNrRGVyaXZlZEZ1bmN0aW9uLFxuICAgIHVudHJhY2tlZEVuZCxcbiAgICB1bnRyYWNrZWRTdGFydCxcbiAgICBVUERBVEUsXG4gICAgZGllLFxuICAgIGFsbG93U3RhdGVDaGFuZ2VzU3RhcnQsXG4gICAgYWxsb3dTdGF0ZUNoYW5nZXNFbmRcbn0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuZXhwb3J0IGludGVyZmFjZSBJQ29tcHV0ZWRWYWx1ZTxUPiB7XG4gICAgZ2V0KCk6IFRcbiAgICBzZXQodmFsdWU6IFQpOiB2b2lkXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUNvbXB1dGVkVmFsdWVPcHRpb25zPFQ+IHtcbiAgICBnZXQ/OiAoKSA9PiBUXG4gICAgc2V0PzogKHZhbHVlOiBUKSA9PiB2b2lkXG4gICAgbmFtZT86IHN0cmluZ1xuICAgIGVxdWFscz86IElFcXVhbHNDb21wYXJlcjxUPlxuICAgIGNvbnRleHQ/OiBhbnlcbiAgICByZXF1aXJlc1JlYWN0aW9uPzogYm9vbGVhblxuICAgIGtlZXBBbGl2ZT86IGJvb2xlYW5cbn1cblxuZXhwb3J0IHR5cGUgSUNvbXB1dGVkRGlkQ2hhbmdlPFQgPSBhbnk+ID0ge1xuICAgIHR5cGU6IFwidXBkYXRlXCJcbiAgICBvYnNlcnZhYmxlS2luZDogXCJjb21wdXRlZFwiXG4gICAgb2JqZWN0OiB1bmtub3duXG4gICAgZGVidWdPYmplY3ROYW1lOiBzdHJpbmdcbiAgICBuZXdWYWx1ZTogVFxuICAgIG9sZFZhbHVlOiBUIHwgdW5kZWZpbmVkXG59XG5cbi8qKlxuICogQSBub2RlIGluIHRoZSBzdGF0ZSBkZXBlbmRlbmN5IHJvb3QgdGhhdCBvYnNlcnZlcyBvdGhlciBub2RlcywgYW5kIGNhbiBiZSBvYnNlcnZlZCBpdHNlbGYuXG4gKlxuICogQ29tcHV0ZWRWYWx1ZSB3aWxsIHJlbWVtYmVyIHRoZSByZXN1bHQgb2YgdGhlIGNvbXB1dGF0aW9uIGZvciB0aGUgZHVyYXRpb24gb2YgdGhlIGJhdGNoLCBvclxuICogd2hpbGUgYmVpbmcgb2JzZXJ2ZWQuXG4gKlxuICogRHVyaW5nIHRoaXMgdGltZSBpdCB3aWxsIHJlY29tcHV0ZSBvbmx5IHdoZW4gb25lIG9mIGl0cyBkaXJlY3QgZGVwZW5kZW5jaWVzIGNoYW5nZWQsXG4gKiBidXQgb25seSB3aGVuIGl0IGlzIGJlaW5nIGFjY2Vzc2VkIHdpdGggYENvbXB1dGVkVmFsdWUuZ2V0KClgLlxuICpcbiAqIEltcGxlbWVudGF0aW9uIGRlc2NyaXB0aW9uOlxuICogMS4gRmlyc3QgdGltZSBpdCdzIGJlaW5nIGFjY2Vzc2VkIGl0IHdpbGwgY29tcHV0ZSBhbmQgcmVtZW1iZXIgcmVzdWx0XG4gKiAgICBnaXZlIGJhY2sgcmVtZW1iZXJlZCByZXN1bHQgdW50aWwgMi4gaGFwcGVuc1xuICogMi4gRmlyc3QgdGltZSBhbnkgZGVlcCBkZXBlbmRlbmN5IGNoYW5nZSwgcHJvcGFnYXRlIFBPU1NJQkxZX1NUQUxFIHRvIGFsbCBvYnNlcnZlcnMsIHdhaXQgZm9yIDMuXG4gKiAzLiBXaGVuIGl0J3MgYmVpbmcgYWNjZXNzZWQsIHJlY29tcHV0ZSBpZiBhbnkgc2hhbGxvdyBkZXBlbmRlbmN5IGNoYW5nZWQuXG4gKiAgICBpZiByZXN1bHQgY2hhbmdlZDogcHJvcGFnYXRlIFNUQUxFIHRvIGFsbCBvYnNlcnZlcnMsIHRoYXQgd2VyZSBQT1NTSUJMWV9TVEFMRSBmcm9tIHRoZSBsYXN0IHN0ZXAuXG4gKiAgICBnbyB0byBzdGVwIDIuIGVpdGhlciB3YXlcbiAqXG4gKiBJZiBhdCBhbnkgcG9pbnQgaXQncyBvdXRzaWRlIGJhdGNoIGFuZCBpdCBpc24ndCBvYnNlcnZlZDogcmVzZXQgZXZlcnl0aGluZyBhbmQgZ28gdG8gMS5cbiAqL1xuZXhwb3J0IGNsYXNzIENvbXB1dGVkVmFsdWU8VD4gaW1wbGVtZW50cyBJT2JzZXJ2YWJsZSwgSUNvbXB1dGVkVmFsdWU8VD4sIElEZXJpdmF0aW9uIHtcbiAgICBkZXBlbmRlbmNpZXNTdGF0ZV8gPSBJRGVyaXZhdGlvblN0YXRlXy5OT1RfVFJBQ0tJTkdfXG4gICAgb2JzZXJ2aW5nXzogSU9ic2VydmFibGVbXSA9IFtdIC8vIG5vZGVzIHdlIGFyZSBsb29raW5nIGF0LiBPdXIgdmFsdWUgZGVwZW5kcyBvbiB0aGVzZSBub2Rlc1xuICAgIG5ld09ic2VydmluZ18gPSBudWxsIC8vIGR1cmluZyB0cmFja2luZyBpdCdzIGFuIGFycmF5IHdpdGggbmV3IG9ic2VydmVkIG9ic2VydmVyc1xuICAgIGlzQmVpbmdPYnNlcnZlZF8gPSBmYWxzZVxuICAgIGlzUGVuZGluZ1Vub2JzZXJ2YXRpb25fOiBib29sZWFuID0gZmFsc2VcbiAgICBvYnNlcnZlcnNfID0gbmV3IFNldDxJRGVyaXZhdGlvbj4oKVxuICAgIGRpZmZWYWx1ZV8gPSAwXG4gICAgcnVuSWRfID0gMFxuICAgIGxhc3RBY2Nlc3NlZEJ5XyA9IDBcbiAgICBsb3dlc3RPYnNlcnZlclN0YXRlXyA9IElEZXJpdmF0aW9uU3RhdGVfLlVQX1RPX0RBVEVfXG4gICAgdW5ib3VuZERlcHNDb3VudF8gPSAwXG4gICAgcHJvdGVjdGVkIHZhbHVlXzogVCB8IHVuZGVmaW5lZCB8IENhdWdodEV4Y2VwdGlvbiA9IG5ldyBDYXVnaHRFeGNlcHRpb24obnVsbClcbiAgICBuYW1lXzogc3RyaW5nXG4gICAgdHJpZ2dlcmVkQnlfPzogc3RyaW5nXG4gICAgaXNDb21wdXRpbmdfOiBib29sZWFuID0gZmFsc2UgLy8gdG8gY2hlY2sgZm9yIGN5Y2xlc1xuICAgIGlzUnVubmluZ1NldHRlcl86IGJvb2xlYW4gPSBmYWxzZVxuICAgIGRlcml2YXRpb246ICgpID0+IFQgLy8gTi5COiB1bm1pbmlmaWVkIGFzIGl0IGlzIHVzZWQgYnkgTVNUXG4gICAgc2V0dGVyXz86ICh2YWx1ZTogVCkgPT4gdm9pZFxuICAgIGlzVHJhY2luZ186IFRyYWNlTW9kZSA9IFRyYWNlTW9kZS5OT05FXG4gICAgc2NvcGVfOiBPYmplY3QgfCB1bmRlZmluZWRcbiAgICBwcml2YXRlIGVxdWFsc186IElFcXVhbHNDb21wYXJlcjxhbnk+XG4gICAgcHJpdmF0ZSByZXF1aXJlc1JlYWN0aW9uXzogYm9vbGVhbiB8IHVuZGVmaW5lZFxuICAgIGtlZXBBbGl2ZV86IGJvb2xlYW5cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIG5ldyBjb21wdXRlZCB2YWx1ZSBiYXNlZCBvbiBhIGZ1bmN0aW9uIGV4cHJlc3Npb24uXG4gICAgICpcbiAgICAgKiBUaGUgYG5hbWVgIHByb3BlcnR5IGlzIGZvciBkZWJ1ZyBwdXJwb3NlcyBvbmx5LlxuICAgICAqXG4gICAgICogVGhlIGBlcXVhbHNgIHByb3BlcnR5IHNwZWNpZmllcyB0aGUgY29tcGFyZXIgZnVuY3Rpb24gdG8gdXNlIHRvIGRldGVybWluZSBpZiBhIG5ld2x5IHByb2R1Y2VkXG4gICAgICogdmFsdWUgZGlmZmVycyBmcm9tIHRoZSBwcmV2aW91cyB2YWx1ZS4gVHdvIGNvbXBhcmVycyBhcmUgcHJvdmlkZWQgaW4gdGhlIGxpYnJhcnk7IGBkZWZhdWx0Q29tcGFyZXJgXG4gICAgICogY29tcGFyZXMgYmFzZWQgb24gaWRlbnRpdHkgY29tcGFyaXNvbiAoPT09KSwgYW5kIGBzdHJ1Y3R1cmFsQ29tcGFyZXJgIGRlZXBseSBjb21wYXJlcyB0aGUgc3RydWN0dXJlLlxuICAgICAqIFN0cnVjdHVyYWwgY29tcGFyaXNvbiBjYW4gYmUgY29udmVuaWVudCBpZiB5b3UgYWx3YXlzIHByb2R1Y2UgYSBuZXcgYWdncmVnYXRlZCBvYmplY3QgYW5kXG4gICAgICogZG9uJ3Qgd2FudCB0byBub3RpZnkgb2JzZXJ2ZXJzIGlmIGl0IGlzIHN0cnVjdHVyYWxseSB0aGUgc2FtZS5cbiAgICAgKiBUaGlzIGlzIHVzZWZ1bCBmb3Igd29ya2luZyB3aXRoIHZlY3RvcnMsIG1vdXNlIGNvb3JkaW5hdGVzIGV0Yy5cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihvcHRpb25zOiBJQ29tcHV0ZWRWYWx1ZU9wdGlvbnM8VD4pIHtcbiAgICAgICAgaWYgKCFvcHRpb25zLmdldCkge1xuICAgICAgICAgICAgZGllKDMxKVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGVyaXZhdGlvbiA9IG9wdGlvbnMuZ2V0IVxuICAgICAgICB0aGlzLm5hbWVfID0gb3B0aW9ucy5uYW1lIHx8IChfX0RFVl9fID8gXCJDb21wdXRlZFZhbHVlQFwiICsgZ2V0TmV4dElkKCkgOiBcIkNvbXB1dGVkVmFsdWVcIilcbiAgICAgICAgaWYgKG9wdGlvbnMuc2V0KSB7XG4gICAgICAgICAgICB0aGlzLnNldHRlcl8gPSBjcmVhdGVBY3Rpb24oXG4gICAgICAgICAgICAgICAgX19ERVZfXyA/IHRoaXMubmFtZV8gKyBcIi1zZXR0ZXJcIiA6IFwiQ29tcHV0ZWRWYWx1ZS1zZXR0ZXJcIixcbiAgICAgICAgICAgICAgICBvcHRpb25zLnNldFxuICAgICAgICAgICAgKSBhcyBhbnlcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVxdWFsc18gPVxuICAgICAgICAgICAgb3B0aW9ucy5lcXVhbHMgfHxcbiAgICAgICAgICAgICgob3B0aW9ucyBhcyBhbnkpLmNvbXBhcmVTdHJ1Y3R1cmFsIHx8IChvcHRpb25zIGFzIGFueSkuc3RydWN0XG4gICAgICAgICAgICAgICAgPyBjb21wYXJlci5zdHJ1Y3R1cmFsXG4gICAgICAgICAgICAgICAgOiBjb21wYXJlci5kZWZhdWx0KVxuICAgICAgICB0aGlzLnNjb3BlXyA9IG9wdGlvbnMuY29udGV4dFxuICAgICAgICB0aGlzLnJlcXVpcmVzUmVhY3Rpb25fID0gb3B0aW9ucy5yZXF1aXJlc1JlYWN0aW9uXG4gICAgICAgIHRoaXMua2VlcEFsaXZlXyA9ICEhb3B0aW9ucy5rZWVwQWxpdmVcbiAgICB9XG5cbiAgICBvbkJlY29tZVN0YWxlXygpIHtcbiAgICAgICAgcHJvcGFnYXRlTWF5YmVDaGFuZ2VkKHRoaXMpXG4gICAgfVxuXG4gICAgcHVibGljIG9uQk9MOiBTZXQ8TGFtYmRhPiB8IHVuZGVmaW5lZFxuICAgIHB1YmxpYyBvbkJVT0w6IFNldDxMYW1iZGE+IHwgdW5kZWZpbmVkXG5cbiAgICBwdWJsaWMgb25CTygpIHtcbiAgICAgICAgaWYgKHRoaXMub25CT0wpIHtcbiAgICAgICAgICAgIHRoaXMub25CT0wuZm9yRWFjaChsaXN0ZW5lciA9PiBsaXN0ZW5lcigpKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIG9uQlVPKCkge1xuICAgICAgICBpZiAodGhpcy5vbkJVT0wpIHtcbiAgICAgICAgICAgIHRoaXMub25CVU9MLmZvckVhY2gobGlzdGVuZXIgPT4gbGlzdGVuZXIoKSlcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGN1cnJlbnQgdmFsdWUgb2YgdGhpcyBjb21wdXRlZCB2YWx1ZS5cbiAgICAgKiBXaWxsIGV2YWx1YXRlIGl0cyBjb21wdXRhdGlvbiBmaXJzdCBpZiBuZWVkZWQuXG4gICAgICovXG4gICAgcHVibGljIGdldCgpOiBUIHtcbiAgICAgICAgaWYgKHRoaXMuaXNDb21wdXRpbmdfKSB7XG4gICAgICAgICAgICBkaWUoMzIsIHRoaXMubmFtZV8sIHRoaXMuZGVyaXZhdGlvbilcbiAgICAgICAgfVxuICAgICAgICBpZiAoXG4gICAgICAgICAgICBnbG9iYWxTdGF0ZS5pbkJhdGNoID09PSAwICYmXG4gICAgICAgICAgICAvLyAhZ2xvYmFsU3RhdGUudHJhY2tpbmdEZXJpdmF0cGlvbiAmJlxuICAgICAgICAgICAgdGhpcy5vYnNlcnZlcnNfLnNpemUgPT09IDAgJiZcbiAgICAgICAgICAgICF0aGlzLmtlZXBBbGl2ZV9cbiAgICAgICAgKSB7XG4gICAgICAgICAgICBpZiAoc2hvdWxkQ29tcHV0ZSh0aGlzKSkge1xuICAgICAgICAgICAgICAgIHRoaXMud2FybkFib3V0VW50cmFja2VkUmVhZF8oKVxuICAgICAgICAgICAgICAgIHN0YXJ0QmF0Y2goKSAvLyBTZWUgcGVyZiB0ZXN0ICdjb21wdXRlZCBtZW1vaXphdGlvbidcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlXyA9IHRoaXMuY29tcHV0ZVZhbHVlXyhmYWxzZSlcbiAgICAgICAgICAgICAgICBlbmRCYXRjaCgpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXBvcnRPYnNlcnZlZCh0aGlzKVxuICAgICAgICAgICAgaWYgKHNob3VsZENvbXB1dGUodGhpcykpIHtcbiAgICAgICAgICAgICAgICBsZXQgcHJldlRyYWNraW5nQ29udGV4dCA9IGdsb2JhbFN0YXRlLnRyYWNraW5nQ29udGV4dFxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmtlZXBBbGl2ZV8gJiYgIXByZXZUcmFja2luZ0NvbnRleHQpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2xvYmFsU3RhdGUudHJhY2tpbmdDb250ZXh0ID0gdGhpc1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodGhpcy50cmFja0FuZENvbXB1dGUoKSkge1xuICAgICAgICAgICAgICAgICAgICBwcm9wYWdhdGVDaGFuZ2VDb25maXJtZWQodGhpcylcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZ2xvYmFsU3RhdGUudHJhY2tpbmdDb250ZXh0ID0gcHJldlRyYWNraW5nQ29udGV4dFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IHRoaXMudmFsdWVfIVxuXG4gICAgICAgIGlmIChpc0NhdWdodEV4Y2VwdGlvbihyZXN1bHQpKSB7XG4gICAgICAgICAgICB0aHJvdyByZXN1bHQuY2F1c2VcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgfVxuXG4gICAgcHVibGljIHNldCh2YWx1ZTogVCkge1xuICAgICAgICBpZiAodGhpcy5zZXR0ZXJfKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5pc1J1bm5pbmdTZXR0ZXJfKSB7XG4gICAgICAgICAgICAgICAgZGllKDMzLCB0aGlzLm5hbWVfKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5pc1J1bm5pbmdTZXR0ZXJfID0gdHJ1ZVxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICB0aGlzLnNldHRlcl8uY2FsbCh0aGlzLnNjb3BlXywgdmFsdWUpXG4gICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIHRoaXMuaXNSdW5uaW5nU2V0dGVyXyA9IGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkaWUoMzQsIHRoaXMubmFtZV8pXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB0cmFja0FuZENvbXB1dGUoKTogYm9vbGVhbiB7XG4gICAgICAgIC8vIE4uQjogdW5taW5pZmllZCBhcyBpdCBpcyB1c2VkIGJ5IE1TVFxuICAgICAgICBjb25zdCBvbGRWYWx1ZSA9IHRoaXMudmFsdWVfXG4gICAgICAgIGNvbnN0IHdhc1N1c3BlbmRlZCA9XG4gICAgICAgICAgICAvKiBzZWUgIzEyMDggKi8gdGhpcy5kZXBlbmRlbmNpZXNTdGF0ZV8gPT09IElEZXJpdmF0aW9uU3RhdGVfLk5PVF9UUkFDS0lOR19cbiAgICAgICAgY29uc3QgbmV3VmFsdWUgPSB0aGlzLmNvbXB1dGVWYWx1ZV8odHJ1ZSlcblxuICAgICAgICBjb25zdCBjaGFuZ2VkID1cbiAgICAgICAgICAgIHdhc1N1c3BlbmRlZCB8fFxuICAgICAgICAgICAgaXNDYXVnaHRFeGNlcHRpb24ob2xkVmFsdWUpIHx8XG4gICAgICAgICAgICBpc0NhdWdodEV4Y2VwdGlvbihuZXdWYWx1ZSkgfHxcbiAgICAgICAgICAgICF0aGlzLmVxdWFsc18ob2xkVmFsdWUsIG5ld1ZhbHVlKVxuXG4gICAgICAgIGlmIChjaGFuZ2VkKSB7XG4gICAgICAgICAgICB0aGlzLnZhbHVlXyA9IG5ld1ZhbHVlXG5cbiAgICAgICAgICAgIGlmIChfX0RFVl9fICYmIGlzU3B5RW5hYmxlZCgpKSB7XG4gICAgICAgICAgICAgICAgc3B5UmVwb3J0KHtcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2YWJsZUtpbmQ6IFwiY29tcHV0ZWRcIixcbiAgICAgICAgICAgICAgICAgICAgZGVidWdPYmplY3ROYW1lOiB0aGlzLm5hbWVfLFxuICAgICAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMuc2NvcGVfLFxuICAgICAgICAgICAgICAgICAgICB0eXBlOiBcInVwZGF0ZVwiLFxuICAgICAgICAgICAgICAgICAgICBvbGRWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWVcbiAgICAgICAgICAgICAgICB9IGFzIElDb21wdXRlZERpZENoYW5nZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjaGFuZ2VkXG4gICAgfVxuXG4gICAgY29tcHV0ZVZhbHVlXyh0cmFjazogYm9vbGVhbikge1xuICAgICAgICB0aGlzLmlzQ29tcHV0aW5nXyA9IHRydWVcbiAgICAgICAgLy8gZG9uJ3QgYWxsb3cgc3RhdGUgY2hhbmdlcyBkdXJpbmcgY29tcHV0YXRpb25cbiAgICAgICAgY29uc3QgcHJldiA9IGFsbG93U3RhdGVDaGFuZ2VzU3RhcnQoZmFsc2UpXG4gICAgICAgIGxldCByZXM6IFQgfCBDYXVnaHRFeGNlcHRpb25cbiAgICAgICAgaWYgKHRyYWNrKSB7XG4gICAgICAgICAgICByZXMgPSB0cmFja0Rlcml2ZWRGdW5jdGlvbih0aGlzLCB0aGlzLmRlcml2YXRpb24sIHRoaXMuc2NvcGVfKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGdsb2JhbFN0YXRlLmRpc2FibGVFcnJvckJvdW5kYXJpZXMgPT09IHRydWUpIHtcbiAgICAgICAgICAgICAgICByZXMgPSB0aGlzLmRlcml2YXRpb24uY2FsbCh0aGlzLnNjb3BlXylcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgcmVzID0gdGhpcy5kZXJpdmF0aW9uLmNhbGwodGhpcy5zY29wZV8pXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICByZXMgPSBuZXcgQ2F1Z2h0RXhjZXB0aW9uKGUpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGFsbG93U3RhdGVDaGFuZ2VzRW5kKHByZXYpXG4gICAgICAgIHRoaXMuaXNDb21wdXRpbmdfID0gZmFsc2VcbiAgICAgICAgcmV0dXJuIHJlc1xuICAgIH1cblxuICAgIHN1c3BlbmRfKCkge1xuICAgICAgICBpZiAoIXRoaXMua2VlcEFsaXZlXykge1xuICAgICAgICAgICAgY2xlYXJPYnNlcnZpbmcodGhpcylcbiAgICAgICAgICAgIHRoaXMudmFsdWVfID0gdW5kZWZpbmVkIC8vIGRvbid0IGhvbGQgb24gdG8gY29tcHV0ZWQgdmFsdWUhXG4gICAgICAgICAgICBpZiAoX19ERVZfXyAmJiB0aGlzLmlzVHJhY2luZ18gIT09IFRyYWNlTW9kZS5OT05FKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXG4gICAgICAgICAgICAgICAgICAgIGBbbW9ieC50cmFjZV0gQ29tcHV0ZWQgdmFsdWUgJyR7dGhpcy5uYW1lX30nIHdhcyBzdXNwZW5kZWQgYW5kIGl0IHdpbGwgcmVjb21wdXRlIG9uIHRoZSBuZXh0IGFjY2Vzcy5gXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgb2JzZXJ2ZV8obGlzdGVuZXI6IChjaGFuZ2U6IElDb21wdXRlZERpZENoYW5nZTxUPikgPT4gdm9pZCwgZmlyZUltbWVkaWF0ZWx5PzogYm9vbGVhbik6IExhbWJkYSB7XG4gICAgICAgIGxldCBmaXJzdFRpbWUgPSB0cnVlXG4gICAgICAgIGxldCBwcmV2VmFsdWU6IFQgfCB1bmRlZmluZWQgPSB1bmRlZmluZWRcbiAgICAgICAgcmV0dXJuIGF1dG9ydW4oKCkgPT4ge1xuICAgICAgICAgICAgLy8gVE9ETzogd2h5IGlzIHRoaXMgaW4gYSBkaWZmZXJlbnQgcGxhY2UgdGhhbiB0aGUgc3B5UmVwb3J0KCkgZnVuY3Rpb24/IGluIGFsbCBvdGhlciBvYnNlcnZhYmxlcyBpdCdzIGNhbGxlZCBpbiB0aGUgc2FtZSBwbGFjZVxuICAgICAgICAgICAgbGV0IG5ld1ZhbHVlID0gdGhpcy5nZXQoKVxuICAgICAgICAgICAgaWYgKCFmaXJzdFRpbWUgfHwgZmlyZUltbWVkaWF0ZWx5KSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJldlUgPSB1bnRyYWNrZWRTdGFydCgpXG4gICAgICAgICAgICAgICAgbGlzdGVuZXIoe1xuICAgICAgICAgICAgICAgICAgICBvYnNlcnZhYmxlS2luZDogXCJjb21wdXRlZFwiLFxuICAgICAgICAgICAgICAgICAgICBkZWJ1Z09iamVjdE5hbWU6IHRoaXMubmFtZV8sXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IFVQREFURSxcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLFxuICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgb2xkVmFsdWU6IHByZXZWYWx1ZVxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgdW50cmFja2VkRW5kKHByZXZVKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmlyc3RUaW1lID0gZmFsc2VcbiAgICAgICAgICAgIHByZXZWYWx1ZSA9IG5ld1ZhbHVlXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgd2FybkFib3V0VW50cmFja2VkUmVhZF8oKSB7XG4gICAgICAgIGlmICghX19ERVZfXykge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaXNUcmFjaW5nXyAhPT0gVHJhY2VNb2RlLk5PTkUpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFxuICAgICAgICAgICAgICAgIGBbbW9ieC50cmFjZV0gQ29tcHV0ZWQgdmFsdWUgJyR7dGhpcy5uYW1lX30nIGlzIGJlaW5nIHJlYWQgb3V0c2lkZSBhIHJlYWN0aXZlIGNvbnRleHQuIERvaW5nIGEgZnVsbCByZWNvbXB1dGUuYFxuICAgICAgICAgICAgKVxuICAgICAgICB9XG4gICAgICAgIGlmIChcbiAgICAgICAgICAgIHR5cGVvZiB0aGlzLnJlcXVpcmVzUmVhY3Rpb25fID09PSBcImJvb2xlYW5cIlxuICAgICAgICAgICAgICAgID8gdGhpcy5yZXF1aXJlc1JlYWN0aW9uX1xuICAgICAgICAgICAgICAgIDogZ2xvYmFsU3RhdGUuY29tcHV0ZWRSZXF1aXJlc1JlYWN0aW9uXG4gICAgICAgICkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgICAgIGBbbW9ieF0gQ29tcHV0ZWQgdmFsdWUgJyR7dGhpcy5uYW1lX30nIGlzIGJlaW5nIHJlYWQgb3V0c2lkZSBhIHJlYWN0aXZlIGNvbnRleHQuIERvaW5nIGEgZnVsbCByZWNvbXB1dGUuYFxuICAgICAgICAgICAgKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdG9TdHJpbmcoKSB7XG4gICAgICAgIHJldHVybiBgJHt0aGlzLm5hbWVffVske3RoaXMuZGVyaXZhdGlvbi50b1N0cmluZygpfV1gXG4gICAgfVxuXG4gICAgdmFsdWVPZigpOiBUIHtcbiAgICAgICAgcmV0dXJuIHRvUHJpbWl0aXZlKHRoaXMuZ2V0KCkpXG4gICAgfVxuXG4gICAgW1N5bWJvbC50b1ByaW1pdGl2ZV0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlT2YoKVxuICAgIH1cbn1cblxuZXhwb3J0IGNvbnN0IGlzQ29tcHV0ZWRWYWx1ZSA9IGNyZWF0ZUluc3RhbmNlb2ZQcmVkaWNhdGUoXCJDb21wdXRlZFZhbHVlXCIsIENvbXB1dGVkVmFsdWUpXG4iLCJpbXBvcnQge1xuICAgIElBdG9tLFxuICAgIElEZXBUcmVlTm9kZSxcbiAgICBJT2JzZXJ2YWJsZSxcbiAgICBhZGRPYnNlcnZlcixcbiAgICBnbG9iYWxTdGF0ZSxcbiAgICBpc0NvbXB1dGVkVmFsdWUsXG4gICAgcmVtb3ZlT2JzZXJ2ZXJcbn0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuZXhwb3J0IGVudW0gSURlcml2YXRpb25TdGF0ZV8ge1xuICAgIC8vIGJlZm9yZSBiZWluZyBydW4gb3IgKG91dHNpZGUgYmF0Y2ggYW5kIG5vdCBiZWluZyBvYnNlcnZlZClcbiAgICAvLyBhdCB0aGlzIHBvaW50IGRlcml2YXRpb24gaXMgbm90IGhvbGRpbmcgYW55IGRhdGEgYWJvdXQgZGVwZW5kZW5jeSB0cmVlXG4gICAgTk9UX1RSQUNLSU5HXyA9IC0xLFxuICAgIC8vIG5vIHNoYWxsb3cgZGVwZW5kZW5jeSBjaGFuZ2VkIHNpbmNlIGxhc3QgY29tcHV0YXRpb25cbiAgICAvLyB3b24ndCByZWNhbGN1bGF0ZSBkZXJpdmF0aW9uXG4gICAgLy8gdGhpcyBpcyB3aGF0IG1ha2VzIG1vYnggZmFzdFxuICAgIFVQX1RPX0RBVEVfID0gMCxcbiAgICAvLyBzb21lIGRlZXAgZGVwZW5kZW5jeSBjaGFuZ2VkLCBidXQgZG9uJ3Qga25vdyBpZiBzaGFsbG93IGRlcGVuZGVuY3kgY2hhbmdlZFxuICAgIC8vIHdpbGwgcmVxdWlyZSB0byBjaGVjayBmaXJzdCBpZiBVUF9UT19EQVRFIG9yIFBPU1NJQkxZX1NUQUxFXG4gICAgLy8gY3VycmVudGx5IG9ubHkgQ29tcHV0ZWRWYWx1ZSB3aWxsIHByb3BhZ2F0ZSBQT1NTSUJMWV9TVEFMRVxuICAgIC8vXG4gICAgLy8gaGF2aW5nIHRoaXMgc3RhdGUgaXMgc2Vjb25kIGJpZyBvcHRpbWl6YXRpb246XG4gICAgLy8gZG9uJ3QgaGF2ZSB0byByZWNvbXB1dGUgb24gZXZlcnkgZGVwZW5kZW5jeSBjaGFuZ2UsIGJ1dCBvbmx5IHdoZW4gaXQncyBuZWVkZWRcbiAgICBQT1NTSUJMWV9TVEFMRV8gPSAxLFxuICAgIC8vIEEgc2hhbGxvdyBkZXBlbmRlbmN5IGhhcyBjaGFuZ2VkIHNpbmNlIGxhc3QgY29tcHV0YXRpb24gYW5kIHRoZSBkZXJpdmF0aW9uXG4gICAgLy8gd2lsbCBuZWVkIHRvIHJlY29tcHV0ZSB3aGVuIGl0J3MgbmVlZGVkIG5leHQuXG4gICAgU1RBTEVfID0gMlxufVxuXG5leHBvcnQgZW51bSBUcmFjZU1vZGUge1xuICAgIE5PTkUsXG4gICAgTE9HLFxuICAgIEJSRUFLXG59XG5cbi8qKlxuICogQSBkZXJpdmF0aW9uIGlzIGV2ZXJ5dGhpbmcgdGhhdCBjYW4gYmUgZGVyaXZlZCBmcm9tIHRoZSBzdGF0ZSAoYWxsIHRoZSBhdG9tcykgaW4gYSBwdXJlIG1hbm5lci5cbiAqIFNlZSBodHRwczovL21lZGl1bS5jb20vQG13ZXN0c3RyYXRlL2JlY29taW5nLWZ1bGx5LXJlYWN0aXZlLWFuLWluLWRlcHRoLWV4cGxhbmF0aW9uLW9mLW1vYnNlcnZhYmxlLTU1OTk1MjYyYTI1NCMueHZiaDZxZDc0XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSURlcml2YXRpb24gZXh0ZW5kcyBJRGVwVHJlZU5vZGUge1xuICAgIG9ic2VydmluZ186IElPYnNlcnZhYmxlW11cbiAgICBuZXdPYnNlcnZpbmdfOiBudWxsIHwgSU9ic2VydmFibGVbXVxuICAgIGRlcGVuZGVuY2llc1N0YXRlXzogSURlcml2YXRpb25TdGF0ZV9cbiAgICAvKipcbiAgICAgKiBJZCBvZiB0aGUgY3VycmVudCBydW4gb2YgYSBkZXJpdmF0aW9uLiBFYWNoIHRpbWUgdGhlIGRlcml2YXRpb24gaXMgdHJhY2tlZFxuICAgICAqIHRoaXMgbnVtYmVyIGlzIGluY3JlYXNlZCBieSBvbmUuIFRoaXMgbnVtYmVyIGlzIGdsb2JhbGx5IHVuaXF1ZVxuICAgICAqL1xuICAgIHJ1bklkXzogbnVtYmVyXG4gICAgLyoqXG4gICAgICogYW1vdW50IG9mIGRlcGVuZGVuY2llcyB1c2VkIGJ5IHRoZSBkZXJpdmF0aW9uIGluIHRoaXMgcnVuLCB3aGljaCBoYXMgbm90IGJlZW4gYm91bmQgeWV0LlxuICAgICAqL1xuICAgIHVuYm91bmREZXBzQ291bnRfOiBudW1iZXJcbiAgICBvbkJlY29tZVN0YWxlXygpOiB2b2lkXG4gICAgaXNUcmFjaW5nXzogVHJhY2VNb2RlXG5cbiAgICAvKipcbiAgICAgKiAgd2FybiBpZiB0aGUgZGVyaXZhdGlvbiBoYXMgbm8gZGVwZW5kZW5jaWVzIGFmdGVyIGNyZWF0aW9uL3VwZGF0ZVxuICAgICAqL1xuICAgIHJlcXVpcmVzT2JzZXJ2YWJsZV8/OiBib29sZWFuXG59XG5cbmV4cG9ydCBjbGFzcyBDYXVnaHRFeGNlcHRpb24ge1xuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyBjYXVzZTogYW55KSB7XG4gICAgICAgIC8vIEVtcHR5XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNDYXVnaHRFeGNlcHRpb24oZTogYW55KTogZSBpcyBDYXVnaHRFeGNlcHRpb24ge1xuICAgIHJldHVybiBlIGluc3RhbmNlb2YgQ2F1Z2h0RXhjZXB0aW9uXG59XG5cbi8qKlxuICogRmluZHMgb3V0IHdoZXRoZXIgYW55IGRlcGVuZGVuY3kgb2YgdGhlIGRlcml2YXRpb24gaGFzIGFjdHVhbGx5IGNoYW5nZWQuXG4gKiBJZiBkZXBlbmRlbmNpZXNTdGF0ZSBpcyAxIHRoZW4gaXQgd2lsbCByZWNhbGN1bGF0ZSBkZXBlbmRlbmNpZXMsXG4gKiBpZiBhbnkgZGVwZW5kZW5jeSBjaGFuZ2VkIGl0IHdpbGwgcHJvcGFnYXRlIGl0IGJ5IGNoYW5naW5nIGRlcGVuZGVuY2llc1N0YXRlIHRvIDIuXG4gKlxuICogQnkgaXRlcmF0aW5nIG92ZXIgdGhlIGRlcGVuZGVuY2llcyBpbiB0aGUgc2FtZSBvcmRlciB0aGF0IHRoZXkgd2VyZSByZXBvcnRlZCBhbmRcbiAqIHN0b3BwaW5nIG9uIHRoZSBmaXJzdCBjaGFuZ2UsIGFsbCB0aGUgcmVjYWxjdWxhdGlvbnMgYXJlIG9ubHkgY2FsbGVkIGZvciBDb21wdXRlZFZhbHVlc1xuICogdGhhdCB3aWxsIGJlIHRyYWNrZWQgYnkgZGVyaXZhdGlvbi4gVGhhdCBpcyBiZWNhdXNlIHdlIGFzc3VtZSB0aGF0IGlmIHRoZSBmaXJzdCB4XG4gKiBkZXBlbmRlbmNpZXMgb2YgdGhlIGRlcml2YXRpb24gZG9lc24ndCBjaGFuZ2UgdGhlbiB0aGUgZGVyaXZhdGlvbiBzaG91bGQgcnVuIHRoZSBzYW1lIHdheVxuICogdXAgdW50aWwgYWNjZXNzaW5nIHgtdGggZGVwZW5kZW5jeS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNob3VsZENvbXB1dGUoZGVyaXZhdGlvbjogSURlcml2YXRpb24pOiBib29sZWFuIHtcbiAgICBzd2l0Y2ggKGRlcml2YXRpb24uZGVwZW5kZW5jaWVzU3RhdGVfKSB7XG4gICAgICAgIGNhc2UgSURlcml2YXRpb25TdGF0ZV8uVVBfVE9fREFURV86XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgY2FzZSBJRGVyaXZhdGlvblN0YXRlXy5OT1RfVFJBQ0tJTkdfOlxuICAgICAgICBjYXNlIElEZXJpdmF0aW9uU3RhdGVfLlNUQUxFXzpcbiAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIGNhc2UgSURlcml2YXRpb25TdGF0ZV8uUE9TU0lCTFlfU1RBTEVfOiB7XG4gICAgICAgICAgICAvLyBzdGF0ZSBwcm9wYWdhdGlvbiBjYW4gb2NjdXIgb3V0c2lkZSBvZiBhY3Rpb24vcmVhY3RpdmUgY29udGV4dCAjMjE5NVxuICAgICAgICAgICAgY29uc3QgcHJldkFsbG93U3RhdGVSZWFkcyA9IGFsbG93U3RhdGVSZWFkc1N0YXJ0KHRydWUpXG4gICAgICAgICAgICBjb25zdCBwcmV2VW50cmFja2VkID0gdW50cmFja2VkU3RhcnQoKSAvLyBubyBuZWVkIGZvciB0aG9zZSBjb21wdXRlZHMgdG8gYmUgcmVwb3J0ZWQsIHRoZXkgd2lsbCBiZSBwaWNrZWQgdXAgaW4gdHJhY2tEZXJpdmVkRnVuY3Rpb24uXG4gICAgICAgICAgICBjb25zdCBvYnMgPSBkZXJpdmF0aW9uLm9ic2VydmluZ18sXG4gICAgICAgICAgICAgICAgbCA9IG9icy5sZW5ndGhcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgb2JqID0gb2JzW2ldXG4gICAgICAgICAgICAgICAgaWYgKGlzQ29tcHV0ZWRWYWx1ZShvYmopKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChnbG9iYWxTdGF0ZS5kaXNhYmxlRXJyb3JCb3VuZGFyaWVzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYmouZ2V0KClcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqLmdldCgpXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2UgYXJlIG5vdCBpbnRlcmVzdGVkIGluIHRoZSB2YWx1ZSAqb3IqIGV4Y2VwdGlvbiBhdCB0aGlzIG1vbWVudCwgYnV0IGlmIHRoZXJlIGlzIG9uZSwgbm90aWZ5IGFsbFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVudHJhY2tlZEVuZChwcmV2VW50cmFja2VkKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbG93U3RhdGVSZWFkc0VuZChwcmV2QWxsb3dTdGF0ZVJlYWRzKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgQ29tcHV0ZWRWYWx1ZSBgb2JqYCBhY3R1YWxseSBjaGFuZ2VkIGl0IHdpbGwgYmUgY29tcHV0ZWQgYW5kIHByb3BhZ2F0ZWQgdG8gaXRzIG9ic2VydmVycy5cbiAgICAgICAgICAgICAgICAgICAgLy8gYW5kIGBkZXJpdmF0aW9uYCBpcyBhbiBvYnNlcnZlciBvZiBgb2JqYFxuICAgICAgICAgICAgICAgICAgICAvLyBpbnZhcmlhbnRTaG91bGRDb21wdXRlKGRlcml2YXRpb24pXG4gICAgICAgICAgICAgICAgICAgIGlmICgoZGVyaXZhdGlvbi5kZXBlbmRlbmNpZXNTdGF0ZV8gYXMgYW55KSA9PT0gSURlcml2YXRpb25TdGF0ZV8uU1RBTEVfKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB1bnRyYWNrZWRFbmQocHJldlVudHJhY2tlZClcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbG93U3RhdGVSZWFkc0VuZChwcmV2QWxsb3dTdGF0ZVJlYWRzKVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNoYW5nZURlcGVuZGVuY2llc1N0YXRlVG8wKGRlcml2YXRpb24pXG4gICAgICAgICAgICB1bnRyYWNrZWRFbmQocHJldlVudHJhY2tlZClcbiAgICAgICAgICAgIGFsbG93U3RhdGVSZWFkc0VuZChwcmV2QWxsb3dTdGF0ZVJlYWRzKVxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0NvbXB1dGluZ0Rlcml2YXRpb24oKSB7XG4gICAgcmV0dXJuIGdsb2JhbFN0YXRlLnRyYWNraW5nRGVyaXZhdGlvbiAhPT0gbnVsbCAvLyBmaWx0ZXIgb3V0IGFjdGlvbnMgaW5zaWRlIGNvbXB1dGF0aW9uc1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tJZlN0YXRlTW9kaWZpY2F0aW9uc0FyZUFsbG93ZWQoYXRvbTogSUF0b20pIHtcbiAgICBpZiAoIV9fREVWX18pIHtcbiAgICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNvbnN0IGhhc09ic2VydmVycyA9IGF0b20ub2JzZXJ2ZXJzXy5zaXplID4gMFxuICAgIC8vIFNob3VsZCBub3QgYmUgcG9zc2libGUgdG8gY2hhbmdlIG9ic2VydmVkIHN0YXRlIG91dHNpZGUgc3RyaWN0IG1vZGUsIGV4Y2VwdCBkdXJpbmcgaW5pdGlhbGl6YXRpb24sIHNlZSAjNTYzXG4gICAgaWYgKFxuICAgICAgICAhZ2xvYmFsU3RhdGUuYWxsb3dTdGF0ZUNoYW5nZXMgJiZcbiAgICAgICAgKGhhc09ic2VydmVycyB8fCBnbG9iYWxTdGF0ZS5lbmZvcmNlQWN0aW9ucyA9PT0gXCJhbHdheXNcIilcbiAgICApIHtcbiAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgXCJbTW9iWF0gXCIgK1xuICAgICAgICAgICAgICAgIChnbG9iYWxTdGF0ZS5lbmZvcmNlQWN0aW9uc1xuICAgICAgICAgICAgICAgICAgICA/IFwiU2luY2Ugc3RyaWN0LW1vZGUgaXMgZW5hYmxlZCwgY2hhbmdpbmcgKG9ic2VydmVkKSBvYnNlcnZhYmxlIHZhbHVlcyB3aXRob3V0IHVzaW5nIGFuIGFjdGlvbiBpcyBub3QgYWxsb3dlZC4gVHJpZWQgdG8gbW9kaWZ5OiBcIlxuICAgICAgICAgICAgICAgICAgICA6IFwiU2lkZSBlZmZlY3RzIGxpa2UgY2hhbmdpbmcgc3RhdGUgYXJlIG5vdCBhbGxvd2VkIGF0IHRoaXMgcG9pbnQuIEFyZSB5b3UgdHJ5aW5nIHRvIG1vZGlmeSBzdGF0ZSBmcm9tLCBmb3IgZXhhbXBsZSwgYSBjb21wdXRlZCB2YWx1ZSBvciB0aGUgcmVuZGVyIGZ1bmN0aW9uIG9mIGEgUmVhY3QgY29tcG9uZW50PyBZb3UgY2FuIHdyYXAgc2lkZSBlZmZlY3RzIGluICdydW5JbkFjdGlvbicgKG9yIGRlY29yYXRlIGZ1bmN0aW9ucyB3aXRoICdhY3Rpb24nKSBpZiBuZWVkZWQuIFRyaWVkIHRvIG1vZGlmeTogXCIpICtcbiAgICAgICAgICAgICAgICBhdG9tLm5hbWVfXG4gICAgICAgIClcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGVja0lmU3RhdGVSZWFkc0FyZUFsbG93ZWQob2JzZXJ2YWJsZTogSU9ic2VydmFibGUpIHtcbiAgICBpZiAoX19ERVZfXyAmJiAhZ2xvYmFsU3RhdGUuYWxsb3dTdGF0ZVJlYWRzICYmIGdsb2JhbFN0YXRlLm9ic2VydmFibGVSZXF1aXJlc1JlYWN0aW9uKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgIGBbbW9ieF0gT2JzZXJ2YWJsZSAnJHtvYnNlcnZhYmxlLm5hbWVffScgYmVpbmcgcmVhZCBvdXRzaWRlIGEgcmVhY3RpdmUgY29udGV4dC5gXG4gICAgICAgIClcbiAgICB9XG59XG5cbi8qKlxuICogRXhlY3V0ZXMgdGhlIHByb3ZpZGVkIGZ1bmN0aW9uIGBmYCBhbmQgdHJhY2tzIHdoaWNoIG9ic2VydmFibGVzIGFyZSBiZWluZyBhY2Nlc3NlZC5cbiAqIFRoZSB0cmFja2luZyBpbmZvcm1hdGlvbiBpcyBzdG9yZWQgb24gdGhlIGBkZXJpdmF0aW9uYCBvYmplY3QgYW5kIHRoZSBkZXJpdmF0aW9uIGlzIHJlZ2lzdGVyZWRcbiAqIGFzIG9ic2VydmVyIG9mIGFueSBvZiB0aGUgYWNjZXNzZWQgb2JzZXJ2YWJsZXMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmFja0Rlcml2ZWRGdW5jdGlvbjxUPihkZXJpdmF0aW9uOiBJRGVyaXZhdGlvbiwgZjogKCkgPT4gVCwgY29udGV4dDogYW55KSB7XG4gICAgY29uc3QgcHJldkFsbG93U3RhdGVSZWFkcyA9IGFsbG93U3RhdGVSZWFkc1N0YXJ0KHRydWUpXG4gICAgLy8gcHJlIGFsbG9jYXRlIGFycmF5IGFsbG9jYXRpb24gKyByb29tIGZvciB2YXJpYXRpb24gaW4gZGVwc1xuICAgIC8vIGFycmF5IHdpbGwgYmUgdHJpbW1lZCBieSBiaW5kRGVwZW5kZW5jaWVzXG4gICAgY2hhbmdlRGVwZW5kZW5jaWVzU3RhdGVUbzAoZGVyaXZhdGlvbilcbiAgICBkZXJpdmF0aW9uLm5ld09ic2VydmluZ18gPSBuZXcgQXJyYXkoZGVyaXZhdGlvbi5vYnNlcnZpbmdfLmxlbmd0aCArIDEwMClcbiAgICBkZXJpdmF0aW9uLnVuYm91bmREZXBzQ291bnRfID0gMFxuICAgIGRlcml2YXRpb24ucnVuSWRfID0gKytnbG9iYWxTdGF0ZS5ydW5JZFxuICAgIGNvbnN0IHByZXZUcmFja2luZyA9IGdsb2JhbFN0YXRlLnRyYWNraW5nRGVyaXZhdGlvblxuICAgIGdsb2JhbFN0YXRlLnRyYWNraW5nRGVyaXZhdGlvbiA9IGRlcml2YXRpb25cbiAgICBnbG9iYWxTdGF0ZS5pbkJhdGNoKytcbiAgICBsZXQgcmVzdWx0XG4gICAgaWYgKGdsb2JhbFN0YXRlLmRpc2FibGVFcnJvckJvdW5kYXJpZXMgPT09IHRydWUpIHtcbiAgICAgICAgcmVzdWx0ID0gZi5jYWxsKGNvbnRleHQpXG4gICAgfSBlbHNlIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGYuY2FsbChjb250ZXh0KVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBuZXcgQ2F1Z2h0RXhjZXB0aW9uKGUpXG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2xvYmFsU3RhdGUuaW5CYXRjaC0tXG4gICAgZ2xvYmFsU3RhdGUudHJhY2tpbmdEZXJpdmF0aW9uID0gcHJldlRyYWNraW5nXG4gICAgYmluZERlcGVuZGVuY2llcyhkZXJpdmF0aW9uKVxuXG4gICAgd2FybkFib3V0RGVyaXZhdGlvbldpdGhvdXREZXBlbmRlbmNpZXMoZGVyaXZhdGlvbilcbiAgICBhbGxvd1N0YXRlUmVhZHNFbmQocHJldkFsbG93U3RhdGVSZWFkcylcbiAgICByZXR1cm4gcmVzdWx0XG59XG5cbmZ1bmN0aW9uIHdhcm5BYm91dERlcml2YXRpb25XaXRob3V0RGVwZW5kZW5jaWVzKGRlcml2YXRpb246IElEZXJpdmF0aW9uKSB7XG4gICAgaWYgKCFfX0RFVl9fKSB7XG4gICAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChkZXJpdmF0aW9uLm9ic2VydmluZ18ubGVuZ3RoICE9PSAwKSB7XG4gICAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChcbiAgICAgICAgdHlwZW9mIGRlcml2YXRpb24ucmVxdWlyZXNPYnNlcnZhYmxlXyA9PT0gXCJib29sZWFuXCJcbiAgICAgICAgICAgID8gZGVyaXZhdGlvbi5yZXF1aXJlc09ic2VydmFibGVfXG4gICAgICAgICAgICA6IGdsb2JhbFN0YXRlLnJlYWN0aW9uUmVxdWlyZXNPYnNlcnZhYmxlXG4gICAgKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgIGBbbW9ieF0gRGVyaXZhdGlvbiAnJHtkZXJpdmF0aW9uLm5hbWVffScgaXMgY3JlYXRlZC91cGRhdGVkIHdpdGhvdXQgcmVhZGluZyBhbnkgb2JzZXJ2YWJsZSB2YWx1ZS5gXG4gICAgICAgIClcbiAgICB9XG59XG5cbi8qKlxuICogZGlmZnMgbmV3T2JzZXJ2aW5nIHdpdGggb2JzZXJ2aW5nLlxuICogdXBkYXRlIG9ic2VydmluZyB0byBiZSBuZXdPYnNlcnZpbmcgd2l0aCB1bmlxdWUgb2JzZXJ2YWJsZXNcbiAqIG5vdGlmeSBvYnNlcnZlcnMgdGhhdCBiZWNvbWUgb2JzZXJ2ZWQvdW5vYnNlcnZlZFxuICovXG5mdW5jdGlvbiBiaW5kRGVwZW5kZW5jaWVzKGRlcml2YXRpb246IElEZXJpdmF0aW9uKSB7XG4gICAgLy8gaW52YXJpYW50KGRlcml2YXRpb24uZGVwZW5kZW5jaWVzU3RhdGUgIT09IElEZXJpdmF0aW9uU3RhdGUuTk9UX1RSQUNLSU5HLCBcIklOVEVSTkFMIEVSUk9SIGJpbmREZXBlbmRlbmNpZXMgZXhwZWN0cyBkZXJpdmF0aW9uLmRlcGVuZGVuY2llc1N0YXRlICE9PSAtMVwiKTtcbiAgICBjb25zdCBwcmV2T2JzZXJ2aW5nID0gZGVyaXZhdGlvbi5vYnNlcnZpbmdfXG4gICAgY29uc3Qgb2JzZXJ2aW5nID0gKGRlcml2YXRpb24ub2JzZXJ2aW5nXyA9IGRlcml2YXRpb24ubmV3T2JzZXJ2aW5nXyEpXG4gICAgbGV0IGxvd2VzdE5ld09ic2VydmluZ0Rlcml2YXRpb25TdGF0ZSA9IElEZXJpdmF0aW9uU3RhdGVfLlVQX1RPX0RBVEVfXG5cbiAgICAvLyBHbyB0aHJvdWdoIGFsbCBuZXcgb2JzZXJ2YWJsZXMgYW5kIGNoZWNrIGRpZmZWYWx1ZTogKHRoaXMgbGlzdCBjYW4gY29udGFpbiBkdXBsaWNhdGVzKTpcbiAgICAvLyAgIDA6IGZpcnN0IG9jY3VycmVuY2UsIGNoYW5nZSB0byAxIGFuZCBrZWVwIGl0XG4gICAgLy8gICAxOiBleHRyYSBvY2N1cnJlbmNlLCBkcm9wIGl0XG4gICAgbGV0IGkwID0gMCxcbiAgICAgICAgbCA9IGRlcml2YXRpb24udW5ib3VuZERlcHNDb3VudF9cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgICBjb25zdCBkZXAgPSBvYnNlcnZpbmdbaV1cbiAgICAgICAgaWYgKGRlcC5kaWZmVmFsdWVfID09PSAwKSB7XG4gICAgICAgICAgICBkZXAuZGlmZlZhbHVlXyA9IDFcbiAgICAgICAgICAgIGlmIChpMCAhPT0gaSkge1xuICAgICAgICAgICAgICAgIG9ic2VydmluZ1tpMF0gPSBkZXBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGkwKytcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFVwY2FzdCBpcyAnc2FmZScgaGVyZSwgYmVjYXVzZSBpZiBkZXAgaXMgSU9ic2VydmFibGUsIGBkZXBlbmRlbmNpZXNTdGF0ZWAgd2lsbCBiZSB1bmRlZmluZWQsXG4gICAgICAgIC8vIG5vdCBoaXR0aW5nIHRoZSBjb25kaXRpb25cbiAgICAgICAgaWYgKChkZXAgYXMgYW55IGFzIElEZXJpdmF0aW9uKS5kZXBlbmRlbmNpZXNTdGF0ZV8gPiBsb3dlc3ROZXdPYnNlcnZpbmdEZXJpdmF0aW9uU3RhdGUpIHtcbiAgICAgICAgICAgIGxvd2VzdE5ld09ic2VydmluZ0Rlcml2YXRpb25TdGF0ZSA9IChkZXAgYXMgYW55IGFzIElEZXJpdmF0aW9uKS5kZXBlbmRlbmNpZXNTdGF0ZV9cbiAgICAgICAgfVxuICAgIH1cbiAgICBvYnNlcnZpbmcubGVuZ3RoID0gaTBcblxuICAgIGRlcml2YXRpb24ubmV3T2JzZXJ2aW5nXyA9IG51bGwgLy8gbmV3T2JzZXJ2aW5nIHNob3VsZG4ndCBiZSBuZWVkZWQgb3V0c2lkZSB0cmFja2luZyAoc3RhdGVtZW50IG1vdmVkIGRvd24gdG8gd29yayBhcm91bmQgRkYgYnVnLCBzZWUgIzYxNClcblxuICAgIC8vIEdvIHRocm91Z2ggYWxsIG9sZCBvYnNlcnZhYmxlcyBhbmQgY2hlY2sgZGlmZlZhbHVlOiAoaXQgaXMgdW5pcXVlIGFmdGVyIGxhc3QgYmluZERlcGVuZGVuY2llcylcbiAgICAvLyAgIDA6IGl0J3Mgbm90IGluIG5ldyBvYnNlcnZhYmxlcywgdW5vYnNlcnZlIGl0XG4gICAgLy8gICAxOiBpdCBrZWVwcyBiZWluZyBvYnNlcnZlZCwgZG9uJ3Qgd2FudCB0byBub3RpZnkgaXQuIGNoYW5nZSB0byAwXG4gICAgbCA9IHByZXZPYnNlcnZpbmcubGVuZ3RoXG4gICAgd2hpbGUgKGwtLSkge1xuICAgICAgICBjb25zdCBkZXAgPSBwcmV2T2JzZXJ2aW5nW2xdXG4gICAgICAgIGlmIChkZXAuZGlmZlZhbHVlXyA9PT0gMCkge1xuICAgICAgICAgICAgcmVtb3ZlT2JzZXJ2ZXIoZGVwLCBkZXJpdmF0aW9uKVxuICAgICAgICB9XG4gICAgICAgIGRlcC5kaWZmVmFsdWVfID0gMFxuICAgIH1cblxuICAgIC8vIEdvIHRocm91Z2ggYWxsIG5ldyBvYnNlcnZhYmxlcyBhbmQgY2hlY2sgZGlmZlZhbHVlOiAobm93IGl0IHNob3VsZCBiZSB1bmlxdWUpXG4gICAgLy8gICAwOiBpdCB3YXMgc2V0IHRvIDAgaW4gbGFzdCBsb29wLiBkb24ndCBuZWVkIHRvIGRvIGFueXRoaW5nLlxuICAgIC8vICAgMTogaXQgd2Fzbid0IG9ic2VydmVkLCBsZXQncyBvYnNlcnZlIGl0LiBzZXQgYmFjayB0byAwXG4gICAgd2hpbGUgKGkwLS0pIHtcbiAgICAgICAgY29uc3QgZGVwID0gb2JzZXJ2aW5nW2kwXVxuICAgICAgICBpZiAoZGVwLmRpZmZWYWx1ZV8gPT09IDEpIHtcbiAgICAgICAgICAgIGRlcC5kaWZmVmFsdWVfID0gMFxuICAgICAgICAgICAgYWRkT2JzZXJ2ZXIoZGVwLCBkZXJpdmF0aW9uKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gU29tZSBuZXcgb2JzZXJ2ZWQgZGVyaXZhdGlvbnMgbWF5IGJlY29tZSBzdGFsZSBkdXJpbmcgdGhpcyBkZXJpdmF0aW9uIGNvbXB1dGF0aW9uXG4gICAgLy8gc28gdGhleSBoYXZlIGhhZCBubyBjaGFuY2UgdG8gcHJvcGFnYXRlIHN0YWxlbmVzcyAoIzkxNilcbiAgICBpZiAobG93ZXN0TmV3T2JzZXJ2aW5nRGVyaXZhdGlvblN0YXRlICE9PSBJRGVyaXZhdGlvblN0YXRlXy5VUF9UT19EQVRFXykge1xuICAgICAgICBkZXJpdmF0aW9uLmRlcGVuZGVuY2llc1N0YXRlXyA9IGxvd2VzdE5ld09ic2VydmluZ0Rlcml2YXRpb25TdGF0ZVxuICAgICAgICBkZXJpdmF0aW9uLm9uQmVjb21lU3RhbGVfKClcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbGVhck9ic2VydmluZyhkZXJpdmF0aW9uOiBJRGVyaXZhdGlvbikge1xuICAgIC8vIGludmFyaWFudChnbG9iYWxTdGF0ZS5pbkJhdGNoID4gMCwgXCJJTlRFUk5BTCBFUlJPUiBjbGVhck9ic2VydmluZyBzaG91bGQgYmUgY2FsbGVkIG9ubHkgaW5zaWRlIGJhdGNoXCIpO1xuICAgIGNvbnN0IG9icyA9IGRlcml2YXRpb24ub2JzZXJ2aW5nX1xuICAgIGRlcml2YXRpb24ub2JzZXJ2aW5nXyA9IFtdXG4gICAgbGV0IGkgPSBvYnMubGVuZ3RoXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgICByZW1vdmVPYnNlcnZlcihvYnNbaV0sIGRlcml2YXRpb24pXG4gICAgfVxuXG4gICAgZGVyaXZhdGlvbi5kZXBlbmRlbmNpZXNTdGF0ZV8gPSBJRGVyaXZhdGlvblN0YXRlXy5OT1RfVFJBQ0tJTkdfXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1bnRyYWNrZWQ8VD4oYWN0aW9uOiAoKSA9PiBUKTogVCB7XG4gICAgY29uc3QgcHJldiA9IHVudHJhY2tlZFN0YXJ0KClcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gYWN0aW9uKClcbiAgICB9IGZpbmFsbHkge1xuICAgICAgICB1bnRyYWNrZWRFbmQocHJldilcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1bnRyYWNrZWRTdGFydCgpOiBJRGVyaXZhdGlvbiB8IG51bGwge1xuICAgIGNvbnN0IHByZXYgPSBnbG9iYWxTdGF0ZS50cmFja2luZ0Rlcml2YXRpb25cbiAgICBnbG9iYWxTdGF0ZS50cmFja2luZ0Rlcml2YXRpb24gPSBudWxsXG4gICAgcmV0dXJuIHByZXZcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVudHJhY2tlZEVuZChwcmV2OiBJRGVyaXZhdGlvbiB8IG51bGwpIHtcbiAgICBnbG9iYWxTdGF0ZS50cmFja2luZ0Rlcml2YXRpb24gPSBwcmV2XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhbGxvd1N0YXRlUmVhZHNTdGFydChhbGxvd1N0YXRlUmVhZHM6IGJvb2xlYW4pIHtcbiAgICBjb25zdCBwcmV2ID0gZ2xvYmFsU3RhdGUuYWxsb3dTdGF0ZVJlYWRzXG4gICAgZ2xvYmFsU3RhdGUuYWxsb3dTdGF0ZVJlYWRzID0gYWxsb3dTdGF0ZVJlYWRzXG4gICAgcmV0dXJuIHByZXZcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFsbG93U3RhdGVSZWFkc0VuZChwcmV2OiBib29sZWFuKSB7XG4gICAgZ2xvYmFsU3RhdGUuYWxsb3dTdGF0ZVJlYWRzID0gcHJldlxufVxuXG4vKipcbiAqIG5lZWRlZCB0byBrZWVwIGBsb3dlc3RPYnNlcnZlclN0YXRlYCBjb3JyZWN0LiB3aGVuIGNoYW5naW5nIGZyb20gKDIgb3IgMSkgdG8gMFxuICpcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNoYW5nZURlcGVuZGVuY2llc1N0YXRlVG8wKGRlcml2YXRpb246IElEZXJpdmF0aW9uKSB7XG4gICAgaWYgKGRlcml2YXRpb24uZGVwZW5kZW5jaWVzU3RhdGVfID09PSBJRGVyaXZhdGlvblN0YXRlXy5VUF9UT19EQVRFXykge1xuICAgICAgICByZXR1cm5cbiAgICB9XG4gICAgZGVyaXZhdGlvbi5kZXBlbmRlbmNpZXNTdGF0ZV8gPSBJRGVyaXZhdGlvblN0YXRlXy5VUF9UT19EQVRFX1xuXG4gICAgY29uc3Qgb2JzID0gZGVyaXZhdGlvbi5vYnNlcnZpbmdfXG4gICAgbGV0IGkgPSBvYnMubGVuZ3RoXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgICBvYnNbaV0ubG93ZXN0T2JzZXJ2ZXJTdGF0ZV8gPSBJRGVyaXZhdGlvblN0YXRlXy5VUF9UT19EQVRFX1xuICAgIH1cbn1cbiIsImltcG9ydCB7XG4gICAgTGFtYmRhLFxuICAgIENvbXB1dGVkVmFsdWUsXG4gICAgSURlcGVuZGVuY3lUcmVlLFxuICAgIElEZXJpdmF0aW9uLFxuICAgIElEZXJpdmF0aW9uU3RhdGVfLFxuICAgIFRyYWNlTW9kZSxcbiAgICBnZXREZXBlbmRlbmN5VHJlZSxcbiAgICBnbG9iYWxTdGF0ZSxcbiAgICBydW5SZWFjdGlvbnMsXG4gICAgY2hlY2tJZlN0YXRlUmVhZHNBcmVBbGxvd2VkXG59IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbmV4cG9ydCBpbnRlcmZhY2UgSURlcFRyZWVOb2RlIHtcbiAgICBuYW1lXzogc3RyaW5nXG4gICAgb2JzZXJ2aW5nXz86IElPYnNlcnZhYmxlW11cbn1cblxuZXhwb3J0IGludGVyZmFjZSBJT2JzZXJ2YWJsZSBleHRlbmRzIElEZXBUcmVlTm9kZSB7XG4gICAgZGlmZlZhbHVlXzogbnVtYmVyXG4gICAgLyoqXG4gICAgICogSWQgb2YgdGhlIGRlcml2YXRpb24gKnJ1biogdGhhdCBsYXN0IGFjY2Vzc2VkIHRoaXMgb2JzZXJ2YWJsZS5cbiAgICAgKiBJZiB0aGlzIGlkIGVxdWFscyB0aGUgKnJ1biogaWQgb2YgdGhlIGN1cnJlbnQgZGVyaXZhdGlvbixcbiAgICAgKiB0aGUgZGVwZW5kZW5jeSBpcyBhbHJlYWR5IGVzdGFibGlzaGVkXG4gICAgICovXG4gICAgbGFzdEFjY2Vzc2VkQnlfOiBudW1iZXJcbiAgICBpc0JlaW5nT2JzZXJ2ZWRfOiBib29sZWFuXG5cbiAgICBsb3dlc3RPYnNlcnZlclN0YXRlXzogSURlcml2YXRpb25TdGF0ZV8gLy8gVXNlZCB0byBhdm9pZCByZWR1bmRhbnQgcHJvcGFnYXRpb25zXG4gICAgaXNQZW5kaW5nVW5vYnNlcnZhdGlvbl86IGJvb2xlYW4gLy8gVXNlZCB0byBwdXNoIGl0c2VsZiB0byBnbG9iYWwucGVuZGluZ1Vub2JzZXJ2YXRpb25zIGF0IG1vc3Qgb25jZSBwZXIgYmF0Y2guXG5cbiAgICBvYnNlcnZlcnNfOiBTZXQ8SURlcml2YXRpb24+XG5cbiAgICBvbkJVTygpOiB2b2lkXG4gICAgb25CTygpOiB2b2lkXG5cbiAgICBvbkJVT0w6IFNldDxMYW1iZGE+IHwgdW5kZWZpbmVkXG4gICAgb25CT0w6IFNldDxMYW1iZGE+IHwgdW5kZWZpbmVkXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBoYXNPYnNlcnZlcnMob2JzZXJ2YWJsZTogSU9ic2VydmFibGUpOiBib29sZWFuIHtcbiAgICByZXR1cm4gb2JzZXJ2YWJsZS5vYnNlcnZlcnNfICYmIG9ic2VydmFibGUub2JzZXJ2ZXJzXy5zaXplID4gMFxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0T2JzZXJ2ZXJzKG9ic2VydmFibGU6IElPYnNlcnZhYmxlKTogU2V0PElEZXJpdmF0aW9uPiB7XG4gICAgcmV0dXJuIG9ic2VydmFibGUub2JzZXJ2ZXJzX1xufVxuXG4vLyBmdW5jdGlvbiBpbnZhcmlhbnRPYnNlcnZlcnMob2JzZXJ2YWJsZTogSU9ic2VydmFibGUpIHtcbi8vICAgICBjb25zdCBsaXN0ID0gb2JzZXJ2YWJsZS5vYnNlcnZlcnNcbi8vICAgICBjb25zdCBtYXAgPSBvYnNlcnZhYmxlLm9ic2VydmVyc0luZGV4ZXNcbi8vICAgICBjb25zdCBsID0gbGlzdC5sZW5ndGhcbi8vICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGw7IGkrKykge1xuLy8gICAgICAgICBjb25zdCBpZCA9IGxpc3RbaV0uX19tYXBpZFxuLy8gICAgICAgICBpZiAoaSkge1xuLy8gICAgICAgICAgICAgaW52YXJpYW50KG1hcFtpZF0gPT09IGksIFwiSU5URVJOQUwgRVJST1IgbWFwcyBkZXJpdmF0aW9uLl9fbWFwaWQgdG8gaW5kZXggaW4gbGlzdFwiKSAvLyBmb3IgcGVyZm9ybWFuY2Vcbi8vICAgICAgICAgfSBlbHNlIHtcbi8vICAgICAgICAgICAgIGludmFyaWFudCghKGlkIGluIG1hcCksIFwiSU5URVJOQUwgRVJST1Igb2JzZXJ2ZXIgb24gaW5kZXggMCBzaG91bGRuJ3QgYmUgaGVsZCBpbiBtYXAuXCIpIC8vIGZvciBwZXJmb3JtYW5jZVxuLy8gICAgICAgICB9XG4vLyAgICAgfVxuLy8gICAgIGludmFyaWFudChcbi8vICAgICAgICAgbGlzdC5sZW5ndGggPT09IDAgfHwgT2JqZWN0LmtleXMobWFwKS5sZW5ndGggPT09IGxpc3QubGVuZ3RoIC0gMSxcbi8vICAgICAgICAgXCJJTlRFUk5BTCBFUlJPUiB0aGVyZSBpcyBubyBqdW5rIGluIG1hcFwiXG4vLyAgICAgKVxuLy8gfVxuZXhwb3J0IGZ1bmN0aW9uIGFkZE9ic2VydmVyKG9ic2VydmFibGU6IElPYnNlcnZhYmxlLCBub2RlOiBJRGVyaXZhdGlvbikge1xuICAgIC8vIGludmFyaWFudChub2RlLmRlcGVuZGVuY2llc1N0YXRlICE9PSAtMSwgXCJJTlRFUk5BTCBFUlJPUiwgY2FuIGFkZCBvbmx5IGRlcGVuZGVuY2llc1N0YXRlICE9PSAtMVwiKTtcbiAgICAvLyBpbnZhcmlhbnQob2JzZXJ2YWJsZS5fb2JzZXJ2ZXJzLmluZGV4T2Yobm9kZSkgPT09IC0xLCBcIklOVEVSTkFMIEVSUk9SIGFkZCBhbHJlYWR5IGFkZGVkIG5vZGVcIik7XG4gICAgLy8gaW52YXJpYW50T2JzZXJ2ZXJzKG9ic2VydmFibGUpO1xuXG4gICAgb2JzZXJ2YWJsZS5vYnNlcnZlcnNfLmFkZChub2RlKVxuICAgIGlmIChvYnNlcnZhYmxlLmxvd2VzdE9ic2VydmVyU3RhdGVfID4gbm9kZS5kZXBlbmRlbmNpZXNTdGF0ZV8pIHtcbiAgICAgICAgb2JzZXJ2YWJsZS5sb3dlc3RPYnNlcnZlclN0YXRlXyA9IG5vZGUuZGVwZW5kZW5jaWVzU3RhdGVfXG4gICAgfVxuXG4gICAgLy8gaW52YXJpYW50T2JzZXJ2ZXJzKG9ic2VydmFibGUpO1xuICAgIC8vIGludmFyaWFudChvYnNlcnZhYmxlLl9vYnNlcnZlcnMuaW5kZXhPZihub2RlKSAhPT0gLTEsIFwiSU5URVJOQUwgRVJST1IgZGlkbid0IGFkZCBub2RlXCIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlT2JzZXJ2ZXIob2JzZXJ2YWJsZTogSU9ic2VydmFibGUsIG5vZGU6IElEZXJpdmF0aW9uKSB7XG4gICAgLy8gaW52YXJpYW50KGdsb2JhbFN0YXRlLmluQmF0Y2ggPiAwLCBcIklOVEVSTkFMIEVSUk9SLCByZW1vdmUgc2hvdWxkIGJlIGNhbGxlZCBvbmx5IGluc2lkZSBiYXRjaFwiKTtcbiAgICAvLyBpbnZhcmlhbnQob2JzZXJ2YWJsZS5fb2JzZXJ2ZXJzLmluZGV4T2Yobm9kZSkgIT09IC0xLCBcIklOVEVSTkFMIEVSUk9SIHJlbW92ZSBhbHJlYWR5IHJlbW92ZWQgbm9kZVwiKTtcbiAgICAvLyBpbnZhcmlhbnRPYnNlcnZlcnMob2JzZXJ2YWJsZSk7XG4gICAgb2JzZXJ2YWJsZS5vYnNlcnZlcnNfLmRlbGV0ZShub2RlKVxuICAgIGlmIChvYnNlcnZhYmxlLm9ic2VydmVyc18uc2l6ZSA9PT0gMCkge1xuICAgICAgICAvLyBkZWxldGluZyBsYXN0IG9ic2VydmVyXG4gICAgICAgIHF1ZXVlRm9yVW5vYnNlcnZhdGlvbihvYnNlcnZhYmxlKVxuICAgIH1cbiAgICAvLyBpbnZhcmlhbnRPYnNlcnZlcnMob2JzZXJ2YWJsZSk7XG4gICAgLy8gaW52YXJpYW50KG9ic2VydmFibGUuX29ic2VydmVycy5pbmRleE9mKG5vZGUpID09PSAtMSwgXCJJTlRFUk5BTCBFUlJPUiByZW1vdmUgYWxyZWFkeSByZW1vdmVkIG5vZGUyXCIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcXVldWVGb3JVbm9ic2VydmF0aW9uKG9ic2VydmFibGU6IElPYnNlcnZhYmxlKSB7XG4gICAgaWYgKG9ic2VydmFibGUuaXNQZW5kaW5nVW5vYnNlcnZhdGlvbl8gPT09IGZhbHNlKSB7XG4gICAgICAgIC8vIGludmFyaWFudChvYnNlcnZhYmxlLl9vYnNlcnZlcnMubGVuZ3RoID09PSAwLCBcIklOVEVSTkFMIEVSUk9SLCBzaG91bGQgb25seSBxdWV1ZSBmb3IgdW5vYnNlcnZhdGlvbiB1bm9ic2VydmVkIG9ic2VydmFibGVzXCIpO1xuICAgICAgICBvYnNlcnZhYmxlLmlzUGVuZGluZ1Vub2JzZXJ2YXRpb25fID0gdHJ1ZVxuICAgICAgICBnbG9iYWxTdGF0ZS5wZW5kaW5nVW5vYnNlcnZhdGlvbnMucHVzaChvYnNlcnZhYmxlKVxuICAgIH1cbn1cblxuLyoqXG4gKiBCYXRjaCBzdGFydHMgYSB0cmFuc2FjdGlvbiwgYXQgbGVhc3QgZm9yIHB1cnBvc2VzIG9mIG1lbW9pemluZyBDb21wdXRlZFZhbHVlcyB3aGVuIG5vdGhpbmcgZWxzZSBkb2VzLlxuICogRHVyaW5nIGEgYmF0Y2ggYG9uQmVjb21lVW5vYnNlcnZlZGAgd2lsbCBiZSBjYWxsZWQgYXQgbW9zdCBvbmNlIHBlciBvYnNlcnZhYmxlLlxuICogQXZvaWRzIHVubmVjZXNzYXJ5IHJlY2FsY3VsYXRpb25zLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RhcnRCYXRjaCgpIHtcbiAgICBnbG9iYWxTdGF0ZS5pbkJhdGNoKytcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGVuZEJhdGNoKCkge1xuICAgIGlmICgtLWdsb2JhbFN0YXRlLmluQmF0Y2ggPT09IDApIHtcbiAgICAgICAgcnVuUmVhY3Rpb25zKClcbiAgICAgICAgLy8gdGhlIGJhdGNoIGlzIGFjdHVhbGx5IGFib3V0IHRvIGZpbmlzaCwgYWxsIHVub2JzZXJ2aW5nIHNob3VsZCBoYXBwZW4gaGVyZS5cbiAgICAgICAgY29uc3QgbGlzdCA9IGdsb2JhbFN0YXRlLnBlbmRpbmdVbm9ic2VydmF0aW9uc1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGNvbnN0IG9ic2VydmFibGUgPSBsaXN0W2ldXG4gICAgICAgICAgICBvYnNlcnZhYmxlLmlzUGVuZGluZ1Vub2JzZXJ2YXRpb25fID0gZmFsc2VcbiAgICAgICAgICAgIGlmIChvYnNlcnZhYmxlLm9ic2VydmVyc18uc2l6ZSA9PT0gMCkge1xuICAgICAgICAgICAgICAgIGlmIChvYnNlcnZhYmxlLmlzQmVpbmdPYnNlcnZlZF8pIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gaWYgdGhpcyBvYnNlcnZhYmxlIGhhZCByZWFjdGl2ZSBvYnNlcnZlcnMsIHRyaWdnZXIgdGhlIGhvb2tzXG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmFibGUuaXNCZWluZ09ic2VydmVkXyA9IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgIG9ic2VydmFibGUub25CVU8oKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAob2JzZXJ2YWJsZSBpbnN0YW5jZW9mIENvbXB1dGVkVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gY29tcHV0ZWQgdmFsdWVzIGFyZSBhdXRvbWF0aWNhbGx5IHRlYXJlZCBkb3duIHdoZW4gdGhlIGxhc3Qgb2JzZXJ2ZXIgbGVhdmVzXG4gICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgcHJvY2VzcyBoYXBwZW5zIHJlY3Vyc2l2ZWx5LCB0aGlzIGNvbXB1dGVkIG1pZ2h0IGJlIHRoZSBsYXN0IG9ic2VydmFiZSBvZiBhbm90aGVyLCBldGMuLlxuICAgICAgICAgICAgICAgICAgICBvYnNlcnZhYmxlLnN1c3BlbmRfKClcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZ2xvYmFsU3RhdGUucGVuZGluZ1Vub2JzZXJ2YXRpb25zID0gW11cbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXBvcnRPYnNlcnZlZChvYnNlcnZhYmxlOiBJT2JzZXJ2YWJsZSk6IGJvb2xlYW4ge1xuICAgIGNoZWNrSWZTdGF0ZVJlYWRzQXJlQWxsb3dlZChvYnNlcnZhYmxlKVxuXG4gICAgY29uc3QgZGVyaXZhdGlvbiA9IGdsb2JhbFN0YXRlLnRyYWNraW5nRGVyaXZhdGlvblxuICAgIGlmIChkZXJpdmF0aW9uICE9PSBudWxsKSB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTaW1wbGUgb3B0aW1pemF0aW9uLCBnaXZlIGVhY2ggZGVyaXZhdGlvbiBydW4gYW4gdW5pcXVlIGlkIChydW5JZClcbiAgICAgICAgICogQ2hlY2sgaWYgbGFzdCB0aW1lIHRoaXMgb2JzZXJ2YWJsZSB3YXMgYWNjZXNzZWQgdGhlIHNhbWUgcnVuSWQgaXMgdXNlZFxuICAgICAgICAgKiBpZiB0aGlzIGlzIHRoZSBjYXNlLCB0aGUgcmVsYXRpb24gaXMgYWxyZWFkeSBrbm93blxuICAgICAgICAgKi9cbiAgICAgICAgaWYgKGRlcml2YXRpb24ucnVuSWRfICE9PSBvYnNlcnZhYmxlLmxhc3RBY2Nlc3NlZEJ5Xykge1xuICAgICAgICAgICAgb2JzZXJ2YWJsZS5sYXN0QWNjZXNzZWRCeV8gPSBkZXJpdmF0aW9uLnJ1bklkX1xuICAgICAgICAgICAgLy8gVHJpZWQgc3RvcmluZyBuZXdPYnNlcnZpbmcsIG9yIG9ic2VydmluZywgb3IgYm90aCBhcyBTZXQsIGJ1dCBwZXJmb3JtYW5jZSBkaWRuJ3QgY29tZSBjbG9zZS4uLlxuICAgICAgICAgICAgZGVyaXZhdGlvbi5uZXdPYnNlcnZpbmdfIVtkZXJpdmF0aW9uLnVuYm91bmREZXBzQ291bnRfKytdID0gb2JzZXJ2YWJsZVxuICAgICAgICAgICAgaWYgKCFvYnNlcnZhYmxlLmlzQmVpbmdPYnNlcnZlZF8gJiYgZ2xvYmFsU3RhdGUudHJhY2tpbmdDb250ZXh0KSB7XG4gICAgICAgICAgICAgICAgb2JzZXJ2YWJsZS5pc0JlaW5nT2JzZXJ2ZWRfID0gdHJ1ZVxuICAgICAgICAgICAgICAgIG9ic2VydmFibGUub25CTygpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9ic2VydmFibGUuaXNCZWluZ09ic2VydmVkX1xuICAgIH0gZWxzZSBpZiAob2JzZXJ2YWJsZS5vYnNlcnZlcnNfLnNpemUgPT09IDAgJiYgZ2xvYmFsU3RhdGUuaW5CYXRjaCA+IDApIHtcbiAgICAgICAgcXVldWVGb3JVbm9ic2VydmF0aW9uKG9ic2VydmFibGUpXG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlXG59XG5cbi8vIGZ1bmN0aW9uIGludmFyaWFudExPUyhvYnNlcnZhYmxlOiBJT2JzZXJ2YWJsZSwgbXNnOiBzdHJpbmcpIHtcbi8vICAgICAvLyBpdCdzIGV4cGVuc2l2ZSBzbyBiZXR0ZXIgbm90IHJ1biBpdCBpbiBwcm9kdWNpdG9uLiBidXQgdGVtcG9yYXJpbHkgaGVscGZ1bCBmb3IgdGVzdGluZ1xuLy8gICAgIGNvbnN0IG1pbiA9IGdldE9ic2VydmVycyhvYnNlcnZhYmxlKS5yZWR1Y2UoKGEsIGIpID0+IE1hdGgubWluKGEsIGIuZGVwZW5kZW5jaWVzU3RhdGUpLCAyKVxuLy8gICAgIGlmIChtaW4gPj0gb2JzZXJ2YWJsZS5sb3dlc3RPYnNlcnZlclN0YXRlKSByZXR1cm4gLy8gPC0gdGhlIG9ubHkgYXNzdW1wdGlvbiBhYm91dCBgbG93ZXN0T2JzZXJ2ZXJTdGF0ZWBcbi8vICAgICB0aHJvdyBuZXcgRXJyb3IoXG4vLyAgICAgICAgIFwibG93ZXN0T2JzZXJ2ZXJTdGF0ZSBpcyB3cm9uZyBmb3IgXCIgK1xuLy8gICAgICAgICAgICAgbXNnICtcbi8vICAgICAgICAgICAgIFwiIGJlY2F1c2UgXCIgK1xuLy8gICAgICAgICAgICAgbWluICtcbi8vICAgICAgICAgICAgIFwiIDwgXCIgK1xuLy8gICAgICAgICAgICAgb2JzZXJ2YWJsZS5sb3dlc3RPYnNlcnZlclN0YXRlXG4vLyAgICAgKVxuLy8gfVxuXG4vKipcbiAqIE5PVEU6IGN1cnJlbnQgcHJvcGFnYXRpb24gbWVjaGFuaXNtIHdpbGwgaW4gY2FzZSBvZiBzZWxmIHJlcnVuaW5nIGF1dG9ydW5zIGJlaGF2ZSB1bmV4cGVjdGVkbHlcbiAqIEl0IHdpbGwgcHJvcGFnYXRlIGNoYW5nZXMgdG8gb2JzZXJ2ZXJzIGZyb20gcHJldmlvdXMgcnVuXG4gKiBJdCdzIGhhcmQgb3IgbWF5YmUgaW1wb3NzaWJsZSAod2l0aCByZWFzb25hYmxlIHBlcmYpIHRvIGdldCBpdCByaWdodCB3aXRoIGN1cnJlbnQgYXBwcm9hY2hcbiAqIEhvcGVmdWxseSBzZWxmIHJlcnVuaW5nIGF1dG9ydW5zIGFyZW4ndCBhIGZlYXR1cmUgcGVvcGxlIHNob3VsZCBkZXBlbmQgb25cbiAqIEFsc28gbW9zdCBiYXNpYyB1c2UgY2FzZXMgc2hvdWxkIGJlIG9rXG4gKi9cblxuLy8gQ2FsbGVkIGJ5IEF0b20gd2hlbiBpdHMgdmFsdWUgY2hhbmdlc1xuZXhwb3J0IGZ1bmN0aW9uIHByb3BhZ2F0ZUNoYW5nZWQob2JzZXJ2YWJsZTogSU9ic2VydmFibGUpIHtcbiAgICAvLyBpbnZhcmlhbnRMT1Mob2JzZXJ2YWJsZSwgXCJjaGFuZ2VkIHN0YXJ0XCIpO1xuICAgIGlmIChvYnNlcnZhYmxlLmxvd2VzdE9ic2VydmVyU3RhdGVfID09PSBJRGVyaXZhdGlvblN0YXRlXy5TVEFMRV8pIHtcbiAgICAgICAgcmV0dXJuXG4gICAgfVxuICAgIG9ic2VydmFibGUubG93ZXN0T2JzZXJ2ZXJTdGF0ZV8gPSBJRGVyaXZhdGlvblN0YXRlXy5TVEFMRV9cblxuICAgIC8vIElkZWFsbHkgd2UgdXNlIGZvci4ub2YgaGVyZSwgYnV0IHRoZSBkb3duY29tcGlsZWQgdmVyc2lvbiBpcyByZWFsbHkgc2xvdy4uLlxuICAgIG9ic2VydmFibGUub2JzZXJ2ZXJzXy5mb3JFYWNoKGQgPT4ge1xuICAgICAgICBpZiAoZC5kZXBlbmRlbmNpZXNTdGF0ZV8gPT09IElEZXJpdmF0aW9uU3RhdGVfLlVQX1RPX0RBVEVfKSB7XG4gICAgICAgICAgICBpZiAoX19ERVZfXyAmJiBkLmlzVHJhY2luZ18gIT09IFRyYWNlTW9kZS5OT05FKSB7XG4gICAgICAgICAgICAgICAgbG9nVHJhY2VJbmZvKGQsIG9ic2VydmFibGUpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkLm9uQmVjb21lU3RhbGVfKClcbiAgICAgICAgfVxuICAgICAgICBkLmRlcGVuZGVuY2llc1N0YXRlXyA9IElEZXJpdmF0aW9uU3RhdGVfLlNUQUxFX1xuICAgIH0pXG4gICAgLy8gaW52YXJpYW50TE9TKG9ic2VydmFibGUsIFwiY2hhbmdlZCBlbmRcIik7XG59XG5cbi8vIENhbGxlZCBieSBDb21wdXRlZFZhbHVlIHdoZW4gaXQgcmVjYWxjdWxhdGUgYW5kIGl0cyB2YWx1ZSBjaGFuZ2VkXG5leHBvcnQgZnVuY3Rpb24gcHJvcGFnYXRlQ2hhbmdlQ29uZmlybWVkKG9ic2VydmFibGU6IElPYnNlcnZhYmxlKSB7XG4gICAgLy8gaW52YXJpYW50TE9TKG9ic2VydmFibGUsIFwiY29uZmlybWVkIHN0YXJ0XCIpO1xuICAgIGlmIChvYnNlcnZhYmxlLmxvd2VzdE9ic2VydmVyU3RhdGVfID09PSBJRGVyaXZhdGlvblN0YXRlXy5TVEFMRV8pIHtcbiAgICAgICAgcmV0dXJuXG4gICAgfVxuICAgIG9ic2VydmFibGUubG93ZXN0T2JzZXJ2ZXJTdGF0ZV8gPSBJRGVyaXZhdGlvblN0YXRlXy5TVEFMRV9cblxuICAgIG9ic2VydmFibGUub2JzZXJ2ZXJzXy5mb3JFYWNoKGQgPT4ge1xuICAgICAgICBpZiAoZC5kZXBlbmRlbmNpZXNTdGF0ZV8gPT09IElEZXJpdmF0aW9uU3RhdGVfLlBPU1NJQkxZX1NUQUxFXykge1xuICAgICAgICAgICAgZC5kZXBlbmRlbmNpZXNTdGF0ZV8gPSBJRGVyaXZhdGlvblN0YXRlXy5TVEFMRV9cbiAgICAgICAgICAgIGlmIChfX0RFVl9fICYmIGQuaXNUcmFjaW5nXyAhPT0gVHJhY2VNb2RlLk5PTkUpIHtcbiAgICAgICAgICAgICAgICBsb2dUcmFjZUluZm8oZCwgb2JzZXJ2YWJsZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgICAgIGQuZGVwZW5kZW5jaWVzU3RhdGVfID09PSBJRGVyaXZhdGlvblN0YXRlXy5VUF9UT19EQVRFXyAvLyB0aGlzIGhhcHBlbnMgZHVyaW5nIGNvbXB1dGluZyBvZiBgZGAsIGp1c3Qga2VlcCBsb3dlc3RPYnNlcnZlclN0YXRlIHVwIHRvIGRhdGUuXG4gICAgICAgICkge1xuICAgICAgICAgICAgb2JzZXJ2YWJsZS5sb3dlc3RPYnNlcnZlclN0YXRlXyA9IElEZXJpdmF0aW9uU3RhdGVfLlVQX1RPX0RBVEVfXG4gICAgICAgIH1cbiAgICB9KVxuICAgIC8vIGludmFyaWFudExPUyhvYnNlcnZhYmxlLCBcImNvbmZpcm1lZCBlbmRcIik7XG59XG5cbi8vIFVzZWQgYnkgY29tcHV0ZWQgd2hlbiBpdHMgZGVwZW5kZW5jeSBjaGFuZ2VkLCBidXQgd2UgZG9uJ3Qgd2FuJ3QgdG8gaW1tZWRpYXRlbHkgcmVjb21wdXRlLlxuZXhwb3J0IGZ1bmN0aW9uIHByb3BhZ2F0ZU1heWJlQ2hhbmdlZChvYnNlcnZhYmxlOiBJT2JzZXJ2YWJsZSkge1xuICAgIC8vIGludmFyaWFudExPUyhvYnNlcnZhYmxlLCBcIm1heWJlIHN0YXJ0XCIpO1xuICAgIGlmIChvYnNlcnZhYmxlLmxvd2VzdE9ic2VydmVyU3RhdGVfICE9PSBJRGVyaXZhdGlvblN0YXRlXy5VUF9UT19EQVRFXykge1xuICAgICAgICByZXR1cm5cbiAgICB9XG4gICAgb2JzZXJ2YWJsZS5sb3dlc3RPYnNlcnZlclN0YXRlXyA9IElEZXJpdmF0aW9uU3RhdGVfLlBPU1NJQkxZX1NUQUxFX1xuXG4gICAgb2JzZXJ2YWJsZS5vYnNlcnZlcnNfLmZvckVhY2goZCA9PiB7XG4gICAgICAgIGlmIChkLmRlcGVuZGVuY2llc1N0YXRlXyA9PT0gSURlcml2YXRpb25TdGF0ZV8uVVBfVE9fREFURV8pIHtcbiAgICAgICAgICAgIGQuZGVwZW5kZW5jaWVzU3RhdGVfID0gSURlcml2YXRpb25TdGF0ZV8uUE9TU0lCTFlfU1RBTEVfXG4gICAgICAgICAgICBkLm9uQmVjb21lU3RhbGVfKClcbiAgICAgICAgfVxuICAgIH0pXG4gICAgLy8gaW52YXJpYW50TE9TKG9ic2VydmFibGUsIFwibWF5YmUgZW5kXCIpO1xufVxuXG5mdW5jdGlvbiBsb2dUcmFjZUluZm8oZGVyaXZhdGlvbjogSURlcml2YXRpb24sIG9ic2VydmFibGU6IElPYnNlcnZhYmxlKSB7XG4gICAgY29uc29sZS5sb2coXG4gICAgICAgIGBbbW9ieC50cmFjZV0gJyR7ZGVyaXZhdGlvbi5uYW1lX30nIGlzIGludmFsaWRhdGVkIGR1ZSB0byBhIGNoYW5nZSBpbjogJyR7b2JzZXJ2YWJsZS5uYW1lX30nYFxuICAgIClcbiAgICBpZiAoZGVyaXZhdGlvbi5pc1RyYWNpbmdfID09PSBUcmFjZU1vZGUuQlJFQUspIHtcbiAgICAgICAgY29uc3QgbGluZXMgPSBbXVxuICAgICAgICBwcmludERlcFRyZWUoZ2V0RGVwZW5kZW5jeVRyZWUoZGVyaXZhdGlvbiksIGxpbmVzLCAxKVxuXG4gICAgICAgIC8vIHByZXR0aWVyLWlnbm9yZVxuICAgICAgICBuZXcgRnVuY3Rpb24oXG5gZGVidWdnZXI7XG4vKlxuVHJhY2luZyAnJHtkZXJpdmF0aW9uLm5hbWVffSdcblxuWW91IGFyZSBlbnRlcmluZyB0aGlzIGJyZWFrIHBvaW50IGJlY2F1c2UgZGVyaXZhdGlvbiAnJHtkZXJpdmF0aW9uLm5hbWVffScgaXMgYmVpbmcgdHJhY2VkIGFuZCAnJHtvYnNlcnZhYmxlLm5hbWVffScgaXMgbm93IGZvcmNpbmcgaXQgdG8gdXBkYXRlLlxuSnVzdCBmb2xsb3cgdGhlIHN0YWNrdHJhY2UgeW91IHNob3VsZCBub3cgc2VlIGluIHRoZSBkZXZ0b29scyB0byBzZWUgcHJlY2lzZWx5IHdoYXQgcGllY2Ugb2YgeW91ciBjb2RlIGlzIGNhdXNpbmcgdGhpcyB1cGRhdGVcblRoZSBzdGFja2ZyYW1lIHlvdSBhcmUgbG9va2luZyBmb3IgaXMgYXQgbGVhc3QgfjYtOCBzdGFjay1mcmFtZXMgdXAuXG5cbiR7ZGVyaXZhdGlvbiBpbnN0YW5jZW9mIENvbXB1dGVkVmFsdWUgPyBkZXJpdmF0aW9uLmRlcml2YXRpb24udG9TdHJpbmcoKS5yZXBsYWNlKC9bKl1cXC8vZywgXCIvXCIpIDogXCJcIn1cblxuVGhlIGRlcGVuZGVuY2llcyBmb3IgdGhpcyBkZXJpdmF0aW9uIGFyZTpcblxuJHtsaW5lcy5qb2luKFwiXFxuXCIpfVxuKi9cbiAgICBgKSgpXG4gICAgfVxufVxuXG5mdW5jdGlvbiBwcmludERlcFRyZWUodHJlZTogSURlcGVuZGVuY3lUcmVlLCBsaW5lczogc3RyaW5nW10sIGRlcHRoOiBudW1iZXIpIHtcbiAgICBpZiAobGluZXMubGVuZ3RoID49IDEwMDApIHtcbiAgICAgICAgbGluZXMucHVzaChcIihhbmQgbWFueSBtb3JlKVwiKVxuICAgICAgICByZXR1cm5cbiAgICB9XG4gICAgbGluZXMucHVzaChgJHtcIlxcdFwiLnJlcGVhdChkZXB0aCAtIDEpfSR7dHJlZS5uYW1lfWApXG4gICAgaWYgKHRyZWUuZGVwZW5kZW5jaWVzKSB7XG4gICAgICAgIHRyZWUuZGVwZW5kZW5jaWVzLmZvckVhY2goY2hpbGQgPT4gcHJpbnREZXBUcmVlKGNoaWxkLCBsaW5lcywgZGVwdGggKyAxKSlcbiAgICB9XG59XG4iLCJpbXBvcnQge1xuICAgIEVNUFRZX09CSkVDVCxcbiAgICBJRXF1YWxzQ29tcGFyZXIsXG4gICAgSVJlYWN0aW9uRGlzcG9zZXIsXG4gICAgSVJlYWN0aW9uUHVibGljLFxuICAgIExhbWJkYSxcbiAgICBSZWFjdGlvbixcbiAgICBhY3Rpb24sXG4gICAgY29tcGFyZXIsXG4gICAgZ2V0TmV4dElkLFxuICAgIGlzQWN0aW9uLFxuICAgIGlzRnVuY3Rpb24sXG4gICAgaXNQbGFpbk9iamVjdCxcbiAgICBkaWUsXG4gICAgYWxsb3dTdGF0ZUNoYW5nZXNcbn0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuZXhwb3J0IGludGVyZmFjZSBJQXV0b3J1bk9wdGlvbnMge1xuICAgIGRlbGF5PzogbnVtYmVyXG4gICAgbmFtZT86IHN0cmluZ1xuICAgIC8qKlxuICAgICAqIEV4cGVyaW1lbnRhbC5cbiAgICAgKiBXYXJucyBpZiB0aGUgdmlldyBkb2Vzbid0IHRyYWNrIG9ic2VydmFibGVzXG4gICAgICovXG4gICAgcmVxdWlyZXNPYnNlcnZhYmxlPzogYm9vbGVhblxuICAgIHNjaGVkdWxlcj86IChjYWxsYmFjazogKCkgPT4gdm9pZCkgPT4gYW55XG4gICAgb25FcnJvcj86IChlcnJvcjogYW55KSA9PiB2b2lkXG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5hbWVkIHJlYWN0aXZlIHZpZXcgYW5kIGtlZXBzIGl0IGFsaXZlLCBzbyB0aGF0IHRoZSB2aWV3IGlzIGFsd2F5c1xuICogdXBkYXRlZCBpZiBvbmUgb2YgdGhlIGRlcGVuZGVuY2llcyBjaGFuZ2VzLCBldmVuIHdoZW4gdGhlIHZpZXcgaXMgbm90IGZ1cnRoZXIgdXNlZCBieSBzb21ldGhpbmcgZWxzZS5cbiAqIEBwYXJhbSB2aWV3IFRoZSByZWFjdGl2ZSB2aWV3XG4gKiBAcmV0dXJucyBkaXNwb3NlciBmdW5jdGlvbiwgd2hpY2ggY2FuIGJlIHVzZWQgdG8gc3RvcCB0aGUgdmlldyBmcm9tIGJlaW5nIHVwZGF0ZWQgaW4gdGhlIGZ1dHVyZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGF1dG9ydW4oXG4gICAgdmlldzogKHI6IElSZWFjdGlvblB1YmxpYykgPT4gYW55LFxuICAgIG9wdHM6IElBdXRvcnVuT3B0aW9ucyA9IEVNUFRZX09CSkVDVFxuKTogSVJlYWN0aW9uRGlzcG9zZXIge1xuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICAgIGlmICghaXNGdW5jdGlvbih2aWV3KSkge1xuICAgICAgICAgICAgZGllKFwiQXV0b3J1biBleHBlY3RzIGEgZnVuY3Rpb24gYXMgZmlyc3QgYXJndW1lbnRcIilcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNBY3Rpb24odmlldykpIHtcbiAgICAgICAgICAgIGRpZShcIkF1dG9ydW4gZG9lcyBub3QgYWNjZXB0IGFjdGlvbnMgc2luY2UgYWN0aW9ucyBhcmUgdW50cmFja2FibGVcIilcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IG5hbWU6IHN0cmluZyA9XG4gICAgICAgIG9wdHM/Lm5hbWUgPz8gKF9fREVWX18gPyAodmlldyBhcyBhbnkpLm5hbWUgfHwgXCJBdXRvcnVuQFwiICsgZ2V0TmV4dElkKCkgOiBcIkF1dG9ydW5cIilcbiAgICBjb25zdCBydW5TeW5jID0gIW9wdHMuc2NoZWR1bGVyICYmICFvcHRzLmRlbGF5XG4gICAgbGV0IHJlYWN0aW9uOiBSZWFjdGlvblxuXG4gICAgaWYgKHJ1blN5bmMpIHtcbiAgICAgICAgLy8gbm9ybWFsIGF1dG9ydW5cbiAgICAgICAgcmVhY3Rpb24gPSBuZXcgUmVhY3Rpb24oXG4gICAgICAgICAgICBuYW1lLFxuICAgICAgICAgICAgZnVuY3Rpb24gKHRoaXM6IFJlYWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgdGhpcy50cmFjayhyZWFjdGlvblJ1bm5lcilcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBvcHRzLm9uRXJyb3IsXG4gICAgICAgICAgICBvcHRzLnJlcXVpcmVzT2JzZXJ2YWJsZVxuICAgICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3Qgc2NoZWR1bGVyID0gY3JlYXRlU2NoZWR1bGVyRnJvbU9wdGlvbnMob3B0cylcbiAgICAgICAgLy8gZGVib3VuY2VkIGF1dG9ydW5cbiAgICAgICAgbGV0IGlzU2NoZWR1bGVkID0gZmFsc2VcblxuICAgICAgICByZWFjdGlvbiA9IG5ldyBSZWFjdGlvbihcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKCFpc1NjaGVkdWxlZCkge1xuICAgICAgICAgICAgICAgICAgICBpc1NjaGVkdWxlZCA9IHRydWVcbiAgICAgICAgICAgICAgICAgICAgc2NoZWR1bGVyKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzU2NoZWR1bGVkID0gZmFsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghcmVhY3Rpb24uaXNEaXNwb3NlZF8pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWFjdGlvbi50cmFjayhyZWFjdGlvblJ1bm5lcilcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb3B0cy5vbkVycm9yLFxuICAgICAgICAgICAgb3B0cy5yZXF1aXJlc09ic2VydmFibGVcbiAgICAgICAgKVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlYWN0aW9uUnVubmVyKCkge1xuICAgICAgICB2aWV3KHJlYWN0aW9uKVxuICAgIH1cblxuICAgIHJlYWN0aW9uLnNjaGVkdWxlXygpXG4gICAgcmV0dXJuIHJlYWN0aW9uLmdldERpc3Bvc2VyXygpXG59XG5cbmV4cG9ydCB0eXBlIElSZWFjdGlvbk9wdGlvbnM8VCwgRmlyZUltbWVkaWF0ZWx5IGV4dGVuZHMgYm9vbGVhbj4gPSBJQXV0b3J1bk9wdGlvbnMgJiB7XG4gICAgZmlyZUltbWVkaWF0ZWx5PzogRmlyZUltbWVkaWF0ZWx5XG4gICAgZXF1YWxzPzogSUVxdWFsc0NvbXBhcmVyPFQ+XG59XG5cbmNvbnN0IHJ1biA9IChmOiBMYW1iZGEpID0+IGYoKVxuXG5mdW5jdGlvbiBjcmVhdGVTY2hlZHVsZXJGcm9tT3B0aW9ucyhvcHRzOiBJQXV0b3J1bk9wdGlvbnMpIHtcbiAgICByZXR1cm4gb3B0cy5zY2hlZHVsZXJcbiAgICAgICAgPyBvcHRzLnNjaGVkdWxlclxuICAgICAgICA6IG9wdHMuZGVsYXlcbiAgICAgICAgPyAoZjogTGFtYmRhKSA9PiBzZXRUaW1lb3V0KGYsIG9wdHMuZGVsYXkhKVxuICAgICAgICA6IHJ1blxufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVhY3Rpb248VCwgRmlyZUltbWVkaWF0ZWx5IGV4dGVuZHMgYm9vbGVhbiA9IGZhbHNlPihcbiAgICBleHByZXNzaW9uOiAocjogSVJlYWN0aW9uUHVibGljKSA9PiBULFxuICAgIGVmZmVjdDogKFxuICAgICAgICBhcmc6IFQsXG4gICAgICAgIHByZXY6IEZpcmVJbW1lZGlhdGVseSBleHRlbmRzIHRydWUgPyBUIHwgdW5kZWZpbmVkIDogVCxcbiAgICAgICAgcjogSVJlYWN0aW9uUHVibGljXG4gICAgKSA9PiB2b2lkLFxuICAgIG9wdHM6IElSZWFjdGlvbk9wdGlvbnM8VCwgRmlyZUltbWVkaWF0ZWx5PiA9IEVNUFRZX09CSkVDVFxuKTogSVJlYWN0aW9uRGlzcG9zZXIge1xuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICAgIGlmICghaXNGdW5jdGlvbihleHByZXNzaW9uKSB8fCAhaXNGdW5jdGlvbihlZmZlY3QpKSB7XG4gICAgICAgICAgICBkaWUoXCJGaXJzdCBhbmQgc2Vjb25kIGFyZ3VtZW50IHRvIHJlYWN0aW9uIHNob3VsZCBiZSBmdW5jdGlvbnNcIilcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzUGxhaW5PYmplY3Qob3B0cykpIHtcbiAgICAgICAgICAgIGRpZShcIlRoaXJkIGFyZ3VtZW50IG9mIHJlYWN0aW9ucyBzaG91bGQgYmUgYW4gb2JqZWN0XCIpXG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgbmFtZSA9IG9wdHMubmFtZSA/PyAoX19ERVZfXyA/IFwiUmVhY3Rpb25AXCIgKyBnZXROZXh0SWQoKSA6IFwiUmVhY3Rpb25cIilcbiAgICBjb25zdCBlZmZlY3RBY3Rpb24gPSBhY3Rpb24oXG4gICAgICAgIG5hbWUsXG4gICAgICAgIG9wdHMub25FcnJvciA/IHdyYXBFcnJvckhhbmRsZXIob3B0cy5vbkVycm9yLCBlZmZlY3QpIDogZWZmZWN0XG4gICAgKVxuICAgIGNvbnN0IHJ1blN5bmMgPSAhb3B0cy5zY2hlZHVsZXIgJiYgIW9wdHMuZGVsYXlcbiAgICBjb25zdCBzY2hlZHVsZXIgPSBjcmVhdGVTY2hlZHVsZXJGcm9tT3B0aW9ucyhvcHRzKVxuXG4gICAgbGV0IGZpcnN0VGltZSA9IHRydWVcbiAgICBsZXQgaXNTY2hlZHVsZWQgPSBmYWxzZVxuICAgIGxldCB2YWx1ZTogVFxuICAgIGxldCBvbGRWYWx1ZTogVCB8IHVuZGVmaW5lZFxuXG4gICAgY29uc3QgZXF1YWxzOiBJRXF1YWxzQ29tcGFyZXI8VD4gPSAob3B0cyBhcyBhbnkpLmNvbXBhcmVTdHJ1Y3R1cmFsXG4gICAgICAgID8gY29tcGFyZXIuc3RydWN0dXJhbFxuICAgICAgICA6IG9wdHMuZXF1YWxzIHx8IGNvbXBhcmVyLmRlZmF1bHRcblxuICAgIGNvbnN0IHIgPSBuZXcgUmVhY3Rpb24oXG4gICAgICAgIG5hbWUsXG4gICAgICAgICgpID0+IHtcbiAgICAgICAgICAgIGlmIChmaXJzdFRpbWUgfHwgcnVuU3luYykge1xuICAgICAgICAgICAgICAgIHJlYWN0aW9uUnVubmVyKClcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIWlzU2NoZWR1bGVkKSB7XG4gICAgICAgICAgICAgICAgaXNTY2hlZHVsZWQgPSB0cnVlXG4gICAgICAgICAgICAgICAgc2NoZWR1bGVyIShyZWFjdGlvblJ1bm5lcilcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgb3B0cy5vbkVycm9yLFxuICAgICAgICBvcHRzLnJlcXVpcmVzT2JzZXJ2YWJsZVxuICAgIClcblxuICAgIGZ1bmN0aW9uIHJlYWN0aW9uUnVubmVyKCkge1xuICAgICAgICBpc1NjaGVkdWxlZCA9IGZhbHNlXG4gICAgICAgIGlmIChyLmlzRGlzcG9zZWRfKSB7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBsZXQgY2hhbmdlZDogYm9vbGVhbiA9IGZhbHNlXG4gICAgICAgIHIudHJhY2soKCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgbmV4dFZhbHVlID0gYWxsb3dTdGF0ZUNoYW5nZXMoZmFsc2UsICgpID0+IGV4cHJlc3Npb24ocikpXG4gICAgICAgICAgICBjaGFuZ2VkID0gZmlyc3RUaW1lIHx8ICFlcXVhbHModmFsdWUsIG5leHRWYWx1ZSlcbiAgICAgICAgICAgIG9sZFZhbHVlID0gdmFsdWVcbiAgICAgICAgICAgIHZhbHVlID0gbmV4dFZhbHVlXG4gICAgICAgIH0pXG5cbiAgICAgICAgLy8gVGhpcyBjYXN0aW5nIGlzIG5lc2Vzc2FyeSBhcyBUUyBjYW5ub3QgaW5mZXIgcHJvcGVyIHR5cGUgaW4gY3VycmVudCBmdW5jaXRvbiBpbXBsZW1lbnRhdGlvblxuICAgICAgICB0eXBlIE9sZFZhbHVlID0gRmlyZUltbWVkaWF0ZWx5IGV4dGVuZHMgdHJ1ZSA/IFQgfCB1bmRlZmluZWQgOiBUXG4gICAgICAgIGlmIChmaXJzdFRpbWUgJiYgb3B0cy5maXJlSW1tZWRpYXRlbHkhKSB7XG4gICAgICAgICAgICBlZmZlY3RBY3Rpb24odmFsdWUsIG9sZFZhbHVlIGFzIE9sZFZhbHVlLCByKVxuICAgICAgICB9IGVsc2UgaWYgKCFmaXJzdFRpbWUgJiYgY2hhbmdlZCkge1xuICAgICAgICAgICAgZWZmZWN0QWN0aW9uKHZhbHVlLCBvbGRWYWx1ZSBhcyBPbGRWYWx1ZSwgcilcbiAgICAgICAgfVxuICAgICAgICBmaXJzdFRpbWUgPSBmYWxzZVxuICAgIH1cblxuICAgIHIuc2NoZWR1bGVfKClcbiAgICByZXR1cm4gci5nZXREaXNwb3Nlcl8oKVxufVxuXG5mdW5jdGlvbiB3cmFwRXJyb3JIYW5kbGVyKGVycm9ySGFuZGxlciwgYmFzZUZuKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHJldHVybiBiYXNlRm4uYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBlcnJvckhhbmRsZXIuY2FsbCh0aGlzLCBlKVxuICAgICAgICB9XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgSURlcml2YXRpb24sIElPYnNlcnZhYmxlLCBSZWFjdGlvbiwgZGllLCBnZXRHbG9iYWwgfSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuaW1wb3J0IHsgQ29tcHV0ZWRWYWx1ZSB9IGZyb20gXCIuL2NvbXB1dGVkdmFsdWVcIlxuXG4vKipcbiAqIFRoZXNlIHZhbHVlcyB3aWxsIHBlcnNpc3QgaWYgZ2xvYmFsIHN0YXRlIGlzIHJlc2V0XG4gKi9cbmNvbnN0IHBlcnNpc3RlbnRLZXlzOiAoa2V5b2YgTW9iWEdsb2JhbHMpW10gPSBbXG4gICAgXCJtb2J4R3VpZFwiLFxuICAgIFwic3B5TGlzdGVuZXJzXCIsXG4gICAgXCJlbmZvcmNlQWN0aW9uc1wiLFxuICAgIFwiY29tcHV0ZWRSZXF1aXJlc1JlYWN0aW9uXCIsXG4gICAgXCJyZWFjdGlvblJlcXVpcmVzT2JzZXJ2YWJsZVwiLFxuICAgIFwib2JzZXJ2YWJsZVJlcXVpcmVzUmVhY3Rpb25cIixcbiAgICBcImFsbG93U3RhdGVSZWFkc1wiLFxuICAgIFwiZGlzYWJsZUVycm9yQm91bmRhcmllc1wiLFxuICAgIFwicnVuSWRcIixcbiAgICBcIlVOQ0hBTkdFRFwiLFxuICAgIFwidXNlUHJveGllc1wiXG5dXG5cbmV4cG9ydCB0eXBlIElVTkNIQU5HRUQgPSB7fVxuXG5leHBvcnQgY2xhc3MgTW9iWEdsb2JhbHMge1xuICAgIC8qKlxuICAgICAqIE1vYlhHbG9iYWxzIHZlcnNpb24uXG4gICAgICogTW9iWCBjb21wYXRpYmxpdHkgd2l0aCBvdGhlciB2ZXJzaW9ucyBsb2FkZWQgaW4gbWVtb3J5IGFzIGxvbmcgYXMgdGhpcyB2ZXJzaW9uIG1hdGNoZXMuXG4gICAgICogSXQgaW5kaWNhdGVzIHRoYXQgdGhlIGdsb2JhbCBzdGF0ZSBzdGlsbCBzdG9yZXMgc2ltaWxhciBpbmZvcm1hdGlvblxuICAgICAqXG4gICAgICogTi5COiB0aGlzIHZlcnNpb24gaXMgdW5yZWxhdGVkIHRvIHRoZSBwYWNrYWdlIHZlcnNpb24gb2YgTW9iWCwgYW5kIGlzIG9ubHkgdGhlIHZlcnNpb24gb2YgdGhlXG4gICAgICogaW50ZXJuYWwgc3RhdGUgc3RvcmFnZSBvZiBNb2JYLCBhbmQgY2FuIGJlIHRoZSBzYW1lIGFjcm9zcyBtYW55IGRpZmZlcmVudCBwYWNrYWdlIHZlcnNpb25zXG4gICAgICovXG4gICAgdmVyc2lvbiA9IDZcblxuICAgIC8qKlxuICAgICAqIGdsb2JhbGx5IHVuaXF1ZSB0b2tlbiB0byBzaWduYWwgdW5jaGFuZ2VkXG4gICAgICovXG4gICAgVU5DSEFOR0VEOiBJVU5DSEFOR0VEID0ge31cblxuICAgIC8qKlxuICAgICAqIEN1cnJlbnRseSBydW5uaW5nIGRlcml2YXRpb25cbiAgICAgKi9cbiAgICB0cmFja2luZ0Rlcml2YXRpb246IElEZXJpdmF0aW9uIHwgbnVsbCA9IG51bGxcblxuICAgIC8qKlxuICAgICAqIEN1cnJlbnRseSBydW5uaW5nIHJlYWN0aW9uLiBUaGlzIGRldGVybWluZXMgaWYgd2UgY3VycmVudGx5IGhhdmUgYSByZWFjdGl2ZSBjb250ZXh0LlxuICAgICAqIChUcmFja2luZyBkZXJpdmF0aW9uIGlzIGFsc28gc2V0IGZvciB0ZW1wb3JhbCB0cmFja2luZyBvZiBjb21wdXRlZCB2YWx1ZXMgaW5zaWRlIGFjdGlvbnMsXG4gICAgICogYnV0IHRyYWNraW5nUmVhY3Rpb24gY2FuIG9ubHkgYmUgc2V0IGJ5IGEgZm9ybSBvZiBSZWFjdGlvbilcbiAgICAgKi9cbiAgICB0cmFja2luZ0NvbnRleHQ6IFJlYWN0aW9uIHwgQ29tcHV0ZWRWYWx1ZTxhbnk+IHwgbnVsbCA9IG51bGxcblxuICAgIC8qKlxuICAgICAqIEVhY2ggdGltZSBhIGRlcml2YXRpb24gaXMgdHJhY2tlZCwgaXQgaXMgYXNzaWduZWQgYSB1bmlxdWUgcnVuLWlkXG4gICAgICovXG4gICAgcnVuSWQgPSAwXG5cbiAgICAvKipcbiAgICAgKiAnZ3VpZCcgZm9yIGdlbmVyYWwgcHVycG9zZS4gV2lsbCBiZSBwZXJzaXN0ZWQgYW1vbmdzdCByZXNldHMuXG4gICAgICovXG4gICAgbW9ieEd1aWQgPSAwXG5cbiAgICAvKipcbiAgICAgKiBBcmUgd2UgaW4gYSBiYXRjaCBibG9jaz8gKGFuZCBob3cgbWFueSBvZiB0aGVtKVxuICAgICAqL1xuICAgIGluQmF0Y2g6IG51bWJlciA9IDBcblxuICAgIC8qKlxuICAgICAqIE9ic2VydmFibGVzIHRoYXQgZG9uJ3QgaGF2ZSBvYnNlcnZlcnMgYW55bW9yZSwgYW5kIGFyZSBhYm91dCB0byBiZVxuICAgICAqIHN1c3BlbmRlZCwgdW5sZXNzIHNvbWVib2R5IGVsc2UgYWNjZXNzZXMgaXQgaW4gdGhlIHNhbWUgYmF0Y2hcbiAgICAgKlxuICAgICAqIEB0eXBlIHtJT2JzZXJ2YWJsZVtdfVxuICAgICAqL1xuICAgIHBlbmRpbmdVbm9ic2VydmF0aW9uczogSU9ic2VydmFibGVbXSA9IFtdXG5cbiAgICAvKipcbiAgICAgKiBMaXN0IG9mIHNjaGVkdWxlZCwgbm90IHlldCBleGVjdXRlZCwgcmVhY3Rpb25zLlxuICAgICAqL1xuICAgIHBlbmRpbmdSZWFjdGlvbnM6IFJlYWN0aW9uW10gPSBbXVxuXG4gICAgLyoqXG4gICAgICogQXJlIHdlIGN1cnJlbnRseSBwcm9jZXNzaW5nIHJlYWN0aW9ucz9cbiAgICAgKi9cbiAgICBpc1J1bm5pbmdSZWFjdGlvbnMgPSBmYWxzZVxuXG4gICAgLyoqXG4gICAgICogSXMgaXQgYWxsb3dlZCB0byBjaGFuZ2Ugb2JzZXJ2YWJsZXMgYXQgdGhpcyBwb2ludD9cbiAgICAgKiBJbiBnZW5lcmFsLCBNb2JYIGRvZXNuJ3QgYWxsb3cgdGhhdCB3aGVuIHJ1bm5pbmcgY29tcHV0YXRpb25zIGFuZCBSZWFjdC5yZW5kZXIuXG4gICAgICogVG8gZW5zdXJlIHRoYXQgdGhvc2UgZnVuY3Rpb25zIHN0YXkgcHVyZS5cbiAgICAgKi9cbiAgICBhbGxvd1N0YXRlQ2hhbmdlcyA9IGZhbHNlXG5cbiAgICAvKipcbiAgICAgKiBJcyBpdCBhbGxvd2VkIHRvIHJlYWQgb2JzZXJ2YWJsZXMgYXQgdGhpcyBwb2ludD9cbiAgICAgKiBVc2VkIHRvIGhvbGQgdGhlIHN0YXRlIG5lZWRlZCBmb3IgYG9ic2VydmFibGVSZXF1aXJlc1JlYWN0aW9uYFxuICAgICAqL1xuICAgIGFsbG93U3RhdGVSZWFkcyA9IHRydWVcblxuICAgIC8qKlxuICAgICAqIElmIHN0cmljdCBtb2RlIGlzIGVuYWJsZWQsIHN0YXRlIGNoYW5nZXMgYXJlIGJ5IGRlZmF1bHQgbm90IGFsbG93ZWRcbiAgICAgKi9cbiAgICBlbmZvcmNlQWN0aW9uczogYm9vbGVhbiB8IFwiYWx3YXlzXCIgPSB0cnVlXG5cbiAgICAvKipcbiAgICAgKiBTcHkgY2FsbGJhY2tzXG4gICAgICovXG4gICAgc3B5TGlzdGVuZXJzOiB7IChjaGFuZ2U6IGFueSk6IHZvaWQgfVtdID0gW11cblxuICAgIC8qKlxuICAgICAqIEdsb2JhbGx5IGF0dGFjaGVkIGVycm9yIGhhbmRsZXJzIHRoYXQgcmVhY3Qgc3BlY2lmaWNhbGx5IHRvIGVycm9ycyBpbiByZWFjdGlvbnNcbiAgICAgKi9cbiAgICBnbG9iYWxSZWFjdGlvbkVycm9ySGFuZGxlcnM6ICgoZXJyb3I6IGFueSwgZGVyaXZhdGlvbjogSURlcml2YXRpb24pID0+IHZvaWQpW10gPSBbXVxuXG4gICAgLyoqXG4gICAgICogV2FybiBpZiBjb21wdXRlZCB2YWx1ZXMgYXJlIGFjY2Vzc2VkIG91dHNpZGUgYSByZWFjdGl2ZSBjb250ZXh0XG4gICAgICovXG4gICAgY29tcHV0ZWRSZXF1aXJlc1JlYWN0aW9uID0gZmFsc2VcblxuICAgIC8qKlxuICAgICAqIChFeHBlcmltZW50YWwpXG4gICAgICogV2FybiBpZiB5b3UgdHJ5IHRvIGNyZWF0ZSB0byBkZXJpdmF0aW9uIC8gcmVhY3RpdmUgY29udGV4dCB3aXRob3V0IGFjY2Vzc2luZyBhbnkgb2JzZXJ2YWJsZS5cbiAgICAgKi9cbiAgICByZWFjdGlvblJlcXVpcmVzT2JzZXJ2YWJsZSA9IGZhbHNlXG5cbiAgICAvKipcbiAgICAgKiAoRXhwZXJpbWVudGFsKVxuICAgICAqIFdhcm4gaWYgb2JzZXJ2YWJsZXMgYXJlIGFjY2Vzc2VkIG91dHNpZGUgYSByZWFjdGl2ZSBjb250ZXh0XG4gICAgICovXG4gICAgb2JzZXJ2YWJsZVJlcXVpcmVzUmVhY3Rpb24gPSBmYWxzZVxuXG4gICAgLypcbiAgICAgKiBEb24ndCBjYXRjaCBhbmQgcmV0aHJvdyBleGNlcHRpb25zLiBUaGlzIGlzIHVzZWZ1bCBmb3IgaW5zcGVjdGluZyB0aGUgc3RhdGUgb2ZcbiAgICAgKiB0aGUgc3RhY2sgd2hlbiBhbiBleGNlcHRpb24gb2NjdXJzIHdoaWxlIGRlYnVnZ2luZy5cbiAgICAgKi9cbiAgICBkaXNhYmxlRXJyb3JCb3VuZGFyaWVzID0gZmFsc2VcblxuICAgIC8qXG4gICAgICogSWYgdHJ1ZSwgd2UgYXJlIGFscmVhZHkgaGFuZGxpbmcgYW4gZXhjZXB0aW9uIGluIGFuIGFjdGlvbi4gQW55IGVycm9ycyBpbiByZWFjdGlvbnMgc2hvdWxkIGJlIHN1cHByZXNzZWQsIGFzXG4gICAgICogdGhleSBhcmUgbm90IHRoZSBjYXVzZSwgc2VlOiBodHRwczovL2dpdGh1Yi5jb20vbW9ieGpzL21vYngvaXNzdWVzLzE4MzZcbiAgICAgKi9cbiAgICBzdXBwcmVzc1JlYWN0aW9uRXJyb3JzID0gZmFsc2VcblxuICAgIHVzZVByb3hpZXMgPSB0cnVlXG4gICAgLypcbiAgICAgKiBwcmludCB3YXJuaW5ncyBhYm91dCBjb2RlIHRoYXQgd291bGQgZmFpbCBpZiBwcm94aWVzIHdlcmVuJ3QgYXZhaWxhYmxlXG4gICAgICovXG4gICAgdmVyaWZ5UHJveGllcyA9IGZhbHNlXG5cbiAgICAvKipcbiAgICAgKiBGYWxzZSBmb3JjZXMgYWxsIG9iamVjdCdzIGRlc2NyaXB0b3JzIHRvXG4gICAgICogd3JpdGFibGU6IHRydWVcbiAgICAgKiBjb25maWd1cmFibGU6IHRydWVcbiAgICAgKi9cbiAgICBzYWZlRGVzY3JpcHRvcnMgPSB0cnVlXG59XG5cbmxldCBjYW5NZXJnZUdsb2JhbFN0YXRlID0gdHJ1ZVxubGV0IGlzb2xhdGVDYWxsZWQgPSBmYWxzZVxuXG5leHBvcnQgbGV0IGdsb2JhbFN0YXRlOiBNb2JYR2xvYmFscyA9IChmdW5jdGlvbiAoKSB7XG4gICAgbGV0IGdsb2JhbCA9IGdldEdsb2JhbCgpXG4gICAgaWYgKGdsb2JhbC5fX21vYnhJbnN0YW5jZUNvdW50ID4gMCAmJiAhZ2xvYmFsLl9fbW9ieEdsb2JhbHMpIHtcbiAgICAgICAgY2FuTWVyZ2VHbG9iYWxTdGF0ZSA9IGZhbHNlXG4gICAgfVxuICAgIGlmIChnbG9iYWwuX19tb2J4R2xvYmFscyAmJiBnbG9iYWwuX19tb2J4R2xvYmFscy52ZXJzaW9uICE9PSBuZXcgTW9iWEdsb2JhbHMoKS52ZXJzaW9uKSB7XG4gICAgICAgIGNhbk1lcmdlR2xvYmFsU3RhdGUgPSBmYWxzZVxuICAgIH1cblxuICAgIGlmICghY2FuTWVyZ2VHbG9iYWxTdGF0ZSkge1xuICAgICAgICAvLyBCZWNhdXNlIHRoaXMgaXMgYSBJSUZFIHdlIG5lZWQgdG8gbGV0IGlzb2xhdGVDYWxsZWQgYSBjaGFuY2UgdG8gY2hhbmdlXG4gICAgICAgIC8vIHNvIHdlIHJ1biBpdCBhZnRlciB0aGUgZXZlbnQgbG9vcCBjb21wbGV0ZWQgYXQgbGVhc3QgMSBpdGVyYXRpb25cbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWlzb2xhdGVDYWxsZWQpIHtcbiAgICAgICAgICAgICAgICBkaWUoMzUpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0sIDEpXG4gICAgICAgIHJldHVybiBuZXcgTW9iWEdsb2JhbHMoKVxuICAgIH0gZWxzZSBpZiAoZ2xvYmFsLl9fbW9ieEdsb2JhbHMpIHtcbiAgICAgICAgZ2xvYmFsLl9fbW9ieEluc3RhbmNlQ291bnQgKz0gMVxuICAgICAgICBpZiAoIWdsb2JhbC5fX21vYnhHbG9iYWxzLlVOQ0hBTkdFRCkge1xuICAgICAgICAgICAgZ2xvYmFsLl9fbW9ieEdsb2JhbHMuVU5DSEFOR0VEID0ge31cbiAgICAgICAgfSAvLyBtYWtlIG1lcmdlIGJhY2t3YXJkIGNvbXBhdGlibGVcbiAgICAgICAgcmV0dXJuIGdsb2JhbC5fX21vYnhHbG9iYWxzXG4gICAgfSBlbHNlIHtcbiAgICAgICAgZ2xvYmFsLl9fbW9ieEluc3RhbmNlQ291bnQgPSAxXG4gICAgICAgIHJldHVybiAoZ2xvYmFsLl9fbW9ieEdsb2JhbHMgPSBuZXcgTW9iWEdsb2JhbHMoKSlcbiAgICB9XG59KSgpXG5cbmV4cG9ydCBmdW5jdGlvbiBpc29sYXRlR2xvYmFsU3RhdGUoKSB7XG4gICAgaWYgKFxuICAgICAgICBnbG9iYWxTdGF0ZS5wZW5kaW5nUmVhY3Rpb25zLmxlbmd0aCB8fFxuICAgICAgICBnbG9iYWxTdGF0ZS5pbkJhdGNoIHx8XG4gICAgICAgIGdsb2JhbFN0YXRlLmlzUnVubmluZ1JlYWN0aW9uc1xuICAgICkge1xuICAgICAgICBkaWUoMzYpXG4gICAgfVxuICAgIGlzb2xhdGVDYWxsZWQgPSB0cnVlXG4gICAgaWYgKGNhbk1lcmdlR2xvYmFsU3RhdGUpIHtcbiAgICAgICAgbGV0IGdsb2JhbCA9IGdldEdsb2JhbCgpXG4gICAgICAgIGlmICgtLWdsb2JhbC5fX21vYnhJbnN0YW5jZUNvdW50ID09PSAwKSB7XG4gICAgICAgICAgICBnbG9iYWwuX19tb2J4R2xvYmFscyA9IHVuZGVmaW5lZFxuICAgICAgICB9XG4gICAgICAgIGdsb2JhbFN0YXRlID0gbmV3IE1vYlhHbG9iYWxzKClcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXRHbG9iYWxTdGF0ZSgpOiBhbnkge1xuICAgIHJldHVybiBnbG9iYWxTdGF0ZVxufVxuXG4vKipcbiAqIEZvciB0ZXN0aW5nIHB1cnBvc2VzIG9ubHk7IHRoaXMgd2lsbCBicmVhayB0aGUgaW50ZXJuYWwgc3RhdGUgb2YgZXhpc3Rpbmcgb2JzZXJ2YWJsZXMsXG4gKiBidXQgY2FuIGJlIHVzZWQgdG8gZ2V0IGJhY2sgYXQgYSBzdGFibGUgc3RhdGUgYWZ0ZXIgdGhyb3dpbmcgZXJyb3JzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXNldEdsb2JhbFN0YXRlKCkge1xuICAgIGNvbnN0IGRlZmF1bHRHbG9iYWxzID0gbmV3IE1vYlhHbG9iYWxzKClcbiAgICBmb3IgKGxldCBrZXkgaW4gZGVmYXVsdEdsb2JhbHMpIHtcbiAgICAgICAgaWYgKHBlcnNpc3RlbnRLZXlzLmluZGV4T2Yoa2V5IGFzIGFueSkgPT09IC0xKSB7XG4gICAgICAgICAgICBnbG9iYWxTdGF0ZVtrZXldID0gZGVmYXVsdEdsb2JhbHNba2V5XVxuICAgICAgICB9XG4gICAgfVxuICAgIGdsb2JhbFN0YXRlLmFsbG93U3RhdGVDaGFuZ2VzID0gIWdsb2JhbFN0YXRlLmVuZm9yY2VBY3Rpb25zXG59XG4iLCJpbXBvcnQge1xuICAgICRtb2J4LFxuICAgIElEZXJpdmF0aW9uLFxuICAgIElEZXJpdmF0aW9uU3RhdGVfLFxuICAgIElPYnNlcnZhYmxlLFxuICAgIExhbWJkYSxcbiAgICBUcmFjZU1vZGUsXG4gICAgY2xlYXJPYnNlcnZpbmcsXG4gICAgY3JlYXRlSW5zdGFuY2VvZlByZWRpY2F0ZSxcbiAgICBlbmRCYXRjaCxcbiAgICBnZXROZXh0SWQsXG4gICAgZ2xvYmFsU3RhdGUsXG4gICAgaXNDYXVnaHRFeGNlcHRpb24sXG4gICAgaXNTcHlFbmFibGVkLFxuICAgIHNob3VsZENvbXB1dGUsXG4gICAgc3B5UmVwb3J0LFxuICAgIHNweVJlcG9ydEVuZCxcbiAgICBzcHlSZXBvcnRTdGFydCxcbiAgICBzdGFydEJhdGNoLFxuICAgIHRyYWNlLFxuICAgIHRyYWNrRGVyaXZlZEZ1bmN0aW9uXG59IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbi8qKlxuICogUmVhY3Rpb25zIGFyZSBhIHNwZWNpYWwga2luZCBvZiBkZXJpdmF0aW9ucy4gU2V2ZXJhbCB0aGluZ3MgZGlzdGluZ3Vpc2hlcyB0aGVtIGZyb20gbm9ybWFsIHJlYWN0aXZlIGNvbXB1dGF0aW9uc1xuICpcbiAqIDEpIFRoZXkgd2lsbCBhbHdheXMgcnVuLCB3aGV0aGVyIHRoZXkgYXJlIHVzZWQgYnkgb3RoZXIgY29tcHV0YXRpb25zIG9yIG5vdC5cbiAqIFRoaXMgbWVhbnMgdGhhdCB0aGV5IGFyZSB2ZXJ5IHN1aXRhYmxlIGZvciB0cmlnZ2VyaW5nIHNpZGUgZWZmZWN0cyBsaWtlIGxvZ2dpbmcsIHVwZGF0aW5nIHRoZSBET00gYW5kIG1ha2luZyBuZXR3b3JrIHJlcXVlc3RzLlxuICogMikgVGhleSBhcmUgbm90IG9ic2VydmFibGUgdGhlbXNlbHZlc1xuICogMykgVGhleSB3aWxsIGFsd2F5cyBydW4gYWZ0ZXIgYW55ICdub3JtYWwnIGRlcml2YXRpb25zXG4gKiA0KSBUaGV5IGFyZSBhbGxvd2VkIHRvIGNoYW5nZSB0aGUgc3RhdGUgYW5kIHRoZXJlYnkgdHJpZ2dlcmluZyB0aGVtc2VsdmVzIGFnYWluLCBhcyBsb25nIGFzIHRoZXkgbWFrZSBzdXJlIHRoZSBzdGF0ZSBwcm9wYWdhdGVzIHRvIGEgc3RhYmxlIHN0YXRlIGluIGEgcmVhc29uYWJsZSBhbW91bnQgb2YgaXRlcmF0aW9ucy5cbiAqXG4gKiBUaGUgc3RhdGUgbWFjaGluZSBvZiBhIFJlYWN0aW9uIGlzIGFzIGZvbGxvd3M6XG4gKlxuICogMSkgYWZ0ZXIgY3JlYXRpbmcsIHRoZSByZWFjdGlvbiBzaG91bGQgYmUgc3RhcnRlZCBieSBjYWxsaW5nIGBydW5SZWFjdGlvbmAgb3IgYnkgc2NoZWR1bGluZyBpdCAoc2VlIGFsc28gYGF1dG9ydW5gKVxuICogMikgdGhlIGBvbkludmFsaWRhdGVgIGhhbmRsZXIgc2hvdWxkIHNvbWVob3cgcmVzdWx0IGluIGEgY2FsbCB0byBgdGhpcy50cmFjayhzb21lRnVuY3Rpb24pYFxuICogMykgYWxsIG9ic2VydmFibGVzIGFjY2Vzc2VkIGluIGBzb21lRnVuY3Rpb25gIHdpbGwgYmUgb2JzZXJ2ZWQgYnkgdGhpcyByZWFjdGlvbi5cbiAqIDQpIGFzIHNvb24gYXMgc29tZSBvZiB0aGUgZGVwZW5kZW5jaWVzIGhhcyBjaGFuZ2VkIHRoZSBSZWFjdGlvbiB3aWxsIGJlIHJlc2NoZWR1bGVkIGZvciBhbm90aGVyIHJ1biAoYWZ0ZXIgdGhlIGN1cnJlbnQgbXV0YXRpb24gb3IgdHJhbnNhY3Rpb24pLiBgaXNTY2hlZHVsZWRgIHdpbGwgeWllbGQgdHJ1ZSBvbmNlIGEgZGVwZW5kZW5jeSBpcyBzdGFsZSBhbmQgZHVyaW5nIHRoaXMgcGVyaW9kXG4gKiA1KSBgb25JbnZhbGlkYXRlYCB3aWxsIGJlIGNhbGxlZCwgYW5kIHdlIGFyZSBiYWNrIGF0IHN0ZXAgMS5cbiAqXG4gKi9cblxuZXhwb3J0IGludGVyZmFjZSBJUmVhY3Rpb25QdWJsaWMge1xuICAgIGRpc3Bvc2UoKTogdm9pZFxuICAgIHRyYWNlKGVudGVyQnJlYWtQb2ludD86IGJvb2xlYW4pOiB2b2lkXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSVJlYWN0aW9uRGlzcG9zZXIge1xuICAgICgpOiB2b2lkXG4gICAgJG1vYng6IFJlYWN0aW9uXG59XG5cbmV4cG9ydCBjbGFzcyBSZWFjdGlvbiBpbXBsZW1lbnRzIElEZXJpdmF0aW9uLCBJUmVhY3Rpb25QdWJsaWMge1xuICAgIG9ic2VydmluZ186IElPYnNlcnZhYmxlW10gPSBbXSAvLyBub2RlcyB3ZSBhcmUgbG9va2luZyBhdC4gT3VyIHZhbHVlIGRlcGVuZHMgb24gdGhlc2Ugbm9kZXNcbiAgICBuZXdPYnNlcnZpbmdfOiBJT2JzZXJ2YWJsZVtdID0gW11cbiAgICBkZXBlbmRlbmNpZXNTdGF0ZV8gPSBJRGVyaXZhdGlvblN0YXRlXy5OT1RfVFJBQ0tJTkdfXG4gICAgZGlmZlZhbHVlXyA9IDBcbiAgICBydW5JZF8gPSAwXG4gICAgdW5ib3VuZERlcHNDb3VudF8gPSAwXG4gICAgaXNEaXNwb3NlZF8gPSBmYWxzZVxuICAgIGlzU2NoZWR1bGVkXyA9IGZhbHNlXG4gICAgaXNUcmFja1BlbmRpbmdfID0gZmFsc2VcbiAgICBpc1J1bm5pbmdfID0gZmFsc2VcbiAgICBpc1RyYWNpbmdfOiBUcmFjZU1vZGUgPSBUcmFjZU1vZGUuTk9ORVxuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHB1YmxpYyBuYW1lXzogc3RyaW5nID0gX19ERVZfXyA/IFwiUmVhY3Rpb25AXCIgKyBnZXROZXh0SWQoKSA6IFwiUmVhY3Rpb25cIixcbiAgICAgICAgcHJpdmF0ZSBvbkludmFsaWRhdGVfOiAoKSA9PiB2b2lkLFxuICAgICAgICBwcml2YXRlIGVycm9ySGFuZGxlcl8/OiAoZXJyb3I6IGFueSwgZGVyaXZhdGlvbjogSURlcml2YXRpb24pID0+IHZvaWQsXG4gICAgICAgIHB1YmxpYyByZXF1aXJlc09ic2VydmFibGVfP1xuICAgICkge31cblxuICAgIG9uQmVjb21lU3RhbGVfKCkge1xuICAgICAgICB0aGlzLnNjaGVkdWxlXygpXG4gICAgfVxuXG4gICAgc2NoZWR1bGVfKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNTY2hlZHVsZWRfKSB7XG4gICAgICAgICAgICB0aGlzLmlzU2NoZWR1bGVkXyA9IHRydWVcbiAgICAgICAgICAgIGdsb2JhbFN0YXRlLnBlbmRpbmdSZWFjdGlvbnMucHVzaCh0aGlzKVxuICAgICAgICAgICAgcnVuUmVhY3Rpb25zKClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlzU2NoZWR1bGVkKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1NjaGVkdWxlZF9cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBpbnRlcm5hbCwgdXNlIHNjaGVkdWxlKCkgaWYgeW91IGludGVuZCB0byBraWNrIG9mZiBhIHJlYWN0aW9uXG4gICAgICovXG4gICAgcnVuUmVhY3Rpb25fKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNEaXNwb3NlZF8pIHtcbiAgICAgICAgICAgIHN0YXJ0QmF0Y2goKVxuICAgICAgICAgICAgdGhpcy5pc1NjaGVkdWxlZF8gPSBmYWxzZVxuICAgICAgICAgICAgY29uc3QgcHJldiA9IGdsb2JhbFN0YXRlLnRyYWNraW5nQ29udGV4dFxuICAgICAgICAgICAgZ2xvYmFsU3RhdGUudHJhY2tpbmdDb250ZXh0ID0gdGhpc1xuICAgICAgICAgICAgaWYgKHNob3VsZENvbXB1dGUodGhpcykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlzVHJhY2tQZW5kaW5nXyA9IHRydWVcblxuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25JbnZhbGlkYXRlXygpXG4gICAgICAgICAgICAgICAgICAgIGlmIChfX0RFVl9fICYmIHRoaXMuaXNUcmFja1BlbmRpbmdfICYmIGlzU3B5RW5hYmxlZCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBvbkludmFsaWRhdGUgZGlkbid0IHRyaWdnZXIgdHJhY2sgcmlnaHQgYXdheS4uXG4gICAgICAgICAgICAgICAgICAgICAgICBzcHlSZXBvcnQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZV8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJzY2hlZHVsZWQtcmVhY3Rpb25cIlxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5yZXBvcnRFeGNlcHRpb25JbkRlcml2YXRpb25fKGUpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZ2xvYmFsU3RhdGUudHJhY2tpbmdDb250ZXh0ID0gcHJldlxuICAgICAgICAgICAgZW5kQmF0Y2goKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdHJhY2soZm46ICgpID0+IHZvaWQpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNEaXNwb3NlZF8pIHtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgLy8gY29uc29sZS53YXJuKFwiUmVhY3Rpb24gYWxyZWFkeSBkaXNwb3NlZFwiKSAvLyBOb3RlOiBOb3QgYSB3YXJuaW5nIC8gZXJyb3IgaW4gbW9ieCA0IGVpdGhlclxuICAgICAgICB9XG4gICAgICAgIHN0YXJ0QmF0Y2goKVxuICAgICAgICBjb25zdCBub3RpZnkgPSBpc1NweUVuYWJsZWQoKVxuICAgICAgICBsZXQgc3RhcnRUaW1lXG4gICAgICAgIGlmIChfX0RFVl9fICYmIG5vdGlmeSkge1xuICAgICAgICAgICAgc3RhcnRUaW1lID0gRGF0ZS5ub3coKVxuICAgICAgICAgICAgc3B5UmVwb3J0U3RhcnQoe1xuICAgICAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZV8sXG4gICAgICAgICAgICAgICAgdHlwZTogXCJyZWFjdGlvblwiXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuaXNSdW5uaW5nXyA9IHRydWVcbiAgICAgICAgY29uc3QgcHJldlJlYWN0aW9uID0gZ2xvYmFsU3RhdGUudHJhY2tpbmdDb250ZXh0IC8vIHJlYWN0aW9ucyBjb3VsZCBjcmVhdGUgcmVhY3Rpb25zLi4uXG4gICAgICAgIGdsb2JhbFN0YXRlLnRyYWNraW5nQ29udGV4dCA9IHRoaXNcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gdHJhY2tEZXJpdmVkRnVuY3Rpb24odGhpcywgZm4sIHVuZGVmaW5lZClcbiAgICAgICAgZ2xvYmFsU3RhdGUudHJhY2tpbmdDb250ZXh0ID0gcHJldlJlYWN0aW9uXG4gICAgICAgIHRoaXMuaXNSdW5uaW5nXyA9IGZhbHNlXG4gICAgICAgIHRoaXMuaXNUcmFja1BlbmRpbmdfID0gZmFsc2VcbiAgICAgICAgaWYgKHRoaXMuaXNEaXNwb3NlZF8pIHtcbiAgICAgICAgICAgIC8vIGRpc3Bvc2VkIGR1cmluZyBsYXN0IHJ1bi4gQ2xlYW4gdXAgZXZlcnl0aGluZyB0aGF0IHdhcyBib3VuZCBhZnRlciB0aGUgZGlzcG9zZSBjYWxsLlxuICAgICAgICAgICAgY2xlYXJPYnNlcnZpbmcodGhpcylcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNDYXVnaHRFeGNlcHRpb24ocmVzdWx0KSkge1xuICAgICAgICAgICAgdGhpcy5yZXBvcnRFeGNlcHRpb25JbkRlcml2YXRpb25fKHJlc3VsdC5jYXVzZSlcbiAgICAgICAgfVxuICAgICAgICBpZiAoX19ERVZfXyAmJiBub3RpZnkpIHtcbiAgICAgICAgICAgIHNweVJlcG9ydEVuZCh7XG4gICAgICAgICAgICAgICAgdGltZTogRGF0ZS5ub3coKSAtIHN0YXJ0VGltZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICBlbmRCYXRjaCgpXG4gICAgfVxuXG4gICAgcmVwb3J0RXhjZXB0aW9uSW5EZXJpdmF0aW9uXyhlcnJvcjogYW55KSB7XG4gICAgICAgIGlmICh0aGlzLmVycm9ySGFuZGxlcl8pIHtcbiAgICAgICAgICAgIHRoaXMuZXJyb3JIYW5kbGVyXyhlcnJvciwgdGhpcylcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGdsb2JhbFN0YXRlLmRpc2FibGVFcnJvckJvdW5kYXJpZXMpIHtcbiAgICAgICAgICAgIHRocm93IGVycm9yXG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBtZXNzYWdlID0gX19ERVZfX1xuICAgICAgICAgICAgPyBgW21vYnhdIEVuY291bnRlcmVkIGFuIHVuY2F1Z2h0IGV4Y2VwdGlvbiB0aGF0IHdhcyB0aHJvd24gYnkgYSByZWFjdGlvbiBvciBvYnNlcnZlciBjb21wb25lbnQsIGluOiAnJHt0aGlzfSdgXG4gICAgICAgICAgICA6IGBbbW9ieF0gdW5jYXVnaHQgZXJyb3IgaW4gJyR7dGhpc30nYFxuICAgICAgICBpZiAoIWdsb2JhbFN0YXRlLnN1cHByZXNzUmVhY3Rpb25FcnJvcnMpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSwgZXJyb3IpXG4gICAgICAgICAgICAvKiogSWYgZGVidWdnaW5nIGJyb3VnaHQgeW91IGhlcmUsIHBsZWFzZSwgcmVhZCB0aGUgYWJvdmUgbWVzc2FnZSA6LSkuIFRueCEgKi9cbiAgICAgICAgfSBlbHNlIGlmIChfX0RFVl9fKSB7IGNvbnNvbGUud2FybihgW21vYnhdIChlcnJvciBpbiByZWFjdGlvbiAnJHt0aGlzLm5hbWVffScgc3VwcHJlc3NlZCwgZml4IGVycm9yIG9mIGNhdXNpbmcgYWN0aW9uIGJlbG93KWApIH0gLy8gcHJldHRpZXItaWdub3JlXG5cbiAgICAgICAgaWYgKF9fREVWX18gJiYgaXNTcHlFbmFibGVkKCkpIHtcbiAgICAgICAgICAgIHNweVJlcG9ydCh7XG4gICAgICAgICAgICAgICAgdHlwZTogXCJlcnJvclwiLFxuICAgICAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZV8sXG4gICAgICAgICAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgICAgICAgICBlcnJvcjogXCJcIiArIGVycm9yXG4gICAgICAgICAgICB9KVxuICAgICAgICB9XG5cbiAgICAgICAgZ2xvYmFsU3RhdGUuZ2xvYmFsUmVhY3Rpb25FcnJvckhhbmRsZXJzLmZvckVhY2goZiA9PiBmKGVycm9yLCB0aGlzKSlcbiAgICB9XG5cbiAgICBkaXNwb3NlKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNEaXNwb3NlZF8pIHtcbiAgICAgICAgICAgIHRoaXMuaXNEaXNwb3NlZF8gPSB0cnVlXG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNSdW5uaW5nXykge1xuICAgICAgICAgICAgICAgIC8vIGlmIGRpc3Bvc2VkIHdoaWxlIHJ1bm5pbmcsIGNsZWFuIHVwIGxhdGVyLiBNYXliZSBub3Qgb3B0aW1hbCwgYnV0IHJhcmUgY2FzZVxuICAgICAgICAgICAgICAgIHN0YXJ0QmF0Y2goKVxuICAgICAgICAgICAgICAgIGNsZWFyT2JzZXJ2aW5nKHRoaXMpXG4gICAgICAgICAgICAgICAgZW5kQmF0Y2goKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0RGlzcG9zZXJfKCk6IElSZWFjdGlvbkRpc3Bvc2VyIHtcbiAgICAgICAgY29uc3QgciA9IHRoaXMuZGlzcG9zZS5iaW5kKHRoaXMpIGFzIElSZWFjdGlvbkRpc3Bvc2VyXG4gICAgICAgIHJbJG1vYnhdID0gdGhpc1xuICAgICAgICByZXR1cm4gclxuICAgIH1cblxuICAgIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gYFJlYWN0aW9uWyR7dGhpcy5uYW1lX31dYFxuICAgIH1cblxuICAgIHRyYWNlKGVudGVyQnJlYWtQb2ludDogYm9vbGVhbiA9IGZhbHNlKSB7XG4gICAgICAgIHRyYWNlKHRoaXMsIGVudGVyQnJlYWtQb2ludClcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBvblJlYWN0aW9uRXJyb3IoaGFuZGxlcjogKGVycm9yOiBhbnksIGRlcml2YXRpb246IElEZXJpdmF0aW9uKSA9PiB2b2lkKTogTGFtYmRhIHtcbiAgICBnbG9iYWxTdGF0ZS5nbG9iYWxSZWFjdGlvbkVycm9ySGFuZGxlcnMucHVzaChoYW5kbGVyKVxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgIGNvbnN0IGlkeCA9IGdsb2JhbFN0YXRlLmdsb2JhbFJlYWN0aW9uRXJyb3JIYW5kbGVycy5pbmRleE9mKGhhbmRsZXIpXG4gICAgICAgIGlmIChpZHggPj0gMCkge1xuICAgICAgICAgICAgZ2xvYmFsU3RhdGUuZ2xvYmFsUmVhY3Rpb25FcnJvckhhbmRsZXJzLnNwbGljZShpZHgsIDEpXG4gICAgICAgIH1cbiAgICB9XG59XG5cbi8qKlxuICogTWFnaWMgbnVtYmVyIGFsZXJ0IVxuICogRGVmaW5lcyB3aXRoaW4gaG93IG1hbnkgdGltZXMgYSByZWFjdGlvbiBpcyBhbGxvd2VkIHRvIHJlLXRyaWdnZXIgaXRzZWxmXG4gKiB1bnRpbCBpdCBpcyBhc3N1bWVkIHRoYXQgdGhpcyBpcyBnb25uYSBiZSBhIG5ldmVyIGVuZGluZyBsb29wLi4uXG4gKi9cbmNvbnN0IE1BWF9SRUFDVElPTl9JVEVSQVRJT05TID0gMTAwXG5cbmxldCByZWFjdGlvblNjaGVkdWxlcjogKGZuOiAoKSA9PiB2b2lkKSA9PiB2b2lkID0gZiA9PiBmKClcblxuZXhwb3J0IGZ1bmN0aW9uIHJ1blJlYWN0aW9ucygpIHtcbiAgICAvLyBUcmFtcG9saW5pbmcsIGlmIHJ1blJlYWN0aW9ucyBhcmUgYWxyZWFkeSBydW5uaW5nLCBuZXcgcmVhY3Rpb25zIHdpbGwgYmUgcGlja2VkIHVwXG4gICAgaWYgKGdsb2JhbFN0YXRlLmluQmF0Y2ggPiAwIHx8IGdsb2JhbFN0YXRlLmlzUnVubmluZ1JlYWN0aW9ucykge1xuICAgICAgICByZXR1cm5cbiAgICB9XG4gICAgcmVhY3Rpb25TY2hlZHVsZXIocnVuUmVhY3Rpb25zSGVscGVyKVxufVxuXG5mdW5jdGlvbiBydW5SZWFjdGlvbnNIZWxwZXIoKSB7XG4gICAgZ2xvYmFsU3RhdGUuaXNSdW5uaW5nUmVhY3Rpb25zID0gdHJ1ZVxuICAgIGNvbnN0IGFsbFJlYWN0aW9ucyA9IGdsb2JhbFN0YXRlLnBlbmRpbmdSZWFjdGlvbnNcbiAgICBsZXQgaXRlcmF0aW9ucyA9IDBcblxuICAgIC8vIFdoaWxlIHJ1bm5pbmcgcmVhY3Rpb25zLCBuZXcgcmVhY3Rpb25zIG1pZ2h0IGJlIHRyaWdnZXJlZC5cbiAgICAvLyBIZW5jZSB3ZSB3b3JrIHdpdGggdHdvIHZhcmlhYmxlcyBhbmQgY2hlY2sgd2hldGhlclxuICAgIC8vIHdlIGNvbnZlcmdlIHRvIG5vIHJlbWFpbmluZyByZWFjdGlvbnMgYWZ0ZXIgYSB3aGlsZS5cbiAgICB3aGlsZSAoYWxsUmVhY3Rpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgaWYgKCsraXRlcmF0aW9ucyA9PT0gTUFYX1JFQUNUSU9OX0lURVJBVElPTlMpIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXG4gICAgICAgICAgICAgICAgX19ERVZfX1xuICAgICAgICAgICAgICAgICAgICA/IGBSZWFjdGlvbiBkb2Vzbid0IGNvbnZlcmdlIHRvIGEgc3RhYmxlIHN0YXRlIGFmdGVyICR7TUFYX1JFQUNUSU9OX0lURVJBVElPTlN9IGl0ZXJhdGlvbnMuYCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGAgUHJvYmFibHkgdGhlcmUgaXMgYSBjeWNsZSBpbiB0aGUgcmVhY3RpdmUgZnVuY3Rpb246ICR7YWxsUmVhY3Rpb25zWzBdfWBcbiAgICAgICAgICAgICAgICAgICAgOiBgW21vYnhdIGN5Y2xlIGluIHJlYWN0aW9uOiAke2FsbFJlYWN0aW9uc1swXX1gXG4gICAgICAgICAgICApXG4gICAgICAgICAgICBhbGxSZWFjdGlvbnMuc3BsaWNlKDApIC8vIGNsZWFyIHJlYWN0aW9uc1xuICAgICAgICB9XG4gICAgICAgIGxldCByZW1haW5pbmdSZWFjdGlvbnMgPSBhbGxSZWFjdGlvbnMuc3BsaWNlKDApXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gcmVtYWluaW5nUmVhY3Rpb25zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgcmVtYWluaW5nUmVhY3Rpb25zW2ldLnJ1blJlYWN0aW9uXygpXG4gICAgICAgIH1cbiAgICB9XG4gICAgZ2xvYmFsU3RhdGUuaXNSdW5uaW5nUmVhY3Rpb25zID0gZmFsc2Vcbn1cblxuZXhwb3J0IGNvbnN0IGlzUmVhY3Rpb24gPSBjcmVhdGVJbnN0YW5jZW9mUHJlZGljYXRlKFwiUmVhY3Rpb25cIiwgUmVhY3Rpb24pXG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRSZWFjdGlvblNjaGVkdWxlcihmbjogKGY6ICgpID0+IHZvaWQpID0+IHZvaWQpIHtcbiAgICBjb25zdCBiYXNlU2NoZWR1bGVyID0gcmVhY3Rpb25TY2hlZHVsZXJcbiAgICByZWFjdGlvblNjaGVkdWxlciA9IGYgPT4gZm4oKCkgPT4gYmFzZVNjaGVkdWxlcihmKSlcbn1cbiIsImltcG9ydCB7IFRyYWNlTW9kZSwgZGllLCBnZXRBdG9tLCBnbG9iYWxTdGF0ZSB9IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbmV4cG9ydCBmdW5jdGlvbiB0cmFjZSh0aGluZz86IGFueSwgcHJvcD86IHN0cmluZywgZW50ZXJCcmVha1BvaW50PzogYm9vbGVhbik6IHZvaWRcbmV4cG9ydCBmdW5jdGlvbiB0cmFjZSh0aGluZz86IGFueSwgZW50ZXJCcmVha1BvaW50PzogYm9vbGVhbik6IHZvaWRcbmV4cG9ydCBmdW5jdGlvbiB0cmFjZShlbnRlckJyZWFrUG9pbnQ/OiBib29sZWFuKTogdm9pZFxuZXhwb3J0IGZ1bmN0aW9uIHRyYWNlKC4uLmFyZ3M6IGFueVtdKTogdm9pZCB7XG4gICAgaWYgKCFfX0RFVl9fKSB7XG4gICAgICAgIGRpZShgdHJhY2UoKSBpcyBub3QgYXZhaWxhYmxlIGluIHByb2R1Y3Rpb24gYnVpbGRzYClcbiAgICB9XG4gICAgbGV0IGVudGVyQnJlYWtQb2ludCA9IGZhbHNlXG4gICAgaWYgKHR5cGVvZiBhcmdzW2FyZ3MubGVuZ3RoIC0gMV0gPT09IFwiYm9vbGVhblwiKSB7XG4gICAgICAgIGVudGVyQnJlYWtQb2ludCA9IGFyZ3MucG9wKClcbiAgICB9XG4gICAgY29uc3QgZGVyaXZhdGlvbiA9IGdldEF0b21Gcm9tQXJncyhhcmdzKVxuICAgIGlmICghZGVyaXZhdGlvbikge1xuICAgICAgICByZXR1cm4gZGllKFxuICAgICAgICAgICAgYCd0cmFjZShicmVhaz8pJyBjYW4gb25seSBiZSB1c2VkIGluc2lkZSBhIHRyYWNrZWQgY29tcHV0ZWQgdmFsdWUgb3IgYSBSZWFjdGlvbi4gQ29uc2lkZXIgcGFzc2luZyBpbiB0aGUgY29tcHV0ZWQgdmFsdWUgb3IgcmVhY3Rpb24gZXhwbGljaXRseWBcbiAgICAgICAgKVxuICAgIH1cbiAgICBpZiAoZGVyaXZhdGlvbi5pc1RyYWNpbmdfID09PSBUcmFjZU1vZGUuTk9ORSkge1xuICAgICAgICBjb25zb2xlLmxvZyhgW21vYngudHJhY2VdICcke2Rlcml2YXRpb24ubmFtZV99JyB0cmFjaW5nIGVuYWJsZWRgKVxuICAgIH1cbiAgICBkZXJpdmF0aW9uLmlzVHJhY2luZ18gPSBlbnRlckJyZWFrUG9pbnQgPyBUcmFjZU1vZGUuQlJFQUsgOiBUcmFjZU1vZGUuTE9HXG59XG5cbmZ1bmN0aW9uIGdldEF0b21Gcm9tQXJncyhhcmdzKTogYW55IHtcbiAgICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgIHJldHVybiBnbG9iYWxTdGF0ZS50cmFja2luZ0Rlcml2YXRpb25cbiAgICAgICAgY2FzZSAxOlxuICAgICAgICAgICAgcmV0dXJuIGdldEF0b20oYXJnc1swXSlcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgcmV0dXJuIGdldEF0b20oYXJnc1swXSwgYXJnc1sxXSlcbiAgICB9XG59XG4iLCJpbXBvcnQge1xuICAgIGNyZWF0ZUFjdGlvbixcbiAgICBleGVjdXRlQWN0aW9uLFxuICAgIEFubm90YXRpb24sXG4gICAgc3RvcmVBbm5vdGF0aW9uLFxuICAgIGRpZSxcbiAgICBpc0Z1bmN0aW9uLFxuICAgIGlzU3RyaW5naXNoLFxuICAgIGNyZWF0ZURlY29yYXRvckFubm90YXRpb24sXG4gICAgY3JlYXRlQWN0aW9uQW5ub3RhdGlvblxufSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5leHBvcnQgY29uc3QgQUNUSU9OID0gXCJhY3Rpb25cIlxuZXhwb3J0IGNvbnN0IEFDVElPTl9CT1VORCA9IFwiYWN0aW9uLmJvdW5kXCJcbmV4cG9ydCBjb25zdCBBVVRPQUNUSU9OID0gXCJhdXRvQWN0aW9uXCJcbmV4cG9ydCBjb25zdCBBVVRPQUNUSU9OX0JPVU5EID0gXCJhdXRvQWN0aW9uLmJvdW5kXCJcblxuY29uc3QgREVGQVVMVF9BQ1RJT05fTkFNRSA9IFwiPHVubmFtZWQgYWN0aW9uPlwiXG5cbmNvbnN0IGFjdGlvbkFubm90YXRpb24gPSBjcmVhdGVBY3Rpb25Bbm5vdGF0aW9uKEFDVElPTilcbmNvbnN0IGFjdGlvbkJvdW5kQW5ub3RhdGlvbiA9IGNyZWF0ZUFjdGlvbkFubm90YXRpb24oQUNUSU9OX0JPVU5ELCB7XG4gICAgYm91bmQ6IHRydWVcbn0pXG5jb25zdCBhdXRvQWN0aW9uQW5ub3RhdGlvbiA9IGNyZWF0ZUFjdGlvbkFubm90YXRpb24oQVVUT0FDVElPTiwge1xuICAgIGF1dG9BY3Rpb246IHRydWVcbn0pXG5jb25zdCBhdXRvQWN0aW9uQm91bmRBbm5vdGF0aW9uID0gY3JlYXRlQWN0aW9uQW5ub3RhdGlvbihBVVRPQUNUSU9OX0JPVU5ELCB7XG4gICAgYXV0b0FjdGlvbjogdHJ1ZSxcbiAgICBib3VuZDogdHJ1ZVxufSlcblxuZXhwb3J0IGludGVyZmFjZSBJQWN0aW9uRmFjdG9yeSBleHRlbmRzIEFubm90YXRpb24sIFByb3BlcnR5RGVjb3JhdG9yIHtcbiAgICAvLyBuYW1lbGVzcyBhY3Rpb25zXG4gICAgPFQgZXh0ZW5kcyBGdW5jdGlvbiB8IHVuZGVmaW5lZCB8IG51bGw+KGZuOiBUKTogVFxuICAgIC8vIG5hbWVkIGFjdGlvbnNcbiAgICA8VCBleHRlbmRzIEZ1bmN0aW9uIHwgdW5kZWZpbmVkIHwgbnVsbD4obmFtZTogc3RyaW5nLCBmbjogVCk6IFRcblxuICAgIC8vIG5hbWVkIGRlY29yYXRvclxuICAgIChjdXN0b21OYW1lOiBzdHJpbmcpOiBQcm9wZXJ0eURlY29yYXRvciAmIEFubm90YXRpb25cblxuICAgIC8vIGRlY29yYXRvciAobmFtZSBubyBsb25nZXIgc3VwcG9ydGVkKVxuICAgIGJvdW5kOiBBbm5vdGF0aW9uICYgUHJvcGVydHlEZWNvcmF0b3Jcbn1cblxuZnVuY3Rpb24gY3JlYXRlQWN0aW9uRmFjdG9yeShhdXRvQWN0aW9uOiBib29sZWFuKTogSUFjdGlvbkZhY3Rvcnkge1xuICAgIGNvbnN0IHJlczogSUFjdGlvbkZhY3RvcnkgPSBmdW5jdGlvbiBhY3Rpb24oYXJnMSwgYXJnMj8pOiBhbnkge1xuICAgICAgICAvLyBhY3Rpb24oZm4oKSB7fSlcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24oYXJnMSkpIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVBY3Rpb24oYXJnMS5uYW1lIHx8IERFRkFVTFRfQUNUSU9OX05BTUUsIGFyZzEsIGF1dG9BY3Rpb24pXG4gICAgICAgIH1cbiAgICAgICAgLy8gYWN0aW9uKFwibmFtZVwiLCBmbigpIHt9KVxuICAgICAgICBpZiAoaXNGdW5jdGlvbihhcmcyKSkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUFjdGlvbihhcmcxLCBhcmcyLCBhdXRvQWN0aW9uKVxuICAgICAgICB9XG4gICAgICAgIC8vIEBhY3Rpb25cbiAgICAgICAgaWYgKGlzU3RyaW5naXNoKGFyZzIpKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RvcmVBbm5vdGF0aW9uKGFyZzEsIGFyZzIsIGF1dG9BY3Rpb24gPyBhdXRvQWN0aW9uQW5ub3RhdGlvbiA6IGFjdGlvbkFubm90YXRpb24pXG4gICAgICAgIH1cbiAgICAgICAgLy8gYWN0aW9uKFwibmFtZVwiKSAmIEBhY3Rpb24oXCJuYW1lXCIpXG4gICAgICAgIGlmIChpc1N0cmluZ2lzaChhcmcxKSkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZURlY29yYXRvckFubm90YXRpb24oXG4gICAgICAgICAgICAgICAgY3JlYXRlQWN0aW9uQW5ub3RhdGlvbihhdXRvQWN0aW9uID8gQVVUT0FDVElPTiA6IEFDVElPTiwge1xuICAgICAgICAgICAgICAgICAgICBuYW1lOiBhcmcxLFxuICAgICAgICAgICAgICAgICAgICBhdXRvQWN0aW9uXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIClcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICAgICAgICBkaWUoXCJJbnZhbGlkIGFyZ3VtZW50cyBmb3IgYGFjdGlvbmBcIilcbiAgICAgICAgfVxuICAgIH0gYXMgSUFjdGlvbkZhY3RvcnlcbiAgICByZXR1cm4gcmVzXG59XG5cbmV4cG9ydCBjb25zdCBhY3Rpb246IElBY3Rpb25GYWN0b3J5ID0gY3JlYXRlQWN0aW9uRmFjdG9yeShmYWxzZSlcbk9iamVjdC5hc3NpZ24oYWN0aW9uLCBhY3Rpb25Bbm5vdGF0aW9uKVxuZXhwb3J0IGNvbnN0IGF1dG9BY3Rpb246IElBY3Rpb25GYWN0b3J5ID0gY3JlYXRlQWN0aW9uRmFjdG9yeSh0cnVlKVxuT2JqZWN0LmFzc2lnbihhdXRvQWN0aW9uLCBhdXRvQWN0aW9uQW5ub3RhdGlvbilcblxuYWN0aW9uLmJvdW5kID0gY3JlYXRlRGVjb3JhdG9yQW5ub3RhdGlvbihhY3Rpb25Cb3VuZEFubm90YXRpb24pXG5hdXRvQWN0aW9uLmJvdW5kID0gY3JlYXRlRGVjb3JhdG9yQW5ub3RhdGlvbihhdXRvQWN0aW9uQm91bmRBbm5vdGF0aW9uKVxuXG5leHBvcnQgZnVuY3Rpb24gcnVuSW5BY3Rpb248VD4oZm46ICgpID0+IFQpOiBUIHtcbiAgICByZXR1cm4gZXhlY3V0ZUFjdGlvbihmbi5uYW1lIHx8IERFRkFVTFRfQUNUSU9OX05BTUUsIGZhbHNlLCBmbiwgdGhpcywgdW5kZWZpbmVkKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNBY3Rpb24odGhpbmc6IGFueSkge1xuICAgIHJldHVybiBpc0Z1bmN0aW9uKHRoaW5nKSAmJiB0aGluZy5pc01vYnhBY3Rpb24gPT09IHRydWVcbn1cbiIsImltcG9ydCB7IGdsb2JhbFN0YXRlLCBpc29sYXRlR2xvYmFsU3RhdGUsIHNldFJlYWN0aW9uU2NoZWR1bGVyIH0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuY29uc3QgTkVWRVIgPSBcIm5ldmVyXCJcbmNvbnN0IEFMV0FZUyA9IFwiYWx3YXlzXCJcbmNvbnN0IE9CU0VSVkVEID0gXCJvYnNlcnZlZFwiXG4vLyBjb25zdCBJRl9BVkFJTEFCTEUgPSBcImlmYXZhaWxhYmxlXCJcblxuZXhwb3J0IGZ1bmN0aW9uIGNvbmZpZ3VyZShvcHRpb25zOiB7XG4gICAgZW5mb3JjZUFjdGlvbnM/OiBcIm5ldmVyXCIgfCBcImFsd2F5c1wiIHwgXCJvYnNlcnZlZFwiXG4gICAgY29tcHV0ZWRSZXF1aXJlc1JlYWN0aW9uPzogYm9vbGVhblxuICAgIC8qKlxuICAgICAqIFdhcm4gaWYgeW91IHRyeSB0byBjcmVhdGUgdG8gZGVyaXZhdGlvbiAvIHJlYWN0aXZlIGNvbnRleHQgd2l0aG91dCBhY2Nlc3NpbmcgYW55IG9ic2VydmFibGUuXG4gICAgICovXG4gICAgcmVhY3Rpb25SZXF1aXJlc09ic2VydmFibGU/OiBib29sZWFuXG4gICAgLyoqXG4gICAgICogV2FybiBpZiBvYnNlcnZhYmxlcyBhcmUgYWNjZXNzZWQgb3V0c2lkZSBhIHJlYWN0aXZlIGNvbnRleHRcbiAgICAgKi9cbiAgICBvYnNlcnZhYmxlUmVxdWlyZXNSZWFjdGlvbj86IGJvb2xlYW5cbiAgICBpc29sYXRlR2xvYmFsU3RhdGU/OiBib29sZWFuXG4gICAgZGlzYWJsZUVycm9yQm91bmRhcmllcz86IGJvb2xlYW5cbiAgICBzYWZlRGVzY3JpcHRvcnM/OiBib29sZWFuXG4gICAgcmVhY3Rpb25TY2hlZHVsZXI/OiAoZjogKCkgPT4gdm9pZCkgPT4gdm9pZFxuICAgIHVzZVByb3hpZXM/OiBcImFsd2F5c1wiIHwgXCJuZXZlclwiIHwgXCJpZmF2YWlsYWJsZVwiXG59KTogdm9pZCB7XG4gICAgaWYgKG9wdGlvbnMuaXNvbGF0ZUdsb2JhbFN0YXRlID09PSB0cnVlKSB7XG4gICAgICAgIGlzb2xhdGVHbG9iYWxTdGF0ZSgpXG4gICAgfVxuICAgIGNvbnN0IHsgdXNlUHJveGllcywgZW5mb3JjZUFjdGlvbnMgfSA9IG9wdGlvbnNcbiAgICBpZiAodXNlUHJveGllcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGdsb2JhbFN0YXRlLnVzZVByb3hpZXMgPVxuICAgICAgICAgICAgdXNlUHJveGllcyA9PT0gQUxXQVlTXG4gICAgICAgICAgICAgICAgPyB0cnVlXG4gICAgICAgICAgICAgICAgOiB1c2VQcm94aWVzID09PSBORVZFUlxuICAgICAgICAgICAgICAgID8gZmFsc2VcbiAgICAgICAgICAgICAgICA6IHR5cGVvZiBQcm94eSAhPT0gXCJ1bmRlZmluZWRcIlxuICAgIH1cbiAgICBpZiAodXNlUHJveGllcyA9PT0gXCJpZmF2YWlsYWJsZVwiKSB7XG4gICAgICAgIGdsb2JhbFN0YXRlLnZlcmlmeVByb3hpZXMgPSB0cnVlXG4gICAgfVxuICAgIGlmIChlbmZvcmNlQWN0aW9ucyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IGVhID0gZW5mb3JjZUFjdGlvbnMgPT09IEFMV0FZUyA/IEFMV0FZUyA6IGVuZm9yY2VBY3Rpb25zID09PSBPQlNFUlZFRFxuICAgICAgICBnbG9iYWxTdGF0ZS5lbmZvcmNlQWN0aW9ucyA9IGVhXG4gICAgICAgIGdsb2JhbFN0YXRlLmFsbG93U3RhdGVDaGFuZ2VzID0gZWEgPT09IHRydWUgfHwgZWEgPT09IEFMV0FZUyA/IGZhbHNlIDogdHJ1ZVxuICAgIH1cbiAgICA7W1xuICAgICAgICBcImNvbXB1dGVkUmVxdWlyZXNSZWFjdGlvblwiLFxuICAgICAgICBcInJlYWN0aW9uUmVxdWlyZXNPYnNlcnZhYmxlXCIsXG4gICAgICAgIFwib2JzZXJ2YWJsZVJlcXVpcmVzUmVhY3Rpb25cIixcbiAgICAgICAgXCJkaXNhYmxlRXJyb3JCb3VuZGFyaWVzXCIsXG4gICAgICAgIFwic2FmZURlc2NyaXB0b3JzXCJcbiAgICBdLmZvckVhY2goa2V5ID0+IHtcbiAgICAgICAgaWYgKGtleSBpbiBvcHRpb25zKSB7XG4gICAgICAgICAgICBnbG9iYWxTdGF0ZVtrZXldID0gISFvcHRpb25zW2tleV1cbiAgICAgICAgfVxuICAgIH0pXG4gICAgZ2xvYmFsU3RhdGUuYWxsb3dTdGF0ZVJlYWRzID0gIWdsb2JhbFN0YXRlLm9ic2VydmFibGVSZXF1aXJlc1JlYWN0aW9uXG4gICAgaWYgKF9fREVWX18gJiYgZ2xvYmFsU3RhdGUuZGlzYWJsZUVycm9yQm91bmRhcmllcyA9PT0gdHJ1ZSkge1xuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICBcIldBUk5JTkc6IERlYnVnIGZlYXR1cmUgb25seS4gTW9iWCB3aWxsIE5PVCByZWNvdmVyIGZyb20gZXJyb3JzIHdoZW4gYGRpc2FibGVFcnJvckJvdW5kYXJpZXNgIGlzIGVuYWJsZWQuXCJcbiAgICAgICAgKVxuICAgIH1cbiAgICBpZiAob3B0aW9ucy5yZWFjdGlvblNjaGVkdWxlcikge1xuICAgICAgICBzZXRSZWFjdGlvblNjaGVkdWxlcihvcHRpb25zLnJlYWN0aW9uU2NoZWR1bGVyKVxuICAgIH1cbn1cbiIsImltcG9ydCB7IElEZXBUcmVlTm9kZSwgZ2V0QXRvbSwgZ2V0T2JzZXJ2ZXJzLCBoYXNPYnNlcnZlcnMgfSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5leHBvcnQgaW50ZXJmYWNlIElEZXBlbmRlbmN5VHJlZSB7XG4gICAgbmFtZTogc3RyaW5nXG4gICAgZGVwZW5kZW5jaWVzPzogSURlcGVuZGVuY3lUcmVlW11cbn1cblxuZXhwb3J0IGludGVyZmFjZSBJT2JzZXJ2ZXJUcmVlIHtcbiAgICBuYW1lOiBzdHJpbmdcbiAgICBvYnNlcnZlcnM/OiBJT2JzZXJ2ZXJUcmVlW11cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldERlcGVuZGVuY3lUcmVlKHRoaW5nOiBhbnksIHByb3BlcnR5Pzogc3RyaW5nKTogSURlcGVuZGVuY3lUcmVlIHtcbiAgICByZXR1cm4gbm9kZVRvRGVwZW5kZW5jeVRyZWUoZ2V0QXRvbSh0aGluZywgcHJvcGVydHkpKVxufVxuXG5mdW5jdGlvbiBub2RlVG9EZXBlbmRlbmN5VHJlZShub2RlOiBJRGVwVHJlZU5vZGUpOiBJRGVwZW5kZW5jeVRyZWUge1xuICAgIGNvbnN0IHJlc3VsdDogSURlcGVuZGVuY3lUcmVlID0ge1xuICAgICAgICBuYW1lOiBub2RlLm5hbWVfXG4gICAgfVxuICAgIGlmIChub2RlLm9ic2VydmluZ18gJiYgbm9kZS5vYnNlcnZpbmdfLmxlbmd0aCA+IDApIHtcbiAgICAgICAgcmVzdWx0LmRlcGVuZGVuY2llcyA9IHVuaXF1ZShub2RlLm9ic2VydmluZ18pLm1hcChub2RlVG9EZXBlbmRlbmN5VHJlZSlcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdFxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0T2JzZXJ2ZXJUcmVlKHRoaW5nOiBhbnksIHByb3BlcnR5Pzogc3RyaW5nKTogSU9ic2VydmVyVHJlZSB7XG4gICAgcmV0dXJuIG5vZGVUb09ic2VydmVyVHJlZShnZXRBdG9tKHRoaW5nLCBwcm9wZXJ0eSkpXG59XG5cbmZ1bmN0aW9uIG5vZGVUb09ic2VydmVyVHJlZShub2RlOiBJRGVwVHJlZU5vZGUpOiBJT2JzZXJ2ZXJUcmVlIHtcbiAgICBjb25zdCByZXN1bHQ6IElPYnNlcnZlclRyZWUgPSB7XG4gICAgICAgIG5hbWU6IG5vZGUubmFtZV9cbiAgICB9XG4gICAgaWYgKGhhc09ic2VydmVycyhub2RlIGFzIGFueSkpIHtcbiAgICAgICAgcmVzdWx0Lm9ic2VydmVycyA9IEFycmF5LmZyb20oPGFueT5nZXRPYnNlcnZlcnMobm9kZSBhcyBhbnkpKS5tYXAoPGFueT5ub2RlVG9PYnNlcnZlclRyZWUpXG4gICAgfVxuICAgIHJldHVybiByZXN1bHRcbn1cblxuZnVuY3Rpb24gdW5pcXVlPFQ+KGxpc3Q6IFRbXSk6IFRbXSB7XG4gICAgcmV0dXJuIEFycmF5LmZyb20obmV3IFNldChsaXN0KSlcbn1cbiIsImltcG9ydCB7XG4gICAgYWN0aW9uLFxuICAgIG5vb3AsXG4gICAgZGllLFxuICAgIGlzRnVuY3Rpb24sXG4gICAgQW5ub3RhdGlvbixcbiAgICBpc1N0cmluZ2lzaCxcbiAgICBzdG9yZUFubm90YXRpb24sXG4gICAgY3JlYXRlRmxvd0Fubm90YXRpb24sXG4gICAgY3JlYXRlRGVjb3JhdG9yQW5ub3RhdGlvblxufSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5leHBvcnQgY29uc3QgRkxPVyA9IFwiZmxvd1wiXG5cbmxldCBnZW5lcmF0b3JJZCA9IDBcblxuZXhwb3J0IGZ1bmN0aW9uIEZsb3dDYW5jZWxsYXRpb25FcnJvcigpIHtcbiAgICB0aGlzLm1lc3NhZ2UgPSBcIkZMT1dfQ0FOQ0VMTEVEXCJcbn1cbkZsb3dDYW5jZWxsYXRpb25FcnJvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSlcblxuZXhwb3J0IGZ1bmN0aW9uIGlzRmxvd0NhbmNlbGxhdGlvbkVycm9yKGVycm9yOiBFcnJvcikge1xuICAgIHJldHVybiBlcnJvciBpbnN0YW5jZW9mIEZsb3dDYW5jZWxsYXRpb25FcnJvclxufVxuXG5leHBvcnQgdHlwZSBDYW5jZWxsYWJsZVByb21pc2U8VD4gPSBQcm9taXNlPFQ+ICYgeyBjYW5jZWwoKTogdm9pZCB9XG5cbmludGVyZmFjZSBGbG93IGV4dGVuZHMgQW5ub3RhdGlvbiwgUHJvcGVydHlEZWNvcmF0b3Ige1xuICAgIDxSLCBBcmdzIGV4dGVuZHMgYW55W10+KFxuICAgICAgICBnZW5lcmF0b3I6ICguLi5hcmdzOiBBcmdzKSA9PiBHZW5lcmF0b3I8YW55LCBSLCBhbnk+IHwgQXN5bmNHZW5lcmF0b3I8YW55LCBSLCBhbnk+XG4gICAgKTogKC4uLmFyZ3M6IEFyZ3MpID0+IENhbmNlbGxhYmxlUHJvbWlzZTxSPlxuICAgIGJvdW5kOiBBbm5vdGF0aW9uICYgUHJvcGVydHlEZWNvcmF0b3Jcbn1cblxuY29uc3QgZmxvd0Fubm90YXRpb24gPSBjcmVhdGVGbG93QW5ub3RhdGlvbihcImZsb3dcIilcbmNvbnN0IGZsb3dCb3VuZEFubm90YXRpb24gPSBjcmVhdGVGbG93QW5ub3RhdGlvbihcImZsb3cuYm91bmRcIiwgeyBib3VuZDogdHJ1ZSB9KVxuXG5leHBvcnQgY29uc3QgZmxvdzogRmxvdyA9IE9iamVjdC5hc3NpZ24oXG4gICAgZnVuY3Rpb24gZmxvdyhhcmcxLCBhcmcyPykge1xuICAgICAgICAvLyBAZmxvd1xuICAgICAgICBpZiAoaXNTdHJpbmdpc2goYXJnMikpIHtcbiAgICAgICAgICAgIHJldHVybiBzdG9yZUFubm90YXRpb24oYXJnMSwgYXJnMiwgZmxvd0Fubm90YXRpb24pXG4gICAgICAgIH1cbiAgICAgICAgLy8gZmxvdyhmbilcbiAgICAgICAgaWYgKF9fREVWX18gJiYgYXJndW1lbnRzLmxlbmd0aCAhPT0gMSkge1xuICAgICAgICAgICAgZGllKGBGbG93IGV4cGVjdHMgc2luZ2xlIGFyZ3VtZW50IHdpdGggZ2VuZXJhdG9yIGZ1bmN0aW9uYClcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBnZW5lcmF0b3IgPSBhcmcxXG4gICAgICAgIGNvbnN0IG5hbWUgPSBnZW5lcmF0b3IubmFtZSB8fCBcIjx1bm5hbWVkIGZsb3c+XCJcblxuICAgICAgICAvLyBJbXBsZW1lbnRhdGlvbiBiYXNlZCBvbiBodHRwczovL2dpdGh1Yi5jb20vdGovY28vYmxvYi9tYXN0ZXIvaW5kZXguanNcbiAgICAgICAgY29uc3QgcmVzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgY29uc3QgY3R4ID0gdGhpc1xuICAgICAgICAgICAgY29uc3QgYXJncyA9IGFyZ3VtZW50c1xuICAgICAgICAgICAgY29uc3QgcnVuSWQgPSArK2dlbmVyYXRvcklkXG4gICAgICAgICAgICBjb25zdCBnZW4gPSBhY3Rpb24oYCR7bmFtZX0gLSBydW5pZDogJHtydW5JZH0gLSBpbml0YCwgZ2VuZXJhdG9yKS5hcHBseShjdHgsIGFyZ3MpXG4gICAgICAgICAgICBsZXQgcmVqZWN0b3I6IChlcnJvcjogYW55KSA9PiB2b2lkXG4gICAgICAgICAgICBsZXQgcGVuZGluZ1Byb21pc2U6IENhbmNlbGxhYmxlUHJvbWlzZTxhbnk+IHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkXG5cbiAgICAgICAgICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgICAgICAgICAgbGV0IHN0ZXBJZCA9IDBcbiAgICAgICAgICAgICAgICByZWplY3RvciA9IHJlamVjdFxuXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gb25GdWxmaWxsZWQocmVzOiBhbnkpIHtcbiAgICAgICAgICAgICAgICAgICAgcGVuZGluZ1Byb21pc2UgPSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJldFxuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0ID0gYWN0aW9uKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAke25hbWV9IC0gcnVuaWQ6ICR7cnVuSWR9IC0geWllbGQgJHtzdGVwSWQrK31gLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlbi5uZXh0XG4gICAgICAgICAgICAgICAgICAgICAgICApLmNhbGwoZ2VuLCByZXMpXG4gICAgICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZWplY3QoZSlcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIG5leHQocmV0KVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIG9uUmVqZWN0ZWQoZXJyOiBhbnkpIHtcbiAgICAgICAgICAgICAgICAgICAgcGVuZGluZ1Byb21pc2UgPSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJldFxuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0ID0gYWN0aW9uKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGAke25hbWV9IC0gcnVuaWQ6ICR7cnVuSWR9IC0geWllbGQgJHtzdGVwSWQrK31gLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdlbi50aHJvdyFcbiAgICAgICAgICAgICAgICAgICAgICAgICkuY2FsbChnZW4sIGVycilcbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlamVjdChlKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG5leHQocmV0KVxuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIG5leHQocmV0OiBhbnkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlzRnVuY3Rpb24ocmV0Py50aGVuKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW4gYXN5bmMgaXRlcmF0b3JcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldC50aGVuKG5leHQsIHJlamVjdClcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXQuZG9uZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc29sdmUocmV0LnZhbHVlKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHBlbmRpbmdQcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKHJldC52YWx1ZSkgYXMgYW55XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBwZW5kaW5nUHJvbWlzZSEudGhlbihvbkZ1bGZpbGxlZCwgb25SZWplY3RlZClcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBvbkZ1bGZpbGxlZCh1bmRlZmluZWQpIC8vIGtpY2sgb2ZmIHRoZSBwcm9jZXNzXG4gICAgICAgICAgICB9KSBhcyBhbnlcblxuICAgICAgICAgICAgcHJvbWlzZS5jYW5jZWwgPSBhY3Rpb24oYCR7bmFtZX0gLSBydW5pZDogJHtydW5JZH0gLSBjYW5jZWxgLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHBlbmRpbmdQcm9taXNlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjYW5jZWxQcm9taXNlKHBlbmRpbmdQcm9taXNlKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIC8vIEZpbmFsbHkgYmxvY2sgY2FuIHJldHVybiAob3IgeWllbGQpIHN0dWZmLi5cbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzID0gZ2VuLnJldHVybiEodW5kZWZpbmVkIGFzIGFueSlcbiAgICAgICAgICAgICAgICAgICAgLy8gZWF0IGFueXRoaW5nIHRoYXQgcHJvbWlzZSB3b3VsZCBkbywgaXQncyBjYW5jZWxsZWQhXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHlpZWxkZWRQcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKHJlcy52YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgeWllbGRlZFByb21pc2UudGhlbihub29wLCBub29wKVxuICAgICAgICAgICAgICAgICAgICBjYW5jZWxQcm9taXNlKHlpZWxkZWRQcm9taXNlKSAvLyBtYXliZSBpdCBjYW4gYmUgY2FuY2VsbGVkIDopXG4gICAgICAgICAgICAgICAgICAgIC8vIHJlamVjdCBvdXIgb3JpZ2luYWwgcHJvbWlzZVxuICAgICAgICAgICAgICAgICAgICByZWplY3RvcihuZXcgRmxvd0NhbmNlbGxhdGlvbkVycm9yKCkpXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgICAgICAgICByZWplY3RvcihlKSAvLyB0aGVyZSBjb3VsZCBiZSBhIHRocm93aW5nIGZpbmFsbHkgYmxvY2tcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgcmV0dXJuIHByb21pc2VcbiAgICAgICAgfVxuICAgICAgICByZXMuaXNNb2JYRmxvdyA9IHRydWVcbiAgICAgICAgcmV0dXJuIHJlc1xuICAgIH0gYXMgYW55LFxuICAgIGZsb3dBbm5vdGF0aW9uXG4pXG5cbmZsb3cuYm91bmQgPSBjcmVhdGVEZWNvcmF0b3JBbm5vdGF0aW9uKGZsb3dCb3VuZEFubm90YXRpb24pXG5cbmZ1bmN0aW9uIGNhbmNlbFByb21pc2UocHJvbWlzZSkge1xuICAgIGlmIChpc0Z1bmN0aW9uKHByb21pc2UuY2FuY2VsKSkge1xuICAgICAgICBwcm9taXNlLmNhbmNlbCgpXG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZmxvd1Jlc3VsdDxUPihcbiAgICByZXN1bHQ6IFRcbik6IFQgZXh0ZW5kcyBHZW5lcmF0b3I8YW55LCBpbmZlciBSLCBhbnk+XG4gICAgPyBDYW5jZWxsYWJsZVByb21pc2U8Uj5cbiAgICA6IFQgZXh0ZW5kcyBDYW5jZWxsYWJsZVByb21pc2U8YW55PlxuICAgID8gVFxuICAgIDogbmV2ZXIge1xuICAgIHJldHVybiByZXN1bHQgYXMgYW55IC8vIGp1c3QgdHJpY2tpbmcgVHlwZVNjcmlwdCA6KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNGbG93KGZuOiBhbnkpOiBib29sZWFuIHtcbiAgICByZXR1cm4gZm4/LmlzTW9iWEZsb3cgPT09IHRydWVcbn1cbiIsImltcG9ydCB7XG4gICAgJG1vYngsXG4gICAgaXNBdG9tLFxuICAgIGlzQ29tcHV0ZWRWYWx1ZSxcbiAgICBpc09ic2VydmFibGVBcnJheSxcbiAgICBpc09ic2VydmFibGVNYXAsXG4gICAgaXNPYnNlcnZhYmxlT2JqZWN0LFxuICAgIGlzUmVhY3Rpb24sXG4gICAgZGllLFxuICAgIGlzU3RyaW5naXNoXG59IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbmZ1bmN0aW9uIF9pc09ic2VydmFibGUodmFsdWUsIHByb3BlcnR5PzogUHJvcGVydHlLZXkpOiBib29sZWFuIHtcbiAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICBpZiAocHJvcGVydHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAoX19ERVZfXyAmJiAoaXNPYnNlcnZhYmxlTWFwKHZhbHVlKSB8fCBpc09ic2VydmFibGVBcnJheSh2YWx1ZSkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZGllKFxuICAgICAgICAgICAgICAgIFwiaXNPYnNlcnZhYmxlKG9iamVjdCwgcHJvcGVydHlOYW1lKSBpcyBub3Qgc3VwcG9ydGVkIGZvciBhcnJheXMgYW5kIG1hcHMuIFVzZSBtYXAuaGFzIG9yIGFycmF5Lmxlbmd0aCBpbnN0ZWFkLlwiXG4gICAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzT2JzZXJ2YWJsZU9iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZVskbW9ieF0udmFsdWVzXy5oYXMocHJvcGVydHkpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIC8vIEZvciBmaXJzdCBjaGVjaywgc2VlICM3MDFcbiAgICByZXR1cm4gKFxuICAgICAgICBpc09ic2VydmFibGVPYmplY3QodmFsdWUpIHx8XG4gICAgICAgICEhdmFsdWVbJG1vYnhdIHx8XG4gICAgICAgIGlzQXRvbSh2YWx1ZSkgfHxcbiAgICAgICAgaXNSZWFjdGlvbih2YWx1ZSkgfHxcbiAgICAgICAgaXNDb21wdXRlZFZhbHVlKHZhbHVlKVxuICAgIClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzT2JzZXJ2YWJsZSh2YWx1ZTogYW55KTogYm9vbGVhbiB7XG4gICAgaWYgKF9fREVWX18gJiYgYXJndW1lbnRzLmxlbmd0aCAhPT0gMSkge1xuICAgICAgICBkaWUoXG4gICAgICAgICAgICBgaXNPYnNlcnZhYmxlIGV4cGVjdHMgb25seSAxIGFyZ3VtZW50LiBVc2UgaXNPYnNlcnZhYmxlUHJvcCB0byBpbnNwZWN0IHRoZSBvYnNlcnZhYmlsaXR5IG9mIGEgcHJvcGVydHlgXG4gICAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIF9pc09ic2VydmFibGUodmFsdWUpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc09ic2VydmFibGVQcm9wKHZhbHVlOiBhbnksIHByb3BOYW1lOiBQcm9wZXJ0eUtleSk6IGJvb2xlYW4ge1xuICAgIGlmIChfX0RFVl9fICYmICFpc1N0cmluZ2lzaChwcm9wTmFtZSkpIHtcbiAgICAgICAgcmV0dXJuIGRpZShgZXhwZWN0ZWQgYSBwcm9wZXJ0eSBuYW1lIGFzIHNlY29uZCBhcmd1bWVudGApXG4gICAgfVxuICAgIHJldHVybiBfaXNPYnNlcnZhYmxlKHZhbHVlLCBwcm9wTmFtZSlcbn1cbiIsImltcG9ydCB7IGVuZEJhdGNoLCBzdGFydEJhdGNoIH0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuLyoqXG4gKiBEdXJpbmcgYSB0cmFuc2FjdGlvbiBubyB2aWV3cyBhcmUgdXBkYXRlZCB1bnRpbCB0aGUgZW5kIG9mIHRoZSB0cmFuc2FjdGlvbi5cbiAqIFRoZSB0cmFuc2FjdGlvbiB3aWxsIGJlIHJ1biBzeW5jaHJvbm91c2x5IG5vbmV0aGVsZXNzLlxuICpcbiAqIEBwYXJhbSBhY3Rpb24gYSBmdW5jdGlvbiB0aGF0IHVwZGF0ZXMgc29tZSByZWFjdGl2ZSBzdGF0ZVxuICogQHJldHVybnMgYW55IHZhbHVlIHRoYXQgd2FzIHJldHVybmVkIGJ5IHRoZSAnYWN0aW9uJyBwYXJhbWV0ZXIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2FjdGlvbjxUPihhY3Rpb246ICgpID0+IFQsIHRoaXNBcmcgPSB1bmRlZmluZWQpOiBUIHtcbiAgICBzdGFydEJhdGNoKClcbiAgICB0cnkge1xuICAgICAgICByZXR1cm4gYWN0aW9uLmFwcGx5KHRoaXNBcmcpXG4gICAgfSBmaW5hbGx5IHtcbiAgICAgICAgZW5kQmF0Y2goKVxuICAgIH1cbn1cbiIsImltcG9ydCB7IExhbWJkYSwgb25jZSwgdW50cmFja2VkRW5kLCB1bnRyYWNrZWRTdGFydCwgZGllIH0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuZXhwb3J0IHR5cGUgSUludGVyY2VwdG9yPFQ+ID0gKGNoYW5nZTogVCkgPT4gVCB8IG51bGxcblxuZXhwb3J0IGludGVyZmFjZSBJSW50ZXJjZXB0YWJsZTxUPiB7XG4gICAgaW50ZXJjZXB0b3JzXzogSUludGVyY2VwdG9yPFQ+W10gfCB1bmRlZmluZWRcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGhhc0ludGVyY2VwdG9ycyhpbnRlcmNlcHRhYmxlOiBJSW50ZXJjZXB0YWJsZTxhbnk+KSB7XG4gICAgcmV0dXJuIGludGVyY2VwdGFibGUuaW50ZXJjZXB0b3JzXyAhPT0gdW5kZWZpbmVkICYmIGludGVyY2VwdGFibGUuaW50ZXJjZXB0b3JzXy5sZW5ndGggPiAwXG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3RlckludGVyY2VwdG9yPFQ+KFxuICAgIGludGVyY2VwdGFibGU6IElJbnRlcmNlcHRhYmxlPFQ+LFxuICAgIGhhbmRsZXI6IElJbnRlcmNlcHRvcjxUPlxuKTogTGFtYmRhIHtcbiAgICBjb25zdCBpbnRlcmNlcHRvcnMgPSBpbnRlcmNlcHRhYmxlLmludGVyY2VwdG9yc18gfHwgKGludGVyY2VwdGFibGUuaW50ZXJjZXB0b3JzXyA9IFtdKVxuICAgIGludGVyY2VwdG9ycy5wdXNoKGhhbmRsZXIpXG4gICAgcmV0dXJuIG9uY2UoKCkgPT4ge1xuICAgICAgICBjb25zdCBpZHggPSBpbnRlcmNlcHRvcnMuaW5kZXhPZihoYW5kbGVyKVxuICAgICAgICBpZiAoaWR4ICE9PSAtMSkge1xuICAgICAgICAgICAgaW50ZXJjZXB0b3JzLnNwbGljZShpZHgsIDEpXG4gICAgICAgIH1cbiAgICB9KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gaW50ZXJjZXB0Q2hhbmdlPFQ+KFxuICAgIGludGVyY2VwdGFibGU6IElJbnRlcmNlcHRhYmxlPFQgfCBudWxsPixcbiAgICBjaGFuZ2U6IFQgfCBudWxsXG4pOiBUIHwgbnVsbCB7XG4gICAgY29uc3QgcHJldlUgPSB1bnRyYWNrZWRTdGFydCgpXG4gICAgdHJ5IHtcbiAgICAgICAgLy8gSW50ZXJjZXB0b3IgY2FuIG1vZGlmeSB0aGUgYXJyYXksIGNvcHkgaXQgdG8gYXZvaWQgY29uY3VycmVudCBtb2RpZmljYXRpb24sIHNlZSAjMTk1MFxuICAgICAgICBjb25zdCBpbnRlcmNlcHRvcnMgPSBbLi4uKGludGVyY2VwdGFibGUuaW50ZXJjZXB0b3JzXyB8fCBbXSldXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gaW50ZXJjZXB0b3JzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgY2hhbmdlID0gaW50ZXJjZXB0b3JzW2ldKGNoYW5nZSlcbiAgICAgICAgICAgIGlmIChjaGFuZ2UgJiYgIShjaGFuZ2UgYXMgYW55KS50eXBlKSB7XG4gICAgICAgICAgICAgICAgZGllKDE0KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFjaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjaGFuZ2VcbiAgICB9IGZpbmFsbHkge1xuICAgICAgICB1bnRyYWNrZWRFbmQocHJldlUpXG4gICAgfVxufVxuIiwiaW1wb3J0IHsgTGFtYmRhLCBvbmNlLCB1bnRyYWNrZWRFbmQsIHVudHJhY2tlZFN0YXJ0IH0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuZXhwb3J0IGludGVyZmFjZSBJTGlzdGVuYWJsZSB7XG4gICAgY2hhbmdlTGlzdGVuZXJzXzogRnVuY3Rpb25bXSB8IHVuZGVmaW5lZFxufVxuXG5leHBvcnQgZnVuY3Rpb24gaGFzTGlzdGVuZXJzKGxpc3RlbmFibGU6IElMaXN0ZW5hYmxlKSB7XG4gICAgcmV0dXJuIGxpc3RlbmFibGUuY2hhbmdlTGlzdGVuZXJzXyAhPT0gdW5kZWZpbmVkICYmIGxpc3RlbmFibGUuY2hhbmdlTGlzdGVuZXJzXy5sZW5ndGggPiAwXG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWdpc3Rlckxpc3RlbmVyKGxpc3RlbmFibGU6IElMaXN0ZW5hYmxlLCBoYW5kbGVyOiBGdW5jdGlvbik6IExhbWJkYSB7XG4gICAgY29uc3QgbGlzdGVuZXJzID0gbGlzdGVuYWJsZS5jaGFuZ2VMaXN0ZW5lcnNfIHx8IChsaXN0ZW5hYmxlLmNoYW5nZUxpc3RlbmVyc18gPSBbXSlcbiAgICBsaXN0ZW5lcnMucHVzaChoYW5kbGVyKVxuICAgIHJldHVybiBvbmNlKCgpID0+IHtcbiAgICAgICAgY29uc3QgaWR4ID0gbGlzdGVuZXJzLmluZGV4T2YoaGFuZGxlcilcbiAgICAgICAgaWYgKGlkeCAhPT0gLTEpIHtcbiAgICAgICAgICAgIGxpc3RlbmVycy5zcGxpY2UoaWR4LCAxKVxuICAgICAgICB9XG4gICAgfSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG5vdGlmeUxpc3RlbmVyczxUPihsaXN0ZW5hYmxlOiBJTGlzdGVuYWJsZSwgY2hhbmdlOiBUKSB7XG4gICAgY29uc3QgcHJldlUgPSB1bnRyYWNrZWRTdGFydCgpXG4gICAgbGV0IGxpc3RlbmVycyA9IGxpc3RlbmFibGUuY2hhbmdlTGlzdGVuZXJzX1xuICAgIGlmICghbGlzdGVuZXJzKSB7XG4gICAgICAgIHJldHVyblxuICAgIH1cbiAgICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuc2xpY2UoKVxuICAgIGZvciAobGV0IGkgPSAwLCBsID0gbGlzdGVuZXJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBsaXN0ZW5lcnNbaV0oY2hhbmdlKVxuICAgIH1cbiAgICB1bnRyYWNrZWRFbmQocHJldlUpXG59XG4iLCJpbXBvcnQge1xuICAgICRtb2J4LFxuICAgIGFzT2JzZXJ2YWJsZU9iamVjdCxcbiAgICBBbm5vdGF0aW9uc01hcCxcbiAgICBlbmRCYXRjaCxcbiAgICBzdGFydEJhdGNoLFxuICAgIENyZWF0ZU9ic2VydmFibGVPcHRpb25zLFxuICAgIE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbixcbiAgICBjb2xsZWN0U3RvcmVkQW5ub3RhdGlvbnMsXG4gICAgaXNQbGFpbk9iamVjdCxcbiAgICBpc09ic2VydmFibGVPYmplY3QsXG4gICAgZGllLFxuICAgIG93bktleXMsXG4gICAgZXh0ZW5kT2JzZXJ2YWJsZSxcbiAgICBhZGRIaWRkZW5Qcm9wLFxuICAgIHN0b3JlZEFubm90YXRpb25zU3ltYm9sXG59IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbi8vIEhhY2sgYmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL01pY3Jvc29mdC9UeXBlU2NyaXB0L2lzc3Vlcy8xNDgyOSNpc3N1ZWNvbW1lbnQtMzIyMjY3MDg5XG4vLyBXZSBuZWVkIHRoaXMsIGJlY2F1c2Ugb3RoZXJ3aXNlLCBBZGRpdGlvbmFsS2V5cyBpcyBnb2luZyB0byBiZSBpbmZlcnJlZCB0byBiZSBhbnlcbi8vIHNldCBvZiBzdXBlcmZsdW91cyBrZXlzLiBCdXQsIHdlIHJhdGhlciB3YW50IHRvIGdldCBhIGNvbXBpbGUgZXJyb3IgdW5sZXNzIEFkZGl0aW9uYWxLZXlzIGlzXG4vLyBfZXhwbGljaXR5XyBwYXNzZWQgYXMgZ2VuZXJpYyBhcmd1bWVudFxuLy8gRml4ZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9tb2J4anMvbW9ieC9pc3N1ZXMvMjMyNSNpc3N1ZWNvbW1lbnQtNjkxMDcwMDIyXG50eXBlIE5vSW5mZXI8VD4gPSBbVF1bVCBleHRlbmRzIGFueSA/IDAgOiBuZXZlcl1cblxuZXhwb3J0IGZ1bmN0aW9uIG1ha2VPYnNlcnZhYmxlPFQgZXh0ZW5kcyBvYmplY3QsIEFkZGl0aW9uYWxLZXlzIGV4dGVuZHMgUHJvcGVydHlLZXkgPSBuZXZlcj4oXG4gICAgdGFyZ2V0OiBULFxuICAgIGFubm90YXRpb25zPzogQW5ub3RhdGlvbnNNYXA8VCwgTm9JbmZlcjxBZGRpdGlvbmFsS2V5cz4+LFxuICAgIG9wdGlvbnM/OiBDcmVhdGVPYnNlcnZhYmxlT3B0aW9uc1xuKTogVCB7XG4gICAgY29uc3QgYWRtOiBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24gPSBhc09ic2VydmFibGVPYmplY3QodGFyZ2V0LCBvcHRpb25zKVskbW9ieF1cbiAgICBzdGFydEJhdGNoKClcbiAgICB0cnkge1xuICAgICAgICBpZiAoX19ERVZfXyAmJiBhbm5vdGF0aW9ucyAmJiB0YXJnZXRbc3RvcmVkQW5ub3RhdGlvbnNTeW1ib2xdKSB7XG4gICAgICAgICAgICBkaWUoXG4gICAgICAgICAgICAgICAgYG1ha2VPYnNlcnZhYmxlIHNlY29uZCBhcmcgbXVzdCBiZSBudWxsaXNoIHdoZW4gdXNpbmcgZGVjb3JhdG9ycy4gTWl4aW5nIEBkZWNvcmF0b3Igc3ludGF4IHdpdGggYW5ub3RhdGlvbnMgaXMgbm90IHN1cHBvcnRlZC5gXG4gICAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgICAgLy8gRGVmYXVsdCB0byBkZWNvcmF0b3JzXG4gICAgICAgIGFubm90YXRpb25zID8/PSBjb2xsZWN0U3RvcmVkQW5ub3RhdGlvbnModGFyZ2V0KVxuXG4gICAgICAgIC8vIEFubm90YXRlXG4gICAgICAgIG93bktleXMoYW5ub3RhdGlvbnMpLmZvckVhY2goa2V5ID0+IGFkbS5tYWtlXyhrZXksIGFubm90YXRpb25zIVtrZXldKSlcbiAgICB9IGZpbmFsbHkge1xuICAgICAgICBlbmRCYXRjaCgpXG4gICAgfVxuICAgIHJldHVybiB0YXJnZXRcbn1cblxuLy8gcHJvdG9ba2V5c1N5bWJvbF0gPSBuZXcgU2V0PFByb3BlcnR5S2V5PigpXG5jb25zdCBrZXlzU3ltYm9sID0gU3ltYm9sKFwibW9ieC1rZXlzXCIpXG5cbmV4cG9ydCBmdW5jdGlvbiBtYWtlQXV0b09ic2VydmFibGU8VCBleHRlbmRzIG9iamVjdCwgQWRkaXRpb25hbEtleXMgZXh0ZW5kcyBQcm9wZXJ0eUtleSA9IG5ldmVyPihcbiAgICB0YXJnZXQ6IFQsXG4gICAgb3ZlcnJpZGVzPzogQW5ub3RhdGlvbnNNYXA8VCwgTm9JbmZlcjxBZGRpdGlvbmFsS2V5cz4+LFxuICAgIG9wdGlvbnM/OiBDcmVhdGVPYnNlcnZhYmxlT3B0aW9uc1xuKTogVCB7XG4gICAgaWYgKF9fREVWX18pIHtcbiAgICAgICAgaWYgKCFpc1BsYWluT2JqZWN0KHRhcmdldCkgJiYgIWlzUGxhaW5PYmplY3QoT2JqZWN0LmdldFByb3RvdHlwZU9mKHRhcmdldCkpKSB7XG4gICAgICAgICAgICBkaWUoYCdtYWtlQXV0b09ic2VydmFibGUnIGNhbiBvbmx5IGJlIHVzZWQgZm9yIGNsYXNzZXMgdGhhdCBkb24ndCBoYXZlIGEgc3VwZXJjbGFzc2ApXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzT2JzZXJ2YWJsZU9iamVjdCh0YXJnZXQpKSB7XG4gICAgICAgICAgICBkaWUoYG1ha2VBdXRvT2JzZXJ2YWJsZSBjYW4gb25seSBiZSB1c2VkIG9uIG9iamVjdHMgbm90IGFscmVhZHkgbWFkZSBvYnNlcnZhYmxlYClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIE9wdGltaXphdGlvbjogYXZvaWQgdmlzaXRpbmcgcHJvdG9zXG4gICAgLy8gQXNzdW1lcyB0aGF0IGFubm90YXRpb24ubWFrZV8vLmV4dGVuZF8gd29ya3MgdGhlIHNhbWUgZm9yIHBsYWluIG9iamVjdHNcbiAgICBpZiAoaXNQbGFpbk9iamVjdCh0YXJnZXQpKSB7XG4gICAgICAgIHJldHVybiBleHRlbmRPYnNlcnZhYmxlKHRhcmdldCwgdGFyZ2V0LCBvdmVycmlkZXMsIG9wdGlvbnMpXG4gICAgfVxuXG4gICAgY29uc3QgYWRtOiBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24gPSBhc09ic2VydmFibGVPYmplY3QodGFyZ2V0LCBvcHRpb25zKVskbW9ieF1cblxuICAgIC8vIE9wdGltaXphdGlvbjogY2FjaGUga2V5cyBvbiBwcm90b1xuICAgIC8vIEFzc3VtZXMgbWFrZUF1dG9PYnNlcnZhYmxlIGNhbiBiZSBjYWxsZWQgb25seSBvbmNlIHBlciBvYmplY3QgYW5kIGNhbid0IGJlIHVzZWQgaW4gc3ViY2xhc3NcbiAgICBpZiAoIXRhcmdldFtrZXlzU3ltYm9sXSkge1xuICAgICAgICBjb25zdCBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZih0YXJnZXQpXG4gICAgICAgIGNvbnN0IGtleXMgPSBuZXcgU2V0KFsuLi5vd25LZXlzKHRhcmdldCksIC4uLm93bktleXMocHJvdG8pXSlcbiAgICAgICAga2V5cy5kZWxldGUoXCJjb25zdHJ1Y3RvclwiKVxuICAgICAgICBrZXlzLmRlbGV0ZSgkbW9ieClcbiAgICAgICAgYWRkSGlkZGVuUHJvcChwcm90bywga2V5c1N5bWJvbCwga2V5cylcbiAgICB9XG5cbiAgICBzdGFydEJhdGNoKClcbiAgICB0cnkge1xuICAgICAgICB0YXJnZXRba2V5c1N5bWJvbF0uZm9yRWFjaChrZXkgPT5cbiAgICAgICAgICAgIGFkbS5tYWtlXyhcbiAgICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgICAgLy8gbXVzdCBwYXNzIFwidW5kZWZpbmVkXCIgZm9yIHsga2V5OiB1bmRlZmluZWQgfVxuICAgICAgICAgICAgICAgICFvdmVycmlkZXMgPyB0cnVlIDoga2V5IGluIG92ZXJyaWRlcyA/IG92ZXJyaWRlc1trZXldIDogdHJ1ZVxuICAgICAgICAgICAgKVxuICAgICAgICApXG4gICAgfSBmaW5hbGx5IHtcbiAgICAgICAgZW5kQmF0Y2goKVxuICAgIH1cbiAgICByZXR1cm4gdGFyZ2V0XG59XG4iLCJpbXBvcnQge1xuICAgICRtb2J4LFxuICAgIEF0b20sXG4gICAgRU1QVFlfQVJSQVksXG4gICAgSUF0b20sXG4gICAgSUVuaGFuY2VyLFxuICAgIElJbnRlcmNlcHRhYmxlLFxuICAgIElJbnRlcmNlcHRvcixcbiAgICBJTGlzdGVuYWJsZSxcbiAgICBMYW1iZGEsXG4gICAgYWRkSGlkZGVuRmluYWxQcm9wLFxuICAgIGNoZWNrSWZTdGF0ZU1vZGlmaWNhdGlvbnNBcmVBbGxvd2VkLFxuICAgIGNyZWF0ZUluc3RhbmNlb2ZQcmVkaWNhdGUsXG4gICAgZ2V0TmV4dElkLFxuICAgIGhhc0ludGVyY2VwdG9ycyxcbiAgICBoYXNMaXN0ZW5lcnMsXG4gICAgaW50ZXJjZXB0Q2hhbmdlLFxuICAgIGlzT2JqZWN0LFxuICAgIGlzU3B5RW5hYmxlZCxcbiAgICBub3RpZnlMaXN0ZW5lcnMsXG4gICAgcmVnaXN0ZXJJbnRlcmNlcHRvcixcbiAgICByZWdpc3Rlckxpc3RlbmVyLFxuICAgIHNweVJlcG9ydEVuZCxcbiAgICBzcHlSZXBvcnRTdGFydCxcbiAgICBhbGxvd1N0YXRlQ2hhbmdlc1N0YXJ0LFxuICAgIGFsbG93U3RhdGVDaGFuZ2VzRW5kLFxuICAgIGFzc2VydFByb3hpZXMsXG4gICAgcmVzZXJ2ZUFycmF5QnVmZmVyLFxuICAgIGhhc1Byb3AsXG4gICAgZGllLFxuICAgIGdsb2JhbFN0YXRlXG59IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbmNvbnN0IFNQTElDRSA9IFwic3BsaWNlXCJcbmV4cG9ydCBjb25zdCBVUERBVEUgPSBcInVwZGF0ZVwiXG5leHBvcnQgY29uc3QgTUFYX1NQTElDRV9TSVpFID0gMTAwMDAgLy8gU2VlIGUuZy4gaHR0cHM6Ly9naXRodWIuY29tL21vYnhqcy9tb2J4L2lzc3Vlcy84NTlcblxuZXhwb3J0IGludGVyZmFjZSBJT2JzZXJ2YWJsZUFycmF5PFQgPSBhbnk+IGV4dGVuZHMgQXJyYXk8VD4ge1xuICAgIHNwbGljZVdpdGhBcnJheShpbmRleDogbnVtYmVyLCBkZWxldGVDb3VudD86IG51bWJlciwgbmV3SXRlbXM/OiBUW10pOiBUW11cbiAgICBjbGVhcigpOiBUW11cbiAgICByZXBsYWNlKG5ld0l0ZW1zOiBUW10pOiBUW11cbiAgICByZW1vdmUodmFsdWU6IFQpOiBib29sZWFuXG4gICAgdG9KU09OKCk6IFRbXVxufVxuXG5pbnRlcmZhY2UgSUFycmF5QmFzZUNoYW5nZTxUPiB7XG4gICAgb2JqZWN0OiBJT2JzZXJ2YWJsZUFycmF5PFQ+XG4gICAgb2JzZXJ2YWJsZUtpbmQ6IFwiYXJyYXlcIlxuICAgIGRlYnVnT2JqZWN0TmFtZTogc3RyaW5nXG4gICAgaW5kZXg6IG51bWJlclxufVxuXG5leHBvcnQgdHlwZSBJQXJyYXlEaWRDaGFuZ2U8VCA9IGFueT4gPSBJQXJyYXlVcGRhdGU8VD4gfCBJQXJyYXlTcGxpY2U8VD5cblxuZXhwb3J0IGludGVyZmFjZSBJQXJyYXlVcGRhdGU8VCA9IGFueT4gZXh0ZW5kcyBJQXJyYXlCYXNlQ2hhbmdlPFQ+IHtcbiAgICB0eXBlOiBcInVwZGF0ZVwiXG4gICAgbmV3VmFsdWU6IFRcbiAgICBvbGRWYWx1ZTogVFxufVxuXG5leHBvcnQgaW50ZXJmYWNlIElBcnJheVNwbGljZTxUID0gYW55PiBleHRlbmRzIElBcnJheUJhc2VDaGFuZ2U8VD4ge1xuICAgIHR5cGU6IFwic3BsaWNlXCJcbiAgICBhZGRlZDogVFtdXG4gICAgYWRkZWRDb3VudDogbnVtYmVyXG4gICAgcmVtb3ZlZDogVFtdXG4gICAgcmVtb3ZlZENvdW50OiBudW1iZXJcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJQXJyYXlXaWxsQ2hhbmdlPFQgPSBhbnk+IHtcbiAgICBvYmplY3Q6IElPYnNlcnZhYmxlQXJyYXk8VD5cbiAgICBpbmRleDogbnVtYmVyXG4gICAgdHlwZTogXCJ1cGRhdGVcIlxuICAgIG5ld1ZhbHVlOiBUXG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUFycmF5V2lsbFNwbGljZTxUID0gYW55PiB7XG4gICAgb2JqZWN0OiBJT2JzZXJ2YWJsZUFycmF5PFQ+XG4gICAgaW5kZXg6IG51bWJlclxuICAgIHR5cGU6IFwic3BsaWNlXCJcbiAgICBhZGRlZDogVFtdXG4gICAgcmVtb3ZlZENvdW50OiBudW1iZXJcbn1cblxuY29uc3QgYXJyYXlUcmFwcyA9IHtcbiAgICBnZXQodGFyZ2V0LCBuYW1lKSB7XG4gICAgICAgIGNvbnN0IGFkbTogT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24gPSB0YXJnZXRbJG1vYnhdXG4gICAgICAgIGlmIChuYW1lID09PSAkbW9ieCkge1xuICAgICAgICAgICAgcmV0dXJuIGFkbVxuICAgICAgICB9XG4gICAgICAgIGlmIChuYW1lID09PSBcImxlbmd0aFwiKSB7XG4gICAgICAgICAgICByZXR1cm4gYWRtLmdldEFycmF5TGVuZ3RoXygpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBuYW1lID09PSBcInN0cmluZ1wiICYmICFpc05hTihuYW1lIGFzIGFueSkpIHtcbiAgICAgICAgICAgIHJldHVybiBhZG0uZ2V0XyhwYXJzZUludChuYW1lKSlcbiAgICAgICAgfVxuICAgICAgICBpZiAoaGFzUHJvcChhcnJheUV4dGVuc2lvbnMsIG5hbWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gYXJyYXlFeHRlbnNpb25zW25hbWVdXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhcmdldFtuYW1lXVxuICAgIH0sXG4gICAgc2V0KHRhcmdldCwgbmFtZSwgdmFsdWUpOiBib29sZWFuIHtcbiAgICAgICAgY29uc3QgYWRtOiBPYnNlcnZhYmxlQXJyYXlBZG1pbmlzdHJhdGlvbiA9IHRhcmdldFskbW9ieF1cbiAgICAgICAgaWYgKG5hbWUgPT09IFwibGVuZ3RoXCIpIHtcbiAgICAgICAgICAgIGFkbS5zZXRBcnJheUxlbmd0aF8odmFsdWUpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZiBuYW1lID09PSBcInN5bWJvbFwiIHx8IGlzTmFOKG5hbWUpKSB7XG4gICAgICAgICAgICB0YXJnZXRbbmFtZV0gPSB2YWx1ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gbnVtZXJpYyBzdHJpbmdcbiAgICAgICAgICAgIGFkbS5zZXRfKHBhcnNlSW50KG5hbWUpLCB2YWx1ZSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH0sXG4gICAgcHJldmVudEV4dGVuc2lvbnMoKSB7XG4gICAgICAgIGRpZSgxNSlcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBPYnNlcnZhYmxlQXJyYXlBZG1pbmlzdHJhdGlvblxuICAgIGltcGxlbWVudHMgSUludGVyY2VwdGFibGU8SUFycmF5V2lsbENoYW5nZTxhbnk+IHwgSUFycmF5V2lsbFNwbGljZTxhbnk+PiwgSUxpc3RlbmFibGVcbntcbiAgICBhdG9tXzogSUF0b21cbiAgICByZWFkb25seSB2YWx1ZXNfOiBhbnlbXSA9IFtdIC8vIHRoaXMgaXMgdGhlIHByb3AgdGhhdCBnZXRzIHByb3hpZWQsIHNvIGNhbid0IHJlcGxhY2UgaXQhXG4gICAgaW50ZXJjZXB0b3JzX1xuICAgIGNoYW5nZUxpc3RlbmVyc19cbiAgICBlbmhhbmNlcl86IChuZXdWOiBhbnksIG9sZFY6IGFueSB8IHVuZGVmaW5lZCkgPT4gYW55XG4gICAgZGVoYW5jZXI6IGFueVxuICAgIHByb3h5XyE6IElPYnNlcnZhYmxlQXJyYXk8YW55PlxuICAgIGxhc3RLbm93bkxlbmd0aF8gPSAwXG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgbmFtZSA9IF9fREVWX18gPyBcIk9ic2VydmFibGVBcnJheUBcIiArIGdldE5leHRJZCgpIDogXCJPYnNlcnZhYmxlQXJyYXlcIixcbiAgICAgICAgZW5oYW5jZXI6IElFbmhhbmNlcjxhbnk+LFxuICAgICAgICBwdWJsaWMgb3duZWRfOiBib29sZWFuLFxuICAgICAgICBwdWJsaWMgbGVnYWN5TW9kZV86IGJvb2xlYW5cbiAgICApIHtcbiAgICAgICAgdGhpcy5hdG9tXyA9IG5ldyBBdG9tKG5hbWUpXG4gICAgICAgIHRoaXMuZW5oYW5jZXJfID0gKG5ld1YsIG9sZFYpID0+XG4gICAgICAgICAgICBlbmhhbmNlcihuZXdWLCBvbGRWLCBfX0RFVl9fID8gbmFtZSArIFwiWy4uXVwiIDogXCJPYnNlcnZhYmxlQXJyYXlbLi5dXCIpXG4gICAgfVxuXG4gICAgZGVoYW5jZVZhbHVlXyh2YWx1ZTogYW55KTogYW55IHtcbiAgICAgICAgaWYgKHRoaXMuZGVoYW5jZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVoYW5jZXIodmFsdWUpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlXG4gICAgfVxuXG4gICAgZGVoYW5jZVZhbHVlc18odmFsdWVzOiBhbnlbXSk6IGFueVtdIHtcbiAgICAgICAgaWYgKHRoaXMuZGVoYW5jZXIgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlcy5tYXAodGhpcy5kZWhhbmNlcikgYXMgYW55XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlc1xuICAgIH1cblxuICAgIGludGVyY2VwdF8oaGFuZGxlcjogSUludGVyY2VwdG9yPElBcnJheVdpbGxDaGFuZ2U8YW55PiB8IElBcnJheVdpbGxTcGxpY2U8YW55Pj4pOiBMYW1iZGEge1xuICAgICAgICByZXR1cm4gcmVnaXN0ZXJJbnRlcmNlcHRvcjxJQXJyYXlXaWxsQ2hhbmdlPGFueT4gfCBJQXJyYXlXaWxsU3BsaWNlPGFueT4+KHRoaXMsIGhhbmRsZXIpXG4gICAgfVxuXG4gICAgb2JzZXJ2ZV8oXG4gICAgICAgIGxpc3RlbmVyOiAoY2hhbmdlRGF0YTogSUFycmF5RGlkQ2hhbmdlPGFueT4pID0+IHZvaWQsXG4gICAgICAgIGZpcmVJbW1lZGlhdGVseSA9IGZhbHNlXG4gICAgKTogTGFtYmRhIHtcbiAgICAgICAgaWYgKGZpcmVJbW1lZGlhdGVseSkge1xuICAgICAgICAgICAgbGlzdGVuZXIoPElBcnJheVNwbGljZTxhbnk+PntcbiAgICAgICAgICAgICAgICBvYnNlcnZhYmxlS2luZDogXCJhcnJheVwiLFxuICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcy5wcm94eV8gYXMgYW55LFxuICAgICAgICAgICAgICAgIGRlYnVnT2JqZWN0TmFtZTogdGhpcy5hdG9tXy5uYW1lXyxcbiAgICAgICAgICAgICAgICB0eXBlOiBcInNwbGljZVwiLFxuICAgICAgICAgICAgICAgIGluZGV4OiAwLFxuICAgICAgICAgICAgICAgIGFkZGVkOiB0aGlzLnZhbHVlc18uc2xpY2UoKSxcbiAgICAgICAgICAgICAgICBhZGRlZENvdW50OiB0aGlzLnZhbHVlc18ubGVuZ3RoLFxuICAgICAgICAgICAgICAgIHJlbW92ZWQ6IFtdLFxuICAgICAgICAgICAgICAgIHJlbW92ZWRDb3VudDogMFxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVnaXN0ZXJMaXN0ZW5lcih0aGlzLCBsaXN0ZW5lcilcbiAgICB9XG5cbiAgICBnZXRBcnJheUxlbmd0aF8oKTogbnVtYmVyIHtcbiAgICAgICAgdGhpcy5hdG9tXy5yZXBvcnRPYnNlcnZlZCgpXG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlc18ubGVuZ3RoXG4gICAgfVxuXG4gICAgc2V0QXJyYXlMZW5ndGhfKG5ld0xlbmd0aDogbnVtYmVyKSB7XG4gICAgICAgIGlmICh0eXBlb2YgbmV3TGVuZ3RoICE9PSBcIm51bWJlclwiIHx8IGlzTmFOKG5ld0xlbmd0aCkgfHwgbmV3TGVuZ3RoIDwgMCkge1xuICAgICAgICAgICAgZGllKFwiT3V0IG9mIHJhbmdlOiBcIiArIG5ld0xlbmd0aClcbiAgICAgICAgfVxuICAgICAgICBsZXQgY3VycmVudExlbmd0aCA9IHRoaXMudmFsdWVzXy5sZW5ndGhcbiAgICAgICAgaWYgKG5ld0xlbmd0aCA9PT0gY3VycmVudExlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgIH0gZWxzZSBpZiAobmV3TGVuZ3RoID4gY3VycmVudExlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgbmV3SXRlbXMgPSBuZXcgQXJyYXkobmV3TGVuZ3RoIC0gY3VycmVudExlbmd0aClcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmV3TGVuZ3RoIC0gY3VycmVudExlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbmV3SXRlbXNbaV0gPSB1bmRlZmluZWRcbiAgICAgICAgICAgIH0gLy8gTm8gQXJyYXkuZmlsbCBldmVyeXdoZXJlLi4uXG4gICAgICAgICAgICB0aGlzLnNwbGljZVdpdGhBcnJheV8oY3VycmVudExlbmd0aCwgMCwgbmV3SXRlbXMpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNwbGljZVdpdGhBcnJheV8obmV3TGVuZ3RoLCBjdXJyZW50TGVuZ3RoIC0gbmV3TGVuZ3RoKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgdXBkYXRlQXJyYXlMZW5ndGhfKG9sZExlbmd0aDogbnVtYmVyLCBkZWx0YTogbnVtYmVyKSB7XG4gICAgICAgIGlmIChvbGRMZW5ndGggIT09IHRoaXMubGFzdEtub3duTGVuZ3RoXykge1xuICAgICAgICAgICAgZGllKDE2KVxuICAgICAgICB9XG4gICAgICAgIHRoaXMubGFzdEtub3duTGVuZ3RoXyArPSBkZWx0YVxuICAgICAgICBpZiAodGhpcy5sZWdhY3lNb2RlXyAmJiBkZWx0YSA+IDApIHtcbiAgICAgICAgICAgIHJlc2VydmVBcnJheUJ1ZmZlcihvbGRMZW5ndGggKyBkZWx0YSArIDEpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBzcGxpY2VXaXRoQXJyYXlfKGluZGV4OiBudW1iZXIsIGRlbGV0ZUNvdW50PzogbnVtYmVyLCBuZXdJdGVtcz86IGFueVtdKTogYW55W10ge1xuICAgICAgICBjaGVja0lmU3RhdGVNb2RpZmljYXRpb25zQXJlQWxsb3dlZCh0aGlzLmF0b21fKVxuICAgICAgICBjb25zdCBsZW5ndGggPSB0aGlzLnZhbHVlc18ubGVuZ3RoXG5cbiAgICAgICAgaWYgKGluZGV4ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGluZGV4ID0gMFxuICAgICAgICB9IGVsc2UgaWYgKGluZGV4ID4gbGVuZ3RoKSB7XG4gICAgICAgICAgICBpbmRleCA9IGxlbmd0aFxuICAgICAgICB9IGVsc2UgaWYgKGluZGV4IDwgMCkge1xuICAgICAgICAgICAgaW5kZXggPSBNYXRoLm1heCgwLCBsZW5ndGggKyBpbmRleClcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICBkZWxldGVDb3VudCA9IGxlbmd0aCAtIGluZGV4XG4gICAgICAgIH0gZWxzZSBpZiAoZGVsZXRlQ291bnQgPT09IHVuZGVmaW5lZCB8fCBkZWxldGVDb3VudCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgZGVsZXRlQ291bnQgPSAwXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkZWxldGVDb3VudCA9IE1hdGgubWF4KDAsIE1hdGgubWluKGRlbGV0ZUNvdW50LCBsZW5ndGggLSBpbmRleCkpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAobmV3SXRlbXMgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgbmV3SXRlbXMgPSBFTVBUWV9BUlJBWVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGhhc0ludGVyY2VwdG9ycyh0aGlzKSkge1xuICAgICAgICAgICAgY29uc3QgY2hhbmdlID0gaW50ZXJjZXB0Q2hhbmdlPElBcnJheVdpbGxTcGxpY2U8YW55Pj4odGhpcyBhcyBhbnksIHtcbiAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMucHJveHlfIGFzIGFueSxcbiAgICAgICAgICAgICAgICB0eXBlOiBTUExJQ0UsXG4gICAgICAgICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgICAgICAgcmVtb3ZlZENvdW50OiBkZWxldGVDb3VudCxcbiAgICAgICAgICAgICAgICBhZGRlZDogbmV3SXRlbXNcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBpZiAoIWNoYW5nZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBFTVBUWV9BUlJBWVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVsZXRlQ291bnQgPSBjaGFuZ2UucmVtb3ZlZENvdW50XG4gICAgICAgICAgICBuZXdJdGVtcyA9IGNoYW5nZS5hZGRlZFxuICAgICAgICB9XG5cbiAgICAgICAgbmV3SXRlbXMgPVxuICAgICAgICAgICAgbmV3SXRlbXMubGVuZ3RoID09PSAwID8gbmV3SXRlbXMgOiBuZXdJdGVtcy5tYXAodiA9PiB0aGlzLmVuaGFuY2VyXyh2LCB1bmRlZmluZWQpKVxuICAgICAgICBpZiAodGhpcy5sZWdhY3lNb2RlXyB8fCBfX0RFVl9fKSB7XG4gICAgICAgICAgICBjb25zdCBsZW5ndGhEZWx0YSA9IG5ld0l0ZW1zLmxlbmd0aCAtIGRlbGV0ZUNvdW50XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZUFycmF5TGVuZ3RoXyhsZW5ndGgsIGxlbmd0aERlbHRhKSAvLyBjaGVja3MgaWYgaW50ZXJuYWwgYXJyYXkgd2Fzbid0IG1vZGlmaWVkXG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgcmVzID0gdGhpcy5zcGxpY2VJdGVtc0ludG9WYWx1ZXNfKGluZGV4LCBkZWxldGVDb3VudCwgbmV3SXRlbXMpXG5cbiAgICAgICAgaWYgKGRlbGV0ZUNvdW50ICE9PSAwIHx8IG5ld0l0ZW1zLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICAgICAgdGhpcy5ub3RpZnlBcnJheVNwbGljZV8oaW5kZXgsIG5ld0l0ZW1zLCByZXMpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuZGVoYW5jZVZhbHVlc18ocmVzKVxuICAgIH1cblxuICAgIHNwbGljZUl0ZW1zSW50b1ZhbHVlc18oaW5kZXg6IG51bWJlciwgZGVsZXRlQ291bnQ6IG51bWJlciwgbmV3SXRlbXM6IGFueVtdKTogYW55W10ge1xuICAgICAgICBpZiAobmV3SXRlbXMubGVuZ3RoIDwgTUFYX1NQTElDRV9TSVpFKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZXNfLnNwbGljZShpbmRleCwgZGVsZXRlQ291bnQsIC4uLm5ld0l0ZW1zKVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gVGhlIGl0ZW1zIHJlbW92ZWQgYnkgdGhlIHNwbGljZVxuICAgICAgICAgICAgY29uc3QgcmVzID0gdGhpcy52YWx1ZXNfLnNsaWNlKGluZGV4LCBpbmRleCArIGRlbGV0ZUNvdW50KVxuICAgICAgICAgICAgLy8gVGhlIGl0ZW1zIHRoYXQgdGhhdCBzaG91bGQgcmVtYWluIGF0IHRoZSBlbmQgb2YgdGhlIGFycmF5XG4gICAgICAgICAgICBsZXQgb2xkSXRlbXMgPSB0aGlzLnZhbHVlc18uc2xpY2UoaW5kZXggKyBkZWxldGVDb3VudClcbiAgICAgICAgICAgIC8vIE5ldyBsZW5ndGggaXMgdGhlIHByZXZpb3VzIGxlbmd0aCArIGFkZGl0aW9uIGNvdW50IC0gZGVsZXRpb24gY291bnRcbiAgICAgICAgICAgIHRoaXMudmFsdWVzXy5sZW5ndGggKz0gbmV3SXRlbXMubGVuZ3RoIC0gZGVsZXRlQ291bnRcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmV3SXRlbXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlc19baW5kZXggKyBpXSA9IG5ld0l0ZW1zW2ldXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG9sZEl0ZW1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZXNfW2luZGV4ICsgbmV3SXRlbXMubGVuZ3RoICsgaV0gPSBvbGRJdGVtc1tpXVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlc1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbm90aWZ5QXJyYXlDaGlsZFVwZGF0ZV8oaW5kZXg6IG51bWJlciwgbmV3VmFsdWU6IGFueSwgb2xkVmFsdWU6IGFueSkge1xuICAgICAgICBjb25zdCBub3RpZnlTcHkgPSAhdGhpcy5vd25lZF8gJiYgaXNTcHlFbmFibGVkKClcbiAgICAgICAgY29uc3Qgbm90aWZ5ID0gaGFzTGlzdGVuZXJzKHRoaXMpXG4gICAgICAgIGNvbnN0IGNoYW5nZTogSUFycmF5RGlkQ2hhbmdlIHwgbnVsbCA9XG4gICAgICAgICAgICBub3RpZnkgfHwgbm90aWZ5U3B5XG4gICAgICAgICAgICAgICAgPyAoe1xuICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmFibGVLaW5kOiBcImFycmF5XCIsXG4gICAgICAgICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLnByb3h5XyxcbiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBVUERBVEUsXG4gICAgICAgICAgICAgICAgICAgICAgZGVidWdPYmplY3ROYW1lOiB0aGlzLmF0b21fLm5hbWVfLFxuICAgICAgICAgICAgICAgICAgICAgIGluZGV4LFxuICAgICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlLFxuICAgICAgICAgICAgICAgICAgICAgIG9sZFZhbHVlXG4gICAgICAgICAgICAgICAgICB9IGFzIGNvbnN0KVxuICAgICAgICAgICAgICAgIDogbnVsbFxuXG4gICAgICAgIC8vIFRoZSByZWFzb24gd2h5IHRoaXMgaXMgb24gcmlnaHQgaGFuZCBzaWRlIGhlcmUgKGFuZCBub3QgYWJvdmUpLCBpcyB0aGlzIHdheSB0aGUgdWdsaWZpZXIgd2lsbCBkcm9wIGl0LCBidXQgaXQgd29uJ3RcbiAgICAgICAgLy8gY2F1c2UgYW55IHJ1bnRpbWUgb3ZlcmhlYWQgaW4gZGV2ZWxvcG1lbnQgbW9kZSB3aXRob3V0IE5PREVfRU5WIHNldCwgdW5sZXNzIHNweWluZyBpcyBlbmFibGVkXG4gICAgICAgIGlmIChfX0RFVl9fICYmIG5vdGlmeVNweSkge1xuICAgICAgICAgICAgc3B5UmVwb3J0U3RhcnQoY2hhbmdlISlcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmF0b21fLnJlcG9ydENoYW5nZWQoKVxuICAgICAgICBpZiAobm90aWZ5KSB7XG4gICAgICAgICAgICBub3RpZnlMaXN0ZW5lcnModGhpcywgY2hhbmdlKVxuICAgICAgICB9XG4gICAgICAgIGlmIChfX0RFVl9fICYmIG5vdGlmeVNweSkge1xuICAgICAgICAgICAgc3B5UmVwb3J0RW5kKClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIG5vdGlmeUFycmF5U3BsaWNlXyhpbmRleDogbnVtYmVyLCBhZGRlZDogYW55W10sIHJlbW92ZWQ6IGFueVtdKSB7XG4gICAgICAgIGNvbnN0IG5vdGlmeVNweSA9ICF0aGlzLm93bmVkXyAmJiBpc1NweUVuYWJsZWQoKVxuICAgICAgICBjb25zdCBub3RpZnkgPSBoYXNMaXN0ZW5lcnModGhpcylcbiAgICAgICAgY29uc3QgY2hhbmdlOiBJQXJyYXlTcGxpY2UgfCBudWxsID1cbiAgICAgICAgICAgIG5vdGlmeSB8fCBub3RpZnlTcHlcbiAgICAgICAgICAgICAgICA/ICh7XG4gICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2YWJsZUtpbmQ6IFwiYXJyYXlcIixcbiAgICAgICAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMucHJveHlfLFxuICAgICAgICAgICAgICAgICAgICAgIGRlYnVnT2JqZWN0TmFtZTogdGhpcy5hdG9tXy5uYW1lXyxcbiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBTUExJQ0UsXG4gICAgICAgICAgICAgICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlZCxcbiAgICAgICAgICAgICAgICAgICAgICBhZGRlZCxcbiAgICAgICAgICAgICAgICAgICAgICByZW1vdmVkQ291bnQ6IHJlbW92ZWQubGVuZ3RoLFxuICAgICAgICAgICAgICAgICAgICAgIGFkZGVkQ291bnQ6IGFkZGVkLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgfSBhcyBjb25zdClcbiAgICAgICAgICAgICAgICA6IG51bGxcblxuICAgICAgICBpZiAoX19ERVZfXyAmJiBub3RpZnlTcHkpIHtcbiAgICAgICAgICAgIHNweVJlcG9ydFN0YXJ0KGNoYW5nZSEpXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hdG9tXy5yZXBvcnRDaGFuZ2VkKClcbiAgICAgICAgLy8gY29uZm9ybTogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvQXJyYXkvb2JzZXJ2ZVxuICAgICAgICBpZiAobm90aWZ5KSB7XG4gICAgICAgICAgICBub3RpZnlMaXN0ZW5lcnModGhpcywgY2hhbmdlKVxuICAgICAgICB9XG4gICAgICAgIGlmIChfX0RFVl9fICYmIG5vdGlmeVNweSkge1xuICAgICAgICAgICAgc3B5UmVwb3J0RW5kKClcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldF8oaW5kZXg6IG51bWJlcik6IGFueSB8IHVuZGVmaW5lZCB7XG4gICAgICAgIGlmICh0aGlzLmxlZ2FjeU1vZGVfICYmIGluZGV4ID49IHRoaXMudmFsdWVzXy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgICAgICBfX0RFVl9fXG4gICAgICAgICAgICAgICAgICAgID8gYFttb2J4LmFycmF5XSBBdHRlbXB0IHRvIHJlYWQgYW4gYXJyYXkgaW5kZXggKCR7aW5kZXh9KSB0aGF0IGlzIG91dCBvZiBib3VuZHMgKCR7dGhpcy52YWx1ZXNfLmxlbmd0aH0pLiBQbGVhc2UgY2hlY2sgbGVuZ3RoIGZpcnN0LiBPdXQgb2YgYm91bmQgaW5kaWNlcyB3aWxsIG5vdCBiZSB0cmFja2VkIGJ5IE1vYlhgXG4gICAgICAgICAgICAgICAgICAgIDogYFttb2J4XSBPdXQgb2YgYm91bmRzIHJlYWQ6ICR7aW5kZXh9YFxuICAgICAgICAgICAgKVxuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZFxuICAgICAgICB9XG4gICAgICAgIHRoaXMuYXRvbV8ucmVwb3J0T2JzZXJ2ZWQoKVxuICAgICAgICByZXR1cm4gdGhpcy5kZWhhbmNlVmFsdWVfKHRoaXMudmFsdWVzX1tpbmRleF0pXG4gICAgfVxuXG4gICAgc2V0XyhpbmRleDogbnVtYmVyLCBuZXdWYWx1ZTogYW55KSB7XG4gICAgICAgIGNvbnN0IHZhbHVlcyA9IHRoaXMudmFsdWVzX1xuICAgICAgICBpZiAodGhpcy5sZWdhY3lNb2RlXyAmJiBpbmRleCA+IHZhbHVlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIC8vIG91dCBvZiBib3VuZHNcbiAgICAgICAgICAgIGRpZSgxNywgaW5kZXgsIHZhbHVlcy5sZW5ndGgpXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluZGV4IDwgdmFsdWVzLmxlbmd0aCkge1xuICAgICAgICAgICAgLy8gdXBkYXRlIGF0IGluZGV4IGluIHJhbmdlXG4gICAgICAgICAgICBjaGVja0lmU3RhdGVNb2RpZmljYXRpb25zQXJlQWxsb3dlZCh0aGlzLmF0b21fKVxuICAgICAgICAgICAgY29uc3Qgb2xkVmFsdWUgPSB2YWx1ZXNbaW5kZXhdXG4gICAgICAgICAgICBpZiAoaGFzSW50ZXJjZXB0b3JzKHRoaXMpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2hhbmdlID0gaW50ZXJjZXB0Q2hhbmdlPElBcnJheVdpbGxDaGFuZ2U8YW55Pj4odGhpcyBhcyBhbnksIHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogVVBEQVRFLFxuICAgICAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMucHJveHlfIGFzIGFueSwgLy8gc2luY2UgXCJ0aGlzXCIgaXMgdGhlIHJlYWwgYXJyYXkgd2UgbmVlZCB0byBwYXNzIGl0cyBwcm94eVxuICAgICAgICAgICAgICAgICAgICBpbmRleCxcbiAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWVcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIGlmICghY2hhbmdlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBuZXdWYWx1ZSA9IGNoYW5nZS5uZXdWYWx1ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbmV3VmFsdWUgPSB0aGlzLmVuaGFuY2VyXyhuZXdWYWx1ZSwgb2xkVmFsdWUpXG4gICAgICAgICAgICBjb25zdCBjaGFuZ2VkID0gbmV3VmFsdWUgIT09IG9sZFZhbHVlXG4gICAgICAgICAgICBpZiAoY2hhbmdlZCkge1xuICAgICAgICAgICAgICAgIHZhbHVlc1tpbmRleF0gPSBuZXdWYWx1ZVxuICAgICAgICAgICAgICAgIHRoaXMubm90aWZ5QXJyYXlDaGlsZFVwZGF0ZV8oaW5kZXgsIG5ld1ZhbHVlLCBvbGRWYWx1ZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIEZvciBvdXQgb2YgYm91bmQgaW5kZXgsIHdlIGRvbid0IGNyZWF0ZSBhbiBhY3R1YWwgc3BhcnNlIGFycmF5LFxuICAgICAgICAgICAgLy8gYnV0IHJhdGhlciBmaWxsIHRoZSBob2xlcyB3aXRoIHVuZGVmaW5lZCAoc2FtZSBhcyBzZXRBcnJheUxlbmd0aF8pLlxuICAgICAgICAgICAgLy8gVGhpcyBjb3VsZCBiZSBjb25zaWRlcmVkIGEgYnVnLlxuICAgICAgICAgICAgY29uc3QgbmV3SXRlbXMgPSBuZXcgQXJyYXkoaW5kZXggKyAxIC0gdmFsdWVzLmxlbmd0aClcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbmV3SXRlbXMubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgICAgICAgICAgbmV3SXRlbXNbaV0gPSB1bmRlZmluZWRcbiAgICAgICAgICAgIH0gLy8gTm8gQXJyYXkuZmlsbCBldmVyeXdoZXJlLi4uXG4gICAgICAgICAgICBuZXdJdGVtc1tuZXdJdGVtcy5sZW5ndGggLSAxXSA9IG5ld1ZhbHVlXG4gICAgICAgICAgICB0aGlzLnNwbGljZVdpdGhBcnJheV8odmFsdWVzLmxlbmd0aCwgMCwgbmV3SXRlbXMpXG4gICAgICAgIH1cbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVPYnNlcnZhYmxlQXJyYXk8VD4oXG4gICAgaW5pdGlhbFZhbHVlczogVFtdIHwgdW5kZWZpbmVkLFxuICAgIGVuaGFuY2VyOiBJRW5oYW5jZXI8VD4sXG4gICAgbmFtZSA9IF9fREVWX18gPyBcIk9ic2VydmFibGVBcnJheUBcIiArIGdldE5leHRJZCgpIDogXCJPYnNlcnZhYmxlQXJyYXlcIixcbiAgICBvd25lZCA9IGZhbHNlXG4pOiBJT2JzZXJ2YWJsZUFycmF5PFQ+IHtcbiAgICBhc3NlcnRQcm94aWVzKClcbiAgICBjb25zdCBhZG0gPSBuZXcgT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24obmFtZSwgZW5oYW5jZXIsIG93bmVkLCBmYWxzZSlcbiAgICBhZGRIaWRkZW5GaW5hbFByb3AoYWRtLnZhbHVlc18sICRtb2J4LCBhZG0pXG4gICAgY29uc3QgcHJveHkgPSBuZXcgUHJveHkoYWRtLnZhbHVlc18sIGFycmF5VHJhcHMpIGFzIGFueVxuICAgIGFkbS5wcm94eV8gPSBwcm94eVxuICAgIGlmIChpbml0aWFsVmFsdWVzICYmIGluaXRpYWxWYWx1ZXMubGVuZ3RoKSB7XG4gICAgICAgIGNvbnN0IHByZXYgPSBhbGxvd1N0YXRlQ2hhbmdlc1N0YXJ0KHRydWUpXG4gICAgICAgIGFkbS5zcGxpY2VXaXRoQXJyYXlfKDAsIDAsIGluaXRpYWxWYWx1ZXMpXG4gICAgICAgIGFsbG93U3RhdGVDaGFuZ2VzRW5kKHByZXYpXG4gICAgfVxuICAgIHJldHVybiBwcm94eVxufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbmV4cG9ydCB2YXIgYXJyYXlFeHRlbnNpb25zID0ge1xuICAgIGNsZWFyKCk6IGFueVtdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3BsaWNlKDApXG4gICAgfSxcblxuICAgIHJlcGxhY2UobmV3SXRlbXM6IGFueVtdKSB7XG4gICAgICAgIGNvbnN0IGFkbTogT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24gPSB0aGlzWyRtb2J4XVxuICAgICAgICByZXR1cm4gYWRtLnNwbGljZVdpdGhBcnJheV8oMCwgYWRtLnZhbHVlc18ubGVuZ3RoLCBuZXdJdGVtcylcbiAgICB9LFxuXG4gICAgLy8gVXNlZCBieSBKU09OLnN0cmluZ2lmeVxuICAgIHRvSlNPTigpOiBhbnlbXSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNsaWNlKClcbiAgICB9LFxuXG4gICAgLypcbiAgICAgKiBmdW5jdGlvbnMgdGhhdCBkbyBhbHRlciB0aGUgaW50ZXJuYWwgc3RydWN0dXJlIG9mIHRoZSBhcnJheSwgKGJhc2VkIG9uIGxpYi5lczYuZC50cylcbiAgICAgKiBzaW5jZSB0aGVzZSBmdW5jdGlvbnMgYWx0ZXIgdGhlIGlubmVyIHN0cnVjdHVyZSBvZiB0aGUgYXJyYXksIHRoZSBoYXZlIHNpZGUgZWZmZWN0cy5cbiAgICAgKiBCZWNhdXNlIHRoZSBoYXZlIHNpZGUgZWZmZWN0cywgdGhleSBzaG91bGQgbm90IGJlIHVzZWQgaW4gY29tcHV0ZWQgZnVuY3Rpb24sXG4gICAgICogYW5kIGZvciB0aGF0IHJlYXNvbiB0aGUgZG8gbm90IGNhbGwgZGVwZW5kZW5jeVN0YXRlLm5vdGlmeU9ic2VydmVkXG4gICAgICovXG4gICAgc3BsaWNlKGluZGV4OiBudW1iZXIsIGRlbGV0ZUNvdW50PzogbnVtYmVyLCAuLi5uZXdJdGVtczogYW55W10pOiBhbnlbXSB7XG4gICAgICAgIGNvbnN0IGFkbTogT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24gPSB0aGlzWyRtb2J4XVxuICAgICAgICBzd2l0Y2ggKGFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICByZXR1cm4gW11cbiAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICByZXR1cm4gYWRtLnNwbGljZVdpdGhBcnJheV8oaW5kZXgpXG4gICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFkbS5zcGxpY2VXaXRoQXJyYXlfKGluZGV4LCBkZWxldGVDb3VudClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWRtLnNwbGljZVdpdGhBcnJheV8oaW5kZXgsIGRlbGV0ZUNvdW50LCBuZXdJdGVtcylcbiAgICB9LFxuXG4gICAgc3BsaWNlV2l0aEFycmF5KGluZGV4OiBudW1iZXIsIGRlbGV0ZUNvdW50PzogbnVtYmVyLCBuZXdJdGVtcz86IGFueVtdKTogYW55W10ge1xuICAgICAgICByZXR1cm4gKHRoaXNbJG1vYnhdIGFzIE9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uKS5zcGxpY2VXaXRoQXJyYXlfKFxuICAgICAgICAgICAgaW5kZXgsXG4gICAgICAgICAgICBkZWxldGVDb3VudCxcbiAgICAgICAgICAgIG5ld0l0ZW1zXG4gICAgICAgIClcbiAgICB9LFxuXG4gICAgcHVzaCguLi5pdGVtczogYW55W10pOiBudW1iZXIge1xuICAgICAgICBjb25zdCBhZG06IE9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uID0gdGhpc1skbW9ieF1cbiAgICAgICAgYWRtLnNwbGljZVdpdGhBcnJheV8oYWRtLnZhbHVlc18ubGVuZ3RoLCAwLCBpdGVtcylcbiAgICAgICAgcmV0dXJuIGFkbS52YWx1ZXNfLmxlbmd0aFxuICAgIH0sXG5cbiAgICBwb3AoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNwbGljZShNYXRoLm1heCh0aGlzWyRtb2J4XS52YWx1ZXNfLmxlbmd0aCAtIDEsIDApLCAxKVswXVxuICAgIH0sXG5cbiAgICBzaGlmdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3BsaWNlKDAsIDEpWzBdXG4gICAgfSxcblxuICAgIHVuc2hpZnQoLi4uaXRlbXM6IGFueVtdKTogbnVtYmVyIHtcbiAgICAgICAgY29uc3QgYWRtOiBPYnNlcnZhYmxlQXJyYXlBZG1pbmlzdHJhdGlvbiA9IHRoaXNbJG1vYnhdXG4gICAgICAgIGFkbS5zcGxpY2VXaXRoQXJyYXlfKDAsIDAsIGl0ZW1zKVxuICAgICAgICByZXR1cm4gYWRtLnZhbHVlc18ubGVuZ3RoXG4gICAgfSxcblxuICAgIHJldmVyc2UoKTogYW55W10ge1xuICAgICAgICAvLyByZXZlcnNlIGJ5IGRlZmF1bHQgbXV0YXRlcyBpbiBwbGFjZSBiZWZvcmUgcmV0dXJuaW5nIHRoZSByZXN1bHRcbiAgICAgICAgLy8gd2hpY2ggbWFrZXMgaXQgYm90aCBhICdkZXJpdmF0aW9uJyBhbmQgYSAnbXV0YXRpb24nLlxuICAgICAgICBpZiAoZ2xvYmFsU3RhdGUudHJhY2tpbmdEZXJpdmF0aW9uKSB7XG4gICAgICAgICAgICBkaWUoMzcsIFwicmV2ZXJzZVwiKVxuICAgICAgICB9XG4gICAgICAgIHRoaXMucmVwbGFjZSh0aGlzLnNsaWNlKCkucmV2ZXJzZSgpKVxuICAgICAgICByZXR1cm4gdGhpc1xuICAgIH0sXG5cbiAgICBzb3J0KCk6IGFueVtdIHtcbiAgICAgICAgLy8gc29ydCBieSBkZWZhdWx0IG11dGF0ZXMgaW4gcGxhY2UgYmVmb3JlIHJldHVybmluZyB0aGUgcmVzdWx0XG4gICAgICAgIC8vIHdoaWNoIGdvZXMgYWdhaW5zdCBhbGwgZ29vZCBwcmFjdGljZXMuIExldCdzIG5vdCBjaGFuZ2UgdGhlIGFycmF5IGluIHBsYWNlIVxuICAgICAgICBpZiAoZ2xvYmFsU3RhdGUudHJhY2tpbmdEZXJpdmF0aW9uKSB7XG4gICAgICAgICAgICBkaWUoMzcsIFwic29ydFwiKVxuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNvcHkgPSB0aGlzLnNsaWNlKClcbiAgICAgICAgY29weS5zb3J0LmFwcGx5KGNvcHksIGFyZ3VtZW50cylcbiAgICAgICAgdGhpcy5yZXBsYWNlKGNvcHkpXG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfSxcblxuICAgIHJlbW92ZSh2YWx1ZTogYW55KTogYm9vbGVhbiB7XG4gICAgICAgIGNvbnN0IGFkbTogT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24gPSB0aGlzWyRtb2J4XVxuICAgICAgICBjb25zdCBpZHggPSBhZG0uZGVoYW5jZVZhbHVlc18oYWRtLnZhbHVlc18pLmluZGV4T2YodmFsdWUpXG4gICAgICAgIGlmIChpZHggPiAtMSkge1xuICAgICAgICAgICAgdGhpcy5zcGxpY2UoaWR4LCAxKVxuICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG59XG5cbi8qKlxuICogV3JhcCBmdW5jdGlvbiBmcm9tIHByb3RvdHlwZVxuICogV2l0aG91dCB0aGlzLCBldmVyeXRoaW5nIHdvcmtzIGFzIHdlbGwsIGJ1dCB0aGlzIHdvcmtzXG4gKiBmYXN0ZXIgYXMgZXZlcnl0aGluZyB3b3JrcyBvbiB1bnByb3hpZWQgdmFsdWVzXG4gKi9cbmFkZEFycmF5RXh0ZW5zaW9uKFwiY29uY2F0XCIsIHNpbXBsZUZ1bmMpXG5hZGRBcnJheUV4dGVuc2lvbihcImZsYXRcIiwgc2ltcGxlRnVuYylcbmFkZEFycmF5RXh0ZW5zaW9uKFwiaW5jbHVkZXNcIiwgc2ltcGxlRnVuYylcbmFkZEFycmF5RXh0ZW5zaW9uKFwiaW5kZXhPZlwiLCBzaW1wbGVGdW5jKVxuYWRkQXJyYXlFeHRlbnNpb24oXCJqb2luXCIsIHNpbXBsZUZ1bmMpXG5hZGRBcnJheUV4dGVuc2lvbihcImxhc3RJbmRleE9mXCIsIHNpbXBsZUZ1bmMpXG5hZGRBcnJheUV4dGVuc2lvbihcInNsaWNlXCIsIHNpbXBsZUZ1bmMpXG5hZGRBcnJheUV4dGVuc2lvbihcInRvU3RyaW5nXCIsIHNpbXBsZUZ1bmMpXG5hZGRBcnJheUV4dGVuc2lvbihcInRvTG9jYWxlU3RyaW5nXCIsIHNpbXBsZUZ1bmMpXG4vLyBtYXBcbmFkZEFycmF5RXh0ZW5zaW9uKFwiZXZlcnlcIiwgbWFwTGlrZUZ1bmMpXG5hZGRBcnJheUV4dGVuc2lvbihcImZpbHRlclwiLCBtYXBMaWtlRnVuYylcbmFkZEFycmF5RXh0ZW5zaW9uKFwiZmluZFwiLCBtYXBMaWtlRnVuYylcbmFkZEFycmF5RXh0ZW5zaW9uKFwiZmluZEluZGV4XCIsIG1hcExpa2VGdW5jKVxuYWRkQXJyYXlFeHRlbnNpb24oXCJmbGF0TWFwXCIsIG1hcExpa2VGdW5jKVxuYWRkQXJyYXlFeHRlbnNpb24oXCJmb3JFYWNoXCIsIG1hcExpa2VGdW5jKVxuYWRkQXJyYXlFeHRlbnNpb24oXCJtYXBcIiwgbWFwTGlrZUZ1bmMpXG5hZGRBcnJheUV4dGVuc2lvbihcInNvbWVcIiwgbWFwTGlrZUZ1bmMpXG4vLyByZWR1Y2VcbmFkZEFycmF5RXh0ZW5zaW9uKFwicmVkdWNlXCIsIHJlZHVjZUxpa2VGdW5jKVxuYWRkQXJyYXlFeHRlbnNpb24oXCJyZWR1Y2VSaWdodFwiLCByZWR1Y2VMaWtlRnVuYylcblxuZnVuY3Rpb24gYWRkQXJyYXlFeHRlbnNpb24oZnVuY05hbWUsIGZ1bmNGYWN0b3J5KSB7XG4gICAgaWYgKHR5cGVvZiBBcnJheS5wcm90b3R5cGVbZnVuY05hbWVdID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgYXJyYXlFeHRlbnNpb25zW2Z1bmNOYW1lXSA9IGZ1bmNGYWN0b3J5KGZ1bmNOYW1lKVxuICAgIH1cbn1cblxuLy8gUmVwb3J0IGFuZCBkZWxlZ2F0ZSB0byBkZWhhbmNlZCBhcnJheVxuZnVuY3Rpb24gc2ltcGxlRnVuYyhmdW5jTmFtZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnN0IGFkbTogT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24gPSB0aGlzWyRtb2J4XVxuICAgICAgICBhZG0uYXRvbV8ucmVwb3J0T2JzZXJ2ZWQoKVxuICAgICAgICBjb25zdCBkZWhhbmNlZFZhbHVlcyA9IGFkbS5kZWhhbmNlVmFsdWVzXyhhZG0udmFsdWVzXylcbiAgICAgICAgcmV0dXJuIGRlaGFuY2VkVmFsdWVzW2Z1bmNOYW1lXS5hcHBseShkZWhhbmNlZFZhbHVlcywgYXJndW1lbnRzKVxuICAgIH1cbn1cblxuLy8gTWFrZSBzdXJlIGNhbGxiYWNrcyByZWNpZXZlIGNvcnJlY3QgYXJyYXkgYXJnICMyMzI2XG5mdW5jdGlvbiBtYXBMaWtlRnVuYyhmdW5jTmFtZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoY2FsbGJhY2ssIHRoaXNBcmcpIHtcbiAgICAgICAgY29uc3QgYWRtOiBPYnNlcnZhYmxlQXJyYXlBZG1pbmlzdHJhdGlvbiA9IHRoaXNbJG1vYnhdXG4gICAgICAgIGFkbS5hdG9tXy5yZXBvcnRPYnNlcnZlZCgpXG4gICAgICAgIGNvbnN0IGRlaGFuY2VkVmFsdWVzID0gYWRtLmRlaGFuY2VWYWx1ZXNfKGFkbS52YWx1ZXNfKVxuICAgICAgICByZXR1cm4gZGVoYW5jZWRWYWx1ZXNbZnVuY05hbWVdKChlbGVtZW50LCBpbmRleCkgPT4ge1xuICAgICAgICAgICAgcmV0dXJuIGNhbGxiYWNrLmNhbGwodGhpc0FyZywgZWxlbWVudCwgaW5kZXgsIHRoaXMpXG4gICAgICAgIH0pXG4gICAgfVxufVxuXG4vLyBNYWtlIHN1cmUgY2FsbGJhY2tzIHJlY2lldmUgY29ycmVjdCBhcnJheSBhcmcgIzIzMjZcbmZ1bmN0aW9uIHJlZHVjZUxpa2VGdW5jKGZ1bmNOYW1lKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3QgYWRtOiBPYnNlcnZhYmxlQXJyYXlBZG1pbmlzdHJhdGlvbiA9IHRoaXNbJG1vYnhdXG4gICAgICAgIGFkbS5hdG9tXy5yZXBvcnRPYnNlcnZlZCgpXG4gICAgICAgIGNvbnN0IGRlaGFuY2VkVmFsdWVzID0gYWRtLmRlaGFuY2VWYWx1ZXNfKGFkbS52YWx1ZXNfKVxuICAgICAgICAvLyAjMjQzMiAtIHJlZHVjZSBiZWhhdmlvciBkZXBlbmRzIG9uIGFyZ3VtZW50cy5sZW5ndGhcbiAgICAgICAgY29uc3QgY2FsbGJhY2sgPSBhcmd1bWVudHNbMF1cbiAgICAgICAgYXJndW1lbnRzWzBdID0gKGFjY3VtdWxhdG9yLCBjdXJyZW50VmFsdWUsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gY2FsbGJhY2soYWNjdW11bGF0b3IsIGN1cnJlbnRWYWx1ZSwgaW5kZXgsIHRoaXMpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRlaGFuY2VkVmFsdWVzW2Z1bmNOYW1lXS5hcHBseShkZWhhbmNlZFZhbHVlcywgYXJndW1lbnRzKVxuICAgIH1cbn1cblxuY29uc3QgaXNPYnNlcnZhYmxlQXJyYXlBZG1pbmlzdHJhdGlvbiA9IGNyZWF0ZUluc3RhbmNlb2ZQcmVkaWNhdGUoXG4gICAgXCJPYnNlcnZhYmxlQXJyYXlBZG1pbmlzdHJhdGlvblwiLFxuICAgIE9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uXG4pXG5cbmV4cG9ydCBmdW5jdGlvbiBpc09ic2VydmFibGVBcnJheSh0aGluZyk6IHRoaW5nIGlzIElPYnNlcnZhYmxlQXJyYXk8YW55PiB7XG4gICAgcmV0dXJuIGlzT2JqZWN0KHRoaW5nKSAmJiBpc09ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uKHRoaW5nWyRtb2J4XSlcbn1cbiIsImltcG9ydCB7IElDb21wdXRlZERpZENoYW5nZSB9IGZyb20gXCIuL2NvbXB1dGVkdmFsdWVcIlxuaW1wb3J0IHsgSVZhbHVlRGlkQ2hhbmdlLCBJQm94RGlkQ2hhbmdlIH0gZnJvbSBcIi4vLi4vdHlwZXMvb2JzZXJ2YWJsZXZhbHVlXCJcbmltcG9ydCB7IElPYmplY3REaWRDaGFuZ2UgfSBmcm9tIFwiLi8uLi90eXBlcy9vYnNlcnZhYmxlb2JqZWN0XCJcbmltcG9ydCB7IElBcnJheURpZENoYW5nZSB9IGZyb20gXCIuLy4uL3R5cGVzL29ic2VydmFibGVhcnJheVwiXG5pbXBvcnQgeyBMYW1iZGEsIGdsb2JhbFN0YXRlLCBvbmNlLCBJU2V0RGlkQ2hhbmdlLCBJTWFwRGlkQ2hhbmdlIH0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuZXhwb3J0IGZ1bmN0aW9uIGlzU3B5RW5hYmxlZCgpIHtcbiAgICByZXR1cm4gX19ERVZfXyAmJiAhIWdsb2JhbFN0YXRlLnNweUxpc3RlbmVycy5sZW5ndGhcbn1cblxuZXhwb3J0IHR5cGUgUHVyZVNweUV2ZW50ID1cbiAgICB8IHsgdHlwZTogXCJhY3Rpb25cIjsgbmFtZTogc3RyaW5nOyBvYmplY3Q6IHVua25vd247IGFyZ3VtZW50czogdW5rbm93bltdIH1cbiAgICB8IHsgdHlwZTogXCJzY2hlZHVsZWQtcmVhY3Rpb25cIjsgbmFtZTogc3RyaW5nIH1cbiAgICB8IHsgdHlwZTogXCJyZWFjdGlvblwiOyBuYW1lOiBzdHJpbmcgfVxuICAgIHwgeyB0eXBlOiBcImVycm9yXCI7IG5hbWU6IHN0cmluZzsgbWVzc2FnZTogc3RyaW5nOyBlcnJvcjogc3RyaW5nIH1cbiAgICB8IElDb21wdXRlZERpZENoYW5nZTx1bmtub3duPlxuICAgIHwgSU9iamVjdERpZENoYW5nZTx1bmtub3duPlxuICAgIHwgSUFycmF5RGlkQ2hhbmdlPHVua25vd24+XG4gICAgfCBJTWFwRGlkQ2hhbmdlPHVua25vd24sIHVua25vd24+XG4gICAgfCBJU2V0RGlkQ2hhbmdlPHVua25vd24+XG4gICAgfCBJVmFsdWVEaWRDaGFuZ2U8dW5rbm93bj5cbiAgICB8IElCb3hEaWRDaGFuZ2U8dW5rbm93bj5cbiAgICB8IHsgdHlwZTogXCJyZXBvcnQtZW5kXCI7IHNweVJlcG9ydEVuZDogdHJ1ZTsgdGltZT86IG51bWJlciB9XG5cbnR5cGUgU3B5RXZlbnQgPSBQdXJlU3B5RXZlbnQgJiB7IHNweVJlcG9ydFN0YXJ0PzogdHJ1ZSB9XG5cbmV4cG9ydCBmdW5jdGlvbiBzcHlSZXBvcnQoZXZlbnQ6IFNweUV2ZW50KSB7XG4gICAgaWYgKCFfX0RFVl9fKSB7XG4gICAgICAgIHJldHVyblxuICAgIH0gLy8gZGVhZCBjb2RlIGVsaW1pbmF0aW9uIGNhbiBkbyB0aGUgcmVzdFxuICAgIGlmICghZ2xvYmFsU3RhdGUuc3B5TGlzdGVuZXJzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm5cbiAgICB9XG4gICAgY29uc3QgbGlzdGVuZXJzID0gZ2xvYmFsU3RhdGUuc3B5TGlzdGVuZXJzXG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSBsaXN0ZW5lcnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGxpc3RlbmVyc1tpXShldmVudClcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzcHlSZXBvcnRTdGFydChldmVudDogUHVyZVNweUV2ZW50KSB7XG4gICAgaWYgKCFfX0RFVl9fKSB7XG4gICAgICAgIHJldHVyblxuICAgIH1cbiAgICBjb25zdCBjaGFuZ2UgPSB7IC4uLmV2ZW50LCBzcHlSZXBvcnRTdGFydDogdHJ1ZSBhcyBjb25zdCB9XG4gICAgc3B5UmVwb3J0KGNoYW5nZSlcbn1cblxuY29uc3QgRU5EX0VWRU5UOiBTcHlFdmVudCA9IHsgdHlwZTogXCJyZXBvcnQtZW5kXCIsIHNweVJlcG9ydEVuZDogdHJ1ZSB9XG5cbmV4cG9ydCBmdW5jdGlvbiBzcHlSZXBvcnRFbmQoY2hhbmdlPzogeyB0aW1lPzogbnVtYmVyIH0pIHtcbiAgICBpZiAoIV9fREVWX18pIHtcbiAgICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGlmIChjaGFuZ2UpIHtcbiAgICAgICAgc3B5UmVwb3J0KHsgLi4uY2hhbmdlLCB0eXBlOiBcInJlcG9ydC1lbmRcIiwgc3B5UmVwb3J0RW5kOiB0cnVlIH0pXG4gICAgfSBlbHNlIHtcbiAgICAgICAgc3B5UmVwb3J0KEVORF9FVkVOVClcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzcHkobGlzdGVuZXI6IChjaGFuZ2U6IFNweUV2ZW50KSA9PiB2b2lkKTogTGFtYmRhIHtcbiAgICBpZiAoIV9fREVWX18pIHtcbiAgICAgICAgY29uc29sZS53YXJuKGBbbW9ieC5zcHldIElzIGEgbm8tb3AgaW4gcHJvZHVjdGlvbiBidWlsZHNgKVxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge31cbiAgICB9IGVsc2Uge1xuICAgICAgICBnbG9iYWxTdGF0ZS5zcHlMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcilcbiAgICAgICAgcmV0dXJuIG9uY2UoKCkgPT4ge1xuICAgICAgICAgICAgZ2xvYmFsU3RhdGUuc3B5TGlzdGVuZXJzID0gZ2xvYmFsU3RhdGUuc3B5TGlzdGVuZXJzLmZpbHRlcihsID0+IGwgIT09IGxpc3RlbmVyKVxuICAgICAgICB9KVxuICAgIH1cbn1cbiIsImltcG9ydCB7XG4gICAgJG1vYngsXG4gICAgSUVuaGFuY2VyLFxuICAgIElJbnRlcmNlcHRhYmxlLFxuICAgIElJbnRlcmNlcHRvcixcbiAgICBJTGlzdGVuYWJsZSxcbiAgICBMYW1iZGEsXG4gICAgT2JzZXJ2YWJsZVZhbHVlLFxuICAgIGNoZWNrSWZTdGF0ZU1vZGlmaWNhdGlvbnNBcmVBbGxvd2VkLFxuICAgIGNyZWF0ZUF0b20sXG4gICAgY3JlYXRlSW5zdGFuY2VvZlByZWRpY2F0ZSxcbiAgICBkZWVwRW5oYW5jZXIsXG4gICAgZ2V0TmV4dElkLFxuICAgIGdldFBsYWluT2JqZWN0S2V5cyxcbiAgICBoYXNJbnRlcmNlcHRvcnMsXG4gICAgaGFzTGlzdGVuZXJzLFxuICAgIGludGVyY2VwdENoYW5nZSxcbiAgICBpc0VTNk1hcCxcbiAgICBpc1BsYWluT2JqZWN0LFxuICAgIGlzU3B5RW5hYmxlZCxcbiAgICBtYWtlSXRlcmFibGUsXG4gICAgbm90aWZ5TGlzdGVuZXJzLFxuICAgIHJlZmVyZW5jZUVuaGFuY2VyLFxuICAgIHJlZ2lzdGVySW50ZXJjZXB0b3IsXG4gICAgcmVnaXN0ZXJMaXN0ZW5lcixcbiAgICBzcHlSZXBvcnRFbmQsXG4gICAgc3B5UmVwb3J0U3RhcnQsXG4gICAgc3RyaW5naWZ5S2V5LFxuICAgIHRyYW5zYWN0aW9uLFxuICAgIHVudHJhY2tlZCxcbiAgICBvbkJlY29tZVVub2JzZXJ2ZWQsXG4gICAgZ2xvYmFsU3RhdGUsXG4gICAgZGllLFxuICAgIGlzRnVuY3Rpb24sXG4gICAgVVBEQVRFLFxuICAgIElBdG9tLFxuICAgIFB1cmVTcHlFdmVudCxcbiAgICBhbGxvd1N0YXRlQ2hhbmdlc1xufSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5leHBvcnQgaW50ZXJmYWNlIElLZXlWYWx1ZU1hcDxWID0gYW55PiB7XG4gICAgW2tleTogc3RyaW5nXTogVlxufVxuXG5leHBvcnQgdHlwZSBJTWFwRW50cnk8SyA9IGFueSwgViA9IGFueT4gPSBbSywgVl1cbmV4cG9ydCB0eXBlIElSZWFkb25seU1hcEVudHJ5PEsgPSBhbnksIFYgPSBhbnk+ID0gcmVhZG9ubHkgW0ssIFZdXG5leHBvcnQgdHlwZSBJTWFwRW50cmllczxLID0gYW55LCBWID0gYW55PiA9IElNYXBFbnRyeTxLLCBWPltdXG5leHBvcnQgdHlwZSBJUmVhZG9ubHlNYXBFbnRyaWVzPEsgPSBhbnksIFYgPSBhbnk+ID0gSVJlYWRvbmx5TWFwRW50cnk8SywgVj5bXVxuXG5leHBvcnQgdHlwZSBJTWFwRGlkQ2hhbmdlPEsgPSBhbnksIFYgPSBhbnk+ID0geyBvYnNlcnZhYmxlS2luZDogXCJtYXBcIjsgZGVidWdPYmplY3ROYW1lOiBzdHJpbmcgfSAmIChcbiAgICB8IHtcbiAgICAgICAgICBvYmplY3Q6IE9ic2VydmFibGVNYXA8SywgVj5cbiAgICAgICAgICBuYW1lOiBLIC8vIGFjdHVhbCB0aGUga2V5IG9yIGluZGV4LCBidXQgdGhpcyBpcyBiYXNlZCBvbiB0aGUgYW5jaWVudCAub2JzZXJ2ZSBwcm9wb3NhbCBmb3IgY29uc2lzdGVuY3lcbiAgICAgICAgICB0eXBlOiBcInVwZGF0ZVwiXG4gICAgICAgICAgbmV3VmFsdWU6IFZcbiAgICAgICAgICBvbGRWYWx1ZTogVlxuICAgICAgfVxuICAgIHwge1xuICAgICAgICAgIG9iamVjdDogT2JzZXJ2YWJsZU1hcDxLLCBWPlxuICAgICAgICAgIG5hbWU6IEtcbiAgICAgICAgICB0eXBlOiBcImFkZFwiXG4gICAgICAgICAgbmV3VmFsdWU6IFZcbiAgICAgIH1cbiAgICB8IHtcbiAgICAgICAgICBvYmplY3Q6IE9ic2VydmFibGVNYXA8SywgVj5cbiAgICAgICAgICBuYW1lOiBLXG4gICAgICAgICAgdHlwZTogXCJkZWxldGVcIlxuICAgICAgICAgIG9sZFZhbHVlOiBWXG4gICAgICB9XG4pXG5cbmV4cG9ydCBpbnRlcmZhY2UgSU1hcFdpbGxDaGFuZ2U8SyA9IGFueSwgViA9IGFueT4ge1xuICAgIG9iamVjdDogT2JzZXJ2YWJsZU1hcDxLLCBWPlxuICAgIHR5cGU6IFwidXBkYXRlXCIgfCBcImFkZFwiIHwgXCJkZWxldGVcIlxuICAgIG5hbWU6IEtcbiAgICBuZXdWYWx1ZT86IFZcbn1cblxuY29uc3QgT2JzZXJ2YWJsZU1hcE1hcmtlciA9IHt9XG5cbmV4cG9ydCBjb25zdCBBREQgPSBcImFkZFwiXG5leHBvcnQgY29uc3QgREVMRVRFID0gXCJkZWxldGVcIlxuXG5leHBvcnQgdHlwZSBJT2JzZXJ2YWJsZU1hcEluaXRpYWxWYWx1ZXM8SyA9IGFueSwgViA9IGFueT4gPVxuICAgIHwgSU1hcEVudHJpZXM8SywgVj5cbiAgICB8IElSZWFkb25seU1hcEVudHJpZXM8SywgVj5cbiAgICB8IElLZXlWYWx1ZU1hcDxWPlxuICAgIHwgTWFwPEssIFY+XG5cbi8vIGp1c3QgZXh0ZW5kIE1hcD8gU2VlIGFsc28gaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vbmVzdGhhcnVzLzEzYjRkNzRmMmVmNGEyZjQzNTdkYmQzZmMyM2MxZTU0XG4vLyBCdXQ6IGh0dHBzOi8vZ2l0aHViLmNvbS9tb2J4anMvbW9ieC9pc3N1ZXMvMTU1NlxuZXhwb3J0IGNsYXNzIE9ic2VydmFibGVNYXA8SyA9IGFueSwgViA9IGFueT5cbiAgICBpbXBsZW1lbnRzIE1hcDxLLCBWPiwgSUludGVyY2VwdGFibGU8SU1hcFdpbGxDaGFuZ2U8SywgVj4+LCBJTGlzdGVuYWJsZSB7XG4gICAgWyRtb2J4XSA9IE9ic2VydmFibGVNYXBNYXJrZXJcbiAgICBkYXRhXzogTWFwPEssIE9ic2VydmFibGVWYWx1ZTxWPj5cbiAgICBoYXNNYXBfOiBNYXA8SywgT2JzZXJ2YWJsZVZhbHVlPGJvb2xlYW4+PiAvLyBoYXNNYXAsIG5vdCBoYXNoTWFwID4tKS5cbiAgICBrZXlzQXRvbV86IElBdG9tXG4gICAgaW50ZXJjZXB0b3JzX1xuICAgIGNoYW5nZUxpc3RlbmVyc19cbiAgICBkZWhhbmNlcjogYW55XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgaW5pdGlhbERhdGE/OiBJT2JzZXJ2YWJsZU1hcEluaXRpYWxWYWx1ZXM8SywgVj4sXG4gICAgICAgIHB1YmxpYyBlbmhhbmNlcl86IElFbmhhbmNlcjxWPiA9IGRlZXBFbmhhbmNlcixcbiAgICAgICAgcHVibGljIG5hbWVfID0gX19ERVZfXyA/IFwiT2JzZXJ2YWJsZU1hcEBcIiArIGdldE5leHRJZCgpIDogXCJPYnNlcnZhYmxlTWFwXCJcbiAgICApIHtcbiAgICAgICAgaWYgKCFpc0Z1bmN0aW9uKE1hcCkpIHtcbiAgICAgICAgICAgIGRpZSgxOClcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmtleXNBdG9tXyA9IGNyZWF0ZUF0b20oX19ERVZfXyA/IGAke3RoaXMubmFtZV99LmtleXMoKWAgOiBcIk9ic2VydmFibGVNYXAua2V5cygpXCIpXG4gICAgICAgIHRoaXMuZGF0YV8gPSBuZXcgTWFwKClcbiAgICAgICAgdGhpcy5oYXNNYXBfID0gbmV3IE1hcCgpXG4gICAgICAgIGFsbG93U3RhdGVDaGFuZ2VzKHRydWUsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMubWVyZ2UoaW5pdGlhbERhdGEpXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgcHJpdmF0ZSBoYXNfKGtleTogSyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5kYXRhXy5oYXMoa2V5KVxuICAgIH1cblxuICAgIGhhcyhrZXk6IEspOiBib29sZWFuIHtcbiAgICAgICAgaWYgKCFnbG9iYWxTdGF0ZS50cmFja2luZ0Rlcml2YXRpb24pIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmhhc18oa2V5KVxuICAgICAgICB9XG5cbiAgICAgICAgbGV0IGVudHJ5ID0gdGhpcy5oYXNNYXBfLmdldChrZXkpXG4gICAgICAgIGlmICghZW50cnkpIHtcbiAgICAgICAgICAgIGNvbnN0IG5ld0VudHJ5ID0gKGVudHJ5ID0gbmV3IE9ic2VydmFibGVWYWx1ZShcbiAgICAgICAgICAgICAgICB0aGlzLmhhc18oa2V5KSxcbiAgICAgICAgICAgICAgICByZWZlcmVuY2VFbmhhbmNlcixcbiAgICAgICAgICAgICAgICBfX0RFVl9fID8gYCR7dGhpcy5uYW1lX30uJHtzdHJpbmdpZnlLZXkoa2V5KX0/YCA6IFwiT2JzZXJ2YWJsZU1hcC5rZXk/XCIsXG4gICAgICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgICAgICkpXG4gICAgICAgICAgICB0aGlzLmhhc01hcF8uc2V0KGtleSwgbmV3RW50cnkpXG4gICAgICAgICAgICBvbkJlY29tZVVub2JzZXJ2ZWQobmV3RW50cnksICgpID0+IHRoaXMuaGFzTWFwXy5kZWxldGUoa2V5KSlcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBlbnRyeS5nZXQoKVxuICAgIH1cblxuICAgIHNldChrZXk6IEssIHZhbHVlOiBWKSB7XG4gICAgICAgIGNvbnN0IGhhc0tleSA9IHRoaXMuaGFzXyhrZXkpXG4gICAgICAgIGlmIChoYXNJbnRlcmNlcHRvcnModGhpcykpIHtcbiAgICAgICAgICAgIGNvbnN0IGNoYW5nZSA9IGludGVyY2VwdENoYW5nZTxJTWFwV2lsbENoYW5nZTxLLCBWPj4odGhpcywge1xuICAgICAgICAgICAgICAgIHR5cGU6IGhhc0tleSA/IFVQREFURSA6IEFERCxcbiAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMsXG4gICAgICAgICAgICAgICAgbmV3VmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgICAgIG5hbWU6IGtleVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGlmICghY2hhbmdlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHZhbHVlID0gY2hhbmdlLm5ld1ZhbHVlIVxuICAgICAgICB9XG4gICAgICAgIGlmIChoYXNLZXkpIHtcbiAgICAgICAgICAgIHRoaXMudXBkYXRlVmFsdWVfKGtleSwgdmFsdWUpXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFkZFZhbHVlXyhrZXksIHZhbHVlKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgZGVsZXRlKGtleTogSyk6IGJvb2xlYW4ge1xuICAgICAgICBjaGVja0lmU3RhdGVNb2RpZmljYXRpb25zQXJlQWxsb3dlZCh0aGlzLmtleXNBdG9tXylcbiAgICAgICAgaWYgKGhhc0ludGVyY2VwdG9ycyh0aGlzKSkge1xuICAgICAgICAgICAgY29uc3QgY2hhbmdlID0gaW50ZXJjZXB0Q2hhbmdlPElNYXBXaWxsQ2hhbmdlPEssIFY+Pih0aGlzLCB7XG4gICAgICAgICAgICAgICAgdHlwZTogREVMRVRFLFxuICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcyxcbiAgICAgICAgICAgICAgICBuYW1lOiBrZXlcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBpZiAoIWNoYW5nZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmhhc18oa2V5KSkge1xuICAgICAgICAgICAgY29uc3Qgbm90aWZ5U3B5ID0gaXNTcHlFbmFibGVkKClcbiAgICAgICAgICAgIGNvbnN0IG5vdGlmeSA9IGhhc0xpc3RlbmVycyh0aGlzKVxuICAgICAgICAgICAgY29uc3QgY2hhbmdlOiBJTWFwRGlkQ2hhbmdlPEssIFY+IHwgbnVsbCA9XG4gICAgICAgICAgICAgICAgbm90aWZ5IHx8IG5vdGlmeVNweVxuICAgICAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2YWJsZUtpbmQ6IFwibWFwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnT2JqZWN0TmFtZTogdGhpcy5uYW1lXyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogREVMRVRFLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG9sZFZhbHVlOiAoPGFueT50aGlzLmRhdGFfLmdldChrZXkpKS52YWx1ZV8sXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGtleVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgOiBudWxsXG5cbiAgICAgICAgICAgIGlmIChfX0RFVl9fICYmIG5vdGlmeVNweSkge1xuICAgICAgICAgICAgICAgIHNweVJlcG9ydFN0YXJ0KGNoYW5nZSEgYXMgUHVyZVNweUV2ZW50KVxuICAgICAgICAgICAgfSAvLyBUT0RPIGZpeCB0eXBlXG4gICAgICAgICAgICB0cmFuc2FjdGlvbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5rZXlzQXRvbV8ucmVwb3J0Q2hhbmdlZCgpXG4gICAgICAgICAgICAgICAgdGhpcy5oYXNNYXBfLmdldChrZXkpPy5zZXROZXdWYWx1ZV8oZmFsc2UpXG4gICAgICAgICAgICAgICAgY29uc3Qgb2JzZXJ2YWJsZSA9IHRoaXMuZGF0YV8uZ2V0KGtleSkhXG4gICAgICAgICAgICAgICAgb2JzZXJ2YWJsZS5zZXROZXdWYWx1ZV8odW5kZWZpbmVkIGFzIGFueSlcbiAgICAgICAgICAgICAgICB0aGlzLmRhdGFfLmRlbGV0ZShrZXkpXG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgaWYgKG5vdGlmeSkge1xuICAgICAgICAgICAgICAgIG5vdGlmeUxpc3RlbmVycyh0aGlzLCBjaGFuZ2UpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoX19ERVZfXyAmJiBub3RpZnlTcHkpIHtcbiAgICAgICAgICAgICAgICBzcHlSZXBvcnRFbmQoKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG5cbiAgICBwcml2YXRlIHVwZGF0ZVZhbHVlXyhrZXk6IEssIG5ld1ZhbHVlOiBWIHwgdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IG9ic2VydmFibGUgPSB0aGlzLmRhdGFfLmdldChrZXkpIVxuICAgICAgICBuZXdWYWx1ZSA9IChvYnNlcnZhYmxlIGFzIGFueSkucHJlcGFyZU5ld1ZhbHVlXyhuZXdWYWx1ZSkgYXMgVlxuICAgICAgICBpZiAobmV3VmFsdWUgIT09IGdsb2JhbFN0YXRlLlVOQ0hBTkdFRCkge1xuICAgICAgICAgICAgY29uc3Qgbm90aWZ5U3B5ID0gaXNTcHlFbmFibGVkKClcbiAgICAgICAgICAgIGNvbnN0IG5vdGlmeSA9IGhhc0xpc3RlbmVycyh0aGlzKVxuICAgICAgICAgICAgY29uc3QgY2hhbmdlOiBJTWFwRGlkQ2hhbmdlPEssIFY+IHwgbnVsbCA9XG4gICAgICAgICAgICAgICAgbm90aWZ5IHx8IG5vdGlmeVNweVxuICAgICAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2YWJsZUtpbmQ6IFwibWFwXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnT2JqZWN0TmFtZTogdGhpcy5uYW1lXyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogVVBEQVRFLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG9sZFZhbHVlOiAob2JzZXJ2YWJsZSBhcyBhbnkpLnZhbHVlXyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZToga2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgOiBudWxsXG4gICAgICAgICAgICBpZiAoX19ERVZfXyAmJiBub3RpZnlTcHkpIHtcbiAgICAgICAgICAgICAgICBzcHlSZXBvcnRTdGFydChjaGFuZ2UhIGFzIFB1cmVTcHlFdmVudClcbiAgICAgICAgICAgIH0gLy8gVE9ETyBmaXggdHlwZVxuICAgICAgICAgICAgb2JzZXJ2YWJsZS5zZXROZXdWYWx1ZV8obmV3VmFsdWUgYXMgVilcbiAgICAgICAgICAgIGlmIChub3RpZnkpIHtcbiAgICAgICAgICAgICAgICBub3RpZnlMaXN0ZW5lcnModGhpcywgY2hhbmdlKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKF9fREVWX18gJiYgbm90aWZ5U3B5KSB7XG4gICAgICAgICAgICAgICAgc3B5UmVwb3J0RW5kKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByaXZhdGUgYWRkVmFsdWVfKGtleTogSywgbmV3VmFsdWU6IFYpIHtcbiAgICAgICAgY2hlY2tJZlN0YXRlTW9kaWZpY2F0aW9uc0FyZUFsbG93ZWQodGhpcy5rZXlzQXRvbV8pXG4gICAgICAgIHRyYW5zYWN0aW9uKCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IG9ic2VydmFibGUgPSBuZXcgT2JzZXJ2YWJsZVZhbHVlKFxuICAgICAgICAgICAgICAgIG5ld1ZhbHVlLFxuICAgICAgICAgICAgICAgIHRoaXMuZW5oYW5jZXJfLFxuICAgICAgICAgICAgICAgIF9fREVWX18gPyBgJHt0aGlzLm5hbWVffS4ke3N0cmluZ2lmeUtleShrZXkpfWAgOiBcIk9ic2VydmFibGVNYXAua2V5XCIsXG4gICAgICAgICAgICAgICAgZmFsc2VcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIHRoaXMuZGF0YV8uc2V0KGtleSwgb2JzZXJ2YWJsZSlcbiAgICAgICAgICAgIG5ld1ZhbHVlID0gKG9ic2VydmFibGUgYXMgYW55KS52YWx1ZV8gLy8gdmFsdWUgbWlnaHQgaGF2ZSBiZWVuIGNoYW5nZWRcbiAgICAgICAgICAgIHRoaXMuaGFzTWFwXy5nZXQoa2V5KT8uc2V0TmV3VmFsdWVfKHRydWUpXG4gICAgICAgICAgICB0aGlzLmtleXNBdG9tXy5yZXBvcnRDaGFuZ2VkKClcbiAgICAgICAgfSlcbiAgICAgICAgY29uc3Qgbm90aWZ5U3B5ID0gaXNTcHlFbmFibGVkKClcbiAgICAgICAgY29uc3Qgbm90aWZ5ID0gaGFzTGlzdGVuZXJzKHRoaXMpXG4gICAgICAgIGNvbnN0IGNoYW5nZTogSU1hcERpZENoYW5nZTxLLCBWPiB8IG51bGwgPVxuICAgICAgICAgICAgbm90aWZ5IHx8IG5vdGlmeVNweVxuICAgICAgICAgICAgICAgID8ge1xuICAgICAgICAgICAgICAgICAgICAgIG9ic2VydmFibGVLaW5kOiBcIm1hcFwiLFxuICAgICAgICAgICAgICAgICAgICAgIGRlYnVnT2JqZWN0TmFtZTogdGhpcy5uYW1lXyxcbiAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBBREQsXG4gICAgICAgICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLFxuICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IGtleSxcbiAgICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZVxuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIDogbnVsbFxuICAgICAgICBpZiAoX19ERVZfXyAmJiBub3RpZnlTcHkpIHtcbiAgICAgICAgICAgIHNweVJlcG9ydFN0YXJ0KGNoYW5nZSEgYXMgUHVyZVNweUV2ZW50KVxuICAgICAgICB9IC8vIFRPRE8gZml4IHR5cGVcbiAgICAgICAgaWYgKG5vdGlmeSkge1xuICAgICAgICAgICAgbm90aWZ5TGlzdGVuZXJzKHRoaXMsIGNoYW5nZSlcbiAgICAgICAgfVxuICAgICAgICBpZiAoX19ERVZfXyAmJiBub3RpZnlTcHkpIHtcbiAgICAgICAgICAgIHNweVJlcG9ydEVuZCgpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQoa2V5OiBLKTogViB8IHVuZGVmaW5lZCB7XG4gICAgICAgIGlmICh0aGlzLmhhcyhrZXkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kZWhhbmNlVmFsdWVfKHRoaXMuZGF0YV8uZ2V0KGtleSkhLmdldCgpKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmRlaGFuY2VWYWx1ZV8odW5kZWZpbmVkKVxuICAgIH1cblxuICAgIHByaXZhdGUgZGVoYW5jZVZhbHVlXzxYIGV4dGVuZHMgViB8IHVuZGVmaW5lZD4odmFsdWU6IFgpOiBYIHtcbiAgICAgICAgaWYgKHRoaXMuZGVoYW5jZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGVoYW5jZXIodmFsdWUpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZhbHVlXG4gICAgfVxuXG4gICAga2V5cygpOiBJdGVyYWJsZUl0ZXJhdG9yPEs+IHtcbiAgICAgICAgdGhpcy5rZXlzQXRvbV8ucmVwb3J0T2JzZXJ2ZWQoKVxuICAgICAgICByZXR1cm4gdGhpcy5kYXRhXy5rZXlzKClcbiAgICB9XG5cbiAgICB2YWx1ZXMoKTogSXRlcmFibGVJdGVyYXRvcjxWPiB7XG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzXG4gICAgICAgIGNvbnN0IGtleXMgPSB0aGlzLmtleXMoKVxuICAgICAgICByZXR1cm4gbWFrZUl0ZXJhYmxlKHtcbiAgICAgICAgICAgIG5leHQoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBkb25lLCB2YWx1ZSB9ID0ga2V5cy5uZXh0KClcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBkb25lLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZG9uZSA/ICh1bmRlZmluZWQgYXMgYW55KSA6IHNlbGYuZ2V0KHZhbHVlKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBlbnRyaWVzKCk6IEl0ZXJhYmxlSXRlcmF0b3I8SU1hcEVudHJ5PEssIFY+PiB7XG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzXG4gICAgICAgIGNvbnN0IGtleXMgPSB0aGlzLmtleXMoKVxuICAgICAgICByZXR1cm4gbWFrZUl0ZXJhYmxlKHtcbiAgICAgICAgICAgIG5leHQoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgeyBkb25lLCB2YWx1ZSB9ID0ga2V5cy5uZXh0KClcbiAgICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgICAgICBkb25lLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogZG9uZSA/ICh1bmRlZmluZWQgYXMgYW55KSA6IChbdmFsdWUsIHNlbGYuZ2V0KHZhbHVlKSFdIGFzIFtLLCBWXSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmVudHJpZXMoKVxuICAgIH1cblxuICAgIGZvckVhY2goY2FsbGJhY2s6ICh2YWx1ZTogViwga2V5OiBLLCBvYmplY3Q6IE1hcDxLLCBWPikgPT4gdm9pZCwgdGhpc0FyZz8pIHtcbiAgICAgICAgZm9yIChjb25zdCBba2V5LCB2YWx1ZV0gb2YgdGhpcykge1xuICAgICAgICAgICAgY2FsbGJhY2suY2FsbCh0aGlzQXJnLCB2YWx1ZSwga2V5LCB0aGlzKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqIE1lcmdlIGFub3RoZXIgb2JqZWN0IGludG8gdGhpcyBvYmplY3QsIHJldHVybnMgdGhpcy4gKi9cbiAgICBtZXJnZShvdGhlcj86IElPYnNlcnZhYmxlTWFwSW5pdGlhbFZhbHVlczxLLCBWPik6IE9ic2VydmFibGVNYXA8SywgVj4ge1xuICAgICAgICBpZiAoaXNPYnNlcnZhYmxlTWFwKG90aGVyKSkge1xuICAgICAgICAgICAgb3RoZXIgPSBuZXcgTWFwKG90aGVyKVxuICAgICAgICB9XG4gICAgICAgIHRyYW5zYWN0aW9uKCgpID0+IHtcbiAgICAgICAgICAgIGlmIChpc1BsYWluT2JqZWN0KG90aGVyKSkge1xuICAgICAgICAgICAgICAgIGdldFBsYWluT2JqZWN0S2V5cyhvdGhlcikuZm9yRWFjaCgoa2V5OiBhbnkpID0+XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0KGtleSBhcyBLLCAob3RoZXIgYXMgSUtleVZhbHVlTWFwKVtrZXldKVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShvdGhlcikpIHtcbiAgICAgICAgICAgICAgICBvdGhlci5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IHRoaXMuc2V0KGtleSwgdmFsdWUpKVxuICAgICAgICAgICAgfSBlbHNlIGlmIChpc0VTNk1hcChvdGhlcikpIHtcbiAgICAgICAgICAgICAgICBpZiAob3RoZXIuY29uc3RydWN0b3IgIT09IE1hcCkge1xuICAgICAgICAgICAgICAgICAgICBkaWUoMTksIG90aGVyKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBvdGhlci5mb3JFYWNoKCh2YWx1ZSwga2V5KSA9PiB0aGlzLnNldChrZXksIHZhbHVlKSlcbiAgICAgICAgICAgIH0gZWxzZSBpZiAob3RoZXIgIT09IG51bGwgJiYgb3RoZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIGRpZSgyMCwgb3RoZXIpXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgY2xlYXIoKSB7XG4gICAgICAgIHRyYW5zYWN0aW9uKCgpID0+IHtcbiAgICAgICAgICAgIHVudHJhY2tlZCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgdGhpcy5rZXlzKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWxldGUoa2V5KVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgcmVwbGFjZSh2YWx1ZXM6IElPYnNlcnZhYmxlTWFwSW5pdGlhbFZhbHVlczxLLCBWPik6IE9ic2VydmFibGVNYXA8SywgVj4ge1xuICAgICAgICAvLyBJbXBsZW1lbnRhdGlvbiByZXF1aXJlbWVudHM6XG4gICAgICAgIC8vIC0gcmVzcGVjdCBvcmRlcmluZyBvZiByZXBsYWNlbWVudCBtYXBcbiAgICAgICAgLy8gLSBhbGxvdyBpbnRlcmNlcHRvcnMgdG8gcnVuIGFuZCBwb3RlbnRpYWxseSBwcmV2ZW50IGluZGl2aWR1YWwgb3BlcmF0aW9uc1xuICAgICAgICAvLyAtIGRvbid0IHJlY3JlYXRlIG9ic2VydmFibGVzIHRoYXQgYWxyZWFkeSBleGlzdCBpbiBvcmlnaW5hbCBtYXAgKHNvIHdlIGRvbid0IGRlc3Ryb3kgZXhpc3Rpbmcgc3Vic2NyaXB0aW9ucylcbiAgICAgICAgLy8gLSBkb24ndCBfa2V5c0F0b20ucmVwb3J0Q2hhbmdlZCBpZiB0aGUga2V5cyBvZiByZXN1bHRpbmcgbWFwIGFyZSBpbmRlbnRpY2FsIChvcmRlciBtYXR0ZXJzISlcbiAgICAgICAgLy8gLSBub3RlIHRoYXQgcmVzdWx0IG1hcCBtYXkgZGlmZmVyIGZyb20gcmVwbGFjZW1lbnQgbWFwIGR1ZSB0byB0aGUgaW50ZXJjZXB0b3JzXG4gICAgICAgIHRyYW5zYWN0aW9uKCgpID0+IHtcbiAgICAgICAgICAgIC8vIENvbnZlcnQgdG8gbWFwIHNvIHdlIGNhbiBkbyBxdWljayBrZXkgbG9va3Vwc1xuICAgICAgICAgICAgY29uc3QgcmVwbGFjZW1lbnRNYXAgPSBjb252ZXJ0VG9NYXAodmFsdWVzKVxuICAgICAgICAgICAgY29uc3Qgb3JkZXJlZERhdGEgPSBuZXcgTWFwKClcbiAgICAgICAgICAgIC8vIFVzZWQgZm9yIG9wdGltaXphdGlvblxuICAgICAgICAgICAgbGV0IGtleXNSZXBvcnRDaGFuZ2VkQ2FsbGVkID0gZmFsc2VcbiAgICAgICAgICAgIC8vIERlbGV0ZSBrZXlzIHRoYXQgZG9uJ3QgZXhpc3QgaW4gcmVwbGFjZW1lbnQgbWFwXG4gICAgICAgICAgICAvLyBpZiB0aGUga2V5IGRlbGV0aW9uIGlzIHByZXZlbnRlZCBieSBpbnRlcmNlcHRvclxuICAgICAgICAgICAgLy8gYWRkIGVudHJ5IGF0IHRoZSBiZWdpbm5pbmcgb2YgdGhlIHJlc3VsdCBtYXBcbiAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IG9mIHRoaXMuZGF0YV8ua2V5cygpKSB7XG4gICAgICAgICAgICAgICAgLy8gQ29uY3VycmVudGx5IGl0ZXJhdGluZy9kZWxldGluZyBrZXlzXG4gICAgICAgICAgICAgICAgLy8gaXRlcmF0b3Igc2hvdWxkIGhhbmRsZSB0aGlzIGNvcnJlY3RseVxuICAgICAgICAgICAgICAgIGlmICghcmVwbGFjZW1lbnRNYXAuaGFzKGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZGVsZXRlZCA9IHRoaXMuZGVsZXRlKGtleSlcbiAgICAgICAgICAgICAgICAgICAgLy8gV2FzIHRoZSBrZXkgcmVtb3ZlZD9cbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlbGV0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIF9rZXlzQXRvbS5yZXBvcnRDaGFuZ2VkKCkgd2FzIGFscmVhZHkgY2FsbGVkXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXlzUmVwb3J0Q2hhbmdlZENhbGxlZCA9IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIERlbGV0ZSBwcmV2ZW50ZWQgYnkgaW50ZXJjZXB0b3JcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5kYXRhXy5nZXQoa2V5KVxuICAgICAgICAgICAgICAgICAgICAgICAgb3JkZXJlZERhdGEuc2V0KGtleSwgdmFsdWUpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBNZXJnZSBlbnRyaWVzXG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtrZXksIHZhbHVlXSBvZiByZXBsYWNlbWVudE1hcC5lbnRyaWVzKCkpIHtcbiAgICAgICAgICAgICAgICAvLyBXZSB3aWxsIHdhbnQgdG8ga25vdyB3aGV0aGVyIGEgbmV3IGtleSBpcyBhZGRlZFxuICAgICAgICAgICAgICAgIGNvbnN0IGtleUV4aXN0ZWQgPSB0aGlzLmRhdGFfLmhhcyhrZXkpXG4gICAgICAgICAgICAgICAgLy8gQWRkIG9yIHVwZGF0ZSB2YWx1ZVxuICAgICAgICAgICAgICAgIHRoaXMuc2V0KGtleSwgdmFsdWUpXG4gICAgICAgICAgICAgICAgLy8gVGhlIGFkZGl0aW9uIGNvdWxkIGhhdmUgYmVlbiBwcmV2ZW50IGJ5IGludGVyY2VwdG9yXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuZGF0YV8uaGFzKGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVGhlIHVwZGF0ZSBjb3VsZCBoYXZlIGJlZW4gcHJldmVudGVkIGJ5IGludGVyY2VwdG9yXG4gICAgICAgICAgICAgICAgICAgIC8vIGFuZCBhbHNvIHdlIHdhbnQgdG8gcHJlc2VydmUgZXhpc3RpbmcgdmFsdWVzXG4gICAgICAgICAgICAgICAgICAgIC8vIHNvIHVzZSB2YWx1ZSBmcm9tIF9kYXRhIG1hcCAoaW5zdGVhZCBvZiByZXBsYWNlbWVudCBtYXApXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5kYXRhXy5nZXQoa2V5KVxuICAgICAgICAgICAgICAgICAgICBvcmRlcmVkRGF0YS5zZXQoa2V5LCB2YWx1ZSlcbiAgICAgICAgICAgICAgICAgICAgLy8gV2FzIGEgbmV3IGtleSBhZGRlZD9cbiAgICAgICAgICAgICAgICAgICAgaWYgKCFrZXlFeGlzdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBfa2V5c0F0b20ucmVwb3J0Q2hhbmdlZCgpIHdhcyBhbHJlYWR5IGNhbGxlZFxuICAgICAgICAgICAgICAgICAgICAgICAga2V5c1JlcG9ydENoYW5nZWRDYWxsZWQgPSB0cnVlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBDaGVjayBmb3IgcG9zc2libGUga2V5IG9yZGVyIGNoYW5nZVxuICAgICAgICAgICAgaWYgKCFrZXlzUmVwb3J0Q2hhbmdlZENhbGxlZCkge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRhdGFfLnNpemUgIT09IG9yZGVyZWREYXRhLnNpemUpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gSWYgc2l6ZSBkaWZmZXJzLCBrZXlzIGFyZSBkZWZpbml0ZWx5IG1vZGlmaWVkXG4gICAgICAgICAgICAgICAgICAgIHRoaXMua2V5c0F0b21fLnJlcG9ydENoYW5nZWQoKVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGl0ZXIxID0gdGhpcy5kYXRhXy5rZXlzKClcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaXRlcjIgPSBvcmRlcmVkRGF0YS5rZXlzKClcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5leHQxID0gaXRlcjEubmV4dCgpXG4gICAgICAgICAgICAgICAgICAgIGxldCBuZXh0MiA9IGl0ZXIyLm5leHQoKVxuICAgICAgICAgICAgICAgICAgICB3aGlsZSAoIW5leHQxLmRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChuZXh0MS52YWx1ZSAhPT0gbmV4dDIudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmtleXNBdG9tXy5yZXBvcnRDaGFuZ2VkKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgbmV4dDEgPSBpdGVyMS5uZXh0KClcbiAgICAgICAgICAgICAgICAgICAgICAgIG5leHQyID0gaXRlcjIubmV4dCgpXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBVc2UgY29ycmVjdGx5IG9yZGVyZWQgbWFwXG4gICAgICAgICAgICB0aGlzLmRhdGFfID0gb3JkZXJlZERhdGFcbiAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICBnZXQgc2l6ZSgpOiBudW1iZXIge1xuICAgICAgICB0aGlzLmtleXNBdG9tXy5yZXBvcnRPYnNlcnZlZCgpXG4gICAgICAgIHJldHVybiB0aGlzLmRhdGFfLnNpemVcbiAgICB9XG5cbiAgICB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gXCJbb2JqZWN0IE9ic2VydmFibGVNYXBdXCJcbiAgICB9XG5cbiAgICB0b0pTT04oKTogW0ssIFZdW10ge1xuICAgICAgICByZXR1cm4gQXJyYXkuZnJvbSh0aGlzKVxuICAgIH1cblxuICAgIGdldCBbU3ltYm9sLnRvU3RyaW5nVGFnXSgpIHtcbiAgICAgICAgcmV0dXJuIFwiTWFwXCJcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPYnNlcnZlcyB0aGlzIG9iamVjdC4gVHJpZ2dlcnMgZm9yIHRoZSBldmVudHMgJ2FkZCcsICd1cGRhdGUnIGFuZCAnZGVsZXRlJy5cbiAgICAgKiBTZWU6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0phdmFTY3JpcHQvUmVmZXJlbmNlL0dsb2JhbF9PYmplY3RzL09iamVjdC9vYnNlcnZlXG4gICAgICogZm9yIGNhbGxiYWNrIGRldGFpbHNcbiAgICAgKi9cbiAgICBvYnNlcnZlXyhsaXN0ZW5lcjogKGNoYW5nZXM6IElNYXBEaWRDaGFuZ2U8SywgVj4pID0+IHZvaWQsIGZpcmVJbW1lZGlhdGVseT86IGJvb2xlYW4pOiBMYW1iZGEge1xuICAgICAgICBpZiAoX19ERVZfXyAmJiBmaXJlSW1tZWRpYXRlbHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGRpZShcImBvYnNlcnZlYCBkb2Vzbid0IHN1cHBvcnQgZmlyZUltbWVkaWF0ZWx5PXRydWUgaW4gY29tYmluYXRpb24gd2l0aCBtYXBzLlwiKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZWdpc3Rlckxpc3RlbmVyKHRoaXMsIGxpc3RlbmVyKVxuICAgIH1cblxuICAgIGludGVyY2VwdF8oaGFuZGxlcjogSUludGVyY2VwdG9yPElNYXBXaWxsQ2hhbmdlPEssIFY+Pik6IExhbWJkYSB7XG4gICAgICAgIHJldHVybiByZWdpc3RlckludGVyY2VwdG9yKHRoaXMsIGhhbmRsZXIpXG4gICAgfVxufVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbmV4cG9ydCB2YXIgaXNPYnNlcnZhYmxlTWFwID0gY3JlYXRlSW5zdGFuY2VvZlByZWRpY2F0ZShcIk9ic2VydmFibGVNYXBcIiwgT2JzZXJ2YWJsZU1hcCkgYXMgKFxuICAgIHRoaW5nOiBhbnlcbikgPT4gdGhpbmcgaXMgT2JzZXJ2YWJsZU1hcDxhbnksIGFueT5cblxuZnVuY3Rpb24gY29udmVydFRvTWFwKGRhdGFTdHJ1Y3R1cmU6IGFueSk6IE1hcDxhbnksIGFueT4ge1xuICAgIGlmIChpc0VTNk1hcChkYXRhU3RydWN0dXJlKSB8fCBpc09ic2VydmFibGVNYXAoZGF0YVN0cnVjdHVyZSkpIHtcbiAgICAgICAgcmV0dXJuIGRhdGFTdHJ1Y3R1cmVcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoZGF0YVN0cnVjdHVyZSkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNYXAoZGF0YVN0cnVjdHVyZSlcbiAgICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QoZGF0YVN0cnVjdHVyZSkpIHtcbiAgICAgICAgY29uc3QgbWFwID0gbmV3IE1hcCgpXG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGRhdGFTdHJ1Y3R1cmUpIHtcbiAgICAgICAgICAgIG1hcC5zZXQoa2V5LCBkYXRhU3RydWN0dXJlW2tleV0pXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG1hcFxuICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBkaWUoMjEsIGRhdGFTdHJ1Y3R1cmUpXG4gICAgfVxufVxuIiwiaW1wb3J0IHtcbiAgICAkbW9ieCxcbiAgICBjcmVhdGVBdG9tLFxuICAgIGRlZXBFbmhhbmNlcixcbiAgICBnZXROZXh0SWQsXG4gICAgSUVuaGFuY2VyLFxuICAgIGlzU3B5RW5hYmxlZCxcbiAgICBoYXNMaXN0ZW5lcnMsXG4gICAgSUxpc3RlbmFibGUsXG4gICAgcmVnaXN0ZXJMaXN0ZW5lcixcbiAgICBMYW1iZGEsXG4gICAgc3B5UmVwb3J0U3RhcnQsXG4gICAgbm90aWZ5TGlzdGVuZXJzLFxuICAgIHNweVJlcG9ydEVuZCxcbiAgICBjcmVhdGVJbnN0YW5jZW9mUHJlZGljYXRlLFxuICAgIGhhc0ludGVyY2VwdG9ycyxcbiAgICBpbnRlcmNlcHRDaGFuZ2UsXG4gICAgSUludGVyY2VwdGFibGUsXG4gICAgSUludGVyY2VwdG9yLFxuICAgIHJlZ2lzdGVySW50ZXJjZXB0b3IsXG4gICAgY2hlY2tJZlN0YXRlTW9kaWZpY2F0aW9uc0FyZUFsbG93ZWQsXG4gICAgdW50cmFja2VkLFxuICAgIG1ha2VJdGVyYWJsZSxcbiAgICB0cmFuc2FjdGlvbixcbiAgICBpc0VTNlNldCxcbiAgICBJQXRvbSxcbiAgICBERUxFVEUsXG4gICAgQURELFxuICAgIGRpZSxcbiAgICBpc0Z1bmN0aW9uXG59IGZyb20gXCIuLi9pbnRlcm5hbFwiXG5cbmNvbnN0IE9ic2VydmFibGVTZXRNYXJrZXIgPSB7fVxuXG5leHBvcnQgdHlwZSBJT2JzZXJ2YWJsZVNldEluaXRpYWxWYWx1ZXM8VD4gPSBTZXQ8VD4gfCByZWFkb25seSBUW11cblxuZXhwb3J0IHR5cGUgSVNldERpZENoYW5nZTxUID0gYW55PiA9XG4gICAgfCB7XG4gICAgICAgICAgb2JqZWN0OiBPYnNlcnZhYmxlU2V0PFQ+XG4gICAgICAgICAgb2JzZXJ2YWJsZUtpbmQ6IFwic2V0XCJcbiAgICAgICAgICBkZWJ1Z09iamVjdE5hbWU6IHN0cmluZ1xuICAgICAgICAgIHR5cGU6IFwiYWRkXCJcbiAgICAgICAgICBuZXdWYWx1ZTogVFxuICAgICAgfVxuICAgIHwge1xuICAgICAgICAgIG9iamVjdDogT2JzZXJ2YWJsZVNldDxUPlxuICAgICAgICAgIG9ic2VydmFibGVLaW5kOiBcInNldFwiXG4gICAgICAgICAgZGVidWdPYmplY3ROYW1lOiBzdHJpbmdcbiAgICAgICAgICB0eXBlOiBcImRlbGV0ZVwiXG4gICAgICAgICAgb2xkVmFsdWU6IFRcbiAgICAgIH1cblxuZXhwb3J0IHR5cGUgSVNldFdpbGxDaGFuZ2U8VCA9IGFueT4gPVxuICAgIHwge1xuICAgICAgICAgIHR5cGU6IFwiZGVsZXRlXCJcbiAgICAgICAgICBvYmplY3Q6IE9ic2VydmFibGVTZXQ8VD5cbiAgICAgICAgICBvbGRWYWx1ZTogVFxuICAgICAgfVxuICAgIHwge1xuICAgICAgICAgIHR5cGU6IFwiYWRkXCJcbiAgICAgICAgICBvYmplY3Q6IE9ic2VydmFibGVTZXQ8VD5cbiAgICAgICAgICBuZXdWYWx1ZTogVFxuICAgICAgfVxuXG5leHBvcnQgY2xhc3MgT2JzZXJ2YWJsZVNldDxUID0gYW55PiBpbXBsZW1lbnRzIFNldDxUPiwgSUludGVyY2VwdGFibGU8SVNldFdpbGxDaGFuZ2U+LCBJTGlzdGVuYWJsZSB7XG4gICAgWyRtb2J4XSA9IE9ic2VydmFibGVTZXRNYXJrZXJcbiAgICBwcml2YXRlIGRhdGFfOiBTZXQ8YW55PiA9IG5ldyBTZXQoKVxuICAgIGF0b21fOiBJQXRvbVxuICAgIGNoYW5nZUxpc3RlbmVyc19cbiAgICBpbnRlcmNlcHRvcnNfXG4gICAgZGVoYW5jZXI6IGFueVxuICAgIGVuaGFuY2VyXzogKG5ld1Y6IGFueSwgb2xkVjogYW55IHwgdW5kZWZpbmVkKSA9PiBhbnlcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBpbml0aWFsRGF0YT86IElPYnNlcnZhYmxlU2V0SW5pdGlhbFZhbHVlczxUPixcbiAgICAgICAgZW5oYW5jZXI6IElFbmhhbmNlcjxUPiA9IGRlZXBFbmhhbmNlcixcbiAgICAgICAgcHVibGljIG5hbWVfID0gX19ERVZfXyA/IFwiT2JzZXJ2YWJsZVNldEBcIiArIGdldE5leHRJZCgpIDogXCJPYnNlcnZhYmxlU2V0XCJcbiAgICApIHtcbiAgICAgICAgaWYgKCFpc0Z1bmN0aW9uKFNldCkpIHtcbiAgICAgICAgICAgIGRpZSgyMilcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmF0b21fID0gY3JlYXRlQXRvbSh0aGlzLm5hbWVfKVxuICAgICAgICB0aGlzLmVuaGFuY2VyXyA9IChuZXdWLCBvbGRWKSA9PiBlbmhhbmNlcihuZXdWLCBvbGRWLCBuYW1lXylcbiAgICAgICAgaWYgKGluaXRpYWxEYXRhKSB7XG4gICAgICAgICAgICB0aGlzLnJlcGxhY2UoaW5pdGlhbERhdGEpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGRlaGFuY2VWYWx1ZV88WCBleHRlbmRzIFQgfCB1bmRlZmluZWQ+KHZhbHVlOiBYKTogWCB7XG4gICAgICAgIGlmICh0aGlzLmRlaGFuY2VyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRlaGFuY2VyKHZhbHVlKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB2YWx1ZVxuICAgIH1cblxuICAgIGNsZWFyKCkge1xuICAgICAgICB0cmFuc2FjdGlvbigoKSA9PiB7XG4gICAgICAgICAgICB1bnRyYWNrZWQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGZvciAoY29uc3QgdmFsdWUgb2YgdGhpcy5kYXRhXy52YWx1ZXMoKSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmRlbGV0ZSh2YWx1ZSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIGZvckVhY2goY2FsbGJhY2tGbjogKHZhbHVlOiBULCB2YWx1ZTI6IFQsIHNldDogU2V0PFQ+KSA9PiB2b2lkLCB0aGlzQXJnPzogYW55KSB7XG4gICAgICAgIGZvciAoY29uc3QgdmFsdWUgb2YgdGhpcykge1xuICAgICAgICAgICAgY2FsbGJhY2tGbi5jYWxsKHRoaXNBcmcsIHZhbHVlLCB2YWx1ZSwgdGhpcylcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldCBzaXplKCkge1xuICAgICAgICB0aGlzLmF0b21fLnJlcG9ydE9ic2VydmVkKClcbiAgICAgICAgcmV0dXJuIHRoaXMuZGF0YV8uc2l6ZVxuICAgIH1cblxuICAgIGFkZCh2YWx1ZTogVCkge1xuICAgICAgICBjaGVja0lmU3RhdGVNb2RpZmljYXRpb25zQXJlQWxsb3dlZCh0aGlzLmF0b21fKVxuICAgICAgICBpZiAoaGFzSW50ZXJjZXB0b3JzKHRoaXMpKSB7XG4gICAgICAgICAgICBjb25zdCBjaGFuZ2UgPSBpbnRlcmNlcHRDaGFuZ2U8SVNldFdpbGxDaGFuZ2U8VD4+KHRoaXMsIHtcbiAgICAgICAgICAgICAgICB0eXBlOiBBREQsXG4gICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLFxuICAgICAgICAgICAgICAgIG5ld1ZhbHVlOiB2YWx1ZVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGlmICghY2hhbmdlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGlkZWFsbHksIHZhbHVlID0gY2hhbmdlLnZhbHVlIHdvdWxkIGJlIGRvbmUgaGVyZSwgc28gdGhhdCB2YWx1ZXMgY2FuIGJlXG4gICAgICAgICAgICAvLyBjaGFuZ2VkIGJ5IGludGVyY2VwdG9yLiBTYW1lIGFwcGxpZXMgZm9yIG90aGVyIFNldCBhbmQgTWFwIGFwaSdzLlxuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5oYXModmFsdWUpKSB7XG4gICAgICAgICAgICB0cmFuc2FjdGlvbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5kYXRhXy5hZGQodGhpcy5lbmhhbmNlcl8odmFsdWUsIHVuZGVmaW5lZCkpXG4gICAgICAgICAgICAgICAgdGhpcy5hdG9tXy5yZXBvcnRDaGFuZ2VkKClcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBjb25zdCBub3RpZnlTcHkgPSBfX0RFVl9fICYmIGlzU3B5RW5hYmxlZCgpXG4gICAgICAgICAgICBjb25zdCBub3RpZnkgPSBoYXNMaXN0ZW5lcnModGhpcylcbiAgICAgICAgICAgIGNvbnN0IGNoYW5nZSA9XG4gICAgICAgICAgICAgICAgbm90aWZ5IHx8IG5vdGlmeVNweVxuICAgICAgICAgICAgICAgICAgICA/IDxJU2V0RGlkQ2hhbmdlPFQ+PntcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb2JzZXJ2YWJsZUtpbmQ6IFwic2V0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnT2JqZWN0TmFtZTogdGhpcy5uYW1lXyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogQURELFxuICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlOiB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgOiBudWxsXG4gICAgICAgICAgICBpZiAobm90aWZ5U3B5ICYmIF9fREVWX18pIHtcbiAgICAgICAgICAgICAgICBzcHlSZXBvcnRTdGFydChjaGFuZ2UhKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5vdGlmeSkge1xuICAgICAgICAgICAgICAgIG5vdGlmeUxpc3RlbmVycyh0aGlzLCBjaGFuZ2UpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobm90aWZ5U3B5ICYmIF9fREVWX18pIHtcbiAgICAgICAgICAgICAgICBzcHlSZXBvcnRFbmQoKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICBkZWxldGUodmFsdWU6IFQpIHtcbiAgICAgICAgaWYgKGhhc0ludGVyY2VwdG9ycyh0aGlzKSkge1xuICAgICAgICAgICAgY29uc3QgY2hhbmdlID0gaW50ZXJjZXB0Q2hhbmdlPElTZXRXaWxsQ2hhbmdlPFQ+Pih0aGlzLCB7XG4gICAgICAgICAgICAgICAgdHlwZTogREVMRVRFLFxuICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcyxcbiAgICAgICAgICAgICAgICBvbGRWYWx1ZTogdmFsdWVcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBpZiAoIWNoYW5nZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmhhcyh2YWx1ZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IG5vdGlmeVNweSA9IF9fREVWX18gJiYgaXNTcHlFbmFibGVkKClcbiAgICAgICAgICAgIGNvbnN0IG5vdGlmeSA9IGhhc0xpc3RlbmVycyh0aGlzKVxuICAgICAgICAgICAgY29uc3QgY2hhbmdlID1cbiAgICAgICAgICAgICAgICBub3RpZnkgfHwgbm90aWZ5U3B5XG4gICAgICAgICAgICAgICAgICAgID8gPElTZXREaWRDaGFuZ2U8VD4+e1xuICAgICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZhYmxlS2luZDogXCJzZXRcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVidWdPYmplY3ROYW1lOiB0aGlzLm5hbWVfLFxuICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBERUxFVEUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb2xkVmFsdWU6IHZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICA6IG51bGxcblxuICAgICAgICAgICAgaWYgKG5vdGlmeVNweSAmJiBfX0RFVl9fKSB7XG4gICAgICAgICAgICAgICAgc3B5UmVwb3J0U3RhcnQoY2hhbmdlISlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRyYW5zYWN0aW9uKCgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLmF0b21fLnJlcG9ydENoYW5nZWQoKVxuICAgICAgICAgICAgICAgIHRoaXMuZGF0YV8uZGVsZXRlKHZhbHVlKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIGlmIChub3RpZnkpIHtcbiAgICAgICAgICAgICAgICBub3RpZnlMaXN0ZW5lcnModGhpcywgY2hhbmdlKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5vdGlmeVNweSAmJiBfX0RFVl9fKSB7XG4gICAgICAgICAgICAgICAgc3B5UmVwb3J0RW5kKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG4gICAgaGFzKHZhbHVlOiBUKSB7XG4gICAgICAgIHRoaXMuYXRvbV8ucmVwb3J0T2JzZXJ2ZWQoKVxuICAgICAgICByZXR1cm4gdGhpcy5kYXRhXy5oYXModGhpcy5kZWhhbmNlVmFsdWVfKHZhbHVlKSlcbiAgICB9XG5cbiAgICBlbnRyaWVzKCkge1xuICAgICAgICBsZXQgbmV4dEluZGV4ID0gMFxuICAgICAgICBjb25zdCBrZXlzID0gQXJyYXkuZnJvbSh0aGlzLmtleXMoKSlcbiAgICAgICAgY29uc3QgdmFsdWVzID0gQXJyYXkuZnJvbSh0aGlzLnZhbHVlcygpKVxuICAgICAgICByZXR1cm4gbWFrZUl0ZXJhYmxlPFtULCBUXT4oe1xuICAgICAgICAgICAgbmV4dCgpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IG5leHRJbmRleFxuICAgICAgICAgICAgICAgIG5leHRJbmRleCArPSAxXG4gICAgICAgICAgICAgICAgcmV0dXJuIGluZGV4IDwgdmFsdWVzLmxlbmd0aFxuICAgICAgICAgICAgICAgICAgICA/IHsgdmFsdWU6IFtrZXlzW2luZGV4XSwgdmFsdWVzW2luZGV4XV0sIGRvbmU6IGZhbHNlIH1cbiAgICAgICAgICAgICAgICAgICAgOiB7IGRvbmU6IHRydWUgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGFzIGFueSlcbiAgICB9XG5cbiAgICBrZXlzKCk6IEl0ZXJhYmxlSXRlcmF0b3I8VD4ge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZXMoKVxuICAgIH1cblxuICAgIHZhbHVlcygpOiBJdGVyYWJsZUl0ZXJhdG9yPFQ+IHtcbiAgICAgICAgdGhpcy5hdG9tXy5yZXBvcnRPYnNlcnZlZCgpXG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzXG4gICAgICAgIGxldCBuZXh0SW5kZXggPSAwXG4gICAgICAgIGNvbnN0IG9ic2VydmFibGVWYWx1ZXMgPSBBcnJheS5mcm9tKHRoaXMuZGF0YV8udmFsdWVzKCkpXG4gICAgICAgIHJldHVybiBtYWtlSXRlcmFibGU8VD4oe1xuICAgICAgICAgICAgbmV4dCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV4dEluZGV4IDwgb2JzZXJ2YWJsZVZhbHVlcy5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgPyB7IHZhbHVlOiBzZWxmLmRlaGFuY2VWYWx1ZV8ob2JzZXJ2YWJsZVZhbHVlc1tuZXh0SW5kZXgrK10pLCBkb25lOiBmYWxzZSB9XG4gICAgICAgICAgICAgICAgICAgIDogeyBkb25lOiB0cnVlIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBhcyBhbnkpXG4gICAgfVxuXG4gICAgcmVwbGFjZShvdGhlcjogT2JzZXJ2YWJsZVNldDxUPiB8IElPYnNlcnZhYmxlU2V0SW5pdGlhbFZhbHVlczxUPik6IE9ic2VydmFibGVTZXQ8VD4ge1xuICAgICAgICBpZiAoaXNPYnNlcnZhYmxlU2V0KG90aGVyKSkge1xuICAgICAgICAgICAgb3RoZXIgPSBuZXcgU2V0KG90aGVyKVxuICAgICAgICB9XG5cbiAgICAgICAgdHJhbnNhY3Rpb24oKCkgPT4ge1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkob3RoZXIpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jbGVhcigpXG4gICAgICAgICAgICAgICAgb3RoZXIuZm9yRWFjaCh2YWx1ZSA9PiB0aGlzLmFkZCh2YWx1ZSkpXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGlzRVM2U2V0KG90aGVyKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuY2xlYXIoKVxuICAgICAgICAgICAgICAgIG90aGVyLmZvckVhY2godmFsdWUgPT4gdGhpcy5hZGQodmFsdWUpKVxuICAgICAgICAgICAgfSBlbHNlIGlmIChvdGhlciAhPT0gbnVsbCAmJiBvdGhlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgZGllKFwiQ2Fubm90IGluaXRpYWxpemUgc2V0IGZyb20gXCIgKyBvdGhlcilcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcblxuICAgICAgICByZXR1cm4gdGhpc1xuICAgIH1cbiAgICBvYnNlcnZlXyhsaXN0ZW5lcjogKGNoYW5nZXM6IElTZXREaWRDaGFuZ2U8VD4pID0+IHZvaWQsIGZpcmVJbW1lZGlhdGVseT86IGJvb2xlYW4pOiBMYW1iZGEge1xuICAgICAgICAvLyAuLi4gJ2ZpcmVJbW1lZGlhdGVseScgY291bGQgYWxzbyBiZSB0cnVlP1xuICAgICAgICBpZiAoX19ERVZfXyAmJiBmaXJlSW1tZWRpYXRlbHkgPT09IHRydWUpIHtcbiAgICAgICAgICAgIGRpZShcImBvYnNlcnZlYCBkb2Vzbid0IHN1cHBvcnQgZmlyZUltbWVkaWF0ZWx5PXRydWUgaW4gY29tYmluYXRpb24gd2l0aCBzZXRzLlwiKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZWdpc3Rlckxpc3RlbmVyKHRoaXMsIGxpc3RlbmVyKVxuICAgIH1cblxuICAgIGludGVyY2VwdF8oaGFuZGxlcjogSUludGVyY2VwdG9yPElTZXRXaWxsQ2hhbmdlPFQ+Pik6IExhbWJkYSB7XG4gICAgICAgIHJldHVybiByZWdpc3RlckludGVyY2VwdG9yKHRoaXMsIGhhbmRsZXIpXG4gICAgfVxuXG4gICAgdG9KU09OKCk6IFRbXSB7XG4gICAgICAgIHJldHVybiBBcnJheS5mcm9tKHRoaXMpXG4gICAgfVxuXG4gICAgdG9TdHJpbmcoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIFwiW29iamVjdCBPYnNlcnZhYmxlU2V0XVwiXG4gICAgfVxuXG4gICAgW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZhbHVlcygpXG4gICAgfVxuXG4gICAgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkge1xuICAgICAgICByZXR1cm4gXCJTZXRcIlxuICAgIH1cbn1cblxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5leHBvcnQgdmFyIGlzT2JzZXJ2YWJsZVNldCA9IGNyZWF0ZUluc3RhbmNlb2ZQcmVkaWNhdGUoXCJPYnNlcnZhYmxlU2V0XCIsIE9ic2VydmFibGVTZXQpIGFzIChcbiAgICB0aGluZzogYW55XG4pID0+IHRoaW5nIGlzIE9ic2VydmFibGVTZXQ8YW55PlxuIiwiaW1wb3J0IHtcbiAgICBDcmVhdGVPYnNlcnZhYmxlT3B0aW9ucyxcbiAgICBnZXRBbm5vdGF0aW9uRnJvbU9wdGlvbnMsXG4gICAgcHJvcGFnYXRlQ2hhbmdlZCxcbiAgICBpc0Fubm90YXRpb24sXG4gICAgJG1vYngsXG4gICAgQXRvbSxcbiAgICBBbm5vdGF0aW9uLFxuICAgIENvbXB1dGVkVmFsdWUsXG4gICAgSUF0b20sXG4gICAgSUNvbXB1dGVkVmFsdWVPcHRpb25zLFxuICAgIElFbmhhbmNlcixcbiAgICBJSW50ZXJjZXB0YWJsZSxcbiAgICBJTGlzdGVuYWJsZSxcbiAgICBMYW1iZGEsXG4gICAgT2JzZXJ2YWJsZVZhbHVlLFxuICAgIGFkZEhpZGRlblByb3AsXG4gICAgY3JlYXRlSW5zdGFuY2VvZlByZWRpY2F0ZSxcbiAgICBlbmRCYXRjaCxcbiAgICBnZXROZXh0SWQsXG4gICAgaGFzSW50ZXJjZXB0b3JzLFxuICAgIGhhc0xpc3RlbmVycyxcbiAgICBpbnRlcmNlcHRDaGFuZ2UsXG4gICAgaXNPYmplY3QsXG4gICAgaXNQbGFpbk9iamVjdCxcbiAgICBpc1NweUVuYWJsZWQsXG4gICAgbm90aWZ5TGlzdGVuZXJzLFxuICAgIHJlZmVyZW5jZUVuaGFuY2VyLFxuICAgIHJlZ2lzdGVySW50ZXJjZXB0b3IsXG4gICAgcmVnaXN0ZXJMaXN0ZW5lcixcbiAgICBzcHlSZXBvcnRFbmQsXG4gICAgc3B5UmVwb3J0U3RhcnQsXG4gICAgc3RhcnRCYXRjaCxcbiAgICBzdHJpbmdpZnlLZXksXG4gICAgZ2xvYmFsU3RhdGUsXG4gICAgQURELFxuICAgIFVQREFURSxcbiAgICBkaWUsXG4gICAgaGFzUHJvcCxcbiAgICBnZXREZXNjcmlwdG9yLFxuICAgIHN0b3JlZEFubm90YXRpb25zU3ltYm9sLFxuICAgIG93bktleXMsXG4gICAgaXNPdmVycmlkZSxcbiAgICBkZWZpbmVQcm9wZXJ0eSxcbiAgICBhdXRvQW5ub3RhdGlvbixcbiAgICBnZXRBZG1pbmlzdHJhdGlvbixcbiAgICBnZXREZWJ1Z05hbWUsXG4gICAgb2JqZWN0UHJvdG90eXBlLFxuICAgIE1ha2VSZXN1bHRcbn0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuY29uc3QgZGVzY3JpcHRvckNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKVxuXG5leHBvcnQgdHlwZSBJT2JqZWN0RGlkQ2hhbmdlPFQgPSBhbnk+ID0ge1xuICAgIG9ic2VydmFibGVLaW5kOiBcIm9iamVjdFwiXG4gICAgbmFtZTogUHJvcGVydHlLZXlcbiAgICBvYmplY3Q6IFRcbiAgICBkZWJ1Z09iamVjdE5hbWU6IHN0cmluZ1xufSAmIChcbiAgICB8IHtcbiAgICAgICAgICB0eXBlOiBcImFkZFwiXG4gICAgICAgICAgbmV3VmFsdWU6IGFueVxuICAgICAgfVxuICAgIHwge1xuICAgICAgICAgIHR5cGU6IFwidXBkYXRlXCJcbiAgICAgICAgICBvbGRWYWx1ZTogYW55XG4gICAgICAgICAgbmV3VmFsdWU6IGFueVxuICAgICAgfVxuICAgIHwge1xuICAgICAgICAgIHR5cGU6IFwicmVtb3ZlXCJcbiAgICAgICAgICBvbGRWYWx1ZTogYW55XG4gICAgICB9XG4pXG5cbmV4cG9ydCB0eXBlIElPYmplY3RXaWxsQ2hhbmdlPFQgPSBhbnk+ID1cbiAgICB8IHtcbiAgICAgICAgICBvYmplY3Q6IFRcbiAgICAgICAgICB0eXBlOiBcInVwZGF0ZVwiIHwgXCJhZGRcIlxuICAgICAgICAgIG5hbWU6IFByb3BlcnR5S2V5XG4gICAgICAgICAgbmV3VmFsdWU6IGFueVxuICAgICAgfVxuICAgIHwge1xuICAgICAgICAgIG9iamVjdDogVFxuICAgICAgICAgIHR5cGU6IFwicmVtb3ZlXCJcbiAgICAgICAgICBuYW1lOiBQcm9wZXJ0eUtleVxuICAgICAgfVxuXG5jb25zdCBSRU1PVkUgPSBcInJlbW92ZVwiXG5cbmV4cG9ydCBjbGFzcyBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb25cbiAgICBpbXBsZW1lbnRzIElJbnRlcmNlcHRhYmxlPElPYmplY3RXaWxsQ2hhbmdlPiwgSUxpc3RlbmFibGVcbntcbiAgICBrZXlzQXRvbV86IElBdG9tXG4gICAgY2hhbmdlTGlzdGVuZXJzX1xuICAgIGludGVyY2VwdG9yc19cbiAgICBwcm94eV86IGFueVxuICAgIGlzUGxhaW5PYmplY3RfOiBib29sZWFuXG4gICAgYXBwbGllZEFubm90YXRpb25zXz86IG9iamVjdFxuICAgIHByaXZhdGUgcGVuZGluZ0tleXNfOiB1bmRlZmluZWQgfCBNYXA8UHJvcGVydHlLZXksIE9ic2VydmFibGVWYWx1ZTxib29sZWFuPj5cblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwdWJsaWMgdGFyZ2V0XzogYW55LFxuICAgICAgICBwdWJsaWMgdmFsdWVzXyA9IG5ldyBNYXA8UHJvcGVydHlLZXksIE9ic2VydmFibGVWYWx1ZTxhbnk+IHwgQ29tcHV0ZWRWYWx1ZTxhbnk+PigpLFxuICAgICAgICBwdWJsaWMgbmFtZV86IHN0cmluZyxcbiAgICAgICAgLy8gVXNlZCBhbnl0aW1lIGFubm90YXRpb24gaXMgbm90IGV4cGxpY2l0ZWx5IHByb3ZpZGVkXG4gICAgICAgIHB1YmxpYyBkZWZhdWx0QW5ub3RhdGlvbl86IEFubm90YXRpb24gPSBhdXRvQW5ub3RhdGlvblxuICAgICkge1xuICAgICAgICB0aGlzLmtleXNBdG9tXyA9IG5ldyBBdG9tKF9fREVWX18gPyBgJHt0aGlzLm5hbWVffS5rZXlzYCA6IFwiT2JzZXJ2YWJsZU9iamVjdC5rZXlzXCIpXG4gICAgICAgIC8vIE9wdGltaXphdGlvbjogd2UgdXNlIHRoaXMgZnJlcXVlbnRseVxuICAgICAgICB0aGlzLmlzUGxhaW5PYmplY3RfID0gaXNQbGFpbk9iamVjdCh0aGlzLnRhcmdldF8pXG4gICAgICAgIGlmIChfX0RFVl9fICYmICFpc0Fubm90YXRpb24odGhpcy5kZWZhdWx0QW5ub3RhdGlvbl8pKSB7XG4gICAgICAgICAgICBkaWUoYGRlZmF1bHRBbm5vdGF0aW9uIG11c3QgYmUgdmFsaWQgYW5ub3RhdGlvbmApXG4gICAgICAgIH1cbiAgICAgICAgaWYgKF9fREVWX18pIHtcbiAgICAgICAgICAgIC8vIFByZXBhcmUgc3RydWN0dXJlIGZvciB0cmFja2luZyB3aGljaCBmaWVsZHMgd2VyZSBhbHJlYWR5IGFubm90YXRlZFxuICAgICAgICAgICAgdGhpcy5hcHBsaWVkQW5ub3RhdGlvbnNfID0ge31cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldE9ic2VydmFibGVQcm9wVmFsdWVfKGtleTogUHJvcGVydHlLZXkpOiBhbnkge1xuICAgICAgICByZXR1cm4gdGhpcy52YWx1ZXNfLmdldChrZXkpIS5nZXQoKVxuICAgIH1cblxuICAgIHNldE9ic2VydmFibGVQcm9wVmFsdWVfKGtleTogUHJvcGVydHlLZXksIG5ld1ZhbHVlKTogYm9vbGVhbiB8IG51bGwge1xuICAgICAgICBjb25zdCBvYnNlcnZhYmxlID0gdGhpcy52YWx1ZXNfLmdldChrZXkpXG4gICAgICAgIGlmIChvYnNlcnZhYmxlIGluc3RhbmNlb2YgQ29tcHV0ZWRWYWx1ZSkge1xuICAgICAgICAgICAgb2JzZXJ2YWJsZS5zZXQobmV3VmFsdWUpXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gaW50ZXJjZXB0XG4gICAgICAgIGlmIChoYXNJbnRlcmNlcHRvcnModGhpcykpIHtcbiAgICAgICAgICAgIGNvbnN0IGNoYW5nZSA9IGludGVyY2VwdENoYW5nZTxJT2JqZWN0V2lsbENoYW5nZT4odGhpcywge1xuICAgICAgICAgICAgICAgIHR5cGU6IFVQREFURSxcbiAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMucHJveHlfIHx8IHRoaXMudGFyZ2V0XyxcbiAgICAgICAgICAgICAgICBuYW1lOiBrZXksXG4gICAgICAgICAgICAgICAgbmV3VmFsdWVcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICBpZiAoIWNoYW5nZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBuZXdWYWx1ZSA9IChjaGFuZ2UgYXMgYW55KS5uZXdWYWx1ZVxuICAgICAgICB9XG4gICAgICAgIG5ld1ZhbHVlID0gKG9ic2VydmFibGUgYXMgYW55KS5wcmVwYXJlTmV3VmFsdWVfKG5ld1ZhbHVlKVxuXG4gICAgICAgIC8vIG5vdGlmeSBzcHkgJiBvYnNlcnZlcnNcbiAgICAgICAgaWYgKG5ld1ZhbHVlICE9PSBnbG9iYWxTdGF0ZS5VTkNIQU5HRUQpIHtcbiAgICAgICAgICAgIGNvbnN0IG5vdGlmeSA9IGhhc0xpc3RlbmVycyh0aGlzKVxuICAgICAgICAgICAgY29uc3Qgbm90aWZ5U3B5ID0gX19ERVZfXyAmJiBpc1NweUVuYWJsZWQoKVxuICAgICAgICAgICAgY29uc3QgY2hhbmdlOiBJT2JqZWN0RGlkQ2hhbmdlIHwgbnVsbCA9XG4gICAgICAgICAgICAgICAgbm90aWZ5IHx8IG5vdGlmeVNweVxuICAgICAgICAgICAgICAgICAgICA/IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogVVBEQVRFLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZhYmxlS2luZDogXCJvYmplY3RcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVidWdPYmplY3ROYW1lOiB0aGlzLm5hbWVfLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMucHJveHlfIHx8IHRoaXMudGFyZ2V0XyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgb2xkVmFsdWU6IChvYnNlcnZhYmxlIGFzIGFueSkudmFsdWVfLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBrZXksXG4gICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1ZhbHVlXG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICA6IG51bGxcblxuICAgICAgICAgICAgaWYgKF9fREVWX18gJiYgbm90aWZ5U3B5KSB7XG4gICAgICAgICAgICAgICAgc3B5UmVwb3J0U3RhcnQoY2hhbmdlISlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDsob2JzZXJ2YWJsZSBhcyBPYnNlcnZhYmxlVmFsdWU8YW55Pikuc2V0TmV3VmFsdWVfKG5ld1ZhbHVlKVxuICAgICAgICAgICAgaWYgKG5vdGlmeSkge1xuICAgICAgICAgICAgICAgIG5vdGlmeUxpc3RlbmVycyh0aGlzLCBjaGFuZ2UpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoX19ERVZfXyAmJiBub3RpZnlTcHkpIHtcbiAgICAgICAgICAgICAgICBzcHlSZXBvcnRFbmQoKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgZ2V0XyhrZXk6IFByb3BlcnR5S2V5KTogYW55IHtcbiAgICAgICAgaWYgKGdsb2JhbFN0YXRlLnRyYWNraW5nRGVyaXZhdGlvbiAmJiAhaGFzUHJvcCh0aGlzLnRhcmdldF8sIGtleSkpIHtcbiAgICAgICAgICAgIC8vIEtleSBkb2Vzbid0IGV4aXN0IHlldCwgc3Vic2NyaWJlIGZvciBpdCBpbiBjYXNlIGl0J3MgYWRkZWQgbGF0ZXJcbiAgICAgICAgICAgIHRoaXMuaGFzXyhrZXkpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMudGFyZ2V0X1trZXldXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQHBhcmFtIHtQcm9wZXJ0eUtleX0ga2V5XG4gICAgICogQHBhcmFtIHthbnl9IHZhbHVlXG4gICAgICogQHBhcmFtIHtBbm5vdGF0aW9ufGJvb2xlYW59IGFubm90YXRpb24gdHJ1ZSAtIHVzZSBkZWZhdWx0IGFubm90YXRpb24sIGZhbHNlIC0gY29weSBhcyBpc1xuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gcHJveHlUcmFwIHdoZXRoZXIgaXQncyBjYWxsZWQgZnJvbSBwcm94eSB0cmFwXG4gICAgICogQHJldHVybnMge2Jvb2xlYW58bnVsbH0gdHJ1ZSBvbiBzdWNjZXNzLCBmYWxzZSBvbiBmYWlsdXJlIChwcm94eVRyYXAgKyBub24tY29uZmlndXJhYmxlKSwgbnVsbCB3aGVuIGNhbmNlbGxlZCBieSBpbnRlcmNlcHRvclxuICAgICAqL1xuICAgIHNldF8oa2V5OiBQcm9wZXJ0eUtleSwgdmFsdWU6IGFueSwgcHJveHlUcmFwOiBib29sZWFuID0gZmFsc2UpOiBib29sZWFuIHwgbnVsbCB7XG4gICAgICAgIC8vIERvbid0IHVzZSAuaGFzKGtleSkgLSB3ZSBjYXJlIGFib3V0IG93blxuICAgICAgICBpZiAoaGFzUHJvcCh0aGlzLnRhcmdldF8sIGtleSkpIHtcbiAgICAgICAgICAgIC8vIEV4aXN0aW5nIHByb3BcbiAgICAgICAgICAgIGlmICh0aGlzLnZhbHVlc18uaGFzKGtleSkpIHtcbiAgICAgICAgICAgICAgICAvLyBPYnNlcnZhYmxlIChjYW4gYmUgaW50ZXJjZXB0ZWQpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2V0T2JzZXJ2YWJsZVByb3BWYWx1ZV8oa2V5LCB2YWx1ZSlcbiAgICAgICAgICAgIH0gZWxzZSBpZiAocHJveHlUcmFwKSB7XG4gICAgICAgICAgICAgICAgLy8gTm9uLW9ic2VydmFibGUgLSBwcm94eVxuICAgICAgICAgICAgICAgIHJldHVybiBSZWZsZWN0LnNldCh0aGlzLnRhcmdldF8sIGtleSwgdmFsdWUpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIE5vbi1vYnNlcnZhYmxlXG4gICAgICAgICAgICAgICAgdGhpcy50YXJnZXRfW2tleV0gPSB2YWx1ZVxuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBOZXcgcHJvcFxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZXh0ZW5kXyhcbiAgICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgICAgeyB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9LFxuICAgICAgICAgICAgICAgIHRoaXMuZGVmYXVsdEFubm90YXRpb25fLFxuICAgICAgICAgICAgICAgIHByb3h5VHJhcFxuICAgICAgICAgICAgKVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gVHJhcCBmb3IgXCJpblwiXG4gICAgaGFzXyhrZXk6IFByb3BlcnR5S2V5KTogYm9vbGVhbiB7XG4gICAgICAgIGlmICghZ2xvYmFsU3RhdGUudHJhY2tpbmdEZXJpdmF0aW9uKSB7XG4gICAgICAgICAgICAvLyBTa2lwIGtleSBzdWJzY3JpcHRpb24gb3V0c2lkZSBkZXJpdmF0aW9uXG4gICAgICAgICAgICByZXR1cm4ga2V5IGluIHRoaXMudGFyZ2V0X1xuICAgICAgICB9XG4gICAgICAgIHRoaXMucGVuZGluZ0tleXNfIHx8PSBuZXcgTWFwKClcbiAgICAgICAgbGV0IGVudHJ5ID0gdGhpcy5wZW5kaW5nS2V5c18uZ2V0KGtleSlcbiAgICAgICAgaWYgKCFlbnRyeSkge1xuICAgICAgICAgICAgZW50cnkgPSBuZXcgT2JzZXJ2YWJsZVZhbHVlKFxuICAgICAgICAgICAgICAgIGtleSBpbiB0aGlzLnRhcmdldF8sXG4gICAgICAgICAgICAgICAgcmVmZXJlbmNlRW5oYW5jZXIsXG4gICAgICAgICAgICAgICAgX19ERVZfXyA/IGAke3RoaXMubmFtZV99LiR7c3RyaW5naWZ5S2V5KGtleSl9P2AgOiBcIk9ic2VydmFibGVPYmplY3Qua2V5P1wiLFxuICAgICAgICAgICAgICAgIGZhbHNlXG4gICAgICAgICAgICApXG4gICAgICAgICAgICB0aGlzLnBlbmRpbmdLZXlzXy5zZXQoa2V5LCBlbnRyeSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZW50cnkuZ2V0KClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1Byb3BlcnR5S2V5fSBrZXlcbiAgICAgKiBAcGFyYW0ge0Fubm90YXRpb258Ym9vbGVhbn0gYW5ub3RhdGlvbiB0cnVlIC0gdXNlIGRlZmF1bHQgYW5ub3RhdGlvbiwgZmFsc2UgLSBpZ25vcmUgcHJvcFxuICAgICAqL1xuICAgIG1ha2VfKGtleTogUHJvcGVydHlLZXksIGFubm90YXRpb246IEFubm90YXRpb24gfCBib29sZWFuKTogdm9pZCB7XG4gICAgICAgIGlmIChhbm5vdGF0aW9uID09PSB0cnVlKSB7XG4gICAgICAgICAgICBhbm5vdGF0aW9uID0gdGhpcy5kZWZhdWx0QW5ub3RhdGlvbl9cbiAgICAgICAgfVxuICAgICAgICBpZiAoYW5ub3RhdGlvbiA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIGFzc2VydEFubm90YWJsZSh0aGlzLCBhbm5vdGF0aW9uLCBrZXkpXG4gICAgICAgIGlmICghKGtleSBpbiB0aGlzLnRhcmdldF8pKSB7XG4gICAgICAgICAgICAvLyBUaHJvdyBvbiBtaXNzaW5nIGtleSwgZXhjZXB0IGZvciBkZWNvcmF0b3JzOlxuICAgICAgICAgICAgLy8gRGVjb3JhdG9yIGFubm90YXRpb25zIGFyZSBjb2xsZWN0ZWQgZnJvbSB3aG9sZSBwcm90b3R5cGUgY2hhaW4uXG4gICAgICAgICAgICAvLyBXaGVuIGNhbGxlZCBmcm9tIHN1cGVyKCkgc29tZSBwcm9wcyBtYXkgbm90IGV4aXN0IHlldC5cbiAgICAgICAgICAgIC8vIEhvd2V2ZXIgd2UgZG9uJ3QgaGF2ZSB0byB3b3JyeSBhYm91dCBtaXNzaW5nIHByb3AsXG4gICAgICAgICAgICAvLyBiZWNhdXNlIHRoZSBkZWNvcmF0b3IgbXVzdCBoYXZlIGJlZW4gYXBwbGllZCB0byBzb21ldGhpbmcuXG4gICAgICAgICAgICBpZiAodGhpcy50YXJnZXRfW3N0b3JlZEFubm90YXRpb25zU3ltYm9sXT8uW2tleV0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gLy8gd2lsbCBiZSBhbm5vdGF0ZWQgYnkgc3ViY2xhc3MgY29uc3RydWN0b3JcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgZGllKDEsIGFubm90YXRpb24uYW5ub3RhdGlvblR5cGVfLCBgJHt0aGlzLm5hbWVffS4ke2tleS50b1N0cmluZygpfWApXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgbGV0IHNvdXJjZSA9IHRoaXMudGFyZ2V0X1xuICAgICAgICB3aGlsZSAoc291cmNlICYmIHNvdXJjZSAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgICAgICBjb25zdCBkZXNjcmlwdG9yID0gZ2V0RGVzY3JpcHRvcihzb3VyY2UsIGtleSlcbiAgICAgICAgICAgIGlmIChkZXNjcmlwdG9yKSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgb3V0Y29tZSA9IGFubm90YXRpb24ubWFrZV8odGhpcywga2V5LCBkZXNjcmlwdG9yLCBzb3VyY2UpXG4gICAgICAgICAgICAgICAgaWYgKG91dGNvbWUgPT09IE1ha2VSZXN1bHQuQ2FuY2VsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAob3V0Y29tZSA9PT0gTWFrZVJlc3VsdC5CcmVhaykge1xuICAgICAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNvdXJjZSA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihzb3VyY2UpXG4gICAgICAgIH1cbiAgICAgICAgcmVjb3JkQW5ub3RhdGlvbkFwcGxpZWQodGhpcywgYW5ub3RhdGlvbiwga2V5KVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7UHJvcGVydHlLZXl9IGtleVxuICAgICAqIEBwYXJhbSB7UHJvcGVydHlEZXNjcmlwdG9yfSBkZXNjcmlwdG9yXG4gICAgICogQHBhcmFtIHtBbm5vdGF0aW9ufGJvb2xlYW59IGFubm90YXRpb24gdHJ1ZSAtIHVzZSBkZWZhdWx0IGFubm90YXRpb24sIGZhbHNlIC0gY29weSBhcyBpc1xuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gcHJveHlUcmFwIHdoZXRoZXIgaXQncyBjYWxsZWQgZnJvbSBwcm94eSB0cmFwXG4gICAgICogQHJldHVybnMge2Jvb2xlYW58bnVsbH0gdHJ1ZSBvbiBzdWNjZXNzLCBmYWxzZSBvbiBmYWlsdXJlIChwcm94eVRyYXAgKyBub24tY29uZmlndXJhYmxlKSwgbnVsbCB3aGVuIGNhbmNlbGxlZCBieSBpbnRlcmNlcHRvclxuICAgICAqL1xuICAgIGV4dGVuZF8oXG4gICAgICAgIGtleTogUHJvcGVydHlLZXksXG4gICAgICAgIGRlc2NyaXB0b3I6IFByb3BlcnR5RGVzY3JpcHRvcixcbiAgICAgICAgYW5ub3RhdGlvbjogQW5ub3RhdGlvbiB8IGJvb2xlYW4sXG4gICAgICAgIHByb3h5VHJhcDogYm9vbGVhbiA9IGZhbHNlXG4gICAgKTogYm9vbGVhbiB8IG51bGwge1xuICAgICAgICBpZiAoYW5ub3RhdGlvbiA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgYW5ub3RhdGlvbiA9IHRoaXMuZGVmYXVsdEFubm90YXRpb25fXG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFubm90YXRpb24gPT09IGZhbHNlKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5kZWZpbmVQcm9wZXJ0eV8oa2V5LCBkZXNjcmlwdG9yLCBwcm94eVRyYXApXG4gICAgICAgIH1cbiAgICAgICAgYXNzZXJ0QW5ub3RhYmxlKHRoaXMsIGFubm90YXRpb24sIGtleSlcbiAgICAgICAgY29uc3Qgb3V0Y29tZSA9IGFubm90YXRpb24uZXh0ZW5kXyh0aGlzLCBrZXksIGRlc2NyaXB0b3IsIHByb3h5VHJhcClcbiAgICAgICAgaWYgKG91dGNvbWUpIHtcbiAgICAgICAgICAgIHJlY29yZEFubm90YXRpb25BcHBsaWVkKHRoaXMsIGFubm90YXRpb24sIGtleSlcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0Y29tZVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBwYXJhbSB7UHJvcGVydHlLZXl9IGtleVxuICAgICAqIEBwYXJhbSB7UHJvcGVydHlEZXNjcmlwdG9yfSBkZXNjcmlwdG9yXG4gICAgICogQHBhcmFtIHtib29sZWFufSBwcm94eVRyYXAgd2hldGhlciBpdCdzIGNhbGxlZCBmcm9tIHByb3h5IHRyYXBcbiAgICAgKiBAcmV0dXJucyB7Ym9vbGVhbnxudWxsfSB0cnVlIG9uIHN1Y2Nlc3MsIGZhbHNlIG9uIGZhaWx1cmUgKHByb3h5VHJhcCArIG5vbi1jb25maWd1cmFibGUpLCBudWxsIHdoZW4gY2FuY2VsbGVkIGJ5IGludGVyY2VwdG9yXG4gICAgICovXG4gICAgZGVmaW5lUHJvcGVydHlfKFxuICAgICAgICBrZXk6IFByb3BlcnR5S2V5LFxuICAgICAgICBkZXNjcmlwdG9yOiBQcm9wZXJ0eURlc2NyaXB0b3IsXG4gICAgICAgIHByb3h5VHJhcDogYm9vbGVhbiA9IGZhbHNlXG4gICAgKTogYm9vbGVhbiB8IG51bGwge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgc3RhcnRCYXRjaCgpXG5cbiAgICAgICAgICAgIC8vIERlbGV0ZVxuICAgICAgICAgICAgY29uc3QgZGVsZXRlT3V0Y29tZSA9IHRoaXMuZGVsZXRlXyhrZXkpXG4gICAgICAgICAgICBpZiAoIWRlbGV0ZU91dGNvbWUpIHtcbiAgICAgICAgICAgICAgICAvLyBGYWlsdXJlIG9yIGludGVyY2VwdGVkXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlbGV0ZU91dGNvbWVcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQUREIGludGVyY2VwdG9yXG4gICAgICAgICAgICBpZiAoaGFzSW50ZXJjZXB0b3JzKHRoaXMpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2hhbmdlID0gaW50ZXJjZXB0Q2hhbmdlPElPYmplY3RXaWxsQ2hhbmdlPih0aGlzLCB7XG4gICAgICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcy5wcm94eV8gfHwgdGhpcy50YXJnZXRfLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBrZXksXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IEFERCxcbiAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWU6IGRlc2NyaXB0b3IudmFsdWVcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIGlmICghY2hhbmdlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNvbnN0IHsgbmV3VmFsdWUgfSA9IGNoYW5nZSBhcyBhbnlcbiAgICAgICAgICAgICAgICBpZiAoZGVzY3JpcHRvci52YWx1ZSAhPT0gbmV3VmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRvciA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC4uLmRlc2NyaXB0b3IsXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZTogbmV3VmFsdWVcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gRGVmaW5lXG4gICAgICAgICAgICBpZiAocHJveHlUcmFwKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFSZWZsZWN0LmRlZmluZVByb3BlcnR5KHRoaXMudGFyZ2V0Xywga2V5LCBkZXNjcmlwdG9yKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRoaXMudGFyZ2V0Xywga2V5LCBkZXNjcmlwdG9yKVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBOb3RpZnlcbiAgICAgICAgICAgIHRoaXMubm90aWZ5UHJvcGVydHlBZGRpdGlvbl8oa2V5LCBkZXNjcmlwdG9yLnZhbHVlKVxuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgZW5kQmF0Y2goKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgLy8gSWYgb3JpZ2luYWwgZGVzY3JpcHRvciBiZWNvbWVzIHJlbGV2YW50LCBtb3ZlIHRoaXMgdG8gYW5ub3RhdGlvbiBkaXJlY3RseVxuICAgIGRlZmluZU9ic2VydmFibGVQcm9wZXJ0eV8oXG4gICAgICAgIGtleTogUHJvcGVydHlLZXksXG4gICAgICAgIHZhbHVlOiBhbnksXG4gICAgICAgIGVuaGFuY2VyOiBJRW5oYW5jZXI8YW55PixcbiAgICAgICAgcHJveHlUcmFwOiBib29sZWFuID0gZmFsc2VcbiAgICApOiBib29sZWFuIHwgbnVsbCB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBzdGFydEJhdGNoKClcblxuICAgICAgICAgICAgLy8gRGVsZXRlXG4gICAgICAgICAgICBjb25zdCBkZWxldGVPdXRjb21lID0gdGhpcy5kZWxldGVfKGtleSlcbiAgICAgICAgICAgIGlmICghZGVsZXRlT3V0Y29tZSkge1xuICAgICAgICAgICAgICAgIC8vIEZhaWx1cmUgb3IgaW50ZXJjZXB0ZWRcbiAgICAgICAgICAgICAgICByZXR1cm4gZGVsZXRlT3V0Y29tZVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBBREQgaW50ZXJjZXB0b3JcbiAgICAgICAgICAgIGlmIChoYXNJbnRlcmNlcHRvcnModGhpcykpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBjaGFuZ2UgPSBpbnRlcmNlcHRDaGFuZ2U8SU9iamVjdFdpbGxDaGFuZ2U+KHRoaXMsIHtcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLnByb3h5XyB8fCB0aGlzLnRhcmdldF8sXG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IGtleSxcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogQURELFxuICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZTogdmFsdWVcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgIGlmICghY2hhbmdlKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhbHVlID0gKGNoYW5nZSBhcyBhbnkpLm5ld1ZhbHVlXG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IGNhY2hlZERlc2NyaXB0b3IgPSBnZXRDYWNoZWRPYnNlcnZhYmxlUHJvcERlc2NyaXB0b3Ioa2V5KVxuICAgICAgICAgICAgY29uc3QgZGVzY3JpcHRvciA9IHtcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IGdsb2JhbFN0YXRlLnNhZmVEZXNjcmlwdG9ycyA/IHRoaXMuaXNQbGFpbk9iamVjdF8gOiB0cnVlLFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgZ2V0OiBjYWNoZWREZXNjcmlwdG9yLmdldCxcbiAgICAgICAgICAgICAgICBzZXQ6IGNhY2hlZERlc2NyaXB0b3Iuc2V0XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIERlZmluZVxuICAgICAgICAgICAgaWYgKHByb3h5VHJhcCkge1xuICAgICAgICAgICAgICAgIGlmICghUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLnRhcmdldF8sIGtleSwgZGVzY3JpcHRvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0aGlzLnRhcmdldF8sIGtleSwgZGVzY3JpcHRvcilcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3Qgb2JzZXJ2YWJsZSA9IG5ldyBPYnNlcnZhYmxlVmFsdWUoXG4gICAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgICAgZW5oYW5jZXIsXG4gICAgICAgICAgICAgICAgX19ERVZfXyA/IGAke3RoaXMubmFtZV99LiR7a2V5LnRvU3RyaW5nKCl9YCA6IFwiT2JzZXJ2YWJsZU9iamVjdC5rZXlcIixcbiAgICAgICAgICAgICAgICBmYWxzZVxuICAgICAgICAgICAgKVxuXG4gICAgICAgICAgICB0aGlzLnZhbHVlc18uc2V0KGtleSwgb2JzZXJ2YWJsZSlcblxuICAgICAgICAgICAgLy8gTm90aWZ5ICh2YWx1ZSBwb3NzaWJseSBjaGFuZ2VkIGJ5IE9ic2VydmFibGVWYWx1ZSlcbiAgICAgICAgICAgIHRoaXMubm90aWZ5UHJvcGVydHlBZGRpdGlvbl8oa2V5LCBvYnNlcnZhYmxlLnZhbHVlXylcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIGVuZEJhdGNoKClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIC8vIElmIG9yaWdpbmFsIGRlc2NyaXB0b3IgYmVjb21lcyByZWxldmFudCwgbW92ZSB0aGlzIHRvIGFubm90YXRpb24gZGlyZWN0bHlcbiAgICBkZWZpbmVDb21wdXRlZFByb3BlcnR5XyhcbiAgICAgICAga2V5OiBQcm9wZXJ0eUtleSxcbiAgICAgICAgb3B0aW9uczogSUNvbXB1dGVkVmFsdWVPcHRpb25zPGFueT4sXG4gICAgICAgIHByb3h5VHJhcDogYm9vbGVhbiA9IGZhbHNlXG4gICAgKTogYm9vbGVhbiB8IG51bGwge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgc3RhcnRCYXRjaCgpXG5cbiAgICAgICAgICAgIC8vIERlbGV0ZVxuICAgICAgICAgICAgY29uc3QgZGVsZXRlT3V0Y29tZSA9IHRoaXMuZGVsZXRlXyhrZXkpXG4gICAgICAgICAgICBpZiAoIWRlbGV0ZU91dGNvbWUpIHtcbiAgICAgICAgICAgICAgICAvLyBGYWlsdXJlIG9yIGludGVyY2VwdGVkXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRlbGV0ZU91dGNvbWVcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgLy8gQUREIGludGVyY2VwdG9yXG4gICAgICAgICAgICBpZiAoaGFzSW50ZXJjZXB0b3JzKHRoaXMpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2hhbmdlID0gaW50ZXJjZXB0Q2hhbmdlPElPYmplY3RXaWxsQ2hhbmdlPih0aGlzLCB7XG4gICAgICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcy5wcm94eV8gfHwgdGhpcy50YXJnZXRfLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBrZXksXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IEFERCxcbiAgICAgICAgICAgICAgICAgICAgbmV3VmFsdWU6IHVuZGVmaW5lZFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgaWYgKCFjaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBvcHRpb25zLm5hbWUgfHw9IF9fREVWX18gPyBgJHt0aGlzLm5hbWVffS4ke2tleS50b1N0cmluZygpfWAgOiBcIk9ic2VydmFibGVPYmplY3Qua2V5XCJcbiAgICAgICAgICAgIG9wdGlvbnMuY29udGV4dCA9IHRoaXMucHJveHlfIHx8IHRoaXMudGFyZ2V0X1xuICAgICAgICAgICAgY29uc3QgY2FjaGVkRGVzY3JpcHRvciA9IGdldENhY2hlZE9ic2VydmFibGVQcm9wRGVzY3JpcHRvcihrZXkpXG4gICAgICAgICAgICBjb25zdCBkZXNjcmlwdG9yID0ge1xuICAgICAgICAgICAgICAgIGNvbmZpZ3VyYWJsZTogZ2xvYmFsU3RhdGUuc2FmZURlc2NyaXB0b3JzID8gdGhpcy5pc1BsYWluT2JqZWN0XyA6IHRydWUsXG4gICAgICAgICAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgICAgICAgICAgZ2V0OiBjYWNoZWREZXNjcmlwdG9yLmdldCxcbiAgICAgICAgICAgICAgICBzZXQ6IGNhY2hlZERlc2NyaXB0b3Iuc2V0XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIC8vIERlZmluZVxuICAgICAgICAgICAgaWYgKHByb3h5VHJhcCkge1xuICAgICAgICAgICAgICAgIGlmICghUmVmbGVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLnRhcmdldF8sIGtleSwgZGVzY3JpcHRvcikpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0aGlzLnRhcmdldF8sIGtleSwgZGVzY3JpcHRvcilcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdGhpcy52YWx1ZXNfLnNldChrZXksIG5ldyBDb21wdXRlZFZhbHVlKG9wdGlvbnMpKVxuXG4gICAgICAgICAgICAvLyBOb3RpZnlcbiAgICAgICAgICAgIHRoaXMubm90aWZ5UHJvcGVydHlBZGRpdGlvbl8oa2V5LCB1bmRlZmluZWQpXG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBlbmRCYXRjaCgpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge1Byb3BlcnR5S2V5fSBrZXlcbiAgICAgKiBAcGFyYW0ge1Byb3BlcnR5RGVzY3JpcHRvcn0gZGVzY3JpcHRvclxuICAgICAqIEBwYXJhbSB7Ym9vbGVhbn0gcHJveHlUcmFwIHdoZXRoZXIgaXQncyBjYWxsZWQgZnJvbSBwcm94eSB0cmFwXG4gICAgICogQHJldHVybnMge2Jvb2xlYW58bnVsbH0gdHJ1ZSBvbiBzdWNjZXNzLCBmYWxzZSBvbiBmYWlsdXJlIChwcm94eVRyYXAgKyBub24tY29uZmlndXJhYmxlKSwgbnVsbCB3aGVuIGNhbmNlbGxlZCBieSBpbnRlcmNlcHRvclxuICAgICAqL1xuICAgIGRlbGV0ZV8oa2V5OiBQcm9wZXJ0eUtleSwgcHJveHlUcmFwOiBib29sZWFuID0gZmFsc2UpOiBib29sZWFuIHwgbnVsbCB7XG4gICAgICAgIC8vIE5vIHN1Y2ggcHJvcFxuICAgICAgICBpZiAoIWhhc1Byb3AodGhpcy50YXJnZXRfLCBrZXkpKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gSW50ZXJjZXB0XG4gICAgICAgIGlmIChoYXNJbnRlcmNlcHRvcnModGhpcykpIHtcbiAgICAgICAgICAgIGNvbnN0IGNoYW5nZSA9IGludGVyY2VwdENoYW5nZTxJT2JqZWN0V2lsbENoYW5nZT4odGhpcywge1xuICAgICAgICAgICAgICAgIG9iamVjdDogdGhpcy5wcm94eV8gfHwgdGhpcy50YXJnZXRfLFxuICAgICAgICAgICAgICAgIG5hbWU6IGtleSxcbiAgICAgICAgICAgICAgICB0eXBlOiBSRU1PVkVcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAvLyBDYW5jZWxsZWRcbiAgICAgICAgICAgIGlmICghY2hhbmdlKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERlbGV0ZVxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgc3RhcnRCYXRjaCgpXG4gICAgICAgICAgICBjb25zdCBub3RpZnkgPSBoYXNMaXN0ZW5lcnModGhpcylcbiAgICAgICAgICAgIGNvbnN0IG5vdGlmeVNweSA9IF9fREVWX18gJiYgaXNTcHlFbmFibGVkKClcbiAgICAgICAgICAgIGNvbnN0IG9ic2VydmFibGUgPSB0aGlzLnZhbHVlc18uZ2V0KGtleSlcbiAgICAgICAgICAgIC8vIFZhbHVlIG5lZWRlZCBmb3Igc3BpZXMvbGlzdGVuZXJzXG4gICAgICAgICAgICBsZXQgdmFsdWUgPSB1bmRlZmluZWRcbiAgICAgICAgICAgIC8vIE9wdGltaXphdGlvbjogZG9uJ3QgcHVsbCB0aGUgdmFsdWUgdW5sZXNzIHdlIHdpbGwgbmVlZCBpdFxuICAgICAgICAgICAgaWYgKCFvYnNlcnZhYmxlICYmIChub3RpZnkgfHwgbm90aWZ5U3B5KSkge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gZ2V0RGVzY3JpcHRvcih0aGlzLnRhcmdldF8sIGtleSk/LnZhbHVlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBkZWxldGUgcHJvcCAoZG8gZmlyc3QsIG1heSBmYWlsKVxuICAgICAgICAgICAgaWYgKHByb3h5VHJhcCkge1xuICAgICAgICAgICAgICAgIGlmICghUmVmbGVjdC5kZWxldGVQcm9wZXJ0eSh0aGlzLnRhcmdldF8sIGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy50YXJnZXRfW2tleV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEFsbG93IHJlLWFubm90YXRpbmcgdGhpcyBmaWVsZFxuICAgICAgICAgICAgaWYgKF9fREVWX18pIHtcbiAgICAgICAgICAgICAgICBkZWxldGUgdGhpcy5hcHBsaWVkQW5ub3RhdGlvbnNfIVtrZXldXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBDbGVhciBvYnNlcnZhYmxlXG4gICAgICAgICAgICBpZiAob2JzZXJ2YWJsZSkge1xuICAgICAgICAgICAgICAgIHRoaXMudmFsdWVzXy5kZWxldGUoa2V5KVxuICAgICAgICAgICAgICAgIC8vIGZvciBjb21wdXRlZCwgdmFsdWUgaXMgdW5kZWZpbmVkXG4gICAgICAgICAgICAgICAgaWYgKG9ic2VydmFibGUgaW5zdGFuY2VvZiBPYnNlcnZhYmxlVmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUgPSBvYnNlcnZhYmxlLnZhbHVlX1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBOb3RpZnk6IGF1dG9ydW4oKCkgPT4gb2JqW2tleV0pLCBzZWUgIzE3OTZcbiAgICAgICAgICAgICAgICBwcm9wYWdhdGVDaGFuZ2VkKG9ic2VydmFibGUpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBOb3RpZnkgXCJrZXlzL2VudHJpZXMvdmFsdWVzXCIgb2JzZXJ2ZXJzXG4gICAgICAgICAgICB0aGlzLmtleXNBdG9tXy5yZXBvcnRDaGFuZ2VkKClcblxuICAgICAgICAgICAgLy8gTm90aWZ5IFwiaGFzXCIgb2JzZXJ2ZXJzXG4gICAgICAgICAgICAvLyBcImluXCIgYXMgaXQgbWF5IHN0aWxsIGV4aXN0IGluIHByb3RvXG4gICAgICAgICAgICB0aGlzLnBlbmRpbmdLZXlzXz8uZ2V0KGtleSk/LnNldChrZXkgaW4gdGhpcy50YXJnZXRfKVxuXG4gICAgICAgICAgICAvLyBOb3RpZnkgc3BpZXMvbGlzdGVuZXJzXG4gICAgICAgICAgICBpZiAobm90aWZ5IHx8IG5vdGlmeVNweSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNoYW5nZTogSU9iamVjdERpZENoYW5nZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogUkVNT1ZFLFxuICAgICAgICAgICAgICAgICAgICBvYnNlcnZhYmxlS2luZDogXCJvYmplY3RcIixcbiAgICAgICAgICAgICAgICAgICAgb2JqZWN0OiB0aGlzLnByb3h5XyB8fCB0aGlzLnRhcmdldF8sXG4gICAgICAgICAgICAgICAgICAgIGRlYnVnT2JqZWN0TmFtZTogdGhpcy5uYW1lXyxcbiAgICAgICAgICAgICAgICAgICAgb2xkVmFsdWU6IHZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBrZXlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKF9fREVWX18gJiYgbm90aWZ5U3B5KSB7XG4gICAgICAgICAgICAgICAgICAgIHNweVJlcG9ydFN0YXJ0KGNoYW5nZSEpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlmIChub3RpZnkpIHtcbiAgICAgICAgICAgICAgICAgICAgbm90aWZ5TGlzdGVuZXJzKHRoaXMsIGNoYW5nZSlcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKF9fREVWX18gJiYgbm90aWZ5U3B5KSB7XG4gICAgICAgICAgICAgICAgICAgIHNweVJlcG9ydEVuZCgpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgZW5kQmF0Y2goKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogT2JzZXJ2ZXMgdGhpcyBvYmplY3QuIFRyaWdnZXJzIGZvciB0aGUgZXZlbnRzICdhZGQnLCAndXBkYXRlJyBhbmQgJ2RlbGV0ZScuXG4gICAgICogU2VlOiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3Qvb2JzZXJ2ZVxuICAgICAqIGZvciBjYWxsYmFjayBkZXRhaWxzXG4gICAgICovXG4gICAgb2JzZXJ2ZV8oY2FsbGJhY2s6IChjaGFuZ2VzOiBJT2JqZWN0RGlkQ2hhbmdlKSA9PiB2b2lkLCBmaXJlSW1tZWRpYXRlbHk/OiBib29sZWFuKTogTGFtYmRhIHtcbiAgICAgICAgaWYgKF9fREVWX18gJiYgZmlyZUltbWVkaWF0ZWx5ID09PSB0cnVlKSB7XG4gICAgICAgICAgICBkaWUoXCJgb2JzZXJ2ZWAgZG9lc24ndCBzdXBwb3J0IHRoZSBmaXJlIGltbWVkaWF0ZWx5IHByb3BlcnR5IGZvciBvYnNlcnZhYmxlIG9iamVjdHMuXCIpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlZ2lzdGVyTGlzdGVuZXIodGhpcywgY2FsbGJhY2spXG4gICAgfVxuXG4gICAgaW50ZXJjZXB0XyhoYW5kbGVyKTogTGFtYmRhIHtcbiAgICAgICAgcmV0dXJuIHJlZ2lzdGVySW50ZXJjZXB0b3IodGhpcywgaGFuZGxlcilcbiAgICB9XG5cbiAgICBub3RpZnlQcm9wZXJ0eUFkZGl0aW9uXyhrZXk6IFByb3BlcnR5S2V5LCB2YWx1ZTogYW55KSB7XG4gICAgICAgIGNvbnN0IG5vdGlmeSA9IGhhc0xpc3RlbmVycyh0aGlzKVxuICAgICAgICBjb25zdCBub3RpZnlTcHkgPSBfX0RFVl9fICYmIGlzU3B5RW5hYmxlZCgpXG4gICAgICAgIGlmIChub3RpZnkgfHwgbm90aWZ5U3B5KSB7XG4gICAgICAgICAgICBjb25zdCBjaGFuZ2U6IElPYmplY3REaWRDaGFuZ2UgfCBudWxsID1cbiAgICAgICAgICAgICAgICBub3RpZnkgfHwgbm90aWZ5U3B5XG4gICAgICAgICAgICAgICAgICAgID8gKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogQURELFxuICAgICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZhYmxlS2luZDogXCJvYmplY3RcIixcbiAgICAgICAgICAgICAgICAgICAgICAgICAgZGVidWdPYmplY3ROYW1lOiB0aGlzLm5hbWVfLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3Q6IHRoaXMucHJveHlfIHx8IHRoaXMudGFyZ2V0XyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZToga2V5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdWYWx1ZTogdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgICB9IGFzIGNvbnN0KVxuICAgICAgICAgICAgICAgICAgICA6IG51bGxcblxuICAgICAgICAgICAgaWYgKF9fREVWX18gJiYgbm90aWZ5U3B5KSB7XG4gICAgICAgICAgICAgICAgc3B5UmVwb3J0U3RhcnQoY2hhbmdlISlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChub3RpZnkpIHtcbiAgICAgICAgICAgICAgICBub3RpZnlMaXN0ZW5lcnModGhpcywgY2hhbmdlKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKF9fREVWX18gJiYgbm90aWZ5U3B5KSB7XG4gICAgICAgICAgICAgICAgc3B5UmVwb3J0RW5kKClcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMucGVuZGluZ0tleXNfPy5nZXQoa2V5KT8uc2V0KHRydWUpXG5cbiAgICAgICAgLy8gTm90aWZ5IFwia2V5cy9lbnRyaWVzL3ZhbHVlc1wiIG9ic2VydmVyc1xuICAgICAgICB0aGlzLmtleXNBdG9tXy5yZXBvcnRDaGFuZ2VkKClcbiAgICB9XG5cbiAgICBvd25LZXlzXygpOiBBcnJheUxpa2U8c3RyaW5nIHwgc3ltYm9sPiB7XG4gICAgICAgIHRoaXMua2V5c0F0b21fLnJlcG9ydE9ic2VydmVkKClcbiAgICAgICAgcmV0dXJuIG93bktleXModGhpcy50YXJnZXRfKVxuICAgIH1cblxuICAgIGtleXNfKCk6IFByb3BlcnR5S2V5W10ge1xuICAgICAgICAvLyBSZXR1cm5zIGVudW1lcmFibGUgJiYgb3duLCBidXQgdW5mb3J0dW5hdGVseSBrZXlzQXRvbSB3aWxsIHJlcG9ydCBvbiBBTlkga2V5IGNoYW5nZS5cbiAgICAgICAgLy8gVGhlcmUgaXMgbm8gd2F5IHRvIGRpc3Rpbmd1aXNoIGJldHdlZW4gT2JqZWN0LmtleXMob2JqZWN0KSBhbmQgUmVmbGVjdC5vd25LZXlzKG9iamVjdCkgLSBib3RoIGFyZSBoYW5kbGVkIGJ5IG93bktleXMgdHJhcC5cbiAgICAgICAgLy8gV2UgY2FuIGVpdGhlciBvdmVyLXJlcG9ydCBpbiBPYmplY3Qua2V5cyhvYmplY3QpIG9yIHVuZGVyLXJlcG9ydCBpbiBSZWZsZWN0Lm93bktleXMob2JqZWN0KVxuICAgICAgICAvLyBXZSBjaG9vc2UgdG8gb3Zlci1yZXBvcnQgaW4gT2JqZWN0LmtleXMob2JqZWN0KSwgYmVjYXVzZTpcbiAgICAgICAgLy8gLSB0eXBpY2FsbHkgaXQncyB1c2VkIHdpdGggc2ltcGxlIGRhdGEgb2JqZWN0c1xuICAgICAgICAvLyAtIHdoZW4gc3ltYm9saWMvbm9uLWVudW1lcmFibGUga2V5cyBhcmUgcmVsZXZhbnQgUmVmbGVjdC5vd25LZXlzIHdvcmtzIGFzIGV4cGVjdGVkXG4gICAgICAgIHRoaXMua2V5c0F0b21fLnJlcG9ydE9ic2VydmVkKClcbiAgICAgICAgcmV0dXJuIE9iamVjdC5rZXlzKHRoaXMudGFyZ2V0XylcbiAgICB9XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUlzT2JzZXJ2YWJsZU9iamVjdCB7XG4gICAgJG1vYng6IE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvblxufVxuXG5leHBvcnQgZnVuY3Rpb24gYXNPYnNlcnZhYmxlT2JqZWN0KFxuICAgIHRhcmdldDogYW55LFxuICAgIG9wdGlvbnM/OiBDcmVhdGVPYnNlcnZhYmxlT3B0aW9uc1xuKTogSUlzT2JzZXJ2YWJsZU9iamVjdCB7XG4gICAgaWYgKF9fREVWX18gJiYgb3B0aW9ucyAmJiBpc09ic2VydmFibGVPYmplY3QodGFyZ2V0KSkge1xuICAgICAgICBkaWUoYE9wdGlvbnMgY2FuJ3QgYmUgcHJvdmlkZWQgZm9yIGFscmVhZHkgb2JzZXJ2YWJsZSBvYmplY3RzLmApXG4gICAgfVxuXG4gICAgaWYgKGhhc1Byb3AodGFyZ2V0LCAkbW9ieCkpIHtcbiAgICAgICAgaWYgKF9fREVWX18gJiYgIShnZXRBZG1pbmlzdHJhdGlvbih0YXJnZXQpIGluc3RhbmNlb2YgT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uKSkge1xuICAgICAgICAgICAgZGllKFxuICAgICAgICAgICAgICAgIGBDYW5ub3QgY29udmVydCAnJHtnZXREZWJ1Z05hbWUodGFyZ2V0KX0nIGludG8gb2JzZXJ2YWJsZSBvYmplY3Q6YCArXG4gICAgICAgICAgICAgICAgICAgIGBcXG5UaGUgdGFyZ2V0IGlzIGFscmVhZHkgb2JzZXJ2YWJsZSBvZiBkaWZmZXJlbnQgdHlwZS5gICtcbiAgICAgICAgICAgICAgICAgICAgYFxcbkV4dGVuZGluZyBidWlsdGlucyBpcyBub3Qgc3VwcG9ydGVkLmBcbiAgICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGFyZ2V0XG4gICAgfVxuXG4gICAgaWYgKF9fREVWX18gJiYgIU9iamVjdC5pc0V4dGVuc2libGUodGFyZ2V0KSkge1xuICAgICAgICBkaWUoXCJDYW5ub3QgbWFrZSB0aGUgZGVzaWduYXRlZCBvYmplY3Qgb2JzZXJ2YWJsZTsgaXQgaXMgbm90IGV4dGVuc2libGVcIilcbiAgICB9XG5cbiAgICBjb25zdCBuYW1lID1cbiAgICAgICAgb3B0aW9ucz8ubmFtZSA/P1xuICAgICAgICAoX19ERVZfX1xuICAgICAgICAgICAgPyBgJHtcbiAgICAgICAgICAgICAgICAgIGlzUGxhaW5PYmplY3QodGFyZ2V0KSA/IFwiT2JzZXJ2YWJsZU9iamVjdFwiIDogdGFyZ2V0LmNvbnN0cnVjdG9yLm5hbWVcbiAgICAgICAgICAgICAgfUAke2dldE5leHRJZCgpfWBcbiAgICAgICAgICAgIDogXCJPYnNlcnZhYmxlT2JqZWN0XCIpXG5cbiAgICBjb25zdCBhZG0gPSBuZXcgT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uKFxuICAgICAgICB0YXJnZXQsXG4gICAgICAgIG5ldyBNYXAoKSxcbiAgICAgICAgU3RyaW5nKG5hbWUpLFxuICAgICAgICBnZXRBbm5vdGF0aW9uRnJvbU9wdGlvbnMob3B0aW9ucylcbiAgICApXG5cbiAgICBhZGRIaWRkZW5Qcm9wKHRhcmdldCwgJG1vYngsIGFkbSlcblxuICAgIHJldHVybiB0YXJnZXRcbn1cblxuY29uc3QgaXNPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24gPSBjcmVhdGVJbnN0YW5jZW9mUHJlZGljYXRlKFxuICAgIFwiT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uXCIsXG4gICAgT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uXG4pXG5cbmZ1bmN0aW9uIGdldENhY2hlZE9ic2VydmFibGVQcm9wRGVzY3JpcHRvcihrZXkpIHtcbiAgICByZXR1cm4gKFxuICAgICAgICBkZXNjcmlwdG9yQ2FjaGVba2V5XSB8fFxuICAgICAgICAoZGVzY3JpcHRvckNhY2hlW2tleV0gPSB7XG4gICAgICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNbJG1vYnhdLmdldE9ic2VydmFibGVQcm9wVmFsdWVfKGtleSlcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXQodmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1skbW9ieF0uc2V0T2JzZXJ2YWJsZVByb3BWYWx1ZV8oa2V5LCB2YWx1ZSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICApXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc09ic2VydmFibGVPYmplY3QodGhpbmc6IGFueSk6IGJvb2xlYW4ge1xuICAgIGlmIChpc09iamVjdCh0aGluZykpIHtcbiAgICAgICAgcmV0dXJuIGlzT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uKCh0aGluZyBhcyBhbnkpWyRtb2J4XSlcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlXG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZWNvcmRBbm5vdGF0aW9uQXBwbGllZChcbiAgICBhZG06IE9ic2VydmFibGVPYmplY3RBZG1pbmlzdHJhdGlvbixcbiAgICBhbm5vdGF0aW9uOiBBbm5vdGF0aW9uLFxuICAgIGtleTogUHJvcGVydHlLZXlcbikge1xuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICAgIGFkbS5hcHBsaWVkQW5ub3RhdGlvbnNfIVtrZXldID0gYW5ub3RhdGlvblxuICAgIH1cbiAgICAvLyBSZW1vdmUgYXBwbGllZCBkZWNvcmF0b3IgYW5ub3RhdGlvbiBzbyB3ZSBkb24ndCB0cnkgdG8gYXBwbHkgaXQgYWdhaW4gaW4gc3ViY2xhc3MgY29uc3RydWN0b3JcbiAgICBkZWxldGUgYWRtLnRhcmdldF9bc3RvcmVkQW5ub3RhdGlvbnNTeW1ib2xdPy5ba2V5XVxufVxuXG5mdW5jdGlvbiBhc3NlcnRBbm5vdGFibGUoXG4gICAgYWRtOiBPYnNlcnZhYmxlT2JqZWN0QWRtaW5pc3RyYXRpb24sXG4gICAgYW5ub3RhdGlvbjogQW5ub3RhdGlvbixcbiAgICBrZXk6IFByb3BlcnR5S2V5XG4pIHtcbiAgICAvLyBWYWxpZCBhbm5vdGF0aW9uXG4gICAgaWYgKF9fREVWX18gJiYgIWlzQW5ub3RhdGlvbihhbm5vdGF0aW9uKSkge1xuICAgICAgICBkaWUoYENhbm5vdCBhbm5vdGF0ZSAnJHthZG0ubmFtZV99LiR7a2V5LnRvU3RyaW5nKCl9JzogSW52YWxpZCBhbm5vdGF0aW9uLmApXG4gICAgfVxuXG4gICAgLypcbiAgICAvLyBDb25maWd1cmFibGUsIG5vdCBzZWFsZWQsIG5vdCBmcm96ZW5cbiAgICAvLyBQb3NzaWJseSBub3QgbmVlZGVkLCBqdXN0IGEgbGl0dGxlIGJldHRlciBlcnJvciB0aGVuIHRoZSBvbmUgdGhyb3duIGJ5IGVuZ2luZS5cbiAgICAvLyBDYXNlcyB3aGVyZSB0aGlzIHdvdWxkIGJlIHVzZWZ1bCB0aGUgbW9zdCAoc3ViY2xhc3MgZmllbGQgaW5pdGlhbGl6ZXIpIGFyZSBub3QgaW50ZXJjZXB0YWJsZSBieSB0aGlzLlxuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICAgIGNvbnN0IGNvbmZpZ3VyYWJsZSA9IGdldERlc2NyaXB0b3IoYWRtLnRhcmdldF8sIGtleSk/LmNvbmZpZ3VyYWJsZVxuICAgICAgICBjb25zdCBmcm96ZW4gPSBPYmplY3QuaXNGcm96ZW4oYWRtLnRhcmdldF8pXG4gICAgICAgIGNvbnN0IHNlYWxlZCA9IE9iamVjdC5pc1NlYWxlZChhZG0udGFyZ2V0XylcbiAgICAgICAgaWYgKCFjb25maWd1cmFibGUgfHwgZnJvemVuIHx8IHNlYWxlZCkge1xuICAgICAgICAgICAgY29uc3QgZmllbGROYW1lID0gYCR7YWRtLm5hbWVffS4ke2tleS50b1N0cmluZygpfWBcbiAgICAgICAgICAgIGNvbnN0IHJlcXVlc3RlZEFubm90YXRpb25UeXBlID0gYW5ub3RhdGlvbi5hbm5vdGF0aW9uVHlwZV9cbiAgICAgICAgICAgIGxldCBlcnJvciA9IGBDYW5ub3QgYXBwbHkgJyR7cmVxdWVzdGVkQW5ub3RhdGlvblR5cGV9JyB0byAnJHtmaWVsZE5hbWV9JzpgXG4gICAgICAgICAgICBpZiAoZnJvemVuKSB7XG4gICAgICAgICAgICAgICAgZXJyb3IgKz0gYFxcbk9iamVjdCBpcyBmcm96ZW4uYFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHNlYWxlZCkge1xuICAgICAgICAgICAgICAgIGVycm9yICs9IGBcXG5PYmplY3QgaXMgc2VhbGVkLmBcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghY29uZmlndXJhYmxlKSB7XG4gICAgICAgICAgICAgICAgZXJyb3IgKz0gYFxcbnByb3BlcnR5IGlzIG5vdCBjb25maWd1cmFibGUuYFxuICAgICAgICAgICAgICAgIC8vIE1lbnRpb24gb25seSBpZiBjYXVzZWQgYnkgdXMgdG8gYXZvaWQgY29uZnVzaW9uXG4gICAgICAgICAgICAgICAgaWYgKGhhc1Byb3AoYWRtLmFwcGxpZWRBbm5vdGF0aW9ucyEsIGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgZXJyb3IgKz0gYFxcblRvIHByZXZlbnQgYWNjaWRlbnRhbCByZS1kZWZpbml0aW9uIG9mIGEgZmllbGQgYnkgYSBzdWJjbGFzcywgYFxuICAgICAgICAgICAgICAgICAgICBlcnJvciArPSBgYWxsIGFubm90YXRlZCBmaWVsZHMgb2Ygbm9uLXBsYWluIG9iamVjdHMgKGNsYXNzZXMpIGFyZSBub3QgY29uZmlndXJhYmxlLmBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkaWUoZXJyb3IpXG4gICAgICAgIH1cbiAgICB9XG4gICAgKi9cblxuICAgIC8vIE5vdCBhbm5vdGF0ZWRcbiAgICBpZiAoX19ERVZfXyAmJiAhaXNPdmVycmlkZShhbm5vdGF0aW9uKSAmJiBoYXNQcm9wKGFkbS5hcHBsaWVkQW5ub3RhdGlvbnNfISwga2V5KSkge1xuICAgICAgICBjb25zdCBmaWVsZE5hbWUgPSBgJHthZG0ubmFtZV99LiR7a2V5LnRvU3RyaW5nKCl9YFxuICAgICAgICBjb25zdCBjdXJyZW50QW5ub3RhdGlvblR5cGUgPSBhZG0uYXBwbGllZEFubm90YXRpb25zXyFba2V5XS5hbm5vdGF0aW9uVHlwZV9cbiAgICAgICAgY29uc3QgcmVxdWVzdGVkQW5ub3RhdGlvblR5cGUgPSBhbm5vdGF0aW9uLmFubm90YXRpb25UeXBlX1xuICAgICAgICBkaWUoXG4gICAgICAgICAgICBgQ2Fubm90IGFwcGx5ICcke3JlcXVlc3RlZEFubm90YXRpb25UeXBlfScgdG8gJyR7ZmllbGROYW1lfSc6YCArXG4gICAgICAgICAgICAgICAgYFxcblRoZSBmaWVsZCBpcyBhbHJlYWR5IGFubm90YXRlZCB3aXRoICcke2N1cnJlbnRBbm5vdGF0aW9uVHlwZX0nLmAgK1xuICAgICAgICAgICAgICAgIGBcXG5SZS1hbm5vdGF0aW5nIGZpZWxkcyBpcyBub3QgYWxsb3dlZC5gICtcbiAgICAgICAgICAgICAgICBgXFxuVXNlICdvdmVycmlkZScgYW5ub3RhdGlvbiBmb3IgbWV0aG9kcyBvdmVycmlkZGVuIGJ5IHN1YmNsYXNzLmBcbiAgICAgICAgKVxuICAgIH1cbn1cbiIsImltcG9ydCB7XG4gICAgZ2V0TmV4dElkLFxuICAgIGFkZEhpZGRlbkZpbmFsUHJvcCxcbiAgICBhbGxvd1N0YXRlQ2hhbmdlc1N0YXJ0LFxuICAgIGFsbG93U3RhdGVDaGFuZ2VzRW5kLFxuICAgIG1ha2VJdGVyYWJsZSxcbiAgICBhZGRIaWRkZW5Qcm9wLFxuICAgIE9ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uLFxuICAgICRtb2J4LFxuICAgIGFycmF5RXh0ZW5zaW9ucyxcbiAgICBJRW5oYW5jZXIsXG4gICAgaXNPYnNlcnZhYmxlQXJyYXksXG4gICAgSU9ic2VydmFibGVBcnJheSxcbiAgICBkZWZpbmVQcm9wZXJ0eVxufSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG4vLyBCdWcgaW4gc2FmYXJpIDkuKiAob3IgaU9TIDkgc2FmYXJpIG1vYmlsZSkuIFNlZSAjMzY0XG5jb25zdCBFTlRSWV8wID0gY3JlYXRlQXJyYXlFbnRyeURlc2NyaXB0b3IoMClcblxuY29uc3Qgc2FmYXJpUHJvdG90eXBlU2V0dGVySW5oZXJpdGFuY2VCdWcgPSAoKCkgPT4ge1xuICAgIGxldCB2ID0gZmFsc2VcbiAgICBjb25zdCBwID0ge31cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkocCwgXCIwXCIsIHtcbiAgICAgICAgc2V0OiAoKSA9PiB7XG4gICAgICAgICAgICB2ID0gdHJ1ZVxuICAgICAgICB9XG4gICAgfSlcbiAgICBPYmplY3QuY3JlYXRlKHApW1wiMFwiXSA9IDFcbiAgICByZXR1cm4gdiA9PT0gZmFsc2Vcbn0pKClcblxuLyoqXG4gKiBUaGlzIGFycmF5IGJ1ZmZlciBjb250YWlucyB0d28gbGlzdHMgb2YgcHJvcGVydGllcywgc28gdGhhdCBhbGwgYXJyYXlzXG4gKiBjYW4gcmVjeWNsZSB0aGVpciBwcm9wZXJ0eSBkZWZpbml0aW9ucywgd2hpY2ggc2lnbmlmaWNhbnRseSBpbXByb3ZlcyBwZXJmb3JtYW5jZSBvZiBjcmVhdGluZ1xuICogcHJvcGVydGllcyBvbiB0aGUgZmx5LlxuICovXG5sZXQgT0JTRVJWQUJMRV9BUlJBWV9CVUZGRVJfU0laRSA9IDBcblxuLy8gVHlwZXNjcmlwdCB3b3JrYXJvdW5kIHRvIG1ha2Ugc3VyZSBPYnNlcnZhYmxlQXJyYXkgZXh0ZW5kcyBBcnJheVxuY2xhc3MgU3R1YkFycmF5IHt9XG5mdW5jdGlvbiBpbmhlcml0KGN0b3IsIHByb3RvKSB7XG4gICAgaWYgKE9iamVjdC5zZXRQcm90b3R5cGVPZikge1xuICAgICAgICBPYmplY3Quc2V0UHJvdG90eXBlT2YoY3Rvci5wcm90b3R5cGUsIHByb3RvKVxuICAgIH0gZWxzZSBpZiAoY3Rvci5wcm90b3R5cGUuX19wcm90b19fICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY3Rvci5wcm90b3R5cGUuX19wcm90b19fID0gcHJvdG9cbiAgICB9IGVsc2Uge1xuICAgICAgICBjdG9yLnByb3RvdHlwZSA9IHByb3RvXG4gICAgfVxufVxuaW5oZXJpdChTdHViQXJyYXksIEFycmF5LnByb3RvdHlwZSlcblxuLy8gV2VleCBwcm90byBmcmVlemUgcHJvdGVjdGlvbiB3YXMgaGVyZSxcbi8vIGJ1dCBpdCBpcyB1bmNsZWFyIHdoeSB0aGUgaGFjayBpcyBuZWVkIGFzIE1vYlggbmV2ZXIgY2hhbmdlZCB0aGUgcHJvdG90eXBlXG4vLyBhbnl3YXksIHNvIHJlbW92ZWQgaXQgaW4gVjZcblxuY2xhc3MgTGVnYWN5T2JzZXJ2YWJsZUFycmF5PFQ+IGV4dGVuZHMgU3R1YkFycmF5IHtcbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgaW5pdGlhbFZhbHVlczogVFtdIHwgdW5kZWZpbmVkLFxuICAgICAgICBlbmhhbmNlcjogSUVuaGFuY2VyPFQ+LFxuICAgICAgICBuYW1lID0gX19ERVZfXyA/IFwiT2JzZXJ2YWJsZUFycmF5QFwiICsgZ2V0TmV4dElkKCkgOiBcIk9ic2VydmFibGVBcnJheVwiLFxuICAgICAgICBvd25lZCA9IGZhbHNlXG4gICAgKSB7XG4gICAgICAgIHN1cGVyKClcblxuICAgICAgICBjb25zdCBhZG0gPSBuZXcgT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24obmFtZSwgZW5oYW5jZXIsIG93bmVkLCB0cnVlKVxuICAgICAgICBhZG0ucHJveHlfID0gdGhpcyBhcyBhbnlcbiAgICAgICAgYWRkSGlkZGVuRmluYWxQcm9wKHRoaXMsICRtb2J4LCBhZG0pXG5cbiAgICAgICAgaWYgKGluaXRpYWxWYWx1ZXMgJiYgaW5pdGlhbFZhbHVlcy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IHByZXYgPSBhbGxvd1N0YXRlQ2hhbmdlc1N0YXJ0KHRydWUpXG4gICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICB0aGlzLnNwbGljZVdpdGhBcnJheSgwLCAwLCBpbml0aWFsVmFsdWVzKVxuICAgICAgICAgICAgYWxsb3dTdGF0ZUNoYW5nZXNFbmQocHJldilcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChzYWZhcmlQcm90b3R5cGVTZXR0ZXJJbmhlcml0YW5jZUJ1Zykge1xuICAgICAgICAgICAgLy8gU2VlbXMgdGhhdCBTYWZhcmkgd29uJ3QgdXNlIG51bWVyaWMgcHJvdG90eXBlIHNldHRlciB1bnRpbGwgYW55ICogbnVtZXJpYyBwcm9wZXJ0eSBpc1xuICAgICAgICAgICAgLy8gZGVmaW5lZCBvbiB0aGUgaW5zdGFuY2UuIEFmdGVyIHRoYXQgaXQgd29ya3MgZmluZSwgZXZlbiBpZiB0aGlzIHByb3BlcnR5IGlzIGRlbGV0ZWQuXG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgXCIwXCIsIEVOVFJZXzApXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjb25jYXQoLi4uYXJyYXlzOiBUW11bXSk6IFRbXSB7XG4gICAgICAgIDsodGhpc1skbW9ieF0gYXMgT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24pLmF0b21fLnJlcG9ydE9ic2VydmVkKClcbiAgICAgICAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5jb25jYXQuYXBwbHkoXG4gICAgICAgICAgICAodGhpcyBhcyBhbnkpLnNsaWNlKCksXG4gICAgICAgICAgICAvL0B0cy1pZ25vcmVcbiAgICAgICAgICAgIGFycmF5cy5tYXAoYSA9PiAoaXNPYnNlcnZhYmxlQXJyYXkoYSkgPyBhLnNsaWNlKCkgOiBhKSlcbiAgICAgICAgKVxuICAgIH1cblxuICAgIGdldCBsZW5ndGgoKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuICh0aGlzWyRtb2J4XSBhcyBPYnNlcnZhYmxlQXJyYXlBZG1pbmlzdHJhdGlvbikuZ2V0QXJyYXlMZW5ndGhfKClcbiAgICB9XG5cbiAgICBzZXQgbGVuZ3RoKG5ld0xlbmd0aDogbnVtYmVyKSB7XG4gICAgICAgIDsodGhpc1skbW9ieF0gYXMgT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24pLnNldEFycmF5TGVuZ3RoXyhuZXdMZW5ndGgpXG4gICAgfVxuXG4gICAgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkge1xuICAgICAgICByZXR1cm4gXCJBcnJheVwiXG4gICAgfVxuXG4gICAgW1N5bWJvbC5pdGVyYXRvcl0oKSB7XG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzXG4gICAgICAgIGxldCBuZXh0SW5kZXggPSAwXG4gICAgICAgIHJldHVybiBtYWtlSXRlcmFibGUoe1xuICAgICAgICAgICAgbmV4dCgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV4dEluZGV4IDwgc2VsZi5sZW5ndGhcbiAgICAgICAgICAgICAgICAgICAgPyB7IHZhbHVlOiBzZWxmW25leHRJbmRleCsrXSwgZG9uZTogZmFsc2UgfVxuICAgICAgICAgICAgICAgICAgICA6IHsgZG9uZTogdHJ1ZSwgdmFsdWU6IHVuZGVmaW5lZCB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG4gICAgfVxufVxuXG5PYmplY3QuZW50cmllcyhhcnJheUV4dGVuc2lvbnMpLmZvckVhY2goKFtwcm9wLCBmbl0pID0+IHtcbiAgICBpZiAocHJvcCAhPT0gXCJjb25jYXRcIikge1xuICAgICAgICBhZGRIaWRkZW5Qcm9wKExlZ2FjeU9ic2VydmFibGVBcnJheS5wcm90b3R5cGUsIHByb3AsIGZuKVxuICAgIH1cbn0pXG5cbmZ1bmN0aW9uIGNyZWF0ZUFycmF5RW50cnlEZXNjcmlwdG9yKGluZGV4OiBudW1iZXIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzWyRtb2J4XS5nZXRfKGluZGV4KVxuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpc1skbW9ieF0uc2V0XyhpbmRleCwgdmFsdWUpXG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUFycmF5QnVmZmVySXRlbShpbmRleDogbnVtYmVyKSB7XG4gICAgZGVmaW5lUHJvcGVydHkoTGVnYWN5T2JzZXJ2YWJsZUFycmF5LnByb3RvdHlwZSwgXCJcIiArIGluZGV4LCBjcmVhdGVBcnJheUVudHJ5RGVzY3JpcHRvcihpbmRleCkpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXNlcnZlQXJyYXlCdWZmZXIobWF4OiBudW1iZXIpIHtcbiAgICBpZiAobWF4ID4gT0JTRVJWQUJMRV9BUlJBWV9CVUZGRVJfU0laRSkge1xuICAgICAgICBmb3IgKGxldCBpbmRleCA9IE9CU0VSVkFCTEVfQVJSQVlfQlVGRkVSX1NJWkU7IGluZGV4IDwgbWF4ICsgMTAwOyBpbmRleCsrKSB7XG4gICAgICAgICAgICBjcmVhdGVBcnJheUJ1ZmZlckl0ZW0oaW5kZXgpXG4gICAgICAgIH1cbiAgICAgICAgT0JTRVJWQUJMRV9BUlJBWV9CVUZGRVJfU0laRSA9IG1heFxuICAgIH1cbn1cblxucmVzZXJ2ZUFycmF5QnVmZmVyKDEwMDApXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVMZWdhY3lBcnJheTxUPihcbiAgICBpbml0aWFsVmFsdWVzOiBUW10gfCB1bmRlZmluZWQsXG4gICAgZW5oYW5jZXI6IElFbmhhbmNlcjxUPixcbiAgICBuYW1lPzogc3RyaW5nXG4pOiBJT2JzZXJ2YWJsZUFycmF5PFQ+IHtcbiAgICByZXR1cm4gbmV3IExlZ2FjeU9ic2VydmFibGVBcnJheShpbml0aWFsVmFsdWVzLCBlbmhhbmNlciwgbmFtZSkgYXMgYW55XG59XG4iLCJpbXBvcnQgeyBpc0FjdGlvbiB9IGZyb20gXCIuLi9hcGkvYWN0aW9uXCJcbmltcG9ydCB7XG4gICAgJG1vYngsXG4gICAgSURlcFRyZWVOb2RlLFxuICAgIGlzQXRvbSxcbiAgICBpc0NvbXB1dGVkVmFsdWUsXG4gICAgaXNPYnNlcnZhYmxlQXJyYXksXG4gICAgaXNPYnNlcnZhYmxlTWFwLFxuICAgIGlzT2JzZXJ2YWJsZU9iamVjdCxcbiAgICBpc1JlYWN0aW9uLFxuICAgIGlzT2JzZXJ2YWJsZVNldCxcbiAgICBkaWUsXG4gICAgaXNGdW5jdGlvblxufSBmcm9tIFwiLi4vaW50ZXJuYWxcIlxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0QXRvbSh0aGluZzogYW55LCBwcm9wZXJ0eT86IFByb3BlcnR5S2V5KTogSURlcFRyZWVOb2RlIHtcbiAgICBpZiAodHlwZW9mIHRoaW5nID09PSBcIm9iamVjdFwiICYmIHRoaW5nICE9PSBudWxsKSB7XG4gICAgICAgIGlmIChpc09ic2VydmFibGVBcnJheSh0aGluZykpIHtcbiAgICAgICAgICAgIGlmIChwcm9wZXJ0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgZGllKDIzKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuICh0aGluZyBhcyBhbnkpWyRtb2J4XS5hdG9tX1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc09ic2VydmFibGVTZXQodGhpbmcpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpbmcuYXRvbV9cbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNPYnNlcnZhYmxlTWFwKHRoaW5nKSkge1xuICAgICAgICAgICAgaWYgKHByb3BlcnR5ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpbmcua2V5c0F0b21fXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25zdCBvYnNlcnZhYmxlID0gdGhpbmcuZGF0YV8uZ2V0KHByb3BlcnR5KSB8fCB0aGluZy5oYXNNYXBfLmdldChwcm9wZXJ0eSlcbiAgICAgICAgICAgIGlmICghb2JzZXJ2YWJsZSkge1xuICAgICAgICAgICAgICAgIGRpZSgyNSwgcHJvcGVydHksIGdldERlYnVnTmFtZSh0aGluZykpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZVxuICAgICAgICB9XG4gICAgICAgIGlmIChwcm9wZXJ0eSAmJiAhdGhpbmdbJG1vYnhdKSB7XG4gICAgICAgICAgICB0aGluZ1twcm9wZXJ0eV1cbiAgICAgICAgfSAvLyBTZWUgIzEwNzJcbiAgICAgICAgaWYgKGlzT2JzZXJ2YWJsZU9iamVjdCh0aGluZykpIHtcbiAgICAgICAgICAgIGlmICghcHJvcGVydHkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZGllKDI2KVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uc3Qgb2JzZXJ2YWJsZSA9ICh0aGluZyBhcyBhbnkpWyRtb2J4XS52YWx1ZXNfLmdldChwcm9wZXJ0eSlcbiAgICAgICAgICAgIGlmICghb2JzZXJ2YWJsZSkge1xuICAgICAgICAgICAgICAgIGRpZSgyNywgcHJvcGVydHksIGdldERlYnVnTmFtZSh0aGluZykpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gb2JzZXJ2YWJsZVxuICAgICAgICB9XG4gICAgICAgIGlmIChpc0F0b20odGhpbmcpIHx8IGlzQ29tcHV0ZWRWYWx1ZSh0aGluZykgfHwgaXNSZWFjdGlvbih0aGluZykpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGluZ1xuICAgICAgICB9XG4gICAgfSBlbHNlIGlmIChpc0Z1bmN0aW9uKHRoaW5nKSkge1xuICAgICAgICBpZiAoaXNSZWFjdGlvbih0aGluZ1skbW9ieF0pKSB7XG4gICAgICAgICAgICAvLyBkaXNwb3NlciBmdW5jdGlvblxuICAgICAgICAgICAgcmV0dXJuIHRoaW5nWyRtb2J4XVxuICAgICAgICB9XG4gICAgfVxuICAgIGRpZSgyOClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEFkbWluaXN0cmF0aW9uKHRoaW5nOiBhbnksIHByb3BlcnR5Pzogc3RyaW5nKSB7XG4gICAgaWYgKCF0aGluZykge1xuICAgICAgICBkaWUoMjkpXG4gICAgfVxuICAgIGlmIChwcm9wZXJ0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBnZXRBZG1pbmlzdHJhdGlvbihnZXRBdG9tKHRoaW5nLCBwcm9wZXJ0eSkpXG4gICAgfVxuICAgIGlmIChpc0F0b20odGhpbmcpIHx8IGlzQ29tcHV0ZWRWYWx1ZSh0aGluZykgfHwgaXNSZWFjdGlvbih0aGluZykpIHtcbiAgICAgICAgcmV0dXJuIHRoaW5nXG4gICAgfVxuICAgIGlmIChpc09ic2VydmFibGVNYXAodGhpbmcpIHx8IGlzT2JzZXJ2YWJsZVNldCh0aGluZykpIHtcbiAgICAgICAgcmV0dXJuIHRoaW5nXG4gICAgfVxuICAgIGlmICh0aGluZ1skbW9ieF0pIHtcbiAgICAgICAgcmV0dXJuIHRoaW5nWyRtb2J4XVxuICAgIH1cbiAgICBkaWUoMjQsIHRoaW5nKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0RGVidWdOYW1lKHRoaW5nOiBhbnksIHByb3BlcnR5Pzogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBsZXQgbmFtZWRcbiAgICBpZiAocHJvcGVydHkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBuYW1lZCA9IGdldEF0b20odGhpbmcsIHByb3BlcnR5KVxuICAgIH0gZWxzZSBpZiAoaXNBY3Rpb24odGhpbmcpKSB7XG4gICAgICAgIHJldHVybiB0aGluZy5uYW1lXG4gICAgfSBlbHNlIGlmIChpc09ic2VydmFibGVPYmplY3QodGhpbmcpIHx8IGlzT2JzZXJ2YWJsZU1hcCh0aGluZykgfHwgaXNPYnNlcnZhYmxlU2V0KHRoaW5nKSkge1xuICAgICAgICBuYW1lZCA9IGdldEFkbWluaXN0cmF0aW9uKHRoaW5nKVxuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHZhbGlkIGZvciBhcnJheXMgYXMgd2VsbFxuICAgICAgICBuYW1lZCA9IGdldEF0b20odGhpbmcpXG4gICAgfVxuICAgIHJldHVybiBuYW1lZC5uYW1lX1xufVxuIiwiaW1wb3J0IHtcbiAgICBpc0VTNk1hcCxcbiAgICBpc09ic2VydmFibGVBcnJheSxcbiAgICBpc09ic2VydmFibGVNYXAsXG4gICAgaXNFUzZTZXQsXG4gICAgaXNPYnNlcnZhYmxlU2V0LFxuICAgIGhhc1Byb3AsXG4gICAgaXNGdW5jdGlvbixcbiAgICBvYmplY3RQcm90b3R5cGVcbn0gZnJvbSBcIi4uL2ludGVybmFsXCJcblxuZGVjbGFyZSBjb25zdCBTeW1ib2xcbmNvbnN0IHRvU3RyaW5nID0gb2JqZWN0UHJvdG90eXBlLnRvU3RyaW5nXG5cbmV4cG9ydCBmdW5jdGlvbiBkZWVwRXF1YWwoYTogYW55LCBiOiBhbnksIGRlcHRoOiBudW1iZXIgPSAtMSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBlcShhLCBiLCBkZXB0aClcbn1cblxuLy8gQ29waWVkIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2phc2hrZW5hcy91bmRlcnNjb3JlL2Jsb2IvNWMyMzdhN2M2ODJmYjY4ZmQ1Mzc4MjAzZjBiZjIyZGNlMTYyNDg1NC91bmRlcnNjb3JlLmpzI0wxMTg2LUwxMjg5XG4vLyBJbnRlcm5hbCByZWN1cnNpdmUgY29tcGFyaXNvbiBmdW5jdGlvbiBmb3IgYGlzRXF1YWxgLlxuZnVuY3Rpb24gZXEoYTogYW55LCBiOiBhbnksIGRlcHRoOiBudW1iZXIsIGFTdGFjaz86IGFueVtdLCBiU3RhY2s/OiBhbnlbXSkge1xuICAgIC8vIElkZW50aWNhbCBvYmplY3RzIGFyZSBlcXVhbC4gYDAgPT09IC0wYCwgYnV0IHRoZXkgYXJlbid0IGlkZW50aWNhbC5cbiAgICAvLyBTZWUgdGhlIFtIYXJtb255IGBlZ2FsYCBwcm9wb3NhbF0oaHR0cDovL3dpa2kuZWNtYXNjcmlwdC5vcmcvZG9rdS5waHA/aWQ9aGFybW9ueTplZ2FsKS5cbiAgICBpZiAoYSA9PT0gYikge1xuICAgICAgICByZXR1cm4gYSAhPT0gMCB8fCAxIC8gYSA9PT0gMSAvIGJcbiAgICB9XG4gICAgLy8gYG51bGxgIG9yIGB1bmRlZmluZWRgIG9ubHkgZXF1YWwgdG8gaXRzZWxmIChzdHJpY3QgY29tcGFyaXNvbikuXG4gICAgaWYgKGEgPT0gbnVsbCB8fCBiID09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIC8vIGBOYU5gcyBhcmUgZXF1aXZhbGVudCwgYnV0IG5vbi1yZWZsZXhpdmUuXG4gICAgaWYgKGEgIT09IGEpIHtcbiAgICAgICAgcmV0dXJuIGIgIT09IGJcbiAgICB9XG4gICAgLy8gRXhoYXVzdCBwcmltaXRpdmUgY2hlY2tzXG4gICAgY29uc3QgdHlwZSA9IHR5cGVvZiBhXG4gICAgaWYgKHR5cGUgIT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBiICE9IFwib2JqZWN0XCIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuXG4gICAgLy8gQ29tcGFyZSBgW1tDbGFzc11dYCBuYW1lcy5cbiAgICBjb25zdCBjbGFzc05hbWUgPSB0b1N0cmluZy5jYWxsKGEpXG4gICAgaWYgKGNsYXNzTmFtZSAhPT0gdG9TdHJpbmcuY2FsbChiKSkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gICAgc3dpdGNoIChjbGFzc05hbWUpIHtcbiAgICAgICAgLy8gU3RyaW5ncywgbnVtYmVycywgcmVndWxhciBleHByZXNzaW9ucywgZGF0ZXMsIGFuZCBib29sZWFucyBhcmUgY29tcGFyZWQgYnkgdmFsdWUuXG4gICAgICAgIGNhc2UgXCJbb2JqZWN0IFJlZ0V4cF1cIjpcbiAgICAgICAgLy8gUmVnRXhwcyBhcmUgY29lcmNlZCB0byBzdHJpbmdzIGZvciBjb21wYXJpc29uIChOb3RlOiAnJyArIC9hL2kgPT09ICcvYS9pJylcbiAgICAgICAgY2FzZSBcIltvYmplY3QgU3RyaW5nXVwiOlxuICAgICAgICAgICAgLy8gUHJpbWl0aXZlcyBhbmQgdGhlaXIgY29ycmVzcG9uZGluZyBvYmplY3Qgd3JhcHBlcnMgYXJlIGVxdWl2YWxlbnQ7IHRodXMsIGBcIjVcImAgaXNcbiAgICAgICAgICAgIC8vIGVxdWl2YWxlbnQgdG8gYG5ldyBTdHJpbmcoXCI1XCIpYC5cbiAgICAgICAgICAgIHJldHVybiBcIlwiICsgYSA9PT0gXCJcIiArIGJcbiAgICAgICAgY2FzZSBcIltvYmplY3QgTnVtYmVyXVwiOlxuICAgICAgICAgICAgLy8gYE5hTmBzIGFyZSBlcXVpdmFsZW50LCBidXQgbm9uLXJlZmxleGl2ZS5cbiAgICAgICAgICAgIC8vIE9iamVjdChOYU4pIGlzIGVxdWl2YWxlbnQgdG8gTmFOLlxuICAgICAgICAgICAgaWYgKCthICE9PSArYSkge1xuICAgICAgICAgICAgICAgIHJldHVybiArYiAhPT0gK2JcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEFuIGBlZ2FsYCBjb21wYXJpc29uIGlzIHBlcmZvcm1lZCBmb3Igb3RoZXIgbnVtZXJpYyB2YWx1ZXMuXG4gICAgICAgICAgICByZXR1cm4gK2EgPT09IDAgPyAxIC8gK2EgPT09IDEgLyBiIDogK2EgPT09ICtiXG4gICAgICAgIGNhc2UgXCJbb2JqZWN0IERhdGVdXCI6XG4gICAgICAgIGNhc2UgXCJbb2JqZWN0IEJvb2xlYW5dXCI6XG4gICAgICAgICAgICAvLyBDb2VyY2UgZGF0ZXMgYW5kIGJvb2xlYW5zIHRvIG51bWVyaWMgcHJpbWl0aXZlIHZhbHVlcy4gRGF0ZXMgYXJlIGNvbXBhcmVkIGJ5IHRoZWlyXG4gICAgICAgICAgICAvLyBtaWxsaXNlY29uZCByZXByZXNlbnRhdGlvbnMuIE5vdGUgdGhhdCBpbnZhbGlkIGRhdGVzIHdpdGggbWlsbGlzZWNvbmQgcmVwcmVzZW50YXRpb25zXG4gICAgICAgICAgICAvLyBvZiBgTmFOYCBhcmUgbm90IGVxdWl2YWxlbnQuXG4gICAgICAgICAgICByZXR1cm4gK2EgPT09ICtiXG4gICAgICAgIGNhc2UgXCJbb2JqZWN0IFN5bWJvbF1cIjpcbiAgICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICAgICAgdHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBTeW1ib2wudmFsdWVPZi5jYWxsKGEpID09PSBTeW1ib2wudmFsdWVPZi5jYWxsKGIpXG4gICAgICAgICAgICApXG4gICAgICAgIGNhc2UgXCJbb2JqZWN0IE1hcF1cIjpcbiAgICAgICAgY2FzZSBcIltvYmplY3QgU2V0XVwiOlxuICAgICAgICAgICAgLy8gTWFwcyBhbmQgU2V0cyBhcmUgdW53cmFwcGVkIHRvIGFycmF5cyBvZiBlbnRyeS1wYWlycywgYWRkaW5nIGFuIGluY2lkZW50YWwgbGV2ZWwuXG4gICAgICAgICAgICAvLyBIaWRlIHRoaXMgZXh0cmEgbGV2ZWwgYnkgaW5jcmVhc2luZyB0aGUgZGVwdGguXG4gICAgICAgICAgICBpZiAoZGVwdGggPj0gMCkge1xuICAgICAgICAgICAgICAgIGRlcHRoKytcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGJyZWFrXG4gICAgfVxuICAgIC8vIFVud3JhcCBhbnkgd3JhcHBlZCBvYmplY3RzLlxuICAgIGEgPSB1bndyYXAoYSlcbiAgICBiID0gdW53cmFwKGIpXG5cbiAgICBjb25zdCBhcmVBcnJheXMgPSBjbGFzc05hbWUgPT09IFwiW29iamVjdCBBcnJheV1cIlxuICAgIGlmICghYXJlQXJyYXlzKSB7XG4gICAgICAgIGlmICh0eXBlb2YgYSAhPSBcIm9iamVjdFwiIHx8IHR5cGVvZiBiICE9IFwib2JqZWN0XCIpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gT2JqZWN0cyB3aXRoIGRpZmZlcmVudCBjb25zdHJ1Y3RvcnMgYXJlIG5vdCBlcXVpdmFsZW50LCBidXQgYE9iamVjdGBzIG9yIGBBcnJheWBzXG4gICAgICAgIC8vIGZyb20gZGlmZmVyZW50IGZyYW1lcyBhcmUuXG4gICAgICAgIGNvbnN0IGFDdG9yID0gYS5jb25zdHJ1Y3RvcixcbiAgICAgICAgICAgIGJDdG9yID0gYi5jb25zdHJ1Y3RvclxuICAgICAgICBpZiAoXG4gICAgICAgICAgICBhQ3RvciAhPT0gYkN0b3IgJiZcbiAgICAgICAgICAgICEoXG4gICAgICAgICAgICAgICAgaXNGdW5jdGlvbihhQ3RvcikgJiZcbiAgICAgICAgICAgICAgICBhQ3RvciBpbnN0YW5jZW9mIGFDdG9yICYmXG4gICAgICAgICAgICAgICAgaXNGdW5jdGlvbihiQ3RvcikgJiZcbiAgICAgICAgICAgICAgICBiQ3RvciBpbnN0YW5jZW9mIGJDdG9yXG4gICAgICAgICAgICApICYmXG4gICAgICAgICAgICBcImNvbnN0cnVjdG9yXCIgaW4gYSAmJlxuICAgICAgICAgICAgXCJjb25zdHJ1Y3RvclwiIGluIGJcbiAgICAgICAgKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlmIChkZXB0aCA9PT0gMCkge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICB9IGVsc2UgaWYgKGRlcHRoIDwgMCkge1xuICAgICAgICBkZXB0aCA9IC0xXG4gICAgfVxuXG4gICAgLy8gQXNzdW1lIGVxdWFsaXR5IGZvciBjeWNsaWMgc3RydWN0dXJlcy4gVGhlIGFsZ29yaXRobSBmb3IgZGV0ZWN0aW5nIGN5Y2xpY1xuICAgIC8vIHN0cnVjdHVyZXMgaXMgYWRhcHRlZCBmcm9tIEVTIDUuMSBzZWN0aW9uIDE1LjEyLjMsIGFic3RyYWN0IG9wZXJhdGlvbiBgSk9gLlxuXG4gICAgLy8gSW5pdGlhbGl6aW5nIHN0YWNrIG9mIHRyYXZlcnNlZCBvYmplY3RzLlxuICAgIC8vIEl0J3MgZG9uZSBoZXJlIHNpbmNlIHdlIG9ubHkgbmVlZCB0aGVtIGZvciBvYmplY3RzIGFuZCBhcnJheXMgY29tcGFyaXNvbi5cbiAgICBhU3RhY2sgPSBhU3RhY2sgfHwgW11cbiAgICBiU3RhY2sgPSBiU3RhY2sgfHwgW11cbiAgICBsZXQgbGVuZ3RoID0gYVN0YWNrLmxlbmd0aFxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICAvLyBMaW5lYXIgc2VhcmNoLiBQZXJmb3JtYW5jZSBpcyBpbnZlcnNlbHkgcHJvcG9ydGlvbmFsIHRvIHRoZSBudW1iZXIgb2ZcbiAgICAgICAgLy8gdW5pcXVlIG5lc3RlZCBzdHJ1Y3R1cmVzLlxuICAgICAgICBpZiAoYVN0YWNrW2xlbmd0aF0gPT09IGEpIHtcbiAgICAgICAgICAgIHJldHVybiBiU3RhY2tbbGVuZ3RoXSA9PT0gYlxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gQWRkIHRoZSBmaXJzdCBvYmplY3QgdG8gdGhlIHN0YWNrIG9mIHRyYXZlcnNlZCBvYmplY3RzLlxuICAgIGFTdGFjay5wdXNoKGEpXG4gICAgYlN0YWNrLnB1c2goYilcblxuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyBhbmQgYXJyYXlzLlxuICAgIGlmIChhcmVBcnJheXMpIHtcbiAgICAgICAgLy8gQ29tcGFyZSBhcnJheSBsZW5ndGhzIHRvIGRldGVybWluZSBpZiBhIGRlZXAgY29tcGFyaXNvbiBpcyBuZWNlc3NhcnkuXG4gICAgICAgIGxlbmd0aCA9IGEubGVuZ3RoXG4gICAgICAgIGlmIChsZW5ndGggIT09IGIubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgICAgICAvLyBEZWVwIGNvbXBhcmUgdGhlIGNvbnRlbnRzLCBpZ25vcmluZyBub24tbnVtZXJpYyBwcm9wZXJ0aWVzLlxuICAgICAgICB3aGlsZSAobGVuZ3RoLS0pIHtcbiAgICAgICAgICAgIGlmICghZXEoYVtsZW5ndGhdLCBiW2xlbmd0aF0sIGRlcHRoIC0gMSwgYVN0YWNrLCBiU3RhY2spKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICAvLyBEZWVwIGNvbXBhcmUgb2JqZWN0cy5cbiAgICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGEpXG4gICAgICAgIGxldCBrZXlcbiAgICAgICAgbGVuZ3RoID0ga2V5cy5sZW5ndGhcbiAgICAgICAgLy8gRW5zdXJlIHRoYXQgYm90aCBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUgbnVtYmVyIG9mIHByb3BlcnRpZXMgYmVmb3JlIGNvbXBhcmluZyBkZWVwIGVxdWFsaXR5LlxuICAgICAgICBpZiAoT2JqZWN0LmtleXMoYikubGVuZ3RoICE9PSBsZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgICAgICAgLy8gRGVlcCBjb21wYXJlIGVhY2ggbWVtYmVyXG4gICAgICAgICAgICBrZXkgPSBrZXlzW2xlbmd0aF1cbiAgICAgICAgICAgIGlmICghKGhhc1Byb3AoYiwga2V5KSAmJiBlcShhW2tleV0sIGJba2V5XSwgZGVwdGggLSAxLCBhU3RhY2ssIGJTdGFjaykpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gUmVtb3ZlIHRoZSBmaXJzdCBvYmplY3QgZnJvbSB0aGUgc3RhY2sgb2YgdHJhdmVyc2VkIG9iamVjdHMuXG4gICAgYVN0YWNrLnBvcCgpXG4gICAgYlN0YWNrLnBvcCgpXG4gICAgcmV0dXJuIHRydWVcbn1cblxuZnVuY3Rpb24gdW53cmFwKGE6IGFueSkge1xuICAgIGlmIChpc09ic2VydmFibGVBcnJheShhKSkge1xuICAgICAgICByZXR1cm4gYS5zbGljZSgpXG4gICAgfVxuICAgIGlmIChpc0VTNk1hcChhKSB8fCBpc09ic2VydmFibGVNYXAoYSkpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20oYS5lbnRyaWVzKCkpXG4gICAgfVxuICAgIGlmIChpc0VTNlNldChhKSB8fCBpc09ic2VydmFibGVTZXQoYSkpIHtcbiAgICAgICAgcmV0dXJuIEFycmF5LmZyb20oYS5lbnRyaWVzKCkpXG4gICAgfVxuICAgIHJldHVybiBhXG59XG4iLCJleHBvcnQgZnVuY3Rpb24gbWFrZUl0ZXJhYmxlPFQ+KGl0ZXJhdG9yOiBJdGVyYXRvcjxUPik6IEl0ZXJhYmxlSXRlcmF0b3I8VD4ge1xuICAgIGl0ZXJhdG9yW1N5bWJvbC5pdGVyYXRvcl0gPSBnZXRTZWxmXG4gICAgcmV0dXJuIGl0ZXJhdG9yIGFzIGFueVxufVxuXG5mdW5jdGlvbiBnZXRTZWxmKCkge1xuICAgIHJldHVybiB0aGlzXG59XG4iLCIvKipcbiAqIChjKSBNaWNoZWwgV2VzdHN0cmF0ZSAyMDE1IC0gMjAyMFxuICogTUlUIExpY2Vuc2VkXG4gKlxuICogV2VsY29tZSB0byB0aGUgbW9ieCBzb3VyY2VzISBUbyBnZXQgYSBnbG9iYWwgb3ZlcnZpZXcgb2YgaG93IE1vYlggaW50ZXJuYWxseSB3b3JrcyxcbiAqIHRoaXMgaXMgYSBnb29kIHBsYWNlIHRvIHN0YXJ0OlxuICogaHR0cHM6Ly9tZWRpdW0uY29tL0Btd2VzdHN0cmF0ZS9iZWNvbWluZy1mdWxseS1yZWFjdGl2ZS1hbi1pbi1kZXB0aC1leHBsYW5hdGlvbi1vZi1tb2JzZXJ2YWJsZS01NTk5NTI2MmEyNTQjLnh2Ymg2cWQ3NFxuICpcbiAqIFNvdXJjZSBmb2xkZXJzOlxuICogPT09PT09PT09PT09PT09XG4gKlxuICogLSBhcGkvICAgICBNb3N0IG9mIHRoZSBwdWJsaWMgc3RhdGljIG1ldGhvZHMgZXhwb3NlZCBieSB0aGUgbW9kdWxlIGNhbiBiZSBmb3VuZCBoZXJlLlxuICogLSBjb3JlLyAgICBJbXBsZW1lbnRhdGlvbiBvZiB0aGUgTW9iWCBhbGdvcml0aG07IGF0b21zLCBkZXJpdmF0aW9ucywgcmVhY3Rpb25zLCBkZXBlbmRlbmN5IHRyZWVzLCBvcHRpbWl6YXRpb25zLiBDb29sIHN0dWZmIGNhbiBiZSBmb3VuZCBoZXJlLlxuICogLSB0eXBlcy8gICBBbGwgdGhlIG1hZ2ljIHRoYXQgaXMgbmVlZCB0byBoYXZlIG9ic2VydmFibGUgb2JqZWN0cywgYXJyYXlzIGFuZCB2YWx1ZXMgaXMgaW4gdGhpcyBmb2xkZXIuIEluY2x1ZGluZyB0aGUgbW9kaWZpZXJzIGxpa2UgYGFzRmxhdGAuXG4gKiAtIHV0aWxzLyAgIFV0aWxpdHkgc3R1ZmYuXG4gKlxuICovXG5pbXBvcnQgeyBkaWUgfSBmcm9tIFwiLi9lcnJvcnNcIlxuaW1wb3J0IHsgZ2V0R2xvYmFsIH0gZnJvbSBcIi4vdXRpbHMvZ2xvYmFsXCJcbjtbXCJTeW1ib2xcIiwgXCJNYXBcIiwgXCJTZXRcIl0uZm9yRWFjaChtID0+IHtcbiAgICBsZXQgZyA9IGdldEdsb2JhbCgpXG4gICAgaWYgKHR5cGVvZiBnW21dID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICAgIGRpZShgTW9iWCByZXF1aXJlcyBnbG9iYWwgJyR7bX0nIHRvIGJlIGF2YWlsYWJsZSBvciBwb2x5ZmlsbGVkYClcbiAgICB9XG59KVxuXG5pbXBvcnQgeyBzcHksIGdldERlYnVnTmFtZSwgJG1vYnggfSBmcm9tIFwiLi9pbnRlcm5hbFwiXG5cbmV4cG9ydCB7XG4gICAgSU9ic2VydmFibGUsXG4gICAgSURlcFRyZWVOb2RlLFxuICAgIFJlYWN0aW9uLFxuICAgIElSZWFjdGlvblB1YmxpYyxcbiAgICBJUmVhY3Rpb25EaXNwb3NlcixcbiAgICB1bnRyYWNrZWQsXG4gICAgSUF0b20sXG4gICAgY3JlYXRlQXRvbSxcbiAgICBzcHksXG4gICAgSUNvbXB1dGVkVmFsdWUsXG4gICAgSUVxdWFsc0NvbXBhcmVyLFxuICAgIGNvbXBhcmVyLFxuICAgIElFbmhhbmNlcixcbiAgICBJSW50ZXJjZXB0YWJsZSxcbiAgICBJSW50ZXJjZXB0b3IsXG4gICAgSUxpc3RlbmFibGUsXG4gICAgSU9iamVjdFdpbGxDaGFuZ2UsXG4gICAgSU9iamVjdERpZENoYW5nZSxcbiAgICBpc09ic2VydmFibGVPYmplY3QsXG4gICAgSVZhbHVlRGlkQ2hhbmdlLFxuICAgIElWYWx1ZVdpbGxDaGFuZ2UsXG4gICAgSU9ic2VydmFibGVWYWx1ZSxcbiAgICBpc09ic2VydmFibGVWYWx1ZSBhcyBpc0JveGVkT2JzZXJ2YWJsZSxcbiAgICBJT2JzZXJ2YWJsZUFycmF5LFxuICAgIElBcnJheVdpbGxDaGFuZ2UsXG4gICAgSUFycmF5V2lsbFNwbGljZSxcbiAgICBJQXJyYXlTcGxpY2UsXG4gICAgSUFycmF5VXBkYXRlLFxuICAgIElBcnJheURpZENoYW5nZSxcbiAgICBpc09ic2VydmFibGVBcnJheSxcbiAgICBJS2V5VmFsdWVNYXAsXG4gICAgT2JzZXJ2YWJsZU1hcCxcbiAgICBJTWFwRW50cmllcyxcbiAgICBJTWFwRW50cnksXG4gICAgSU1hcFdpbGxDaGFuZ2UsXG4gICAgSU1hcERpZENoYW5nZSxcbiAgICBpc09ic2VydmFibGVNYXAsXG4gICAgSU9ic2VydmFibGVNYXBJbml0aWFsVmFsdWVzLFxuICAgIE9ic2VydmFibGVTZXQsXG4gICAgaXNPYnNlcnZhYmxlU2V0LFxuICAgIElTZXREaWRDaGFuZ2UsXG4gICAgSVNldFdpbGxDaGFuZ2UsXG4gICAgSU9ic2VydmFibGVTZXRJbml0aWFsVmFsdWVzLFxuICAgIHRyYW5zYWN0aW9uLFxuICAgIG9ic2VydmFibGUsXG4gICAgSU9ic2VydmFibGVGYWN0b3J5LFxuICAgIENyZWF0ZU9ic2VydmFibGVPcHRpb25zLFxuICAgIGNvbXB1dGVkLFxuICAgIElDb21wdXRlZEZhY3RvcnksXG4gICAgaXNPYnNlcnZhYmxlLFxuICAgIGlzT2JzZXJ2YWJsZVByb3AsXG4gICAgaXNDb21wdXRlZCxcbiAgICBpc0NvbXB1dGVkUHJvcCxcbiAgICBleHRlbmRPYnNlcnZhYmxlLFxuICAgIG9ic2VydmUsXG4gICAgaW50ZXJjZXB0LFxuICAgIGF1dG9ydW4sXG4gICAgSUF1dG9ydW5PcHRpb25zLFxuICAgIHJlYWN0aW9uLFxuICAgIElSZWFjdGlvbk9wdGlvbnMsXG4gICAgd2hlbixcbiAgICBJV2hlbk9wdGlvbnMsXG4gICAgYWN0aW9uLFxuICAgIGlzQWN0aW9uLFxuICAgIHJ1bkluQWN0aW9uLFxuICAgIElBY3Rpb25GYWN0b3J5LFxuICAgIGtleXMsXG4gICAgdmFsdWVzLFxuICAgIGVudHJpZXMsXG4gICAgc2V0LFxuICAgIHJlbW92ZSxcbiAgICBoYXMsXG4gICAgZ2V0LFxuICAgIGFwaU93bktleXMgYXMgb3duS2V5cyxcbiAgICBhcGlEZWZpbmVQcm9wZXJ0eSBhcyBkZWZpbmVQcm9wZXJ0eSxcbiAgICBjb25maWd1cmUsXG4gICAgb25CZWNvbWVPYnNlcnZlZCxcbiAgICBvbkJlY29tZVVub2JzZXJ2ZWQsXG4gICAgZmxvdyxcbiAgICBpc0Zsb3csXG4gICAgZmxvd1Jlc3VsdCxcbiAgICBGbG93Q2FuY2VsbGF0aW9uRXJyb3IsXG4gICAgaXNGbG93Q2FuY2VsbGF0aW9uRXJyb3IsXG4gICAgdG9KUyxcbiAgICB0cmFjZSxcbiAgICBJT2JzZXJ2ZXJUcmVlLFxuICAgIElEZXBlbmRlbmN5VHJlZSxcbiAgICBnZXREZXBlbmRlbmN5VHJlZSxcbiAgICBnZXRPYnNlcnZlclRyZWUsXG4gICAgcmVzZXRHbG9iYWxTdGF0ZSBhcyBfcmVzZXRHbG9iYWxTdGF0ZSxcbiAgICBnZXRHbG9iYWxTdGF0ZSBhcyBfZ2V0R2xvYmFsU3RhdGUsXG4gICAgZ2V0RGVidWdOYW1lLFxuICAgIGdldEF0b20sXG4gICAgZ2V0QWRtaW5pc3RyYXRpb24gYXMgX2dldEFkbWluaXN0cmF0aW9uLFxuICAgIGFsbG93U3RhdGVDaGFuZ2VzIGFzIF9hbGxvd1N0YXRlQ2hhbmdlcyxcbiAgICBydW5JbkFjdGlvbiBhcyBfYWxsb3dTdGF0ZUNoYW5nZXNJbnNpZGVDb21wdXRlZCwgLy8gVGhpcyBoYXMgYmVjb21lIHRoZSBkZWZhdWx0IGJlaGF2aW9yIGluIE1vYnggNlxuICAgIExhbWJkYSxcbiAgICAkbW9ieCxcbiAgICBpc0NvbXB1dGluZ0Rlcml2YXRpb24gYXMgX2lzQ29tcHV0aW5nRGVyaXZhdGlvbixcbiAgICBvblJlYWN0aW9uRXJyb3IsXG4gICAgaW50ZXJjZXB0UmVhZHMgYXMgX2ludGVyY2VwdFJlYWRzLFxuICAgIElDb21wdXRlZFZhbHVlT3B0aW9ucyxcbiAgICBJQWN0aW9uUnVuSW5mbyxcbiAgICBfc3RhcnRBY3Rpb24sXG4gICAgX2VuZEFjdGlvbixcbiAgICBhbGxvd1N0YXRlUmVhZHNTdGFydCBhcyBfYWxsb3dTdGF0ZVJlYWRzU3RhcnQsXG4gICAgYWxsb3dTdGF0ZVJlYWRzRW5kIGFzIF9hbGxvd1N0YXRlUmVhZHNFbmQsXG4gICAgbWFrZU9ic2VydmFibGUsXG4gICAgbWFrZUF1dG9PYnNlcnZhYmxlLFxuICAgIGF1dG9BY3Rpb24gYXMgX2F1dG9BY3Rpb24sXG4gICAgQW5ub3RhdGlvbnNNYXAsXG4gICAgQW5ub3RhdGlvbk1hcEVudHJ5LFxuICAgIG92ZXJyaWRlXG59IGZyb20gXCIuL2ludGVybmFsXCJcblxuLy8gRGV2dG9vbHMgc3VwcG9ydFxuZGVjbGFyZSBjb25zdCBfX01PQlhfREVWVE9PTFNfR0xPQkFMX0hPT0tfXzogeyBpbmplY3RNb2J4OiAoYW55KSA9PiB2b2lkIH1cbmlmICh0eXBlb2YgX19NT0JYX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09IFwib2JqZWN0XCIpIHtcbiAgICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9hbmR5a29nL21vYngtZGV2dG9vbHMvXG4gICAgX19NT0JYX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uaW5qZWN0TW9ieCh7XG4gICAgICAgIHNweSxcbiAgICAgICAgZXh0cmFzOiB7XG4gICAgICAgICAgICBnZXREZWJ1Z05hbWVcbiAgICAgICAgfSxcbiAgICAgICAgJG1vYnhcbiAgICB9KVxufVxuIiwiaW1wb3J0IHsgUHJvZHVjdE1vZGVsIH0gZnJvbSBcIkBzdG9yZS9tb2RlbHNcIjtcbmltcG9ydCB7IENBUlRfTE9DQUxTVE9SQUdFX0tFWSB9IGZyb20gXCJAdXRpbHMvbG9jYWxzdG9yYWdlXCI7XG5pbXBvcnQgeyBhY3Rpb24sIGNvbXB1dGVkLCBtYWtlT2JzZXJ2YWJsZSwgb2JzZXJ2YWJsZSB9IGZyb20gXCJtb2J4XCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgQ2FydEl0ZW0ge1xuICBwcm9kdWN0OiBQcm9kdWN0TW9kZWw7XG4gIHF1YW50aXR5OiBudW1iZXI7XG59XG5cbnR5cGUgUHJpdmF0ZUZpZWxkcyA9IFwiX2NhcnRJdGVtc1wiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDYXJ0U3RvcmUge1xuICBwcml2YXRlIF9jYXJ0SXRlbXM6IENhcnRJdGVtW10gPSBbXTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBtYWtlT2JzZXJ2YWJsZTxDYXJ0U3RvcmUsIFByaXZhdGVGaWVsZHM+KHRoaXMsIHtcbiAgICAgIF9jYXJ0SXRlbXM6IG9ic2VydmFibGUsXG4gICAgICBjYXJ0SXRlbXM6IGNvbXB1dGVkLFxuICAgICAgYWRkVG9DYXJ0OiBhY3Rpb24sXG4gICAgICByZW1vdmVGcm9tQ2FydDogYWN0aW9uLFxuICAgICAgcmVzZXRDYXJ0OiBhY3Rpb24sXG4gICAgICBzZXRDYXJ0SXRlbXM6IGFjdGlvbixcbiAgICB9KTtcbiAgfVxuXG4gIGdldCBjYXJ0SXRlbXMoKTogQ2FydEl0ZW1bXSB7XG4gICAgcmV0dXJuIHRoaXMuX2NhcnRJdGVtcztcbiAgfVxuXG4gIHNldENhcnRJdGVtcyh2YWx1ZTogQ2FydEl0ZW1bXSkge1xuICAgIHRoaXMuX2NhcnRJdGVtcyA9IHZhbHVlO1xuICB9XG5cbiAgYWRkVG9DYXJ0KGl0ZW06IENhcnRJdGVtKSB7XG4gICAgY29uc3QgaXNJbkNhcnQgPSB0aGlzLl9jYXJ0SXRlbXMuZmluZChcbiAgICAgIChjYXJ0SXRlbSkgPT4gY2FydEl0ZW0ucHJvZHVjdC5pZCA9PT0gaXRlbS5wcm9kdWN0LmlkXG4gICAgKTtcbiAgICBpZiAoaXNJbkNhcnQpIHtcbiAgICAgIHRoaXMuY2FydEl0ZW1zLm1hcCgoY2FydEl0ZW0pID0+IHtcbiAgICAgICAgaWYgKGNhcnRJdGVtLnByb2R1Y3QuaWQgPT09IGl0ZW0ucHJvZHVjdC5pZCkge1xuICAgICAgICAgIHJldHVybiAoY2FydEl0ZW0ucXVhbnRpdHkgKz0gaXRlbS5xdWFudGl0eSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNhcnRJdGVtO1xuICAgICAgfSk7XG4gICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcbiAgICAgICAgQ0FSVF9MT0NBTFNUT1JBR0VfS0VZLFxuICAgICAgICBKU09OLnN0cmluZ2lmeSh0aGlzLl9jYXJ0SXRlbXMpXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9jYXJ0SXRlbXMucHVzaChpdGVtKTtcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFxuICAgICAgICBDQVJUX0xPQ0FMU1RPUkFHRV9LRVksXG4gICAgICAgIEpTT04uc3RyaW5naWZ5KHRoaXMuX2NhcnRJdGVtcylcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgcmVtb3ZlRnJvbUNhcnQoaWQ6IG51bWJlcikge1xuICAgIHRoaXMuX2NhcnRJdGVtcyA9IHRoaXMuX2NhcnRJdGVtcy5maWx0ZXIoXG4gICAgICAoY2FydEl0ZW0pID0+IGNhcnRJdGVtLnByb2R1Y3QuaWQgIT09IGlkXG4gICAgKTtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShcbiAgICAgIENBUlRfTE9DQUxTVE9SQUdFX0tFWSxcbiAgICAgIEpTT04uc3RyaW5naWZ5KHRoaXMuX2NhcnRJdGVtcylcbiAgICApO1xuICB9XG5cbiAgcmVzZXRDYXJ0KCkge1xuICAgIHRoaXMuX2NhcnRJdGVtcyA9IFtdO1xuICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFxuICAgICAgQ0FSVF9MT0NBTFNUT1JBR0VfS0VZLFxuICAgICAgSlNPTi5zdHJpbmdpZnkodGhpcy5fY2FydEl0ZW1zKVxuICAgICk7XG4gIH1cbn1cbiIsImltcG9ydCB7IGFjdGlvbiwgbWFrZU9ic2VydmFibGUsIG9ic2VydmFibGUgfSBmcm9tIFwibW9ieFwiO1xuaW1wb3J0ICogYXMgcXMgZnJvbSBcInFzXCI7XG5cbnR5cGUgUHJpdmF0ZUZpZWxkcyA9IFwiX3BhcmFtc1wiO1xuXG5leHBvcnQgdHlwZSBRdWVyeVNlYXJjaCA9XG4gIHwgdW5kZWZpbmVkXG4gIHwgc3RyaW5nXG4gIHwgc3RyaW5nW11cbiAgfCBxcy5QYXJzZWRRc1xuICB8IHFzLlBhcnNlZFFzW107XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFF1ZXJ5UGFyYW1zU3RvcmUge1xuICBwcml2YXRlIF9wYXJhbXM6IHFzLlBhcnNlZFFzID0ge307XG4gIHByaXZhdGUgX3NlYXJjaDogc3RyaW5nID0gXCJcIjtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBtYWtlT2JzZXJ2YWJsZTxRdWVyeVBhcmFtc1N0b3JlLCBQcml2YXRlRmllbGRzPih0aGlzLCB7XG4gICAgICBfcGFyYW1zOiBvYnNlcnZhYmxlLnJlZixcbiAgICAgIHNldFNlYXJjaDogYWN0aW9uLFxuICAgIH0pO1xuICB9XG5cbiAgZ2V0UGFyYW0oa2V5OiBzdHJpbmcpOiBRdWVyeVNlYXJjaCB7XG4gICAgcmV0dXJuIHRoaXMuX3BhcmFtc1trZXldO1xuICB9XG5cbiAgc2V0U2VhcmNoKHNlYXJjaDogc3RyaW5nKSB7XG4gICAgc2VhcmNoID0gc2VhcmNoLnN0YXJ0c1dpdGgoXCI/XCIpID8gc2VhcmNoLnNsaWNlKDEpIDogc2VhcmNoO1xuXG4gICAgaWYgKHRoaXMuX3NlYXJjaCAhPT0gc2VhcmNoKSB7XG4gICAgICB0aGlzLl9zZWFyY2ggPSBzZWFyY2g7XG4gICAgICB0aGlzLl9wYXJhbXMgPSBxcy5wYXJzZShzZWFyY2gpO1xuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgQ2FydFN0b3JlIH0gZnJvbSBcIi4vQ2FydFN0b3JlXCI7XG5pbXBvcnQgeyBRdWVyeVBhcmFtc1N0b3JlIH0gZnJvbSBcIi4vUXVlcnlQYXJhbXNTdG9yZVwiO1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSb290U3RvcmUge1xuICByZWFkb25seSBxdWVyeSA9IG5ldyBRdWVyeVBhcmFtc1N0b3JlKCk7XG4gIHJlYWRvbmx5IGNhcnQgPSBuZXcgQ2FydFN0b3JlKCk7XG59XG4iLCJpbXBvcnQgUm9vdFN0b3JlIGZyb20gXCIuL1Jvb3RTdG9yZVwiO1xuXG5jb25zdCByb290U3RvcmUgPSBuZXcgUm9vdFN0b3JlKCk7XG5leHBvcnQgZGVmYXVsdCByb290U3RvcmU7XG4iLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCBkZWZhdWx0IHtcIkNhcnRcIjpcInNyYy1jb21wb25lbnRzLUNhcnQtQ2FydC1tb2R1bGVfX0NhcnRcIixcInByb2R1Y3RcIjpcInNyYy1jb21wb25lbnRzLUNhcnQtQ2FydC1tb2R1bGVfX3Byb2R1Y3RcIixcInByb2R1Y3RfaW1hZ2VcIjpcInNyYy1jb21wb25lbnRzLUNhcnQtQ2FydC1tb2R1bGVfX3Byb2R1Y3RfaW1hZ2VcIixcImRldGFpbFwiOlwic3JjLWNvbXBvbmVudHMtQ2FydC1DYXJ0LW1vZHVsZV9fZGV0YWlsXCIsXCJ0cmFzaFwiOlwic3JjLWNvbXBvbmVudHMtQ2FydC1DYXJ0LW1vZHVsZV9fdHJhc2hcIixcInRvdGFsXCI6XCJzcmMtY29tcG9uZW50cy1DYXJ0LUNhcnQtbW9kdWxlX190b3RhbFwiLFwiY2hlY2tvdXRfYnRuXCI6XCJzcmMtY29tcG9uZW50cy1DYXJ0LUNhcnQtbW9kdWxlX19jaGVja291dF9idG5cIixcInJlc2V0XCI6XCJzcmMtY29tcG9uZW50cy1DYXJ0LUNhcnQtbW9kdWxlX19yZXNldFwifTsiLCJpbXBvcnQgeyBtZW1vLCB1c2VDYWxsYmFjayB9IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgeyBCdXR0b24gfSBmcm9tIFwiQGNvbXBvbmVudHMvQnV0dG9uXCI7XG5pbXBvcnQgVHJhc2hJY29uIGZyb20gXCJAaWNvbnMvdHJhc2guc3ZnXCI7XG5pbXBvcnQgeyBDYXJ0SXRlbSB9IGZyb20gXCJAc3RvcmUvUm9vdFN0b3JlL0NhcnRTdG9yZS9DYXJ0U3RvcmVcIjtcbmltcG9ydCByb290U3RvcmUgZnJvbSBcIkBzdG9yZS9Sb290U3RvcmUvaW5zdGFuY2VcIjtcbmltcG9ydCB7IG9ic2VydmVyIH0gZnJvbSBcIm1vYngtcmVhY3QtbGl0ZVwiO1xuXG5pbXBvcnQgY2xzIGZyb20gXCIuL0NhcnQubW9kdWxlLnNjc3NcIjtcblxuY29uc3QgQ2FydCA9IG9ic2VydmVyKCgpID0+IHtcbiAgY29uc3QgZGVsZXRlSXRlbSA9IChpZDogbnVtYmVyKSA9PiAoKSA9PiB7XG4gICAgcm9vdFN0b3JlLmNhcnQucmVtb3ZlRnJvbUNhcnQoaWQpO1xuICB9O1xuXG4gIGNvbnN0IHJlc2V0Q2FydCA9IHVzZUNhbGxiYWNrKCgpID0+IHtcbiAgICByb290U3RvcmUuY2FydC5yZXNldENhcnQoKTtcbiAgfSwgW10pO1xuXG4gIGNvbnN0IHN1YnRvdGFsUHJpY2UgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgbGV0IHRvdGFsID0gMDtcbiAgICByb290U3RvcmUuY2FydC5jYXJ0SXRlbXMuZm9yRWFjaChcbiAgICAgIChpdGVtOiBDYXJ0SXRlbSkgPT4gKHRvdGFsICs9IGl0ZW0ucXVhbnRpdHkgKiBpdGVtLnByb2R1Y3QucHJpY2UpXG4gICAgKTtcbiAgICByZXR1cm4gdG90YWwudG9GaXhlZCgyKTtcbiAgfSwgW10pO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e2Nscy5DYXJ0fT5cbiAgICAgIDxoMj5Qcm9kdWN0cyBpbiB5b3VyIGNhcnQ8L2gyPlxuICAgICAge3Jvb3RTdG9yZS5jYXJ0LmNhcnRJdGVtcy5sZW5ndGggPT09IDAgJiYgKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT1cImNhcnRfX2VtcHR5XCI+XG4gICAgICAgICAgPHA+WW91ciBjYXJ0IGlzIGVtcHR5LjwvcD5cbiAgICAgICAgPC9kaXY+XG4gICAgICApfVxuICAgICAge3Jvb3RTdG9yZS5jYXJ0LmNhcnRJdGVtcz8ubWFwKChpdGVtOiBDYXJ0SXRlbSkgPT4gKFxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xzLnByb2R1Y3R9IGtleT17aXRlbS5wcm9kdWN0LmlkfT5cbiAgICAgICAgICA8aW1nXG4gICAgICAgICAgICBjbGFzc05hbWU9e2Nscy5wcm9kdWN0X2ltYWdlfVxuICAgICAgICAgICAgc3JjPXtpdGVtLnByb2R1Y3QuaW1hZ2VzWzBdfVxuICAgICAgICAgICAgYWx0PXtpdGVtLnByb2R1Y3QudGl0bGV9XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xzLmRldGFpbH0+XG4gICAgICAgICAgICA8aDIgY2xhc3NOYW1lPXtjbHMudGl0bGV9PntpdGVtLnByb2R1Y3QudGl0bGV9PC9oMj5cbiAgICAgICAgICAgIDxwPntpdGVtLnByb2R1Y3QuZGVzY3JpcHRpb24uc3Vic3RyaW5nKDAsIDIwKX08L3A+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xzLnByaWNlfT5cbiAgICAgICAgICAgICAge2l0ZW0ucXVhbnRpdHl9IHggJHtpdGVtLnByb2R1Y3QucHJpY2V9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8aW1nXG4gICAgICAgICAgICBjbGFzc05hbWU9e2Nscy50cmFzaH1cbiAgICAgICAgICAgIHNyYz17VHJhc2hJY29ufVxuICAgICAgICAgICAgYWx0PVwidHJhc2hcIlxuICAgICAgICAgICAgb25DbGljaz17ZGVsZXRlSXRlbShpdGVtLnByb2R1Y3QuaWQpfVxuICAgICAgICAgIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKSl9XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xzLnRvdGFsfT5cbiAgICAgICAgPHNwYW4+U1VCVE9UQUw8L3NwYW4+XG4gICAgICAgIDxzcGFuPiR7c3VidG90YWxQcmljZSgpfTwvc3Bhbj5cbiAgICAgIDwvZGl2PlxuICAgICAgPEJ1dHRvbiBjbGFzc05hbWU9e2Nscy5jaGVja291dF9idG59PlBST0NFRUQgVE8gQ0hFQ0tPVVQ8L0J1dHRvbj5cbiAgICAgIDxzcGFuIGNsYXNzTmFtZT17Y2xzLnJlc2V0fSBvbkNsaWNrPXtyZXNldENhcnR9PlxuICAgICAgICBSZXNldCBDYXJ0XG4gICAgICA8L3NwYW4+XG4gICAgPC9kaXY+XG4gICk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgbWVtbyhDYXJ0KTtcbiIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IGRlZmF1bHQge1wiTW9kYWxcIjpcInNyYy1jb21wb25lbnRzLU1vZGFsLU1vZGFsLW1vZHVsZV9fTW9kYWxcIixcIm92ZXJsYXlcIjpcInNyYy1jb21wb25lbnRzLU1vZGFsLU1vZGFsLW1vZHVsZV9fb3ZlcmxheVwiLFwiY29udGVudFwiOlwic3JjLWNvbXBvbmVudHMtTW9kYWwtTW9kYWwtbW9kdWxlX19jb250ZW50XCIsXCJvcGVuZWRcIjpcInNyYy1jb21wb25lbnRzLU1vZGFsLU1vZGFsLW1vZHVsZV9fb3BlbmVkXCIsXCJpc0Nsb3NpbmdcIjpcInNyYy1jb21wb25lbnRzLU1vZGFsLU1vZGFsLW1vZHVsZV9faXNDbG9zaW5nXCJ9OyIsImltcG9ydCB7XG4gIHR5cGUgUHJvcHNXaXRoQ2hpbGRyZW4sXG4gIHR5cGUgUmVhY3ROb2RlLFxuICB1c2VFZmZlY3QsXG4gIHVzZVJlZixcbiAgdXNlU3RhdGUsXG4gIHVzZUNhbGxiYWNrLFxuICB0eXBlIE11dGFibGVSZWZPYmplY3QsXG59IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgY24gZnJvbSBcImNsYXNzbmFtZXNcIjtcblxuaW1wb3J0IGNscyBmcm9tIFwiLi9Nb2RhbC5tb2R1bGUuc2Nzc1wiO1xuXG5pbnRlcmZhY2UgTW9kYWxQcm9wcyB7XG4gIGNoaWxkcmVuPzogUmVhY3ROb2RlO1xuICBpc09wZW4/OiBib29sZWFuO1xuICBvbkNsb3NlPzogKCkgPT4gdm9pZDtcbn1cblxuY29uc3QgQU5JTUFUSU9OX0RFTEFZID0gMzAwO1xuXG5leHBvcnQgZnVuY3Rpb24gTW9kYWwocHJvcHM6IFByb3BzV2l0aENoaWxkcmVuPE1vZGFsUHJvcHM+KSB7XG4gIGNvbnN0IHsgY2hpbGRyZW4sIGlzT3Blbiwgb25DbG9zZSB9ID0gcHJvcHM7XG5cbiAgY29uc3QgW2lzQ2xvc2luZywgc2V0SXNDbG9zaW5nXSA9IHVzZVN0YXRlKGZhbHNlKTtcbiAgY29uc3QgdGltZVJlZiA9IHVzZVJlZigpIGFzIE11dGFibGVSZWZPYmplY3Q8UmV0dXJuVHlwZTx0eXBlb2Ygc2V0VGltZW91dD4+O1xuXG4gIGNvbnN0IG9uQ2xvc2VIYW5kbGVyID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIGlmIChvbkNsb3NlKSB7XG4gICAgICBzZXRJc0Nsb3NpbmcodHJ1ZSk7XG4gICAgICB0aW1lUmVmLmN1cnJlbnQgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgb25DbG9zZSgpO1xuICAgICAgICBzZXRJc0Nsb3NpbmcoZmFsc2UpO1xuICAgICAgfSwgQU5JTUFUSU9OX0RFTEFZKTtcbiAgICB9XG4gIH0sIFtvbkNsb3NlXSk7XG5cbiAgY29uc3Qgb25Db250ZW50Q2xpY2sgPSAoZTogUmVhY3QuTW91c2VFdmVudCkgPT4ge1xuICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gIH07XG5cbiAgY29uc3Qgb25LZXlkb3duID0gdXNlQ2FsbGJhY2soXG4gICAgKGU6IEtleWJvYXJkRXZlbnQpID0+IHtcbiAgICAgIGlmIChlLmtleSA9PT0gXCJFc2NhcGVcIikge1xuICAgICAgICBvbkNsb3NlSGFuZGxlcigpO1xuICAgICAgfVxuICAgIH0sXG4gICAgW29uQ2xvc2VIYW5kbGVyXVxuICApO1xuXG4gIHVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKGlzT3Blbikge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoXCJrZXlkb3duXCIsIG9uS2V5ZG93bik7XG4gICAgfVxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBjbGVhclRpbWVvdXQodGltZVJlZi5jdXJyZW50KTtcbiAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFwia2V5ZG93blwiLCBvbktleWRvd24pO1xuICAgIH07XG4gIH0sIFtpc09wZW4sIG9uS2V5ZG93bl0pO1xuXG4gIHJldHVybiAoXG4gICAgPGRpdlxuICAgICAgY2xhc3NOYW1lPXtjbihcbiAgICAgICAgY2xzLk1vZGFsLFxuICAgICAgICB7IFtjbHMub3BlbmVkXTogaXNPcGVuIH0sXG4gICAgICAgIHsgW2Nscy5pc0Nsb3NpbmddOiBpc0Nsb3NpbmcgfVxuICAgICAgKX1cbiAgICA+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xzLm92ZXJsYXl9IG9uQ2xpY2s9e29uQ2xvc2VIYW5kbGVyfT5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2Nscy5jb250ZW50fSBvbkNsaWNrPXtvbkNvbnRlbnRDbGlja30+XG4gICAgICAgICAge2NoaWxkcmVufVxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufVxuIiwiZXhwb3J0IGRlZmF1bHQgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcIjgzZThiNjM0NTEzMTEzZmVmMDExMWUyZGY0NjE2MWQyLnN2Z1wiOyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJjOTBhZTNkMzAzZGIxOGU3ZTI0Zjg1ODM3NTY0MDY4Zi5wbmdcIjsiLCJleHBvcnQgZGVmYXVsdCBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyArIFwiNjAyMjU5NjkzZjI2NmNkOTgwOWJmNTI1NmYwN2ViMzUuc3ZnXCI7IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQgZGVmYXVsdCB7XCJOYXZiYXJcIjpcInNyYy1jb21wb25lbnRzLU5hdmJhci1OYXZiYXItbW9kdWxlX19OYXZiYXJcIixcImNvbnRlbnRcIjpcInNyYy1jb21wb25lbnRzLU5hdmJhci1OYXZiYXItbW9kdWxlX19jb250ZW50XCIsXCJsaW5rXCI6XCJzcmMtY29tcG9uZW50cy1OYXZiYXItTmF2YmFyLW1vZHVsZV9fbGlua1wiLFwidXNlclwiOlwic3JjLWNvbXBvbmVudHMtTmF2YmFyLU5hdmJhci1tb2R1bGVfX3VzZXJcIixcImNhcnRcIjpcInNyYy1jb21wb25lbnRzLU5hdmJhci1OYXZiYXItbW9kdWxlX19jYXJ0XCJ9OyIsImltcG9ydCB7IG1lbW8sIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCB7IENhcnQgfSBmcm9tIFwiQGNvbXBvbmVudHMvQ2FydFwiO1xuaW1wb3J0IHsgTW9kYWwgfSBmcm9tIFwiQGNvbXBvbmVudHMvTW9kYWwvTW9kYWxcIjtcbmltcG9ydCBCYWdJY29uIGZyb20gXCJAaWNvbnMvYmFnLnN2Z1wiO1xuaW1wb3J0IExvZ29JY29uIGZyb20gXCJAaWNvbnMvbG9nby5wbmdcIjtcbmltcG9ydCBVc2VySWNvbiBmcm9tIFwiQGljb25zL3VzZXIuc3ZnXCI7XG5pbXBvcnQgcm9vdFN0b3JlIGZyb20gXCJAc3RvcmUvUm9vdFN0b3JlL2luc3RhbmNlXCI7XG5pbXBvcnQgeyBvYnNlcnZlciB9IGZyb20gXCJtb2J4LXJlYWN0LWxpdGVcIjtcbmltcG9ydCB7IExpbmsgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuXG5pbXBvcnQgY2xzIGZyb20gXCIuL05hdmJhci5tb2R1bGUuc2Nzc1wiO1xuXG5jb25zdCBOYXZiYXIgPSBvYnNlcnZlcigoKSA9PiB7XG4gIGNvbnN0IFtvcGVuLCBzZXRPcGVuXSA9IHVzZVN0YXRlKGZhbHNlKTtcblxuICByZXR1cm4gKFxuICAgIDw+XG4gICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xzLk5hdmJhcn0+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibG9nb1wiPlxuICAgICAgICAgIDxMaW5rIHRvPVwiL1wiPlxuICAgICAgICAgICAgPGltZyBzcmM9e0xvZ29JY29ufSBhbHQ9XCJsb2dvXCIgLz5cbiAgICAgICAgICA8L0xpbms+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xzLmNvbnRlbnR9PlxuICAgICAgICAgIDxMaW5rIGNsYXNzTmFtZT17Y2xzLmxpbmt9IHRvPVwiL1wiPlxuICAgICAgICAgICAgPHA+UHJvZHVjdHM8L3A+XG4gICAgICAgICAgPC9MaW5rPlxuICAgICAgICAgIDxMaW5rIGNsYXNzTmFtZT17Y2xzLmxpbmt9IHRvPVwiL1wiPlxuICAgICAgICAgICAgPHA+Q2F0ZWdvcmllczwvcD5cbiAgICAgICAgICA8L0xpbms+XG4gICAgICAgICAgPExpbmsgY2xhc3NOYW1lPXtjbHMubGlua30gdG89XCIvXCI+XG4gICAgICAgICAgICA8cD5BYm91dCBVczwvcD5cbiAgICAgICAgICA8L0xpbms+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xzLnVzZXJ9PlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbHMuY2FydH0gb25DbGljaz17KCkgPT4gc2V0T3Blbih0cnVlKX0+XG4gICAgICAgICAgICA8aW1nIHNyYz17QmFnSWNvbn0gYWx0PVwiYmFnXCIgLz5cbiAgICAgICAgICAgIDxzcGFuPntyb290U3RvcmUuY2FydC5jYXJ0SXRlbXMubGVuZ3RofTwvc3Bhbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8TGluayB0bz1cIi9cIj5cbiAgICAgICAgICAgIDxpbWcgc3JjPXtVc2VySWNvbn0gYWx0PVwidXNlclwiIC8+XG4gICAgICAgICAgPC9MaW5rPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPE1vZGFsIGlzT3Blbj17b3Blbn0gb25DbG9zZT17KCkgPT4gc2V0T3BlbihmYWxzZSl9PlxuICAgICAgICB7PENhcnQgLz59XG4gICAgICA8L01vZGFsPlxuICAgIDwvPlxuICApO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IG1lbW8oTmF2YmFyKTtcbiIsImltcG9ydCB7IEZDIH0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCBjbHMgZnJvbSBcIi4vQ2FyZC5tb2R1bGUuc2Nzc1wiO1xuXG5leHBvcnQgdHlwZSBDYXJkUHJvcHMgPSB7XG4gIGlkPzogbnVtYmVyO1xuICBpbWFnZTogc3RyaW5nO1xuICBjYXRlZ29yeT86IHN0cmluZztcbiAgdGl0bGU6IFJlYWN0LlJlYWN0Tm9kZTtcbiAgc3VidGl0bGU/OiBSZWFjdC5SZWFjdE5vZGU7XG4gIGNvbnRlbnQ/OiBSZWFjdC5SZWFjdE5vZGU7XG4gIG9uQ2xpY2s/OiBSZWFjdC5Nb3VzZUV2ZW50SGFuZGxlcjtcbn07XG5leHBvcnQgY29uc3QgQ2FyZDogRkM8Q2FyZFByb3BzPiA9ICh7XG4gIGlkLFxuICBpbWFnZSxcbiAgY2F0ZWdvcnksXG4gIHRpdGxlLFxuICBzdWJ0aXRsZSxcbiAgY29udGVudCxcbiAgb25DbGljayxcbn0pID0+IChcbiAgPGRpdiBjbGFzc05hbWU9e2Nscy5jYXJkfSBvbkNsaWNrPXtvbkNsaWNrfT5cbiAgICA8aW1nIGNsYXNzTmFtZT17Y2xzLmltYWdlfSBzcmM9e2ltYWdlfSBhbHQ9e3RpdGxlIGFzIHN0cmluZ30gLz5cbiAgICA8ZGl2IGNsYXNzTmFtZT17Y2xzLmNhdGVnb3J5fT57Y2F0ZWdvcnl9PC9kaXY+XG4gICAgPGRpdiBjbGFzc05hbWU9e2Nscy50aXRsZX0+e3RpdGxlfTwvZGl2PlxuICAgIDxkaXYgY2xhc3NOYW1lPXtjbHMuc3VidGl0bGV9PntzdWJ0aXRsZX08L2Rpdj5cbiAgICA8ZGl2IGNsYXNzTmFtZT17Y2xzLmNvbnRlbnR9PiR7Y29udGVudH08L2Rpdj5cbiAgPC9kaXY+XG4pO1xuIiwiZXhwb3J0IGVudW0gTWV0YSB7XG4gIGluaXRpYWwgPSBcImluaXRpYWxcIixcbiAgbG9hZGluZyA9IFwibG9hZGluZ1wiLFxuICBlcnJvciA9IFwiZXJyb3JcIixcbiAgc3VjY2VzcyA9IFwic3VjY2Vzc1wiLFxufVxuIiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5leHBvcnQgZGVmYXVsdCB7XCJjYXJkXCI6XCJzcmMtY29tcG9uZW50cy1DYXJkLUNhcmQtbW9kdWxlX19jYXJkXCIsXCJpbWFnZVwiOlwic3JjLWNvbXBvbmVudHMtQ2FyZC1DYXJkLW1vZHVsZV9faW1hZ2VcIixcImNhdGVnb3J5XCI6XCJzcmMtY29tcG9uZW50cy1DYXJkLUNhcmQtbW9kdWxlX19jYXRlZ29yeVwiLFwidGl0bGVcIjpcInNyYy1jb21wb25lbnRzLUNhcmQtQ2FyZC1tb2R1bGVfX3RpdGxlXCIsXCJzdWJ0aXRsZVwiOlwic3JjLWNvbXBvbmVudHMtQ2FyZC1DYXJkLW1vZHVsZV9fc3VidGl0bGVcIixcImNvbnRlbnRcIjpcInNyYy1jb21wb25lbnRzLUNhcmQtQ2FyZC1tb2R1bGVfX2NvbnRlbnRcIn07IiwiZXhwb3J0IGNvbnN0IEFQSV9FTkRQT0lOVFMgPSB7XG4gIFBST0RVQ1RTOiBcImh0dHBzOi8vYXBpLmVzY3VlbGFqcy5jby9hcGkvdjEvcHJvZHVjdHNcIixcbiAgQ0FURUdPUklFUzogXCJodHRwczovL2FwaS5lc2N1ZWxhanMuY28vYXBpL3YxL2NhdGVnb3JpZXNcIixcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJpbmQoZm4sIHRoaXNBcmcpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoKSB7XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXNBcmcsIGFyZ3VtZW50cyk7XG4gIH07XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBiaW5kIGZyb20gJy4vaGVscGVycy9iaW5kLmpzJztcblxuLy8gdXRpbHMgaXMgYSBsaWJyYXJ5IG9mIGdlbmVyaWMgaGVscGVyIGZ1bmN0aW9ucyBub24tc3BlY2lmaWMgdG8gYXhpb3NcblxuY29uc3Qge3RvU3RyaW5nfSA9IE9iamVjdC5wcm90b3R5cGU7XG5jb25zdCB7Z2V0UHJvdG90eXBlT2Z9ID0gT2JqZWN0O1xuXG5jb25zdCBraW5kT2YgPSAoY2FjaGUgPT4gdGhpbmcgPT4ge1xuICAgIGNvbnN0IHN0ciA9IHRvU3RyaW5nLmNhbGwodGhpbmcpO1xuICAgIHJldHVybiBjYWNoZVtzdHJdIHx8IChjYWNoZVtzdHJdID0gc3RyLnNsaWNlKDgsIC0xKS50b0xvd2VyQ2FzZSgpKTtcbn0pKE9iamVjdC5jcmVhdGUobnVsbCkpO1xuXG5jb25zdCBraW5kT2ZUZXN0ID0gKHR5cGUpID0+IHtcbiAgdHlwZSA9IHR5cGUudG9Mb3dlckNhc2UoKTtcbiAgcmV0dXJuICh0aGluZykgPT4ga2luZE9mKHRoaW5nKSA9PT0gdHlwZVxufVxuXG5jb25zdCB0eXBlT2ZUZXN0ID0gdHlwZSA9PiB0aGluZyA9PiB0eXBlb2YgdGhpbmcgPT09IHR5cGU7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYW4gQXJyYXlcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXksIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCB7aXNBcnJheX0gPSBBcnJheTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyB1bmRlZmluZWRcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHRoZSB2YWx1ZSBpcyB1bmRlZmluZWQsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc1VuZGVmaW5lZCA9IHR5cGVPZlRlc3QoJ3VuZGVmaW5lZCcpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQnVmZmVyXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJ1ZmZlciwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQnVmZmVyKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSBudWxsICYmICFpc1VuZGVmaW5lZCh2YWwpICYmIHZhbC5jb25zdHJ1Y3RvciAhPT0gbnVsbCAmJiAhaXNVbmRlZmluZWQodmFsLmNvbnN0cnVjdG9yKVxuICAgICYmIGlzRnVuY3Rpb24odmFsLmNvbnN0cnVjdG9yLmlzQnVmZmVyKSAmJiB2YWwuY29uc3RydWN0b3IuaXNCdWZmZXIodmFsKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYW4gQXJyYXlCdWZmZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0FycmF5QnVmZmVyID0ga2luZE9mVGVzdCgnQXJyYXlCdWZmZXInKTtcblxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgdmlldyBvbiBhbiBBcnJheUJ1ZmZlclxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSB2aWV3IG9uIGFuIEFycmF5QnVmZmVyLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUJ1ZmZlclZpZXcodmFsKSB7XG4gIGxldCByZXN1bHQ7XG4gIGlmICgodHlwZW9mIEFycmF5QnVmZmVyICE9PSAndW5kZWZpbmVkJykgJiYgKEFycmF5QnVmZmVyLmlzVmlldykpIHtcbiAgICByZXN1bHQgPSBBcnJheUJ1ZmZlci5pc1ZpZXcodmFsKTtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQgPSAodmFsKSAmJiAodmFsLmJ1ZmZlcikgJiYgKGlzQXJyYXlCdWZmZXIodmFsLmJ1ZmZlcikpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBTdHJpbmdcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgU3RyaW5nLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNTdHJpbmcgPSB0eXBlT2ZUZXN0KCdzdHJpbmcnKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRnVuY3Rpb24sIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0Z1bmN0aW9uID0gdHlwZU9mVGVzdCgnZnVuY3Rpb24nKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIE51bWJlclxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBOdW1iZXIsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc051bWJlciA9IHR5cGVPZlRlc3QoJ251bWJlcicpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGFuIE9iamVjdFxuICpcbiAqIEBwYXJhbSB7Kn0gdGhpbmcgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhbiBPYmplY3QsIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc09iamVjdCA9ICh0aGluZykgPT4gdGhpbmcgIT09IG51bGwgJiYgdHlwZW9mIHRoaW5nID09PSAnb2JqZWN0JztcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEJvb2xlYW5cbiAqXG4gKiBAcGFyYW0geyp9IHRoaW5nIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIEJvb2xlYW4sIG90aGVyd2lzZSBmYWxzZVxuICovXG5jb25zdCBpc0Jvb2xlYW4gPSB0aGluZyA9PiB0aGluZyA9PT0gdHJ1ZSB8fCB0aGluZyA9PT0gZmFsc2U7XG5cbi8qKlxuICogRGV0ZXJtaW5lIGlmIGEgdmFsdWUgaXMgYSBwbGFpbiBPYmplY3RcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgcGxhaW4gT2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNQbGFpbk9iamVjdCA9ICh2YWwpID0+IHtcbiAgaWYgKGtpbmRPZih2YWwpICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGNvbnN0IHByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKHZhbCk7XG4gIHJldHVybiAocHJvdG90eXBlID09PSBudWxsIHx8IHByb3RvdHlwZSA9PT0gT2JqZWN0LnByb3RvdHlwZSB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YocHJvdG90eXBlKSA9PT0gbnVsbCkgJiYgIShTeW1ib2wudG9TdHJpbmdUYWcgaW4gdmFsKSAmJiAhKFN5bWJvbC5pdGVyYXRvciBpbiB2YWwpO1xufVxuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRGF0ZVxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBEYXRlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNEYXRlID0ga2luZE9mVGVzdCgnRGF0ZScpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZVxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBGaWxlLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNGaWxlID0ga2luZE9mVGVzdCgnRmlsZScpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgQmxvYlxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBCbG9iLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNCbG9iID0ga2luZE9mVGVzdCgnQmxvYicpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgRmlsZUxpc3RcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgRmlsZSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzRmlsZUxpc3QgPSBraW5kT2ZUZXN0KCdGaWxlTGlzdCcpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgU3RyZWFtXG4gKlxuICogQHBhcmFtIHsqfSB2YWwgVGhlIHZhbHVlIHRvIHRlc3RcbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB2YWx1ZSBpcyBhIFN0cmVhbSwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzU3RyZWFtID0gKHZhbCkgPT4gaXNPYmplY3QodmFsKSAmJiBpc0Z1bmN0aW9uKHZhbC5waXBlKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIEZvcm1EYXRhXG4gKlxuICogQHBhcmFtIHsqfSB0aGluZyBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGFuIEZvcm1EYXRhLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNGb3JtRGF0YSA9ICh0aGluZykgPT4ge1xuICBjb25zdCBwYXR0ZXJuID0gJ1tvYmplY3QgRm9ybURhdGFdJztcbiAgcmV0dXJuIHRoaW5nICYmIChcbiAgICAodHlwZW9mIEZvcm1EYXRhID09PSAnZnVuY3Rpb24nICYmIHRoaW5nIGluc3RhbmNlb2YgRm9ybURhdGEpIHx8XG4gICAgdG9TdHJpbmcuY2FsbCh0aGluZykgPT09IHBhdHRlcm4gfHxcbiAgICAoaXNGdW5jdGlvbih0aGluZy50b1N0cmluZykgJiYgdGhpbmcudG9TdHJpbmcoKSA9PT0gcGF0dGVybilcbiAgKTtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgYSB2YWx1ZSBpcyBhIFVSTFNlYXJjaFBhcmFtcyBvYmplY3RcbiAqXG4gKiBAcGFyYW0geyp9IHZhbCBUaGUgdmFsdWUgdG8gdGVzdFxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIHZhbHVlIGlzIGEgVVJMU2VhcmNoUGFyYW1zIG9iamVjdCwgb3RoZXJ3aXNlIGZhbHNlXG4gKi9cbmNvbnN0IGlzVVJMU2VhcmNoUGFyYW1zID0ga2luZE9mVGVzdCgnVVJMU2VhcmNoUGFyYW1zJyk7XG5cbi8qKlxuICogVHJpbSBleGNlc3Mgd2hpdGVzcGFjZSBvZmYgdGhlIGJlZ2lubmluZyBhbmQgZW5kIG9mIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0ciBUaGUgU3RyaW5nIHRvIHRyaW1cbiAqXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgU3RyaW5nIGZyZWVkIG9mIGV4Y2VzcyB3aGl0ZXNwYWNlXG4gKi9cbmNvbnN0IHRyaW0gPSAoc3RyKSA9PiBzdHIudHJpbSA/XG4gIHN0ci50cmltKCkgOiBzdHIucmVwbGFjZSgvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2csICcnKTtcblxuLyoqXG4gKiBJdGVyYXRlIG92ZXIgYW4gQXJyYXkgb3IgYW4gT2JqZWN0IGludm9raW5nIGEgZnVuY3Rpb24gZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiBgb2JqYCBpcyBhbiBBcnJheSBjYWxsYmFjayB3aWxsIGJlIGNhbGxlZCBwYXNzaW5nXG4gKiB0aGUgdmFsdWUsIGluZGV4LCBhbmQgY29tcGxldGUgYXJyYXkgZm9yIGVhY2ggaXRlbS5cbiAqXG4gKiBJZiAnb2JqJyBpcyBhbiBPYmplY3QgY2FsbGJhY2sgd2lsbCBiZSBjYWxsZWQgcGFzc2luZ1xuICogdGhlIHZhbHVlLCBrZXksIGFuZCBjb21wbGV0ZSBvYmplY3QgZm9yIGVhY2ggcHJvcGVydHkuXG4gKlxuICogQHBhcmFtIHtPYmplY3R8QXJyYXl9IG9iaiBUaGUgb2JqZWN0IHRvIGl0ZXJhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBjYWxsYmFjayB0byBpbnZva2UgZm9yIGVhY2ggaXRlbVxuICpcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW2FsbE93bktleXMgPSBmYWxzZV1cbiAqIEByZXR1cm5zIHthbnl9XG4gKi9cbmZ1bmN0aW9uIGZvckVhY2gob2JqLCBmbiwge2FsbE93bktleXMgPSBmYWxzZX0gPSB7fSkge1xuICAvLyBEb24ndCBib3RoZXIgaWYgbm8gdmFsdWUgcHJvdmlkZWRcbiAgaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGxldCBpO1xuICBsZXQgbDtcblxuICAvLyBGb3JjZSBhbiBhcnJheSBpZiBub3QgYWxyZWFkeSBzb21ldGhpbmcgaXRlcmFibGVcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgb2JqID0gW29ial07XG4gIH1cblxuICBpZiAoaXNBcnJheShvYmopKSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIGFycmF5IHZhbHVlc1xuICAgIGZvciAoaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBmbi5jYWxsKG51bGwsIG9ialtpXSwgaSwgb2JqKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSXRlcmF0ZSBvdmVyIG9iamVjdCBrZXlzXG4gICAgY29uc3Qga2V5cyA9IGFsbE93bktleXMgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhvYmopIDogT2JqZWN0LmtleXMob2JqKTtcbiAgICBjb25zdCBsZW4gPSBrZXlzLmxlbmd0aDtcbiAgICBsZXQga2V5O1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgZm4uY2FsbChudWxsLCBvYmpba2V5XSwga2V5LCBvYmopO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBmaW5kS2V5KG9iaiwga2V5KSB7XG4gIGtleSA9IGtleS50b0xvd2VyQ2FzZSgpO1xuICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXMob2JqKTtcbiAgbGV0IGkgPSBrZXlzLmxlbmd0aDtcbiAgbGV0IF9rZXk7XG4gIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgX2tleSA9IGtleXNbaV07XG4gICAgaWYgKGtleSA9PT0gX2tleS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgICByZXR1cm4gX2tleTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG51bGw7XG59XG5cbmNvbnN0IF9nbG9iYWwgPSAoKCkgPT4ge1xuICAvKmVzbGludCBuby11bmRlZjowKi9cbiAgaWYgKHR5cGVvZiBnbG9iYWxUaGlzICE9PSBcInVuZGVmaW5lZFwiKSByZXR1cm4gZ2xvYmFsVGhpcztcbiAgcmV0dXJuIHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IGdsb2JhbClcbn0pKCk7XG5cbmNvbnN0IGlzQ29udGV4dERlZmluZWQgPSAoY29udGV4dCkgPT4gIWlzVW5kZWZpbmVkKGNvbnRleHQpICYmIGNvbnRleHQgIT09IF9nbG9iYWw7XG5cbi8qKlxuICogQWNjZXB0cyB2YXJhcmdzIGV4cGVjdGluZyBlYWNoIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCwgdGhlblxuICogaW1tdXRhYmx5IG1lcmdlcyB0aGUgcHJvcGVydGllcyBvZiBlYWNoIG9iamVjdCBhbmQgcmV0dXJucyByZXN1bHQuXG4gKlxuICogV2hlbiBtdWx0aXBsZSBvYmplY3RzIGNvbnRhaW4gdGhlIHNhbWUga2V5IHRoZSBsYXRlciBvYmplY3QgaW5cbiAqIHRoZSBhcmd1bWVudHMgbGlzdCB3aWxsIHRha2UgcHJlY2VkZW5jZS5cbiAqXG4gKiBFeGFtcGxlOlxuICpcbiAqIGBgYGpzXG4gKiB2YXIgcmVzdWx0ID0gbWVyZ2Uoe2ZvbzogMTIzfSwge2ZvbzogNDU2fSk7XG4gKiBjb25zb2xlLmxvZyhyZXN1bHQuZm9vKTsgLy8gb3V0cHV0cyA0NTZcbiAqIGBgYFxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmoxIE9iamVjdCB0byBtZXJnZVxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9IFJlc3VsdCBvZiBhbGwgbWVyZ2UgcHJvcGVydGllc1xuICovXG5mdW5jdGlvbiBtZXJnZSgvKiBvYmoxLCBvYmoyLCBvYmozLCAuLi4gKi8pIHtcbiAgY29uc3Qge2Nhc2VsZXNzfSA9IGlzQ29udGV4dERlZmluZWQodGhpcykgJiYgdGhpcyB8fCB7fTtcbiAgY29uc3QgcmVzdWx0ID0ge307XG4gIGNvbnN0IGFzc2lnblZhbHVlID0gKHZhbCwga2V5KSA9PiB7XG4gICAgY29uc3QgdGFyZ2V0S2V5ID0gY2FzZWxlc3MgJiYgZmluZEtleShyZXN1bHQsIGtleSkgfHwga2V5O1xuICAgIGlmIChpc1BsYWluT2JqZWN0KHJlc3VsdFt0YXJnZXRLZXldKSAmJiBpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFt0YXJnZXRLZXldID0gbWVyZ2UocmVzdWx0W3RhcmdldEtleV0sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHZhbCkpIHtcbiAgICAgIHJlc3VsdFt0YXJnZXRLZXldID0gbWVyZ2Uoe30sIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KHZhbCkpIHtcbiAgICAgIHJlc3VsdFt0YXJnZXRLZXldID0gdmFsLnNsaWNlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdFt0YXJnZXRLZXldID0gdmFsO1xuICAgIH1cbiAgfVxuXG4gIGZvciAobGV0IGkgPSAwLCBsID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIGFyZ3VtZW50c1tpXSAmJiBmb3JFYWNoKGFyZ3VtZW50c1tpXSwgYXNzaWduVmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKlxuICogRXh0ZW5kcyBvYmplY3QgYSBieSBtdXRhYmx5IGFkZGluZyB0byBpdCB0aGUgcHJvcGVydGllcyBvZiBvYmplY3QgYi5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gYSBUaGUgb2JqZWN0IHRvIGJlIGV4dGVuZGVkXG4gKiBAcGFyYW0ge09iamVjdH0gYiBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tXG4gKiBAcGFyYW0ge09iamVjdH0gdGhpc0FyZyBUaGUgb2JqZWN0IHRvIGJpbmQgZnVuY3Rpb24gdG9cbiAqXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFthbGxPd25LZXlzXVxuICogQHJldHVybnMge09iamVjdH0gVGhlIHJlc3VsdGluZyB2YWx1ZSBvZiBvYmplY3QgYVxuICovXG5jb25zdCBleHRlbmQgPSAoYSwgYiwgdGhpc0FyZywge2FsbE93bktleXN9PSB7fSkgPT4ge1xuICBmb3JFYWNoKGIsICh2YWwsIGtleSkgPT4ge1xuICAgIGlmICh0aGlzQXJnICYmIGlzRnVuY3Rpb24odmFsKSkge1xuICAgICAgYVtrZXldID0gYmluZCh2YWwsIHRoaXNBcmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhW2tleV0gPSB2YWw7XG4gICAgfVxuICB9LCB7YWxsT3duS2V5c30pO1xuICByZXR1cm4gYTtcbn1cblxuLyoqXG4gKiBSZW1vdmUgYnl0ZSBvcmRlciBtYXJrZXIuIFRoaXMgY2F0Y2hlcyBFRiBCQiBCRiAodGhlIFVURi04IEJPTSlcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gY29udGVudCB3aXRoIEJPTVxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IGNvbnRlbnQgdmFsdWUgd2l0aG91dCBCT01cbiAqL1xuY29uc3Qgc3RyaXBCT00gPSAoY29udGVudCkgPT4ge1xuICBpZiAoY29udGVudC5jaGFyQ29kZUF0KDApID09PSAweEZFRkYpIHtcbiAgICBjb250ZW50ID0gY29udGVudC5zbGljZSgxKTtcbiAgfVxuICByZXR1cm4gY29udGVudDtcbn1cblxuLyoqXG4gKiBJbmhlcml0IHRoZSBwcm90b3R5cGUgbWV0aG9kcyBmcm9tIG9uZSBjb25zdHJ1Y3RvciBpbnRvIGFub3RoZXJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBzdXBlckNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge29iamVjdH0gW3Byb3BzXVxuICogQHBhcmFtIHtvYmplY3R9IFtkZXNjcmlwdG9yc11cbiAqXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuY29uc3QgaW5oZXJpdHMgPSAoY29uc3RydWN0b3IsIHN1cGVyQ29uc3RydWN0b3IsIHByb3BzLCBkZXNjcmlwdG9ycykgPT4ge1xuICBjb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ29uc3RydWN0b3IucHJvdG90eXBlLCBkZXNjcmlwdG9ycyk7XG4gIGNvbnN0cnVjdG9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGNvbnN0cnVjdG9yO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29uc3RydWN0b3IsICdzdXBlcicsIHtcbiAgICB2YWx1ZTogc3VwZXJDb25zdHJ1Y3Rvci5wcm90b3R5cGVcbiAgfSk7XG4gIHByb3BzICYmIE9iamVjdC5hc3NpZ24oY29uc3RydWN0b3IucHJvdG90eXBlLCBwcm9wcyk7XG59XG5cbi8qKlxuICogUmVzb2x2ZSBvYmplY3Qgd2l0aCBkZWVwIHByb3RvdHlwZSBjaGFpbiB0byBhIGZsYXQgb2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlT2JqIHNvdXJjZSBvYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBbZGVzdE9ial1cbiAqIEBwYXJhbSB7RnVuY3Rpb258Qm9vbGVhbn0gW2ZpbHRlcl1cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtwcm9wRmlsdGVyXVxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9XG4gKi9cbmNvbnN0IHRvRmxhdE9iamVjdCA9IChzb3VyY2VPYmosIGRlc3RPYmosIGZpbHRlciwgcHJvcEZpbHRlcikgPT4ge1xuICBsZXQgcHJvcHM7XG4gIGxldCBpO1xuICBsZXQgcHJvcDtcbiAgY29uc3QgbWVyZ2VkID0ge307XG5cbiAgZGVzdE9iaiA9IGRlc3RPYmogfHwge307XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lcS1udWxsLGVxZXFlcVxuICBpZiAoc291cmNlT2JqID09IG51bGwpIHJldHVybiBkZXN0T2JqO1xuXG4gIGRvIHtcbiAgICBwcm9wcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZU9iaik7XG4gICAgaSA9IHByb3BzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tID4gMCkge1xuICAgICAgcHJvcCA9IHByb3BzW2ldO1xuICAgICAgaWYgKCghcHJvcEZpbHRlciB8fCBwcm9wRmlsdGVyKHByb3AsIHNvdXJjZU9iaiwgZGVzdE9iaikpICYmICFtZXJnZWRbcHJvcF0pIHtcbiAgICAgICAgZGVzdE9ialtwcm9wXSA9IHNvdXJjZU9ialtwcm9wXTtcbiAgICAgICAgbWVyZ2VkW3Byb3BdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgc291cmNlT2JqID0gZmlsdGVyICE9PSBmYWxzZSAmJiBnZXRQcm90b3R5cGVPZihzb3VyY2VPYmopO1xuICB9IHdoaWxlIChzb3VyY2VPYmogJiYgKCFmaWx0ZXIgfHwgZmlsdGVyKHNvdXJjZU9iaiwgZGVzdE9iaikpICYmIHNvdXJjZU9iaiAhPT0gT2JqZWN0LnByb3RvdHlwZSk7XG5cbiAgcmV0dXJuIGRlc3RPYmo7XG59XG5cbi8qKlxuICogRGV0ZXJtaW5lcyB3aGV0aGVyIGEgc3RyaW5nIGVuZHMgd2l0aCB0aGUgY2hhcmFjdGVycyBvZiBhIHNwZWNpZmllZCBzdHJpbmdcbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gc3RyXG4gKiBAcGFyYW0ge1N0cmluZ30gc2VhcmNoU3RyaW5nXG4gKiBAcGFyYW0ge051bWJlcn0gW3Bvc2l0aW9uPSAwXVxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5jb25zdCBlbmRzV2l0aCA9IChzdHIsIHNlYXJjaFN0cmluZywgcG9zaXRpb24pID0+IHtcbiAgc3RyID0gU3RyaW5nKHN0cik7XG4gIGlmIChwb3NpdGlvbiA9PT0gdW5kZWZpbmVkIHx8IHBvc2l0aW9uID4gc3RyLmxlbmd0aCkge1xuICAgIHBvc2l0aW9uID0gc3RyLmxlbmd0aDtcbiAgfVxuICBwb3NpdGlvbiAtPSBzZWFyY2hTdHJpbmcubGVuZ3RoO1xuICBjb25zdCBsYXN0SW5kZXggPSBzdHIuaW5kZXhPZihzZWFyY2hTdHJpbmcsIHBvc2l0aW9uKTtcbiAgcmV0dXJuIGxhc3RJbmRleCAhPT0gLTEgJiYgbGFzdEluZGV4ID09PSBwb3NpdGlvbjtcbn1cblxuXG4vKipcbiAqIFJldHVybnMgbmV3IGFycmF5IGZyb20gYXJyYXkgbGlrZSBvYmplY3Qgb3IgbnVsbCBpZiBmYWlsZWRcbiAqXG4gKiBAcGFyYW0geyp9IFt0aGluZ11cbiAqXG4gKiBAcmV0dXJucyB7P0FycmF5fVxuICovXG5jb25zdCB0b0FycmF5ID0gKHRoaW5nKSA9PiB7XG4gIGlmICghdGhpbmcpIHJldHVybiBudWxsO1xuICBpZiAoaXNBcnJheSh0aGluZykpIHJldHVybiB0aGluZztcbiAgbGV0IGkgPSB0aGluZy5sZW5ndGg7XG4gIGlmICghaXNOdW1iZXIoaSkpIHJldHVybiBudWxsO1xuICBjb25zdCBhcnIgPSBuZXcgQXJyYXkoaSk7XG4gIHdoaWxlIChpLS0gPiAwKSB7XG4gICAgYXJyW2ldID0gdGhpbmdbaV07XG4gIH1cbiAgcmV0dXJuIGFycjtcbn1cblxuLyoqXG4gKiBDaGVja2luZyBpZiB0aGUgVWludDhBcnJheSBleGlzdHMgYW5kIGlmIGl0IGRvZXMsIGl0IHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGNoZWNrcyBpZiB0aGVcbiAqIHRoaW5nIHBhc3NlZCBpbiBpcyBhbiBpbnN0YW5jZSBvZiBVaW50OEFycmF5XG4gKlxuICogQHBhcmFtIHtUeXBlZEFycmF5fVxuICpcbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqL1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbmNvbnN0IGlzVHlwZWRBcnJheSA9IChUeXBlZEFycmF5ID0+IHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgcmV0dXJuIHRoaW5nID0+IHtcbiAgICByZXR1cm4gVHlwZWRBcnJheSAmJiB0aGluZyBpbnN0YW5jZW9mIFR5cGVkQXJyYXk7XG4gIH07XG59KSh0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgJiYgZ2V0UHJvdG90eXBlT2YoVWludDhBcnJheSkpO1xuXG4vKipcbiAqIEZvciBlYWNoIGVudHJ5IGluIHRoZSBvYmplY3QsIGNhbGwgdGhlIGZ1bmN0aW9uIHdpdGggdGhlIGtleSBhbmQgdmFsdWUuXG4gKlxuICogQHBhcmFtIHtPYmplY3Q8YW55LCBhbnk+fSBvYmogLSBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIC0gVGhlIGZ1bmN0aW9uIHRvIGNhbGwgZm9yIGVhY2ggZW50cnkuXG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmNvbnN0IGZvckVhY2hFbnRyeSA9IChvYmosIGZuKSA9PiB7XG4gIGNvbnN0IGdlbmVyYXRvciA9IG9iaiAmJiBvYmpbU3ltYm9sLml0ZXJhdG9yXTtcblxuICBjb25zdCBpdGVyYXRvciA9IGdlbmVyYXRvci5jYWxsKG9iaik7XG5cbiAgbGV0IHJlc3VsdDtcblxuICB3aGlsZSAoKHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKSkgJiYgIXJlc3VsdC5kb25lKSB7XG4gICAgY29uc3QgcGFpciA9IHJlc3VsdC52YWx1ZTtcbiAgICBmbi5jYWxsKG9iaiwgcGFpclswXSwgcGFpclsxXSk7XG4gIH1cbn1cblxuLyoqXG4gKiBJdCB0YWtlcyBhIHJlZ3VsYXIgZXhwcmVzc2lvbiBhbmQgYSBzdHJpbmcsIGFuZCByZXR1cm5zIGFuIGFycmF5IG9mIGFsbCB0aGUgbWF0Y2hlc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSByZWdFeHAgLSBUaGUgcmVndWxhciBleHByZXNzaW9uIHRvIG1hdGNoIGFnYWluc3QuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIC0gVGhlIHN0cmluZyB0byBzZWFyY2guXG4gKlxuICogQHJldHVybnMge0FycmF5PGJvb2xlYW4+fVxuICovXG5jb25zdCBtYXRjaEFsbCA9IChyZWdFeHAsIHN0cikgPT4ge1xuICBsZXQgbWF0Y2hlcztcbiAgY29uc3QgYXJyID0gW107XG5cbiAgd2hpbGUgKChtYXRjaGVzID0gcmVnRXhwLmV4ZWMoc3RyKSkgIT09IG51bGwpIHtcbiAgICBhcnIucHVzaChtYXRjaGVzKTtcbiAgfVxuXG4gIHJldHVybiBhcnI7XG59XG5cbi8qIENoZWNraW5nIGlmIHRoZSBraW5kT2ZUZXN0IGZ1bmN0aW9uIHJldHVybnMgdHJ1ZSB3aGVuIHBhc3NlZCBhbiBIVE1MRm9ybUVsZW1lbnQuICovXG5jb25zdCBpc0hUTUxGb3JtID0ga2luZE9mVGVzdCgnSFRNTEZvcm1FbGVtZW50Jyk7XG5cbmNvbnN0IHRvQ2FtZWxDYXNlID0gc3RyID0+IHtcbiAgcmV0dXJuIHN0ci50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1stX1xcc10oW2EtelxcZF0pKFxcdyopL2csXG4gICAgZnVuY3Rpb24gcmVwbGFjZXIobSwgcDEsIHAyKSB7XG4gICAgICByZXR1cm4gcDEudG9VcHBlckNhc2UoKSArIHAyO1xuICAgIH1cbiAgKTtcbn07XG5cbi8qIENyZWF0aW5nIGEgZnVuY3Rpb24gdGhhdCB3aWxsIGNoZWNrIGlmIGFuIG9iamVjdCBoYXMgYSBwcm9wZXJ0eS4gKi9cbmNvbnN0IGhhc093blByb3BlcnR5ID0gKCh7aGFzT3duUHJvcGVydHl9KSA9PiAob2JqLCBwcm9wKSA9PiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpKE9iamVjdC5wcm90b3R5cGUpO1xuXG4vKipcbiAqIERldGVybWluZSBpZiBhIHZhbHVlIGlzIGEgUmVnRXhwIG9iamVjdFxuICpcbiAqIEBwYXJhbSB7Kn0gdmFsIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdmFsdWUgaXMgYSBSZWdFeHAgb2JqZWN0LCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuY29uc3QgaXNSZWdFeHAgPSBraW5kT2ZUZXN0KCdSZWdFeHAnKTtcblxuY29uc3QgcmVkdWNlRGVzY3JpcHRvcnMgPSAob2JqLCByZWR1Y2VyKSA9PiB7XG4gIGNvbnN0IGRlc2NyaXB0b3JzID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMob2JqKTtcbiAgY29uc3QgcmVkdWNlZERlc2NyaXB0b3JzID0ge307XG5cbiAgZm9yRWFjaChkZXNjcmlwdG9ycywgKGRlc2NyaXB0b3IsIG5hbWUpID0+IHtcbiAgICBpZiAocmVkdWNlcihkZXNjcmlwdG9yLCBuYW1lLCBvYmopICE9PSBmYWxzZSkge1xuICAgICAgcmVkdWNlZERlc2NyaXB0b3JzW25hbWVdID0gZGVzY3JpcHRvcjtcbiAgICB9XG4gIH0pO1xuXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKG9iaiwgcmVkdWNlZERlc2NyaXB0b3JzKTtcbn1cblxuLyoqXG4gKiBNYWtlcyBhbGwgbWV0aG9kcyByZWFkLW9ubHlcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmpcbiAqL1xuXG5jb25zdCBmcmVlemVNZXRob2RzID0gKG9iaikgPT4ge1xuICByZWR1Y2VEZXNjcmlwdG9ycyhvYmosIChkZXNjcmlwdG9yLCBuYW1lKSA9PiB7XG4gICAgLy8gc2tpcCByZXN0cmljdGVkIHByb3BzIGluIHN0cmljdCBtb2RlXG4gICAgaWYgKGlzRnVuY3Rpb24ob2JqKSAmJiBbJ2FyZ3VtZW50cycsICdjYWxsZXInLCAnY2FsbGVlJ10uaW5kZXhPZihuYW1lKSAhPT0gLTEpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCB2YWx1ZSA9IG9ialtuYW1lXTtcblxuICAgIGlmICghaXNGdW5jdGlvbih2YWx1ZSkpIHJldHVybjtcblxuICAgIGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGZhbHNlO1xuXG4gICAgaWYgKCd3cml0YWJsZScgaW4gZGVzY3JpcHRvcikge1xuICAgICAgZGVzY3JpcHRvci53cml0YWJsZSA9IGZhbHNlO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghZGVzY3JpcHRvci5zZXQpIHtcbiAgICAgIGRlc2NyaXB0b3Iuc2V0ID0gKCkgPT4ge1xuICAgICAgICB0aHJvdyBFcnJvcignQ2FuIG5vdCByZXdyaXRlIHJlYWQtb25seSBtZXRob2QgXFwnJyArIG5hbWUgKyAnXFwnJyk7XG4gICAgICB9O1xuICAgIH1cbiAgfSk7XG59XG5cbmNvbnN0IHRvT2JqZWN0U2V0ID0gKGFycmF5T3JTdHJpbmcsIGRlbGltaXRlcikgPT4ge1xuICBjb25zdCBvYmogPSB7fTtcblxuICBjb25zdCBkZWZpbmUgPSAoYXJyKSA9PiB7XG4gICAgYXJyLmZvckVhY2godmFsdWUgPT4ge1xuICAgICAgb2JqW3ZhbHVlXSA9IHRydWU7XG4gICAgfSk7XG4gIH1cblxuICBpc0FycmF5KGFycmF5T3JTdHJpbmcpID8gZGVmaW5lKGFycmF5T3JTdHJpbmcpIDogZGVmaW5lKFN0cmluZyhhcnJheU9yU3RyaW5nKS5zcGxpdChkZWxpbWl0ZXIpKTtcblxuICByZXR1cm4gb2JqO1xufVxuXG5jb25zdCBub29wID0gKCkgPT4ge31cblxuY29uc3QgdG9GaW5pdGVOdW1iZXIgPSAodmFsdWUsIGRlZmF1bHRWYWx1ZSkgPT4ge1xuICB2YWx1ZSA9ICt2YWx1ZTtcbiAgcmV0dXJuIE51bWJlci5pc0Zpbml0ZSh2YWx1ZSkgPyB2YWx1ZSA6IGRlZmF1bHRWYWx1ZTtcbn1cblxuY29uc3QgQUxQSEEgPSAnYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXonXG5cbmNvbnN0IERJR0lUID0gJzAxMjM0NTY3ODknO1xuXG5jb25zdCBBTFBIQUJFVCA9IHtcbiAgRElHSVQsXG4gIEFMUEhBLFxuICBBTFBIQV9ESUdJVDogQUxQSEEgKyBBTFBIQS50b1VwcGVyQ2FzZSgpICsgRElHSVRcbn1cblxuY29uc3QgZ2VuZXJhdGVTdHJpbmcgPSAoc2l6ZSA9IDE2LCBhbHBoYWJldCA9IEFMUEhBQkVULkFMUEhBX0RJR0lUKSA9PiB7XG4gIGxldCBzdHIgPSAnJztcbiAgY29uc3Qge2xlbmd0aH0gPSBhbHBoYWJldDtcbiAgd2hpbGUgKHNpemUtLSkge1xuICAgIHN0ciArPSBhbHBoYWJldFtNYXRoLnJhbmRvbSgpICogbGVuZ3RofDBdXG4gIH1cblxuICByZXR1cm4gc3RyO1xufVxuXG4vKipcbiAqIElmIHRoZSB0aGluZyBpcyBhIEZvcm1EYXRhIG9iamVjdCwgcmV0dXJuIHRydWUsIG90aGVyd2lzZSByZXR1cm4gZmFsc2UuXG4gKlxuICogQHBhcmFtIHt1bmtub3dufSB0aGluZyAtIFRoZSB0aGluZyB0byBjaGVjay5cbiAqXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNTcGVjQ29tcGxpYW50Rm9ybSh0aGluZykge1xuICByZXR1cm4gISEodGhpbmcgJiYgaXNGdW5jdGlvbih0aGluZy5hcHBlbmQpICYmIHRoaW5nW1N5bWJvbC50b1N0cmluZ1RhZ10gPT09ICdGb3JtRGF0YScgJiYgdGhpbmdbU3ltYm9sLml0ZXJhdG9yXSk7XG59XG5cbmNvbnN0IHRvSlNPTk9iamVjdCA9IChvYmopID0+IHtcbiAgY29uc3Qgc3RhY2sgPSBuZXcgQXJyYXkoMTApO1xuXG4gIGNvbnN0IHZpc2l0ID0gKHNvdXJjZSwgaSkgPT4ge1xuXG4gICAgaWYgKGlzT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIGlmIChzdGFjay5pbmRleE9mKHNvdXJjZSkgPj0gMCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmKCEoJ3RvSlNPTicgaW4gc291cmNlKSkge1xuICAgICAgICBzdGFja1tpXSA9IHNvdXJjZTtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gaXNBcnJheShzb3VyY2UpID8gW10gOiB7fTtcblxuICAgICAgICBmb3JFYWNoKHNvdXJjZSwgKHZhbHVlLCBrZXkpID0+IHtcbiAgICAgICAgICBjb25zdCByZWR1Y2VkVmFsdWUgPSB2aXNpdCh2YWx1ZSwgaSArIDEpO1xuICAgICAgICAgICFpc1VuZGVmaW5lZChyZWR1Y2VkVmFsdWUpICYmICh0YXJnZXRba2V5XSA9IHJlZHVjZWRWYWx1ZSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHN0YWNrW2ldID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIHJldHVybiB0YXJnZXQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHNvdXJjZTtcbiAgfVxuXG4gIHJldHVybiB2aXNpdChvYmosIDApO1xufVxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGlzQXJyYXksXG4gIGlzQXJyYXlCdWZmZXIsXG4gIGlzQnVmZmVyLFxuICBpc0Zvcm1EYXRhLFxuICBpc0FycmF5QnVmZmVyVmlldyxcbiAgaXNTdHJpbmcsXG4gIGlzTnVtYmVyLFxuICBpc0Jvb2xlYW4sXG4gIGlzT2JqZWN0LFxuICBpc1BsYWluT2JqZWN0LFxuICBpc1VuZGVmaW5lZCxcbiAgaXNEYXRlLFxuICBpc0ZpbGUsXG4gIGlzQmxvYixcbiAgaXNSZWdFeHAsXG4gIGlzRnVuY3Rpb24sXG4gIGlzU3RyZWFtLFxuICBpc1VSTFNlYXJjaFBhcmFtcyxcbiAgaXNUeXBlZEFycmF5LFxuICBpc0ZpbGVMaXN0LFxuICBmb3JFYWNoLFxuICBtZXJnZSxcbiAgZXh0ZW5kLFxuICB0cmltLFxuICBzdHJpcEJPTSxcbiAgaW5oZXJpdHMsXG4gIHRvRmxhdE9iamVjdCxcbiAga2luZE9mLFxuICBraW5kT2ZUZXN0LFxuICBlbmRzV2l0aCxcbiAgdG9BcnJheSxcbiAgZm9yRWFjaEVudHJ5LFxuICBtYXRjaEFsbCxcbiAgaXNIVE1MRm9ybSxcbiAgaGFzT3duUHJvcGVydHksXG4gIGhhc093blByb3A6IGhhc093blByb3BlcnR5LCAvLyBhbiBhbGlhcyB0byBhdm9pZCBFU0xpbnQgbm8tcHJvdG90eXBlLWJ1aWx0aW5zIGRldGVjdGlvblxuICByZWR1Y2VEZXNjcmlwdG9ycyxcbiAgZnJlZXplTWV0aG9kcyxcbiAgdG9PYmplY3RTZXQsXG4gIHRvQ2FtZWxDYXNlLFxuICBub29wLFxuICB0b0Zpbml0ZU51bWJlcixcbiAgZmluZEtleSxcbiAgZ2xvYmFsOiBfZ2xvYmFsLFxuICBpc0NvbnRleHREZWZpbmVkLFxuICBBTFBIQUJFVCxcbiAgZ2VuZXJhdGVTdHJpbmcsXG4gIGlzU3BlY0NvbXBsaWFudEZvcm0sXG4gIHRvSlNPTk9iamVjdFxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcblxuLyoqXG4gKiBDcmVhdGUgYW4gRXJyb3Igd2l0aCB0aGUgc3BlY2lmaWVkIG1lc3NhZ2UsIGNvbmZpZywgZXJyb3IgY29kZSwgcmVxdWVzdCBhbmQgcmVzcG9uc2UuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG1lc3NhZ2UgVGhlIGVycm9yIG1lc3NhZ2UuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2NvZGVdIFRoZSBlcnJvciBjb2RlIChmb3IgZXhhbXBsZSwgJ0VDT05OQUJPUlRFRCcpLlxuICogQHBhcmFtIHtPYmplY3R9IFtjb25maWddIFRoZSBjb25maWcuXG4gKiBAcGFyYW0ge09iamVjdH0gW3JlcXVlc3RdIFRoZSByZXF1ZXN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtyZXNwb25zZV0gVGhlIHJlc3BvbnNlLlxuICpcbiAqIEByZXR1cm5zIHtFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbmZ1bmN0aW9uIEF4aW9zRXJyb3IobWVzc2FnZSwgY29kZSwgY29uZmlnLCByZXF1ZXN0LCByZXNwb25zZSkge1xuICBFcnJvci5jYWxsKHRoaXMpO1xuXG4gIGlmIChFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSkge1xuICAgIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIHRoaXMuY29uc3RydWN0b3IpO1xuICB9IGVsc2Uge1xuICAgIHRoaXMuc3RhY2sgPSAobmV3IEVycm9yKCkpLnN0YWNrO1xuICB9XG5cbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgdGhpcy5uYW1lID0gJ0F4aW9zRXJyb3InO1xuICBjb2RlICYmICh0aGlzLmNvZGUgPSBjb2RlKTtcbiAgY29uZmlnICYmICh0aGlzLmNvbmZpZyA9IGNvbmZpZyk7XG4gIHJlcXVlc3QgJiYgKHRoaXMucmVxdWVzdCA9IHJlcXVlc3QpO1xuICByZXNwb25zZSAmJiAodGhpcy5yZXNwb25zZSA9IHJlc3BvbnNlKTtcbn1cblxudXRpbHMuaW5oZXJpdHMoQXhpb3NFcnJvciwgRXJyb3IsIHtcbiAgdG9KU09OOiBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIC8vIFN0YW5kYXJkXG4gICAgICBtZXNzYWdlOiB0aGlzLm1lc3NhZ2UsXG4gICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAvLyBNaWNyb3NvZnRcbiAgICAgIGRlc2NyaXB0aW9uOiB0aGlzLmRlc2NyaXB0aW9uLFxuICAgICAgbnVtYmVyOiB0aGlzLm51bWJlcixcbiAgICAgIC8vIE1vemlsbGFcbiAgICAgIGZpbGVOYW1lOiB0aGlzLmZpbGVOYW1lLFxuICAgICAgbGluZU51bWJlcjogdGhpcy5saW5lTnVtYmVyLFxuICAgICAgY29sdW1uTnVtYmVyOiB0aGlzLmNvbHVtbk51bWJlcixcbiAgICAgIHN0YWNrOiB0aGlzLnN0YWNrLFxuICAgICAgLy8gQXhpb3NcbiAgICAgIGNvbmZpZzogdXRpbHMudG9KU09OT2JqZWN0KHRoaXMuY29uZmlnKSxcbiAgICAgIGNvZGU6IHRoaXMuY29kZSxcbiAgICAgIHN0YXR1czogdGhpcy5yZXNwb25zZSAmJiB0aGlzLnJlc3BvbnNlLnN0YXR1cyA/IHRoaXMucmVzcG9uc2Uuc3RhdHVzIDogbnVsbFxuICAgIH07XG4gIH1cbn0pO1xuXG5jb25zdCBwcm90b3R5cGUgPSBBeGlvc0Vycm9yLnByb3RvdHlwZTtcbmNvbnN0IGRlc2NyaXB0b3JzID0ge307XG5cbltcbiAgJ0VSUl9CQURfT1BUSU9OX1ZBTFVFJyxcbiAgJ0VSUl9CQURfT1BUSU9OJyxcbiAgJ0VDT05OQUJPUlRFRCcsXG4gICdFVElNRURPVVQnLFxuICAnRVJSX05FVFdPUksnLFxuICAnRVJSX0ZSX1RPT19NQU5ZX1JFRElSRUNUUycsXG4gICdFUlJfREVQUkVDQVRFRCcsXG4gICdFUlJfQkFEX1JFU1BPTlNFJyxcbiAgJ0VSUl9CQURfUkVRVUVTVCcsXG4gICdFUlJfQ0FOQ0VMRUQnLFxuICAnRVJSX05PVF9TVVBQT1JUJyxcbiAgJ0VSUl9JTlZBTElEX1VSTCdcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5dLmZvckVhY2goY29kZSA9PiB7XG4gIGRlc2NyaXB0b3JzW2NvZGVdID0ge3ZhbHVlOiBjb2RlfTtcbn0pO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydGllcyhBeGlvc0Vycm9yLCBkZXNjcmlwdG9ycyk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkocHJvdG90eXBlLCAnaXNBeGlvc0Vycm9yJywge3ZhbHVlOiB0cnVlfSk7XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5BeGlvc0Vycm9yLmZyb20gPSAoZXJyb3IsIGNvZGUsIGNvbmZpZywgcmVxdWVzdCwgcmVzcG9uc2UsIGN1c3RvbVByb3BzKSA9PiB7XG4gIGNvbnN0IGF4aW9zRXJyb3IgPSBPYmplY3QuY3JlYXRlKHByb3RvdHlwZSk7XG5cbiAgdXRpbHMudG9GbGF0T2JqZWN0KGVycm9yLCBheGlvc0Vycm9yLCBmdW5jdGlvbiBmaWx0ZXIob2JqKSB7XG4gICAgcmV0dXJuIG9iaiAhPT0gRXJyb3IucHJvdG90eXBlO1xuICB9LCBwcm9wID0+IHtcbiAgICByZXR1cm4gcHJvcCAhPT0gJ2lzQXhpb3NFcnJvcic7XG4gIH0pO1xuXG4gIEF4aW9zRXJyb3IuY2FsbChheGlvc0Vycm9yLCBlcnJvci5tZXNzYWdlLCBjb2RlLCBjb25maWcsIHJlcXVlc3QsIHJlc3BvbnNlKTtcblxuICBheGlvc0Vycm9yLmNhdXNlID0gZXJyb3I7XG5cbiAgYXhpb3NFcnJvci5uYW1lID0gZXJyb3IubmFtZTtcblxuICBjdXN0b21Qcm9wcyAmJiBPYmplY3QuYXNzaWduKGF4aW9zRXJyb3IsIGN1c3RvbVByb3BzKTtcblxuICByZXR1cm4gYXhpb3NFcnJvcjtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEF4aW9zRXJyb3I7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuLy8gdGVtcG9yYXJ5IGhvdGZpeCB0byBhdm9pZCBjaXJjdWxhciByZWZlcmVuY2VzIHVudGlsIEF4aW9zVVJMU2VhcmNoUGFyYW1zIGlzIHJlZmFjdG9yZWRcbmltcG9ydCBQbGF0Zm9ybUZvcm1EYXRhIGZyb20gJy4uL3BsYXRmb3JtL25vZGUvY2xhc3Nlcy9Gb3JtRGF0YS5qcyc7XG5cbi8qKlxuICogRGV0ZXJtaW5lcyBpZiB0aGUgZ2l2ZW4gdGhpbmcgaXMgYSBhcnJheSBvciBqcyBvYmplY3QuXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHRoaW5nIC0gVGhlIG9iamVjdCBvciBhcnJheSB0byBiZSB2aXNpdGVkLlxuICpcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc1Zpc2l0YWJsZSh0aGluZykge1xuICByZXR1cm4gdXRpbHMuaXNQbGFpbk9iamVjdCh0aGluZykgfHwgdXRpbHMuaXNBcnJheSh0aGluZyk7XG59XG5cbi8qKlxuICogSXQgcmVtb3ZlcyB0aGUgYnJhY2tldHMgZnJvbSB0aGUgZW5kIG9mIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSAtIFRoZSBrZXkgb2YgdGhlIHBhcmFtZXRlci5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSB0aGUga2V5IHdpdGhvdXQgdGhlIGJyYWNrZXRzLlxuICovXG5mdW5jdGlvbiByZW1vdmVCcmFja2V0cyhrZXkpIHtcbiAgcmV0dXJuIHV0aWxzLmVuZHNXaXRoKGtleSwgJ1tdJykgPyBrZXkuc2xpY2UoMCwgLTIpIDoga2V5O1xufVxuXG4vKipcbiAqIEl0IHRha2VzIGEgcGF0aCwgYSBrZXksIGFuZCBhIGJvb2xlYW4sIGFuZCByZXR1cm5zIGEgc3RyaW5nXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggLSBUaGUgcGF0aCB0byB0aGUgY3VycmVudCBrZXkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IC0gVGhlIGtleSBvZiB0aGUgY3VycmVudCBvYmplY3QgYmVpbmcgaXRlcmF0ZWQgb3Zlci5cbiAqIEBwYXJhbSB7c3RyaW5nfSBkb3RzIC0gSWYgdHJ1ZSwgdGhlIGtleSB3aWxsIGJlIHJlbmRlcmVkIHdpdGggZG90cyBpbnN0ZWFkIG9mIGJyYWNrZXRzLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IFRoZSBwYXRoIHRvIHRoZSBjdXJyZW50IGtleS5cbiAqL1xuZnVuY3Rpb24gcmVuZGVyS2V5KHBhdGgsIGtleSwgZG90cykge1xuICBpZiAoIXBhdGgpIHJldHVybiBrZXk7XG4gIHJldHVybiBwYXRoLmNvbmNhdChrZXkpLm1hcChmdW5jdGlvbiBlYWNoKHRva2VuLCBpKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgdG9rZW4gPSByZW1vdmVCcmFja2V0cyh0b2tlbik7XG4gICAgcmV0dXJuICFkb3RzICYmIGkgPyAnWycgKyB0b2tlbiArICddJyA6IHRva2VuO1xuICB9KS5qb2luKGRvdHMgPyAnLicgOiAnJyk7XG59XG5cbi8qKlxuICogSWYgdGhlIGFycmF5IGlzIGFuIGFycmF5IGFuZCBub25lIG9mIGl0cyBlbGVtZW50cyBhcmUgdmlzaXRhYmxlLCB0aGVuIGl0J3MgYSBmbGF0IGFycmF5LlxuICpcbiAqIEBwYXJhbSB7QXJyYXk8YW55Pn0gYXJyIC0gVGhlIGFycmF5IHRvIGNoZWNrXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzRmxhdEFycmF5KGFycikge1xuICByZXR1cm4gdXRpbHMuaXNBcnJheShhcnIpICYmICFhcnIuc29tZShpc1Zpc2l0YWJsZSk7XG59XG5cbmNvbnN0IHByZWRpY2F0ZXMgPSB1dGlscy50b0ZsYXRPYmplY3QodXRpbHMsIHt9LCBudWxsLCBmdW5jdGlvbiBmaWx0ZXIocHJvcCkge1xuICByZXR1cm4gL15pc1tBLVpdLy50ZXN0KHByb3ApO1xufSk7XG5cbi8qKlxuICogQ29udmVydCBhIGRhdGEgb2JqZWN0IHRvIEZvcm1EYXRhXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9ialxuICogQHBhcmFtIHs/T2JqZWN0fSBbZm9ybURhdGFdXG4gKiBAcGFyYW0gez9PYmplY3R9IFtvcHRpb25zXVxuICogQHBhcmFtIHtGdW5jdGlvbn0gW29wdGlvbnMudmlzaXRvcl1cbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMubWV0YVRva2VucyA9IHRydWVdXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLmRvdHMgPSBmYWxzZV1cbiAqIEBwYXJhbSB7P0Jvb2xlYW59IFtvcHRpb25zLmluZGV4ZXMgPSBmYWxzZV1cbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0fVxuICoqL1xuXG4vKipcbiAqIEl0IGNvbnZlcnRzIGFuIG9iamVjdCBpbnRvIGEgRm9ybURhdGEgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3Q8YW55LCBhbnk+fSBvYmogLSBUaGUgb2JqZWN0IHRvIGNvbnZlcnQgdG8gZm9ybSBkYXRhLlxuICogQHBhcmFtIHtzdHJpbmd9IGZvcm1EYXRhIC0gVGhlIEZvcm1EYXRhIG9iamVjdCB0byBhcHBlbmQgdG8uXG4gKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsIGFueT59IG9wdGlvbnNcbiAqXG4gKiBAcmV0dXJuc1xuICovXG5mdW5jdGlvbiB0b0Zvcm1EYXRhKG9iaiwgZm9ybURhdGEsIG9wdGlvbnMpIHtcbiAgaWYgKCF1dGlscy5pc09iamVjdChvYmopKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndGFyZ2V0IG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gIH1cblxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgZm9ybURhdGEgPSBmb3JtRGF0YSB8fCBuZXcgKFBsYXRmb3JtRm9ybURhdGEgfHwgRm9ybURhdGEpKCk7XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gIG9wdGlvbnMgPSB1dGlscy50b0ZsYXRPYmplY3Qob3B0aW9ucywge1xuICAgIG1ldGFUb2tlbnM6IHRydWUsXG4gICAgZG90czogZmFsc2UsXG4gICAgaW5kZXhlczogZmFsc2VcbiAgfSwgZmFsc2UsIGZ1bmN0aW9uIGRlZmluZWQob3B0aW9uLCBzb3VyY2UpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZXEtbnVsbCxlcWVxZXFcbiAgICByZXR1cm4gIXV0aWxzLmlzVW5kZWZpbmVkKHNvdXJjZVtvcHRpb25dKTtcbiAgfSk7XG5cbiAgY29uc3QgbWV0YVRva2VucyA9IG9wdGlvbnMubWV0YVRva2VucztcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVzZS1iZWZvcmUtZGVmaW5lXG4gIGNvbnN0IHZpc2l0b3IgPSBvcHRpb25zLnZpc2l0b3IgfHwgZGVmYXVsdFZpc2l0b3I7XG4gIGNvbnN0IGRvdHMgPSBvcHRpb25zLmRvdHM7XG4gIGNvbnN0IGluZGV4ZXMgPSBvcHRpb25zLmluZGV4ZXM7XG4gIGNvbnN0IF9CbG9iID0gb3B0aW9ucy5CbG9iIHx8IHR5cGVvZiBCbG9iICE9PSAndW5kZWZpbmVkJyAmJiBCbG9iO1xuICBjb25zdCB1c2VCbG9iID0gX0Jsb2IgJiYgdXRpbHMuaXNTcGVjQ29tcGxpYW50Rm9ybShmb3JtRGF0YSk7XG5cbiAgaWYgKCF1dGlscy5pc0Z1bmN0aW9uKHZpc2l0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcigndmlzaXRvciBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbnZlcnRWYWx1ZSh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkgcmV0dXJuICcnO1xuXG4gICAgaWYgKHV0aWxzLmlzRGF0ZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiB2YWx1ZS50b0lTT1N0cmluZygpO1xuICAgIH1cblxuICAgIGlmICghdXNlQmxvYiAmJiB1dGlscy5pc0Jsb2IodmFsdWUpKSB7XG4gICAgICB0aHJvdyBuZXcgQXhpb3NFcnJvcignQmxvYiBpcyBub3Qgc3VwcG9ydGVkLiBVc2UgYSBCdWZmZXIgaW5zdGVhZC4nKTtcbiAgICB9XG5cbiAgICBpZiAodXRpbHMuaXNBcnJheUJ1ZmZlcih2YWx1ZSkgfHwgdXRpbHMuaXNUeXBlZEFycmF5KHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHVzZUJsb2IgJiYgdHlwZW9mIEJsb2IgPT09ICdmdW5jdGlvbicgPyBuZXcgQmxvYihbdmFsdWVdKSA6IEJ1ZmZlci5mcm9tKHZhbHVlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cblxuICAvKipcbiAgICogRGVmYXVsdCB2aXNpdG9yLlxuICAgKlxuICAgKiBAcGFyYW0geyp9IHZhbHVlXG4gICAqIEBwYXJhbSB7U3RyaW5nfE51bWJlcn0ga2V5XG4gICAqIEBwYXJhbSB7QXJyYXk8U3RyaW5nfE51bWJlcj59IHBhdGhcbiAgICogQHRoaXMge0Zvcm1EYXRhfVxuICAgKlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gcmV0dXJuIHRydWUgdG8gdmlzaXQgdGhlIGVhY2ggcHJvcCBvZiB0aGUgdmFsdWUgcmVjdXJzaXZlbHlcbiAgICovXG4gIGZ1bmN0aW9uIGRlZmF1bHRWaXNpdG9yKHZhbHVlLCBrZXksIHBhdGgpIHtcbiAgICBsZXQgYXJyID0gdmFsdWU7XG5cbiAgICBpZiAodmFsdWUgJiYgIXBhdGggJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0Jykge1xuICAgICAgaWYgKHV0aWxzLmVuZHNXaXRoKGtleSwgJ3t9JykpIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgICAgIGtleSA9IG1ldGFUb2tlbnMgPyBrZXkgOiBrZXkuc2xpY2UoMCwgLTIpO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAgdmFsdWUgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XG4gICAgICB9IGVsc2UgaWYgKFxuICAgICAgICAodXRpbHMuaXNBcnJheSh2YWx1ZSkgJiYgaXNGbGF0QXJyYXkodmFsdWUpKSB8fFxuICAgICAgICAoKHV0aWxzLmlzRmlsZUxpc3QodmFsdWUpIHx8IHV0aWxzLmVuZHNXaXRoKGtleSwgJ1tdJykpICYmIChhcnIgPSB1dGlscy50b0FycmF5KHZhbHVlKSlcbiAgICAgICAgKSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgICAga2V5ID0gcmVtb3ZlQnJhY2tldHMoa2V5KTtcblxuICAgICAgICBhcnIuZm9yRWFjaChmdW5jdGlvbiBlYWNoKGVsLCBpbmRleCkge1xuICAgICAgICAgICEodXRpbHMuaXNVbmRlZmluZWQoZWwpIHx8IGVsID09PSBudWxsKSAmJiBmb3JtRGF0YS5hcHBlbmQoXG4gICAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmVzdGVkLXRlcm5hcnlcbiAgICAgICAgICAgIGluZGV4ZXMgPT09IHRydWUgPyByZW5kZXJLZXkoW2tleV0sIGluZGV4LCBkb3RzKSA6IChpbmRleGVzID09PSBudWxsID8ga2V5IDoga2V5ICsgJ1tdJyksXG4gICAgICAgICAgICBjb252ZXJ0VmFsdWUoZWwpXG4gICAgICAgICAgKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoaXNWaXNpdGFibGUodmFsdWUpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBmb3JtRGF0YS5hcHBlbmQocmVuZGVyS2V5KHBhdGgsIGtleSwgZG90cyksIGNvbnZlcnRWYWx1ZSh2YWx1ZSkpO1xuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgY29uc3Qgc3RhY2sgPSBbXTtcblxuICBjb25zdCBleHBvc2VkSGVscGVycyA9IE9iamVjdC5hc3NpZ24ocHJlZGljYXRlcywge1xuICAgIGRlZmF1bHRWaXNpdG9yLFxuICAgIGNvbnZlcnRWYWx1ZSxcbiAgICBpc1Zpc2l0YWJsZVxuICB9KTtcblxuICBmdW5jdGlvbiBidWlsZCh2YWx1ZSwgcGF0aCkge1xuICAgIGlmICh1dGlscy5pc1VuZGVmaW5lZCh2YWx1ZSkpIHJldHVybjtcblxuICAgIGlmIChzdGFjay5pbmRleE9mKHZhbHVlKSAhPT0gLTEpIHtcbiAgICAgIHRocm93IEVycm9yKCdDaXJjdWxhciByZWZlcmVuY2UgZGV0ZWN0ZWQgaW4gJyArIHBhdGguam9pbignLicpKTtcbiAgICB9XG5cbiAgICBzdGFjay5wdXNoKHZhbHVlKTtcblxuICAgIHV0aWxzLmZvckVhY2godmFsdWUsIGZ1bmN0aW9uIGVhY2goZWwsIGtleSkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gISh1dGlscy5pc1VuZGVmaW5lZChlbCkgfHwgZWwgPT09IG51bGwpICYmIHZpc2l0b3IuY2FsbChcbiAgICAgICAgZm9ybURhdGEsIGVsLCB1dGlscy5pc1N0cmluZyhrZXkpID8ga2V5LnRyaW0oKSA6IGtleSwgcGF0aCwgZXhwb3NlZEhlbHBlcnNcbiAgICAgICk7XG5cbiAgICAgIGlmIChyZXN1bHQgPT09IHRydWUpIHtcbiAgICAgICAgYnVpbGQoZWwsIHBhdGggPyBwYXRoLmNvbmNhdChrZXkpIDogW2tleV0pO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgc3RhY2sucG9wKCk7XG4gIH1cblxuICBpZiAoIXV0aWxzLmlzT2JqZWN0KG9iaikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdkYXRhIG11c3QgYmUgYW4gb2JqZWN0Jyk7XG4gIH1cblxuICBidWlsZChvYmopO1xuXG4gIHJldHVybiBmb3JtRGF0YTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdG9Gb3JtRGF0YTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHRvRm9ybURhdGEgZnJvbSAnLi90b0Zvcm1EYXRhLmpzJztcblxuLyoqXG4gKiBJdCBlbmNvZGVzIGEgc3RyaW5nIGJ5IHJlcGxhY2luZyBhbGwgY2hhcmFjdGVycyB0aGF0IGFyZSBub3QgaW4gdGhlIHVucmVzZXJ2ZWQgc2V0IHdpdGhcbiAqIHRoZWlyIHBlcmNlbnQtZW5jb2RlZCBlcXVpdmFsZW50c1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHIgLSBUaGUgc3RyaW5nIHRvIGVuY29kZS5cbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZW5jb2RlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIGVuY29kZShzdHIpIHtcbiAgY29uc3QgY2hhck1hcCA9IHtcbiAgICAnISc6ICclMjEnLFxuICAgIFwiJ1wiOiAnJTI3JyxcbiAgICAnKCc6ICclMjgnLFxuICAgICcpJzogJyUyOScsXG4gICAgJ34nOiAnJTdFJyxcbiAgICAnJTIwJzogJysnLFxuICAgICclMDAnOiAnXFx4MDAnXG4gIH07XG4gIHJldHVybiBlbmNvZGVVUklDb21wb25lbnQoc3RyKS5yZXBsYWNlKC9bIScoKX5dfCUyMHwlMDAvZywgZnVuY3Rpb24gcmVwbGFjZXIobWF0Y2gpIHtcbiAgICByZXR1cm4gY2hhck1hcFttYXRjaF07XG4gIH0pO1xufVxuXG4vKipcbiAqIEl0IHRha2VzIGEgcGFyYW1zIG9iamVjdCBhbmQgY29udmVydHMgaXQgdG8gYSBGb3JtRGF0YSBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdDxzdHJpbmcsIGFueT59IHBhcmFtcyAtIFRoZSBwYXJhbWV0ZXJzIHRvIGJlIGNvbnZlcnRlZCB0byBhIEZvcm1EYXRhIG9iamVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0PHN0cmluZywgYW55Pn0gb3B0aW9ucyAtIFRoZSBvcHRpb25zIG9iamVjdCBwYXNzZWQgdG8gdGhlIEF4aW9zIGNvbnN0cnVjdG9yLlxuICpcbiAqIEByZXR1cm5zIHt2b2lkfVxuICovXG5mdW5jdGlvbiBBeGlvc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMsIG9wdGlvbnMpIHtcbiAgdGhpcy5fcGFpcnMgPSBbXTtcblxuICBwYXJhbXMgJiYgdG9Gb3JtRGF0YShwYXJhbXMsIHRoaXMsIG9wdGlvbnMpO1xufVxuXG5jb25zdCBwcm90b3R5cGUgPSBBeGlvc1VSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGU7XG5cbnByb3RvdHlwZS5hcHBlbmQgPSBmdW5jdGlvbiBhcHBlbmQobmFtZSwgdmFsdWUpIHtcbiAgdGhpcy5fcGFpcnMucHVzaChbbmFtZSwgdmFsdWVdKTtcbn07XG5cbnByb3RvdHlwZS50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKGVuY29kZXIpIHtcbiAgY29uc3QgX2VuY29kZSA9IGVuY29kZXIgPyBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJldHVybiBlbmNvZGVyLmNhbGwodGhpcywgdmFsdWUsIGVuY29kZSk7XG4gIH0gOiBlbmNvZGU7XG5cbiAgcmV0dXJuIHRoaXMuX3BhaXJzLm1hcChmdW5jdGlvbiBlYWNoKHBhaXIpIHtcbiAgICByZXR1cm4gX2VuY29kZShwYWlyWzBdKSArICc9JyArIF9lbmNvZGUocGFpclsxXSk7XG4gIH0sICcnKS5qb2luKCcmJyk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBBeGlvc1VSTFNlYXJjaFBhcmFtcztcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBBeGlvc1VSTFNlYXJjaFBhcmFtcyBmcm9tICcuLi9oZWxwZXJzL0F4aW9zVVJMU2VhcmNoUGFyYW1zLmpzJztcblxuLyoqXG4gKiBJdCByZXBsYWNlcyBhbGwgaW5zdGFuY2VzIG9mIHRoZSBjaGFyYWN0ZXJzIGA6YCwgYCRgLCBgLGAsIGArYCwgYFtgLCBhbmQgYF1gIHdpdGggdGhlaXJcbiAqIFVSSSBlbmNvZGVkIGNvdW50ZXJwYXJ0c1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB2YWwgVGhlIHZhbHVlIHRvIGJlIGVuY29kZWQuXG4gKlxuICogQHJldHVybnMge3N0cmluZ30gVGhlIGVuY29kZWQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGVuY29kZSh2YWwpIHtcbiAgcmV0dXJuIGVuY29kZVVSSUNvbXBvbmVudCh2YWwpLlxuICAgIHJlcGxhY2UoLyUzQS9naSwgJzonKS5cbiAgICByZXBsYWNlKC8lMjQvZywgJyQnKS5cbiAgICByZXBsYWNlKC8lMkMvZ2ksICcsJykuXG4gICAgcmVwbGFjZSgvJTIwL2csICcrJykuXG4gICAgcmVwbGFjZSgvJTVCL2dpLCAnWycpLlxuICAgIHJlcGxhY2UoLyU1RC9naSwgJ10nKTtcbn1cblxuLyoqXG4gKiBCdWlsZCBhIFVSTCBieSBhcHBlbmRpbmcgcGFyYW1zIHRvIHRoZSBlbmRcbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gdXJsIFRoZSBiYXNlIG9mIHRoZSB1cmwgKGUuZy4sIGh0dHA6Ly93d3cuZ29vZ2xlLmNvbSlcbiAqIEBwYXJhbSB7b2JqZWN0fSBbcGFyYW1zXSBUaGUgcGFyYW1zIHRvIGJlIGFwcGVuZGVkXG4gKiBAcGFyYW0gez9vYmplY3R9IG9wdGlvbnNcbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgZm9ybWF0dGVkIHVybFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZFVSTCh1cmwsIHBhcmFtcywgb3B0aW9ucykge1xuICAvKmVzbGludCBuby1wYXJhbS1yZWFzc2lnbjowKi9cbiAgaWYgKCFwYXJhbXMpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9XG4gIFxuICBjb25zdCBfZW5jb2RlID0gb3B0aW9ucyAmJiBvcHRpb25zLmVuY29kZSB8fCBlbmNvZGU7XG5cbiAgY29uc3Qgc2VyaWFsaXplRm4gPSBvcHRpb25zICYmIG9wdGlvbnMuc2VyaWFsaXplO1xuXG4gIGxldCBzZXJpYWxpemVkUGFyYW1zO1xuXG4gIGlmIChzZXJpYWxpemVGbikge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSBzZXJpYWxpemVGbihwYXJhbXMsIG9wdGlvbnMpO1xuICB9IGVsc2Uge1xuICAgIHNlcmlhbGl6ZWRQYXJhbXMgPSB1dGlscy5pc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMpID9cbiAgICAgIHBhcmFtcy50b1N0cmluZygpIDpcbiAgICAgIG5ldyBBeGlvc1VSTFNlYXJjaFBhcmFtcyhwYXJhbXMsIG9wdGlvbnMpLnRvU3RyaW5nKF9lbmNvZGUpO1xuICB9XG5cbiAgaWYgKHNlcmlhbGl6ZWRQYXJhbXMpIHtcbiAgICBjb25zdCBoYXNobWFya0luZGV4ID0gdXJsLmluZGV4T2YoXCIjXCIpO1xuXG4gICAgaWYgKGhhc2htYXJrSW5kZXggIT09IC0xKSB7XG4gICAgICB1cmwgPSB1cmwuc2xpY2UoMCwgaGFzaG1hcmtJbmRleCk7XG4gICAgfVxuICAgIHVybCArPSAodXJsLmluZGV4T2YoJz8nKSA9PT0gLTEgPyAnPycgOiAnJicpICsgc2VyaWFsaXplZFBhcmFtcztcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcblxuY2xhc3MgSW50ZXJjZXB0b3JNYW5hZ2VyIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgdGhpcy5oYW5kbGVycyA9IFtdO1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIG5ldyBpbnRlcmNlcHRvciB0byB0aGUgc3RhY2tcbiAgICpcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZnVsZmlsbGVkIFRoZSBmdW5jdGlvbiB0byBoYW5kbGUgYHRoZW5gIGZvciBhIGBQcm9taXNlYFxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSByZWplY3RlZCBUaGUgZnVuY3Rpb24gdG8gaGFuZGxlIGByZWplY3RgIGZvciBhIGBQcm9taXNlYFxuICAgKlxuICAgKiBAcmV0dXJuIHtOdW1iZXJ9IEFuIElEIHVzZWQgdG8gcmVtb3ZlIGludGVyY2VwdG9yIGxhdGVyXG4gICAqL1xuICB1c2UoZnVsZmlsbGVkLCByZWplY3RlZCwgb3B0aW9ucykge1xuICAgIHRoaXMuaGFuZGxlcnMucHVzaCh7XG4gICAgICBmdWxmaWxsZWQsXG4gICAgICByZWplY3RlZCxcbiAgICAgIHN5bmNocm9ub3VzOiBvcHRpb25zID8gb3B0aW9ucy5zeW5jaHJvbm91cyA6IGZhbHNlLFxuICAgICAgcnVuV2hlbjogb3B0aW9ucyA/IG9wdGlvbnMucnVuV2hlbiA6IG51bGxcbiAgICB9KTtcbiAgICByZXR1cm4gdGhpcy5oYW5kbGVycy5sZW5ndGggLSAxO1xuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhbiBpbnRlcmNlcHRvciBmcm9tIHRoZSBzdGFja1xuICAgKlxuICAgKiBAcGFyYW0ge051bWJlcn0gaWQgVGhlIElEIHRoYXQgd2FzIHJldHVybmVkIGJ5IGB1c2VgXG4gICAqXG4gICAqIEByZXR1cm5zIHtCb29sZWFufSBgdHJ1ZWAgaWYgdGhlIGludGVyY2VwdG9yIHdhcyByZW1vdmVkLCBgZmFsc2VgIG90aGVyd2lzZVxuICAgKi9cbiAgZWplY3QoaWQpIHtcbiAgICBpZiAodGhpcy5oYW5kbGVyc1tpZF0pIHtcbiAgICAgIHRoaXMuaGFuZGxlcnNbaWRdID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2xlYXIgYWxsIGludGVyY2VwdG9ycyBmcm9tIHRoZSBzdGFja1xuICAgKlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIGNsZWFyKCkge1xuICAgIGlmICh0aGlzLmhhbmRsZXJzKSB7XG4gICAgICB0aGlzLmhhbmRsZXJzID0gW107XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEl0ZXJhdGUgb3ZlciBhbGwgdGhlIHJlZ2lzdGVyZWQgaW50ZXJjZXB0b3JzXG4gICAqXG4gICAqIFRoaXMgbWV0aG9kIGlzIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIHNraXBwaW5nIG92ZXIgYW55XG4gICAqIGludGVyY2VwdG9ycyB0aGF0IG1heSBoYXZlIGJlY29tZSBgbnVsbGAgY2FsbGluZyBgZWplY3RgLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiBUaGUgZnVuY3Rpb24gdG8gY2FsbCBmb3IgZWFjaCBpbnRlcmNlcHRvclxuICAgKlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG4gIGZvckVhY2goZm4pIHtcbiAgICB1dGlscy5mb3JFYWNoKHRoaXMuaGFuZGxlcnMsIGZ1bmN0aW9uIGZvckVhY2hIYW5kbGVyKGgpIHtcbiAgICAgIGlmIChoICE9PSBudWxsKSB7XG4gICAgICAgIGZuKGgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IEludGVyY2VwdG9yTWFuYWdlcjtcbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGRlZmF1bHQge1xuICBzaWxlbnRKU09OUGFyc2luZzogdHJ1ZSxcbiAgZm9yY2VkSlNPTlBhcnNpbmc6IHRydWUsXG4gIGNsYXJpZnlUaW1lb3V0RXJyb3I6IGZhbHNlXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgQXhpb3NVUkxTZWFyY2hQYXJhbXMgZnJvbSAnLi4vLi4vLi4vaGVscGVycy9BeGlvc1VSTFNlYXJjaFBhcmFtcy5qcyc7XG5leHBvcnQgZGVmYXVsdCB0eXBlb2YgVVJMU2VhcmNoUGFyYW1zICE9PSAndW5kZWZpbmVkJyA/IFVSTFNlYXJjaFBhcmFtcyA6IEF4aW9zVVJMU2VhcmNoUGFyYW1zO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCB0eXBlb2YgRm9ybURhdGEgIT09ICd1bmRlZmluZWQnID8gRm9ybURhdGEgOiBudWxsO1xuIiwiaW1wb3J0IFVSTFNlYXJjaFBhcmFtcyBmcm9tICcuL2NsYXNzZXMvVVJMU2VhcmNoUGFyYW1zLmpzJ1xuaW1wb3J0IEZvcm1EYXRhIGZyb20gJy4vY2xhc3Nlcy9Gb3JtRGF0YS5qcydcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgZW52aXJvbm1lbnRcbiAqXG4gKiBUaGlzIGFsbG93cyBheGlvcyB0byBydW4gaW4gYSB3ZWIgd29ya2VyLCBhbmQgcmVhY3QtbmF0aXZlLlxuICogQm90aCBlbnZpcm9ubWVudHMgc3VwcG9ydCBYTUxIdHRwUmVxdWVzdCwgYnV0IG5vdCBmdWxseSBzdGFuZGFyZCBnbG9iYWxzLlxuICpcbiAqIHdlYiB3b3JrZXJzOlxuICogIHR5cGVvZiB3aW5kb3cgLT4gdW5kZWZpbmVkXG4gKiAgdHlwZW9mIGRvY3VtZW50IC0+IHVuZGVmaW5lZFxuICpcbiAqIHJlYWN0LW5hdGl2ZTpcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnUmVhY3ROYXRpdmUnXG4gKiBuYXRpdmVzY3JpcHRcbiAqICBuYXZpZ2F0b3IucHJvZHVjdCAtPiAnTmF0aXZlU2NyaXB0JyBvciAnTlMnXG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmNvbnN0IGlzU3RhbmRhcmRCcm93c2VyRW52ID0gKCgpID0+IHtcbiAgbGV0IHByb2R1Y3Q7XG4gIGlmICh0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAoXG4gICAgKHByb2R1Y3QgPSBuYXZpZ2F0b3IucHJvZHVjdCkgPT09ICdSZWFjdE5hdGl2ZScgfHxcbiAgICBwcm9kdWN0ID09PSAnTmF0aXZlU2NyaXB0JyB8fFxuICAgIHByb2R1Y3QgPT09ICdOUycpXG4gICkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHJldHVybiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnO1xufSkoKTtcblxuLyoqXG4gKiBEZXRlcm1pbmUgaWYgd2UncmUgcnVubmluZyBpbiBhIHN0YW5kYXJkIGJyb3dzZXIgd2ViV29ya2VyIGVudmlyb25tZW50XG4gKlxuICogQWx0aG91Z2ggdGhlIGBpc1N0YW5kYXJkQnJvd3NlckVudmAgbWV0aG9kIGluZGljYXRlcyB0aGF0XG4gKiBgYWxsb3dzIGF4aW9zIHRvIHJ1biBpbiBhIHdlYiB3b3JrZXJgLCB0aGUgV2ViV29ya2VyIHdpbGwgc3RpbGwgYmVcbiAqIGZpbHRlcmVkIG91dCBkdWUgdG8gaXRzIGp1ZGdtZW50IHN0YW5kYXJkXG4gKiBgdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJ2AuXG4gKiBUaGlzIGxlYWRzIHRvIGEgcHJvYmxlbSB3aGVuIGF4aW9zIHBvc3QgYEZvcm1EYXRhYCBpbiB3ZWJXb3JrZXJcbiAqL1xuIGNvbnN0IGlzU3RhbmRhcmRCcm93c2VyV2ViV29ya2VyRW52ID0gKCgpID0+IHtcbiAgcmV0dXJuIChcbiAgICB0eXBlb2YgV29ya2VyR2xvYmFsU2NvcGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgc2VsZiBpbnN0YW5jZW9mIFdvcmtlckdsb2JhbFNjb3BlICYmXG4gICAgdHlwZW9mIHNlbGYuaW1wb3J0U2NyaXB0cyA9PT0gJ2Z1bmN0aW9uJ1xuICApO1xufSkoKTtcblxuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGlzQnJvd3NlcjogdHJ1ZSxcbiAgY2xhc3Nlczoge1xuICAgIFVSTFNlYXJjaFBhcmFtcyxcbiAgICBGb3JtRGF0YSxcbiAgICBCbG9iXG4gIH0sXG4gIGlzU3RhbmRhcmRCcm93c2VyRW52LFxuICBpc1N0YW5kYXJkQnJvd3NlcldlYldvcmtlckVudixcbiAgcHJvdG9jb2xzOiBbJ2h0dHAnLCAnaHR0cHMnLCAnZmlsZScsICdibG9iJywgJ3VybCcsICdkYXRhJ11cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5cbi8qKlxuICogSXQgdGFrZXMgYSBzdHJpbmcgbGlrZSBgZm9vW3hdW3ldW3pdYCBhbmQgcmV0dXJucyBhbiBhcnJheSBsaWtlIGBbJ2ZvbycsICd4JywgJ3knLCAneiddXG4gKlxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWUgLSBUaGUgbmFtZSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICpcbiAqIEByZXR1cm5zIEFuIGFycmF5IG9mIHN0cmluZ3MuXG4gKi9cbmZ1bmN0aW9uIHBhcnNlUHJvcFBhdGgobmFtZSkge1xuICAvLyBmb29beF1beV1bel1cbiAgLy8gZm9vLngueS56XG4gIC8vIGZvby14LXktelxuICAvLyBmb28geCB5IHpcbiAgcmV0dXJuIHV0aWxzLm1hdGNoQWxsKC9cXHcrfFxcWyhcXHcqKV0vZywgbmFtZSkubWFwKG1hdGNoID0+IHtcbiAgICByZXR1cm4gbWF0Y2hbMF0gPT09ICdbXScgPyAnJyA6IG1hdGNoWzFdIHx8IG1hdGNoWzBdO1xuICB9KTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGFuIGFycmF5IHRvIGFuIG9iamVjdC5cbiAqXG4gKiBAcGFyYW0ge0FycmF5PGFueT59IGFyciAtIFRoZSBhcnJheSB0byBjb252ZXJ0IHRvIGFuIG9iamVjdC5cbiAqXG4gKiBAcmV0dXJucyBBbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBrZXlzIGFuZCB2YWx1ZXMgYXMgdGhlIGFycmF5LlxuICovXG5mdW5jdGlvbiBhcnJheVRvT2JqZWN0KGFycikge1xuICBjb25zdCBvYmogPSB7fTtcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGFycik7XG4gIGxldCBpO1xuICBjb25zdCBsZW4gPSBrZXlzLmxlbmd0aDtcbiAgbGV0IGtleTtcbiAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAga2V5ID0ga2V5c1tpXTtcbiAgICBvYmpba2V5XSA9IGFycltrZXldO1xuICB9XG4gIHJldHVybiBvYmo7XG59XG5cbi8qKlxuICogSXQgdGFrZXMgYSBGb3JtRGF0YSBvYmplY3QgYW5kIHJldHVybnMgYSBKYXZhU2NyaXB0IG9iamVjdFxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBmb3JtRGF0YSBUaGUgRm9ybURhdGEgb2JqZWN0IHRvIGNvbnZlcnQgdG8gSlNPTi5cbiAqXG4gKiBAcmV0dXJucyB7T2JqZWN0PHN0cmluZywgYW55PiB8IG51bGx9IFRoZSBjb252ZXJ0ZWQgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBmb3JtRGF0YVRvSlNPTihmb3JtRGF0YSkge1xuICBmdW5jdGlvbiBidWlsZFBhdGgocGF0aCwgdmFsdWUsIHRhcmdldCwgaW5kZXgpIHtcbiAgICBsZXQgbmFtZSA9IHBhdGhbaW5kZXgrK107XG4gICAgY29uc3QgaXNOdW1lcmljS2V5ID0gTnVtYmVyLmlzRmluaXRlKCtuYW1lKTtcbiAgICBjb25zdCBpc0xhc3QgPSBpbmRleCA+PSBwYXRoLmxlbmd0aDtcbiAgICBuYW1lID0gIW5hbWUgJiYgdXRpbHMuaXNBcnJheSh0YXJnZXQpID8gdGFyZ2V0Lmxlbmd0aCA6IG5hbWU7XG5cbiAgICBpZiAoaXNMYXN0KSB7XG4gICAgICBpZiAodXRpbHMuaGFzT3duUHJvcCh0YXJnZXQsIG5hbWUpKSB7XG4gICAgICAgIHRhcmdldFtuYW1lXSA9IFt0YXJnZXRbbmFtZV0sIHZhbHVlXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRhcmdldFtuYW1lXSA9IHZhbHVlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gIWlzTnVtZXJpY0tleTtcbiAgICB9XG5cbiAgICBpZiAoIXRhcmdldFtuYW1lXSB8fCAhdXRpbHMuaXNPYmplY3QodGFyZ2V0W25hbWVdKSkge1xuICAgICAgdGFyZ2V0W25hbWVdID0gW107XG4gICAgfVxuXG4gICAgY29uc3QgcmVzdWx0ID0gYnVpbGRQYXRoKHBhdGgsIHZhbHVlLCB0YXJnZXRbbmFtZV0sIGluZGV4KTtcblxuICAgIGlmIChyZXN1bHQgJiYgdXRpbHMuaXNBcnJheSh0YXJnZXRbbmFtZV0pKSB7XG4gICAgICB0YXJnZXRbbmFtZV0gPSBhcnJheVRvT2JqZWN0KHRhcmdldFtuYW1lXSk7XG4gICAgfVxuXG4gICAgcmV0dXJuICFpc051bWVyaWNLZXk7XG4gIH1cblxuICBpZiAodXRpbHMuaXNGb3JtRGF0YShmb3JtRGF0YSkgJiYgdXRpbHMuaXNGdW5jdGlvbihmb3JtRGF0YS5lbnRyaWVzKSkge1xuICAgIGNvbnN0IG9iaiA9IHt9O1xuXG4gICAgdXRpbHMuZm9yRWFjaEVudHJ5KGZvcm1EYXRhLCAobmFtZSwgdmFsdWUpID0+IHtcbiAgICAgIGJ1aWxkUGF0aChwYXJzZVByb3BQYXRoKG5hbWUpLCB2YWx1ZSwgb2JqLCAwKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZm9ybURhdGFUb0pTT047XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuaW1wb3J0IHRyYW5zaXRpb25hbERlZmF1bHRzIGZyb20gJy4vdHJhbnNpdGlvbmFsLmpzJztcbmltcG9ydCB0b0Zvcm1EYXRhIGZyb20gJy4uL2hlbHBlcnMvdG9Gb3JtRGF0YS5qcyc7XG5pbXBvcnQgdG9VUkxFbmNvZGVkRm9ybSBmcm9tICcuLi9oZWxwZXJzL3RvVVJMRW5jb2RlZEZvcm0uanMnO1xuaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4uL3BsYXRmb3JtL2luZGV4LmpzJztcbmltcG9ydCBmb3JtRGF0YVRvSlNPTiBmcm9tICcuLi9oZWxwZXJzL2Zvcm1EYXRhVG9KU09OLmpzJztcblxuY29uc3QgREVGQVVMVF9DT05URU5UX1RZUEUgPSB7XG4gICdDb250ZW50LVR5cGUnOiB1bmRlZmluZWRcbn07XG5cbi8qKlxuICogSXQgdGFrZXMgYSBzdHJpbmcsIHRyaWVzIHRvIHBhcnNlIGl0LCBhbmQgaWYgaXQgZmFpbHMsIGl0IHJldHVybnMgdGhlIHN0cmluZ2lmaWVkIHZlcnNpb25cbiAqIG9mIHRoZSBpbnB1dFxuICpcbiAqIEBwYXJhbSB7YW55fSByYXdWYWx1ZSAtIFRoZSB2YWx1ZSB0byBiZSBzdHJpbmdpZmllZC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHBhcnNlciAtIEEgZnVuY3Rpb24gdGhhdCBwYXJzZXMgYSBzdHJpbmcgaW50byBhIEphdmFTY3JpcHQgb2JqZWN0LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZW5jb2RlciAtIEEgZnVuY3Rpb24gdGhhdCB0YWtlcyBhIHZhbHVlIGFuZCByZXR1cm5zIGEgc3RyaW5nLlxuICpcbiAqIEByZXR1cm5zIHtzdHJpbmd9IEEgc3RyaW5naWZpZWQgdmVyc2lvbiBvZiB0aGUgcmF3VmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHN0cmluZ2lmeVNhZmVseShyYXdWYWx1ZSwgcGFyc2VyLCBlbmNvZGVyKSB7XG4gIGlmICh1dGlscy5pc1N0cmluZyhyYXdWYWx1ZSkpIHtcbiAgICB0cnkge1xuICAgICAgKHBhcnNlciB8fCBKU09OLnBhcnNlKShyYXdWYWx1ZSk7XG4gICAgICByZXR1cm4gdXRpbHMudHJpbShyYXdWYWx1ZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaWYgKGUubmFtZSAhPT0gJ1N5bnRheEVycm9yJykge1xuICAgICAgICB0aHJvdyBlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiAoZW5jb2RlciB8fCBKU09OLnN0cmluZ2lmeSkocmF3VmFsdWUpO1xufVxuXG5jb25zdCBkZWZhdWx0cyA9IHtcblxuICB0cmFuc2l0aW9uYWw6IHRyYW5zaXRpb25hbERlZmF1bHRzLFxuXG4gIGFkYXB0ZXI6IFsneGhyJywgJ2h0dHAnXSxcblxuICB0cmFuc2Zvcm1SZXF1ZXN0OiBbZnVuY3Rpb24gdHJhbnNmb3JtUmVxdWVzdChkYXRhLCBoZWFkZXJzKSB7XG4gICAgY29uc3QgY29udGVudFR5cGUgPSBoZWFkZXJzLmdldENvbnRlbnRUeXBlKCkgfHwgJyc7XG4gICAgY29uc3QgaGFzSlNPTkNvbnRlbnRUeXBlID0gY29udGVudFR5cGUuaW5kZXhPZignYXBwbGljYXRpb24vanNvbicpID4gLTE7XG4gICAgY29uc3QgaXNPYmplY3RQYXlsb2FkID0gdXRpbHMuaXNPYmplY3QoZGF0YSk7XG5cbiAgICBpZiAoaXNPYmplY3RQYXlsb2FkICYmIHV0aWxzLmlzSFRNTEZvcm0oZGF0YSkpIHtcbiAgICAgIGRhdGEgPSBuZXcgRm9ybURhdGEoZGF0YSk7XG4gICAgfVxuXG4gICAgY29uc3QgaXNGb3JtRGF0YSA9IHV0aWxzLmlzRm9ybURhdGEoZGF0YSk7XG5cbiAgICBpZiAoaXNGb3JtRGF0YSkge1xuICAgICAgaWYgKCFoYXNKU09OQ29udGVudFR5cGUpIHtcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgICB9XG4gICAgICByZXR1cm4gaGFzSlNPTkNvbnRlbnRUeXBlID8gSlNPTi5zdHJpbmdpZnkoZm9ybURhdGFUb0pTT04oZGF0YSkpIDogZGF0YTtcbiAgICB9XG5cbiAgICBpZiAodXRpbHMuaXNBcnJheUJ1ZmZlcihkYXRhKSB8fFxuICAgICAgdXRpbHMuaXNCdWZmZXIoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzU3RyZWFtKGRhdGEpIHx8XG4gICAgICB1dGlscy5pc0ZpbGUoZGF0YSkgfHxcbiAgICAgIHV0aWxzLmlzQmxvYihkYXRhKVxuICAgICkge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICAgIGlmICh1dGlscy5pc0FycmF5QnVmZmVyVmlldyhkYXRhKSkge1xuICAgICAgcmV0dXJuIGRhdGEuYnVmZmVyO1xuICAgIH1cbiAgICBpZiAodXRpbHMuaXNVUkxTZWFyY2hQYXJhbXMoZGF0YSkpIHtcbiAgICAgIGhlYWRlcnMuc2V0Q29udGVudFR5cGUoJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDtjaGFyc2V0PXV0Zi04JywgZmFsc2UpO1xuICAgICAgcmV0dXJuIGRhdGEudG9TdHJpbmcoKTtcbiAgICB9XG5cbiAgICBsZXQgaXNGaWxlTGlzdDtcblxuICAgIGlmIChpc09iamVjdFBheWxvYWQpIHtcbiAgICAgIGlmIChjb250ZW50VHlwZS5pbmRleE9mKCdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnKSA+IC0xKSB7XG4gICAgICAgIHJldHVybiB0b1VSTEVuY29kZWRGb3JtKGRhdGEsIHRoaXMuZm9ybVNlcmlhbGl6ZXIpLnRvU3RyaW5nKCk7XG4gICAgICB9XG5cbiAgICAgIGlmICgoaXNGaWxlTGlzdCA9IHV0aWxzLmlzRmlsZUxpc3QoZGF0YSkpIHx8IGNvbnRlbnRUeXBlLmluZGV4T2YoJ211bHRpcGFydC9mb3JtLWRhdGEnKSA+IC0xKSB7XG4gICAgICAgIGNvbnN0IF9Gb3JtRGF0YSA9IHRoaXMuZW52ICYmIHRoaXMuZW52LkZvcm1EYXRhO1xuXG4gICAgICAgIHJldHVybiB0b0Zvcm1EYXRhKFxuICAgICAgICAgIGlzRmlsZUxpc3QgPyB7J2ZpbGVzW10nOiBkYXRhfSA6IGRhdGEsXG4gICAgICAgICAgX0Zvcm1EYXRhICYmIG5ldyBfRm9ybURhdGEoKSxcbiAgICAgICAgICB0aGlzLmZvcm1TZXJpYWxpemVyXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGlzT2JqZWN0UGF5bG9hZCB8fCBoYXNKU09OQ29udGVudFR5cGUgKSB7XG4gICAgICBoZWFkZXJzLnNldENvbnRlbnRUeXBlKCdhcHBsaWNhdGlvbi9qc29uJywgZmFsc2UpO1xuICAgICAgcmV0dXJuIHN0cmluZ2lmeVNhZmVseShkYXRhKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGF0YTtcbiAgfV0sXG5cbiAgdHJhbnNmb3JtUmVzcG9uc2U6IFtmdW5jdGlvbiB0cmFuc2Zvcm1SZXNwb25zZShkYXRhKSB7XG4gICAgY29uc3QgdHJhbnNpdGlvbmFsID0gdGhpcy50cmFuc2l0aW9uYWwgfHwgZGVmYXVsdHMudHJhbnNpdGlvbmFsO1xuICAgIGNvbnN0IGZvcmNlZEpTT05QYXJzaW5nID0gdHJhbnNpdGlvbmFsICYmIHRyYW5zaXRpb25hbC5mb3JjZWRKU09OUGFyc2luZztcbiAgICBjb25zdCBKU09OUmVxdWVzdGVkID0gdGhpcy5yZXNwb25zZVR5cGUgPT09ICdqc29uJztcblxuICAgIGlmIChkYXRhICYmIHV0aWxzLmlzU3RyaW5nKGRhdGEpICYmICgoZm9yY2VkSlNPTlBhcnNpbmcgJiYgIXRoaXMucmVzcG9uc2VUeXBlKSB8fCBKU09OUmVxdWVzdGVkKSkge1xuICAgICAgY29uc3Qgc2lsZW50SlNPTlBhcnNpbmcgPSB0cmFuc2l0aW9uYWwgJiYgdHJhbnNpdGlvbmFsLnNpbGVudEpTT05QYXJzaW5nO1xuICAgICAgY29uc3Qgc3RyaWN0SlNPTlBhcnNpbmcgPSAhc2lsZW50SlNPTlBhcnNpbmcgJiYgSlNPTlJlcXVlc3RlZDtcblxuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UoZGF0YSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGlmIChzdHJpY3RKU09OUGFyc2luZykge1xuICAgICAgICAgIGlmIChlLm5hbWUgPT09ICdTeW50YXhFcnJvcicpIHtcbiAgICAgICAgICAgIHRocm93IEF4aW9zRXJyb3IuZnJvbShlLCBBeGlvc0Vycm9yLkVSUl9CQURfUkVTUE9OU0UsIHRoaXMsIG51bGwsIHRoaXMucmVzcG9uc2UpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aHJvdyBlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1dLFxuXG4gIC8qKlxuICAgKiBBIHRpbWVvdXQgaW4gbWlsbGlzZWNvbmRzIHRvIGFib3J0IGEgcmVxdWVzdC4gSWYgc2V0IHRvIDAgKGRlZmF1bHQpIGFcbiAgICogdGltZW91dCBpcyBub3QgY3JlYXRlZC5cbiAgICovXG4gIHRpbWVvdXQ6IDAsXG5cbiAgeHNyZkNvb2tpZU5hbWU6ICdYU1JGLVRPS0VOJyxcbiAgeHNyZkhlYWRlck5hbWU6ICdYLVhTUkYtVE9LRU4nLFxuXG4gIG1heENvbnRlbnRMZW5ndGg6IC0xLFxuICBtYXhCb2R5TGVuZ3RoOiAtMSxcblxuICBlbnY6IHtcbiAgICBGb3JtRGF0YTogcGxhdGZvcm0uY2xhc3Nlcy5Gb3JtRGF0YSxcbiAgICBCbG9iOiBwbGF0Zm9ybS5jbGFzc2VzLkJsb2JcbiAgfSxcblxuICB2YWxpZGF0ZVN0YXR1czogZnVuY3Rpb24gdmFsaWRhdGVTdGF0dXMoc3RhdHVzKSB7XG4gICAgcmV0dXJuIHN0YXR1cyA+PSAyMDAgJiYgc3RhdHVzIDwgMzAwO1xuICB9LFxuXG4gIGhlYWRlcnM6IHtcbiAgICBjb21tb246IHtcbiAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbiwgdGV4dC9wbGFpbiwgKi8qJ1xuICAgIH1cbiAgfVxufTtcblxudXRpbHMuZm9yRWFjaChbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kTm9EYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB7fTtcbn0pO1xuXG51dGlscy5mb3JFYWNoKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZFdpdGhEYXRhKG1ldGhvZCkge1xuICBkZWZhdWx0cy5oZWFkZXJzW21ldGhvZF0gPSB1dGlscy5tZXJnZShERUZBVUxUX0NPTlRFTlRfVFlQRSk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgZGVmYXVsdHM7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgdG9Gb3JtRGF0YSBmcm9tICcuL3RvRm9ybURhdGEuanMnO1xuaW1wb3J0IHBsYXRmb3JtIGZyb20gJy4uL3BsYXRmb3JtL2luZGV4LmpzJztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gdG9VUkxFbmNvZGVkRm9ybShkYXRhLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b0Zvcm1EYXRhKGRhdGEsIG5ldyBwbGF0Zm9ybS5jbGFzc2VzLlVSTFNlYXJjaFBhcmFtcygpLCBPYmplY3QuYXNzaWduKHtcbiAgICB2aXNpdG9yOiBmdW5jdGlvbih2YWx1ZSwga2V5LCBwYXRoLCBoZWxwZXJzKSB7XG4gICAgICBpZiAocGxhdGZvcm0uaXNOb2RlICYmIHV0aWxzLmlzQnVmZmVyKHZhbHVlKSkge1xuICAgICAgICB0aGlzLmFwcGVuZChrZXksIHZhbHVlLnRvU3RyaW5nKCdiYXNlNjQnKSk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGhlbHBlcnMuZGVmYXVsdFZpc2l0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICB9XG4gIH0sIG9wdGlvbnMpKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHV0aWxzIGZyb20gJy4vLi4vdXRpbHMuanMnO1xuXG4vLyBSYXdBeGlvc0hlYWRlcnMgd2hvc2UgZHVwbGljYXRlcyBhcmUgaWdub3JlZCBieSBub2RlXG4vLyBjLmYuIGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvaHR0cC5odG1sI2h0dHBfbWVzc2FnZV9oZWFkZXJzXG5jb25zdCBpZ25vcmVEdXBsaWNhdGVPZiA9IHV0aWxzLnRvT2JqZWN0U2V0KFtcbiAgJ2FnZScsICdhdXRob3JpemF0aW9uJywgJ2NvbnRlbnQtbGVuZ3RoJywgJ2NvbnRlbnQtdHlwZScsICdldGFnJyxcbiAgJ2V4cGlyZXMnLCAnZnJvbScsICdob3N0JywgJ2lmLW1vZGlmaWVkLXNpbmNlJywgJ2lmLXVubW9kaWZpZWQtc2luY2UnLFxuICAnbGFzdC1tb2RpZmllZCcsICdsb2NhdGlvbicsICdtYXgtZm9yd2FyZHMnLCAncHJveHktYXV0aG9yaXphdGlvbicsXG4gICdyZWZlcmVyJywgJ3JldHJ5LWFmdGVyJywgJ3VzZXItYWdlbnQnXG5dKTtcblxuLyoqXG4gKiBQYXJzZSBoZWFkZXJzIGludG8gYW4gb2JqZWN0XG4gKlxuICogYGBgXG4gKiBEYXRlOiBXZWQsIDI3IEF1ZyAyMDE0IDA4OjU4OjQ5IEdNVFxuICogQ29udGVudC1UeXBlOiBhcHBsaWNhdGlvbi9qc29uXG4gKiBDb25uZWN0aW9uOiBrZWVwLWFsaXZlXG4gKiBUcmFuc2Zlci1FbmNvZGluZzogY2h1bmtlZFxuICogYGBgXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHJhd0hlYWRlcnMgSGVhZGVycyBuZWVkaW5nIHRvIGJlIHBhcnNlZFxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9IEhlYWRlcnMgcGFyc2VkIGludG8gYW4gb2JqZWN0XG4gKi9cbmV4cG9ydCBkZWZhdWx0IHJhd0hlYWRlcnMgPT4ge1xuICBjb25zdCBwYXJzZWQgPSB7fTtcbiAgbGV0IGtleTtcbiAgbGV0IHZhbDtcbiAgbGV0IGk7XG5cbiAgcmF3SGVhZGVycyAmJiByYXdIZWFkZXJzLnNwbGl0KCdcXG4nKS5mb3JFYWNoKGZ1bmN0aW9uIHBhcnNlcihsaW5lKSB7XG4gICAgaSA9IGxpbmUuaW5kZXhPZignOicpO1xuICAgIGtleSA9IGxpbmUuc3Vic3RyaW5nKDAsIGkpLnRyaW0oKS50b0xvd2VyQ2FzZSgpO1xuICAgIHZhbCA9IGxpbmUuc3Vic3RyaW5nKGkgKyAxKS50cmltKCk7XG5cbiAgICBpZiAoIWtleSB8fCAocGFyc2VkW2tleV0gJiYgaWdub3JlRHVwbGljYXRlT2Zba2V5XSkpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAoa2V5ID09PSAnc2V0LWNvb2tpZScpIHtcbiAgICAgIGlmIChwYXJzZWRba2V5XSkge1xuICAgICAgICBwYXJzZWRba2V5XS5wdXNoKHZhbCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwYXJzZWRba2V5XSA9IFt2YWxdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBwYXJzZWRba2V5XSA9IHBhcnNlZFtrZXldID8gcGFyc2VkW2tleV0gKyAnLCAnICsgdmFsIDogdmFsO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHBhcnNlZDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLi91dGlscy5qcyc7XG5pbXBvcnQgcGFyc2VIZWFkZXJzIGZyb20gJy4uL2hlbHBlcnMvcGFyc2VIZWFkZXJzLmpzJztcblxuY29uc3QgJGludGVybmFscyA9IFN5bWJvbCgnaW50ZXJuYWxzJyk7XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUhlYWRlcihoZWFkZXIpIHtcbiAgcmV0dXJuIGhlYWRlciAmJiBTdHJpbmcoaGVhZGVyKS50cmltKCkudG9Mb3dlckNhc2UoKTtcbn1cblxuZnVuY3Rpb24gbm9ybWFsaXplVmFsdWUodmFsdWUpIHtcbiAgaWYgKHZhbHVlID09PSBmYWxzZSB8fCB2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbiAgcmV0dXJuIHV0aWxzLmlzQXJyYXkodmFsdWUpID8gdmFsdWUubWFwKG5vcm1hbGl6ZVZhbHVlKSA6IFN0cmluZyh2YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIHBhcnNlVG9rZW5zKHN0cikge1xuICBjb25zdCB0b2tlbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBjb25zdCB0b2tlbnNSRSA9IC8oW15cXHMsOz1dKylcXHMqKD86PVxccyooW14sO10rKSk/L2c7XG4gIGxldCBtYXRjaDtcblxuICB3aGlsZSAoKG1hdGNoID0gdG9rZW5zUkUuZXhlYyhzdHIpKSkge1xuICAgIHRva2Vuc1ttYXRjaFsxXV0gPSBtYXRjaFsyXTtcbiAgfVxuXG4gIHJldHVybiB0b2tlbnM7XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWRIZWFkZXJOYW1lKHN0cikge1xuICByZXR1cm4gL15bLV9hLXpBLVpdKyQvLnRlc3Qoc3RyLnRyaW0oKSk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoSGVhZGVyVmFsdWUoY29udGV4dCwgdmFsdWUsIGhlYWRlciwgZmlsdGVyLCBpc0hlYWRlck5hbWVGaWx0ZXIpIHtcbiAgaWYgKHV0aWxzLmlzRnVuY3Rpb24oZmlsdGVyKSkge1xuICAgIHJldHVybiBmaWx0ZXIuY2FsbCh0aGlzLCB2YWx1ZSwgaGVhZGVyKTtcbiAgfVxuXG4gIGlmIChpc0hlYWRlck5hbWVGaWx0ZXIpIHtcbiAgICB2YWx1ZSA9IGhlYWRlcjtcbiAgfVxuXG4gIGlmICghdXRpbHMuaXNTdHJpbmcodmFsdWUpKSByZXR1cm47XG5cbiAgaWYgKHV0aWxzLmlzU3RyaW5nKGZpbHRlcikpIHtcbiAgICByZXR1cm4gdmFsdWUuaW5kZXhPZihmaWx0ZXIpICE9PSAtMTtcbiAgfVxuXG4gIGlmICh1dGlscy5pc1JlZ0V4cChmaWx0ZXIpKSB7XG4gICAgcmV0dXJuIGZpbHRlci50ZXN0KHZhbHVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBmb3JtYXRIZWFkZXIoaGVhZGVyKSB7XG4gIHJldHVybiBoZWFkZXIudHJpbSgpXG4gICAgLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvKFthLXpcXGRdKShcXHcqKS9nLCAodywgY2hhciwgc3RyKSA9PiB7XG4gICAgICByZXR1cm4gY2hhci50b1VwcGVyQ2FzZSgpICsgc3RyO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBidWlsZEFjY2Vzc29ycyhvYmosIGhlYWRlcikge1xuICBjb25zdCBhY2Nlc3Nvck5hbWUgPSB1dGlscy50b0NhbWVsQ2FzZSgnICcgKyBoZWFkZXIpO1xuXG4gIFsnZ2V0JywgJ3NldCcsICdoYXMnXS5mb3JFYWNoKG1ldGhvZE5hbWUgPT4ge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIG1ldGhvZE5hbWUgKyBhY2Nlc3Nvck5hbWUsIHtcbiAgICAgIHZhbHVlOiBmdW5jdGlvbihhcmcxLCBhcmcyLCBhcmczKSB7XG4gICAgICAgIHJldHVybiB0aGlzW21ldGhvZE5hbWVdLmNhbGwodGhpcywgaGVhZGVyLCBhcmcxLCBhcmcyLCBhcmczKTtcbiAgICAgIH0sXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgfSk7XG59XG5cbmNsYXNzIEF4aW9zSGVhZGVycyB7XG4gIGNvbnN0cnVjdG9yKGhlYWRlcnMpIHtcbiAgICBoZWFkZXJzICYmIHRoaXMuc2V0KGhlYWRlcnMpO1xuICB9XG5cbiAgc2V0KGhlYWRlciwgdmFsdWVPclJld3JpdGUsIHJld3JpdGUpIHtcbiAgICBjb25zdCBzZWxmID0gdGhpcztcblxuICAgIGZ1bmN0aW9uIHNldEhlYWRlcihfdmFsdWUsIF9oZWFkZXIsIF9yZXdyaXRlKSB7XG4gICAgICBjb25zdCBsSGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKF9oZWFkZXIpO1xuXG4gICAgICBpZiAoIWxIZWFkZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdoZWFkZXIgbmFtZSBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZycpO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBrZXkgPSB1dGlscy5maW5kS2V5KHNlbGYsIGxIZWFkZXIpO1xuXG4gICAgICBpZigha2V5IHx8IHNlbGZba2V5XSA9PT0gdW5kZWZpbmVkIHx8IF9yZXdyaXRlID09PSB0cnVlIHx8IChfcmV3cml0ZSA9PT0gdW5kZWZpbmVkICYmIHNlbGZba2V5XSAhPT0gZmFsc2UpKSB7XG4gICAgICAgIHNlbGZba2V5IHx8IF9oZWFkZXJdID0gbm9ybWFsaXplVmFsdWUoX3ZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBzZXRIZWFkZXJzID0gKGhlYWRlcnMsIF9yZXdyaXRlKSA9PlxuICAgICAgdXRpbHMuZm9yRWFjaChoZWFkZXJzLCAoX3ZhbHVlLCBfaGVhZGVyKSA9PiBzZXRIZWFkZXIoX3ZhbHVlLCBfaGVhZGVyLCBfcmV3cml0ZSkpO1xuXG4gICAgaWYgKHV0aWxzLmlzUGxhaW5PYmplY3QoaGVhZGVyKSB8fCBoZWFkZXIgaW5zdGFuY2VvZiB0aGlzLmNvbnN0cnVjdG9yKSB7XG4gICAgICBzZXRIZWFkZXJzKGhlYWRlciwgdmFsdWVPclJld3JpdGUpXG4gICAgfSBlbHNlIGlmKHV0aWxzLmlzU3RyaW5nKGhlYWRlcikgJiYgKGhlYWRlciA9IGhlYWRlci50cmltKCkpICYmICFpc1ZhbGlkSGVhZGVyTmFtZShoZWFkZXIpKSB7XG4gICAgICBzZXRIZWFkZXJzKHBhcnNlSGVhZGVycyhoZWFkZXIpLCB2YWx1ZU9yUmV3cml0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGhlYWRlciAhPSBudWxsICYmIHNldEhlYWRlcih2YWx1ZU9yUmV3cml0ZSwgaGVhZGVyLCByZXdyaXRlKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIGdldChoZWFkZXIsIHBhcnNlcikge1xuICAgIGhlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihoZWFkZXIpO1xuXG4gICAgaWYgKGhlYWRlcikge1xuICAgICAgY29uc3Qga2V5ID0gdXRpbHMuZmluZEtleSh0aGlzLCBoZWFkZXIpO1xuXG4gICAgICBpZiAoa2V5KSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gdGhpc1trZXldO1xuXG4gICAgICAgIGlmICghcGFyc2VyKSB7XG4gICAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHBhcnNlciA9PT0gdHJ1ZSkge1xuICAgICAgICAgIHJldHVybiBwYXJzZVRva2Vucyh2YWx1ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXRpbHMuaXNGdW5jdGlvbihwYXJzZXIpKSB7XG4gICAgICAgICAgcmV0dXJuIHBhcnNlci5jYWxsKHRoaXMsIHZhbHVlLCBrZXkpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHV0aWxzLmlzUmVnRXhwKHBhcnNlcikpIHtcbiAgICAgICAgICByZXR1cm4gcGFyc2VyLmV4ZWModmFsdWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcigncGFyc2VyIG11c3QgYmUgYm9vbGVhbnxyZWdleHB8ZnVuY3Rpb24nKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBoYXMoaGVhZGVyLCBtYXRjaGVyKSB7XG4gICAgaGVhZGVyID0gbm9ybWFsaXplSGVhZGVyKGhlYWRlcik7XG5cbiAgICBpZiAoaGVhZGVyKSB7XG4gICAgICBjb25zdCBrZXkgPSB1dGlscy5maW5kS2V5KHRoaXMsIGhlYWRlcik7XG5cbiAgICAgIHJldHVybiAhIShrZXkgJiYgdGhpc1trZXldICE9PSB1bmRlZmluZWQgJiYgKCFtYXRjaGVyIHx8IG1hdGNoSGVhZGVyVmFsdWUodGhpcywgdGhpc1trZXldLCBrZXksIG1hdGNoZXIpKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgZGVsZXRlKGhlYWRlciwgbWF0Y2hlcikge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGxldCBkZWxldGVkID0gZmFsc2U7XG5cbiAgICBmdW5jdGlvbiBkZWxldGVIZWFkZXIoX2hlYWRlcikge1xuICAgICAgX2hlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihfaGVhZGVyKTtcblxuICAgICAgaWYgKF9oZWFkZXIpIHtcbiAgICAgICAgY29uc3Qga2V5ID0gdXRpbHMuZmluZEtleShzZWxmLCBfaGVhZGVyKTtcblxuICAgICAgICBpZiAoa2V5ICYmICghbWF0Y2hlciB8fCBtYXRjaEhlYWRlclZhbHVlKHNlbGYsIHNlbGZba2V5XSwga2V5LCBtYXRjaGVyKSkpIHtcbiAgICAgICAgICBkZWxldGUgc2VsZltrZXldO1xuXG4gICAgICAgICAgZGVsZXRlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAodXRpbHMuaXNBcnJheShoZWFkZXIpKSB7XG4gICAgICBoZWFkZXIuZm9yRWFjaChkZWxldGVIZWFkZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGVIZWFkZXIoaGVhZGVyKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVsZXRlZDtcbiAgfVxuXG4gIGNsZWFyKG1hdGNoZXIpIHtcbiAgICBjb25zdCBrZXlzID0gT2JqZWN0LmtleXModGhpcyk7XG4gICAgbGV0IGkgPSBrZXlzLmxlbmd0aDtcbiAgICBsZXQgZGVsZXRlZCA9IGZhbHNlO1xuXG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgY29uc3Qga2V5ID0ga2V5c1tpXTtcbiAgICAgIGlmKCFtYXRjaGVyIHx8IG1hdGNoSGVhZGVyVmFsdWUodGhpcywgdGhpc1trZXldLCBrZXksIG1hdGNoZXIsIHRydWUpKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzW2tleV07XG4gICAgICAgIGRlbGV0ZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBkZWxldGVkO1xuICB9XG5cbiAgbm9ybWFsaXplKGZvcm1hdCkge1xuICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgIGNvbnN0IGhlYWRlcnMgPSB7fTtcblxuICAgIHV0aWxzLmZvckVhY2godGhpcywgKHZhbHVlLCBoZWFkZXIpID0+IHtcbiAgICAgIGNvbnN0IGtleSA9IHV0aWxzLmZpbmRLZXkoaGVhZGVycywgaGVhZGVyKTtcblxuICAgICAgaWYgKGtleSkge1xuICAgICAgICBzZWxmW2tleV0gPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSk7XG4gICAgICAgIGRlbGV0ZSBzZWxmW2hlYWRlcl07XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgY29uc3Qgbm9ybWFsaXplZCA9IGZvcm1hdCA/IGZvcm1hdEhlYWRlcihoZWFkZXIpIDogU3RyaW5nKGhlYWRlcikudHJpbSgpO1xuXG4gICAgICBpZiAobm9ybWFsaXplZCAhPT0gaGVhZGVyKSB7XG4gICAgICAgIGRlbGV0ZSBzZWxmW2hlYWRlcl07XG4gICAgICB9XG5cbiAgICAgIHNlbGZbbm9ybWFsaXplZF0gPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSk7XG5cbiAgICAgIGhlYWRlcnNbbm9ybWFsaXplZF0gPSB0cnVlO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBjb25jYXQoLi4udGFyZ2V0cykge1xuICAgIHJldHVybiB0aGlzLmNvbnN0cnVjdG9yLmNvbmNhdCh0aGlzLCAuLi50YXJnZXRzKTtcbiAgfVxuXG4gIHRvSlNPTihhc1N0cmluZ3MpIHtcbiAgICBjb25zdCBvYmogPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gICAgdXRpbHMuZm9yRWFjaCh0aGlzLCAodmFsdWUsIGhlYWRlcikgPT4ge1xuICAgICAgdmFsdWUgIT0gbnVsbCAmJiB2YWx1ZSAhPT0gZmFsc2UgJiYgKG9ialtoZWFkZXJdID0gYXNTdHJpbmdzICYmIHV0aWxzLmlzQXJyYXkodmFsdWUpID8gdmFsdWUuam9pbignLCAnKSA6IHZhbHVlKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBvYmo7XG4gIH1cblxuICBbU3ltYm9sLml0ZXJhdG9yXSgpIHtcbiAgICByZXR1cm4gT2JqZWN0LmVudHJpZXModGhpcy50b0pTT04oKSlbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICB9XG5cbiAgdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIE9iamVjdC5lbnRyaWVzKHRoaXMudG9KU09OKCkpLm1hcCgoW2hlYWRlciwgdmFsdWVdKSA9PiBoZWFkZXIgKyAnOiAnICsgdmFsdWUpLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkge1xuICAgIHJldHVybiAnQXhpb3NIZWFkZXJzJztcbiAgfVxuXG4gIHN0YXRpYyBmcm9tKHRoaW5nKSB7XG4gICAgcmV0dXJuIHRoaW5nIGluc3RhbmNlb2YgdGhpcyA/IHRoaW5nIDogbmV3IHRoaXModGhpbmcpO1xuICB9XG5cbiAgc3RhdGljIGNvbmNhdChmaXJzdCwgLi4udGFyZ2V0cykge1xuICAgIGNvbnN0IGNvbXB1dGVkID0gbmV3IHRoaXMoZmlyc3QpO1xuXG4gICAgdGFyZ2V0cy5mb3JFYWNoKCh0YXJnZXQpID0+IGNvbXB1dGVkLnNldCh0YXJnZXQpKTtcblxuICAgIHJldHVybiBjb21wdXRlZDtcbiAgfVxuXG4gIHN0YXRpYyBhY2Nlc3NvcihoZWFkZXIpIHtcbiAgICBjb25zdCBpbnRlcm5hbHMgPSB0aGlzWyRpbnRlcm5hbHNdID0gKHRoaXNbJGludGVybmFsc10gPSB7XG4gICAgICBhY2Nlc3NvcnM6IHt9XG4gICAgfSk7XG5cbiAgICBjb25zdCBhY2Nlc3NvcnMgPSBpbnRlcm5hbHMuYWNjZXNzb3JzO1xuICAgIGNvbnN0IHByb3RvdHlwZSA9IHRoaXMucHJvdG90eXBlO1xuXG4gICAgZnVuY3Rpb24gZGVmaW5lQWNjZXNzb3IoX2hlYWRlcikge1xuICAgICAgY29uc3QgbEhlYWRlciA9IG5vcm1hbGl6ZUhlYWRlcihfaGVhZGVyKTtcblxuICAgICAgaWYgKCFhY2Nlc3NvcnNbbEhlYWRlcl0pIHtcbiAgICAgICAgYnVpbGRBY2Nlc3NvcnMocHJvdG90eXBlLCBfaGVhZGVyKTtcbiAgICAgICAgYWNjZXNzb3JzW2xIZWFkZXJdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB1dGlscy5pc0FycmF5KGhlYWRlcikgPyBoZWFkZXIuZm9yRWFjaChkZWZpbmVBY2Nlc3NvcikgOiBkZWZpbmVBY2Nlc3NvcihoZWFkZXIpO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cblxuQXhpb3NIZWFkZXJzLmFjY2Vzc29yKFsnQ29udGVudC1UeXBlJywgJ0NvbnRlbnQtTGVuZ3RoJywgJ0FjY2VwdCcsICdBY2NlcHQtRW5jb2RpbmcnLCAnVXNlci1BZ2VudCcsICdBdXRob3JpemF0aW9uJ10pO1xuXG51dGlscy5mcmVlemVNZXRob2RzKEF4aW9zSGVhZGVycy5wcm90b3R5cGUpO1xudXRpbHMuZnJlZXplTWV0aG9kcyhBeGlvc0hlYWRlcnMpO1xuXG5leHBvcnQgZGVmYXVsdCBBeGlvc0hlYWRlcnM7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcbmltcG9ydCBkZWZhdWx0cyBmcm9tICcuLi9kZWZhdWx0cy9pbmRleC5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gJy4uL2NvcmUvQXhpb3NIZWFkZXJzLmpzJztcblxuLyoqXG4gKiBUcmFuc2Zvcm0gdGhlIGRhdGEgZm9yIGEgcmVxdWVzdCBvciBhIHJlc3BvbnNlXG4gKlxuICogQHBhcmFtIHtBcnJheXxGdW5jdGlvbn0gZm5zIEEgc2luZ2xlIGZ1bmN0aW9uIG9yIEFycmF5IG9mIGZ1bmN0aW9uc1xuICogQHBhcmFtIHs/T2JqZWN0fSByZXNwb25zZSBUaGUgcmVzcG9uc2Ugb2JqZWN0XG4gKlxuICogQHJldHVybnMgeyp9IFRoZSByZXN1bHRpbmcgdHJhbnNmb3JtZWQgZGF0YVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiB0cmFuc2Zvcm1EYXRhKGZucywgcmVzcG9uc2UpIHtcbiAgY29uc3QgY29uZmlnID0gdGhpcyB8fCBkZWZhdWx0cztcbiAgY29uc3QgY29udGV4dCA9IHJlc3BvbnNlIHx8IGNvbmZpZztcbiAgY29uc3QgaGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKGNvbnRleHQuaGVhZGVycyk7XG4gIGxldCBkYXRhID0gY29udGV4dC5kYXRhO1xuXG4gIHV0aWxzLmZvckVhY2goZm5zLCBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICBkYXRhID0gZm4uY2FsbChjb25maWcsIGRhdGEsIGhlYWRlcnMubm9ybWFsaXplKCksIHJlc3BvbnNlID8gcmVzcG9uc2Uuc3RhdHVzIDogdW5kZWZpbmVkKTtcbiAgfSk7XG5cbiAgaGVhZGVycy5ub3JtYWxpemUoKTtcblxuICByZXR1cm4gZGF0YTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNDYW5jZWwodmFsdWUpIHtcbiAgcmV0dXJuICEhKHZhbHVlICYmIHZhbHVlLl9fQ0FOQ0VMX18pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcblxuLyoqXG4gKiBBIGBDYW5jZWxlZEVycm9yYCBpcyBhbiBvYmplY3QgdGhhdCBpcyB0aHJvd24gd2hlbiBhbiBvcGVyYXRpb24gaXMgY2FuY2VsZWQuXG4gKlxuICogQHBhcmFtIHtzdHJpbmc9fSBtZXNzYWdlIFRoZSBtZXNzYWdlLlxuICogQHBhcmFtIHtPYmplY3Q9fSBjb25maWcgVGhlIGNvbmZpZy5cbiAqIEBwYXJhbSB7T2JqZWN0PX0gcmVxdWVzdCBUaGUgcmVxdWVzdC5cbiAqXG4gKiBAcmV0dXJucyB7Q2FuY2VsZWRFcnJvcn0gVGhlIGNyZWF0ZWQgZXJyb3IuXG4gKi9cbmZ1bmN0aW9uIENhbmNlbGVkRXJyb3IobWVzc2FnZSwgY29uZmlnLCByZXF1ZXN0KSB7XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lcS1udWxsLGVxZXFlcVxuICBBeGlvc0Vycm9yLmNhbGwodGhpcywgbWVzc2FnZSA9PSBudWxsID8gJ2NhbmNlbGVkJyA6IG1lc3NhZ2UsIEF4aW9zRXJyb3IuRVJSX0NBTkNFTEVELCBjb25maWcsIHJlcXVlc3QpO1xuICB0aGlzLm5hbWUgPSAnQ2FuY2VsZWRFcnJvcic7XG59XG5cbnV0aWxzLmluaGVyaXRzKENhbmNlbGVkRXJyb3IsIEF4aW9zRXJyb3IsIHtcbiAgX19DQU5DRUxfXzogdHJ1ZVxufSk7XG5cbmV4cG9ydCBkZWZhdWx0IENhbmNlbGVkRXJyb3I7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcbmltcG9ydCBwbGF0Zm9ybSBmcm9tICcuLi9wbGF0Zm9ybS9pbmRleC5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IHBsYXRmb3JtLmlzU3RhbmRhcmRCcm93c2VyRW52ID9cblxuLy8gU3RhbmRhcmQgYnJvd3NlciBlbnZzIHN1cHBvcnQgZG9jdW1lbnQuY29va2llXG4gIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZShuYW1lLCB2YWx1ZSwgZXhwaXJlcywgcGF0aCwgZG9tYWluLCBzZWN1cmUpIHtcbiAgICAgICAgY29uc3QgY29va2llID0gW107XG4gICAgICAgIGNvb2tpZS5wdXNoKG5hbWUgKyAnPScgKyBlbmNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcblxuICAgICAgICBpZiAodXRpbHMuaXNOdW1iZXIoZXhwaXJlcykpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgnZXhwaXJlcz0nICsgbmV3IERhdGUoZXhwaXJlcykudG9HTVRTdHJpbmcoKSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcocGF0aCkpIHtcbiAgICAgICAgICBjb29raWUucHVzaCgncGF0aD0nICsgcGF0aCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodXRpbHMuaXNTdHJpbmcoZG9tYWluKSkge1xuICAgICAgICAgIGNvb2tpZS5wdXNoKCdkb21haW49JyArIGRvbWFpbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc2VjdXJlID09PSB0cnVlKSB7XG4gICAgICAgICAgY29va2llLnB1c2goJ3NlY3VyZScpO1xuICAgICAgICB9XG5cbiAgICAgICAgZG9jdW1lbnQuY29va2llID0gY29va2llLmpvaW4oJzsgJyk7XG4gICAgICB9LFxuXG4gICAgICByZWFkOiBmdW5jdGlvbiByZWFkKG5hbWUpIHtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSBkb2N1bWVudC5jb29raWUubWF0Y2gobmV3IFJlZ0V4cCgnKF58O1xcXFxzKikoJyArIG5hbWUgKyAnKT0oW147XSopJykpO1xuICAgICAgICByZXR1cm4gKG1hdGNoID8gZGVjb2RlVVJJQ29tcG9uZW50KG1hdGNoWzNdKSA6IG51bGwpO1xuICAgICAgfSxcblxuICAgICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUobmFtZSkge1xuICAgICAgICB0aGlzLndyaXRlKG5hbWUsICcnLCBEYXRlLm5vdygpIC0gODY0MDAwMDApO1xuICAgICAgfVxuICAgIH07XG4gIH0pKCkgOlxuXG4vLyBOb24gc3RhbmRhcmQgYnJvd3NlciBlbnYgKHdlYiB3b3JrZXJzLCByZWFjdC1uYXRpdmUpIGxhY2sgbmVlZGVkIHN1cHBvcnQuXG4gIChmdW5jdGlvbiBub25TdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHdyaXRlOiBmdW5jdGlvbiB3cml0ZSgpIHt9LFxuICAgICAgcmVhZDogZnVuY3Rpb24gcmVhZCgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHt9XG4gICAgfTtcbiAgfSkoKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IGlzQWJzb2x1dGVVUkwgZnJvbSAnLi4vaGVscGVycy9pc0Fic29sdXRlVVJMLmpzJztcbmltcG9ydCBjb21iaW5lVVJMcyBmcm9tICcuLi9oZWxwZXJzL2NvbWJpbmVVUkxzLmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IFVSTCBieSBjb21iaW5pbmcgdGhlIGJhc2VVUkwgd2l0aCB0aGUgcmVxdWVzdGVkVVJMLFxuICogb25seSB3aGVuIHRoZSByZXF1ZXN0ZWRVUkwgaXMgbm90IGFscmVhZHkgYW4gYWJzb2x1dGUgVVJMLlxuICogSWYgdGhlIHJlcXVlc3RVUkwgaXMgYWJzb2x1dGUsIHRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgcmVxdWVzdGVkVVJMIHVudG91Y2hlZC5cbiAqXG4gKiBAcGFyYW0ge3N0cmluZ30gYmFzZVVSTCBUaGUgYmFzZSBVUkxcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXF1ZXN0ZWRVUkwgQWJzb2x1dGUgb3IgcmVsYXRpdmUgVVJMIHRvIGNvbWJpbmVcbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgZnVsbCBwYXRoXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkRnVsbFBhdGgoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKSB7XG4gIGlmIChiYXNlVVJMICYmICFpc0Fic29sdXRlVVJMKHJlcXVlc3RlZFVSTCkpIHtcbiAgICByZXR1cm4gY29tYmluZVVSTHMoYmFzZVVSTCwgcmVxdWVzdGVkVVJMKTtcbiAgfVxuICByZXR1cm4gcmVxdWVzdGVkVVJMO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERldGVybWluZXMgd2hldGhlciB0aGUgc3BlY2lmaWVkIFVSTCBpcyBhYnNvbHV0ZVxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSB1cmwgVGhlIFVSTCB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHNwZWNpZmllZCBVUkwgaXMgYWJzb2x1dGUsIG90aGVyd2lzZSBmYWxzZVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc0Fic29sdXRlVVJMKHVybCkge1xuICAvLyBBIFVSTCBpcyBjb25zaWRlcmVkIGFic29sdXRlIGlmIGl0IGJlZ2lucyB3aXRoIFwiPHNjaGVtZT46Ly9cIiBvciBcIi8vXCIgKHByb3RvY29sLXJlbGF0aXZlIFVSTCkuXG4gIC8vIFJGQyAzOTg2IGRlZmluZXMgc2NoZW1lIG5hbWUgYXMgYSBzZXF1ZW5jZSBvZiBjaGFyYWN0ZXJzIGJlZ2lubmluZyB3aXRoIGEgbGV0dGVyIGFuZCBmb2xsb3dlZFxuICAvLyBieSBhbnkgY29tYmluYXRpb24gb2YgbGV0dGVycywgZGlnaXRzLCBwbHVzLCBwZXJpb2QsIG9yIGh5cGhlbi5cbiAgcmV0dXJuIC9eKFthLXpdW2EtelxcZCtcXC0uXSo6KT9cXC9cXC8vaS50ZXN0KHVybCk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG5ldyBVUkwgYnkgY29tYmluaW5nIHRoZSBzcGVjaWZpZWQgVVJMc1xuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBiYXNlVVJMIFRoZSBiYXNlIFVSTFxuICogQHBhcmFtIHtzdHJpbmd9IHJlbGF0aXZlVVJMIFRoZSByZWxhdGl2ZSBVUkxcbiAqXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBUaGUgY29tYmluZWQgVVJMXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNvbWJpbmVVUkxzKGJhc2VVUkwsIHJlbGF0aXZlVVJMKSB7XG4gIHJldHVybiByZWxhdGl2ZVVSTFxuICAgID8gYmFzZVVSTC5yZXBsYWNlKC9cXC8rJC8sICcnKSArICcvJyArIHJlbGF0aXZlVVJMLnJlcGxhY2UoL15cXC8rLywgJycpXG4gICAgOiBiYXNlVVJMO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5pbXBvcnQgcGxhdGZvcm0gZnJvbSAnLi4vcGxhdGZvcm0vaW5kZXguanMnO1xuXG5leHBvcnQgZGVmYXVsdCBwbGF0Zm9ybS5pc1N0YW5kYXJkQnJvd3NlckVudiA/XG5cbi8vIFN0YW5kYXJkIGJyb3dzZXIgZW52cyBoYXZlIGZ1bGwgc3VwcG9ydCBvZiB0aGUgQVBJcyBuZWVkZWQgdG8gdGVzdFxuLy8gd2hldGhlciB0aGUgcmVxdWVzdCBVUkwgaXMgb2YgdGhlIHNhbWUgb3JpZ2luIGFzIGN1cnJlbnQgbG9jYXRpb24uXG4gIChmdW5jdGlvbiBzdGFuZGFyZEJyb3dzZXJFbnYoKSB7XG4gICAgY29uc3QgbXNpZSA9IC8obXNpZXx0cmlkZW50KS9pLnRlc3QobmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAgY29uc3QgdXJsUGFyc2luZ05vZGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJyk7XG4gICAgbGV0IG9yaWdpblVSTDtcblxuICAgIC8qKlxuICAgICogUGFyc2UgYSBVUkwgdG8gZGlzY292ZXIgaXQncyBjb21wb25lbnRzXG4gICAgKlxuICAgICogQHBhcmFtIHtTdHJpbmd9IHVybCBUaGUgVVJMIHRvIGJlIHBhcnNlZFxuICAgICogQHJldHVybnMge09iamVjdH1cbiAgICAqL1xuICAgIGZ1bmN0aW9uIHJlc29sdmVVUkwodXJsKSB7XG4gICAgICBsZXQgaHJlZiA9IHVybDtcblxuICAgICAgaWYgKG1zaWUpIHtcbiAgICAgICAgLy8gSUUgbmVlZHMgYXR0cmlidXRlIHNldCB0d2ljZSB0byBub3JtYWxpemUgcHJvcGVydGllc1xuICAgICAgICB1cmxQYXJzaW5nTm9kZS5zZXRBdHRyaWJ1dGUoJ2hyZWYnLCBocmVmKTtcbiAgICAgICAgaHJlZiA9IHVybFBhcnNpbmdOb2RlLmhyZWY7XG4gICAgICB9XG5cbiAgICAgIHVybFBhcnNpbmdOb2RlLnNldEF0dHJpYnV0ZSgnaHJlZicsIGhyZWYpO1xuXG4gICAgICAvLyB1cmxQYXJzaW5nTm9kZSBwcm92aWRlcyB0aGUgVXJsVXRpbHMgaW50ZXJmYWNlIC0gaHR0cDovL3VybC5zcGVjLndoYXR3Zy5vcmcvI3VybHV0aWxzXG4gICAgICByZXR1cm4ge1xuICAgICAgICBocmVmOiB1cmxQYXJzaW5nTm9kZS5ocmVmLFxuICAgICAgICBwcm90b2NvbDogdXJsUGFyc2luZ05vZGUucHJvdG9jb2wgPyB1cmxQYXJzaW5nTm9kZS5wcm90b2NvbC5yZXBsYWNlKC86JC8sICcnKSA6ICcnLFxuICAgICAgICBob3N0OiB1cmxQYXJzaW5nTm9kZS5ob3N0LFxuICAgICAgICBzZWFyY2g6IHVybFBhcnNpbmdOb2RlLnNlYXJjaCA/IHVybFBhcnNpbmdOb2RlLnNlYXJjaC5yZXBsYWNlKC9eXFw/LywgJycpIDogJycsXG4gICAgICAgIGhhc2g6IHVybFBhcnNpbmdOb2RlLmhhc2ggPyB1cmxQYXJzaW5nTm9kZS5oYXNoLnJlcGxhY2UoL14jLywgJycpIDogJycsXG4gICAgICAgIGhvc3RuYW1lOiB1cmxQYXJzaW5nTm9kZS5ob3N0bmFtZSxcbiAgICAgICAgcG9ydDogdXJsUGFyc2luZ05vZGUucG9ydCxcbiAgICAgICAgcGF0aG5hbWU6ICh1cmxQYXJzaW5nTm9kZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJykgP1xuICAgICAgICAgIHVybFBhcnNpbmdOb2RlLnBhdGhuYW1lIDpcbiAgICAgICAgICAnLycgKyB1cmxQYXJzaW5nTm9kZS5wYXRobmFtZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBvcmlnaW5VUkwgPSByZXNvbHZlVVJMKHdpbmRvdy5sb2NhdGlvbi5ocmVmKTtcblxuICAgIC8qKlxuICAgICogRGV0ZXJtaW5lIGlmIGEgVVJMIHNoYXJlcyB0aGUgc2FtZSBvcmlnaW4gYXMgdGhlIGN1cnJlbnQgbG9jYXRpb25cbiAgICAqXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gcmVxdWVzdFVSTCBUaGUgVVJMIHRvIHRlc3RcbiAgICAqIEByZXR1cm5zIHtib29sZWFufSBUcnVlIGlmIFVSTCBzaGFyZXMgdGhlIHNhbWUgb3JpZ2luLCBvdGhlcndpc2UgZmFsc2VcbiAgICAqL1xuICAgIHJldHVybiBmdW5jdGlvbiBpc1VSTFNhbWVPcmlnaW4ocmVxdWVzdFVSTCkge1xuICAgICAgY29uc3QgcGFyc2VkID0gKHV0aWxzLmlzU3RyaW5nKHJlcXVlc3RVUkwpKSA/IHJlc29sdmVVUkwocmVxdWVzdFVSTCkgOiByZXF1ZXN0VVJMO1xuICAgICAgcmV0dXJuIChwYXJzZWQucHJvdG9jb2wgPT09IG9yaWdpblVSTC5wcm90b2NvbCAmJlxuICAgICAgICAgIHBhcnNlZC5ob3N0ID09PSBvcmlnaW5VUkwuaG9zdCk7XG4gICAgfTtcbiAgfSkoKSA6XG5cbiAgLy8gTm9uIHN0YW5kYXJkIGJyb3dzZXIgZW52cyAod2ViIHdvcmtlcnMsIHJlYWN0LW5hdGl2ZSkgbGFjayBuZWVkZWQgc3VwcG9ydC5cbiAgKGZ1bmN0aW9uIG5vblN0YW5kYXJkQnJvd3NlckVudigpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gaXNVUkxTYW1lT3JpZ2luKCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfTtcbiAgfSkoKTtcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDYWxjdWxhdGUgZGF0YSBtYXhSYXRlXG4gKiBAcGFyYW0ge051bWJlcn0gW3NhbXBsZXNDb3VudD0gMTBdXG4gKiBAcGFyYW0ge051bWJlcn0gW21pbj0gMTAwMF1cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn1cbiAqL1xuZnVuY3Rpb24gc3BlZWRvbWV0ZXIoc2FtcGxlc0NvdW50LCBtaW4pIHtcbiAgc2FtcGxlc0NvdW50ID0gc2FtcGxlc0NvdW50IHx8IDEwO1xuICBjb25zdCBieXRlcyA9IG5ldyBBcnJheShzYW1wbGVzQ291bnQpO1xuICBjb25zdCB0aW1lc3RhbXBzID0gbmV3IEFycmF5KHNhbXBsZXNDb3VudCk7XG4gIGxldCBoZWFkID0gMDtcbiAgbGV0IHRhaWwgPSAwO1xuICBsZXQgZmlyc3RTYW1wbGVUUztcblxuICBtaW4gPSBtaW4gIT09IHVuZGVmaW5lZCA/IG1pbiA6IDEwMDA7XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHB1c2goY2h1bmtMZW5ndGgpIHtcbiAgICBjb25zdCBub3cgPSBEYXRlLm5vdygpO1xuXG4gICAgY29uc3Qgc3RhcnRlZEF0ID0gdGltZXN0YW1wc1t0YWlsXTtcblxuICAgIGlmICghZmlyc3RTYW1wbGVUUykge1xuICAgICAgZmlyc3RTYW1wbGVUUyA9IG5vdztcbiAgICB9XG5cbiAgICBieXRlc1toZWFkXSA9IGNodW5rTGVuZ3RoO1xuICAgIHRpbWVzdGFtcHNbaGVhZF0gPSBub3c7XG5cbiAgICBsZXQgaSA9IHRhaWw7XG4gICAgbGV0IGJ5dGVzQ291bnQgPSAwO1xuXG4gICAgd2hpbGUgKGkgIT09IGhlYWQpIHtcbiAgICAgIGJ5dGVzQ291bnQgKz0gYnl0ZXNbaSsrXTtcbiAgICAgIGkgPSBpICUgc2FtcGxlc0NvdW50O1xuICAgIH1cblxuICAgIGhlYWQgPSAoaGVhZCArIDEpICUgc2FtcGxlc0NvdW50O1xuXG4gICAgaWYgKGhlYWQgPT09IHRhaWwpIHtcbiAgICAgIHRhaWwgPSAodGFpbCArIDEpICUgc2FtcGxlc0NvdW50O1xuICAgIH1cblxuICAgIGlmIChub3cgLSBmaXJzdFNhbXBsZVRTIDwgbWluKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgcGFzc2VkID0gc3RhcnRlZEF0ICYmIG5vdyAtIHN0YXJ0ZWRBdDtcblxuICAgIHJldHVybiBwYXNzZWQgPyBNYXRoLnJvdW5kKGJ5dGVzQ291bnQgKiAxMDAwIC8gcGFzc2VkKSA6IHVuZGVmaW5lZDtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3BlZWRvbWV0ZXI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcbmltcG9ydCBzZXR0bGUgZnJvbSAnLi8uLi9jb3JlL3NldHRsZS5qcyc7XG5pbXBvcnQgY29va2llcyBmcm9tICcuLy4uL2hlbHBlcnMvY29va2llcy5qcyc7XG5pbXBvcnQgYnVpbGRVUkwgZnJvbSAnLi8uLi9oZWxwZXJzL2J1aWxkVVJMLmpzJztcbmltcG9ydCBidWlsZEZ1bGxQYXRoIGZyb20gJy4uL2NvcmUvYnVpbGRGdWxsUGF0aC5qcyc7XG5pbXBvcnQgaXNVUkxTYW1lT3JpZ2luIGZyb20gJy4vLi4vaGVscGVycy9pc1VSTFNhbWVPcmlnaW4uanMnO1xuaW1wb3J0IHRyYW5zaXRpb25hbERlZmF1bHRzIGZyb20gJy4uL2RlZmF1bHRzL3RyYW5zaXRpb25hbC5qcyc7XG5pbXBvcnQgQXhpb3NFcnJvciBmcm9tICcuLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuaW1wb3J0IENhbmNlbGVkRXJyb3IgZnJvbSAnLi4vY2FuY2VsL0NhbmNlbGVkRXJyb3IuanMnO1xuaW1wb3J0IHBhcnNlUHJvdG9jb2wgZnJvbSAnLi4vaGVscGVycy9wYXJzZVByb3RvY29sLmpzJztcbmltcG9ydCBwbGF0Zm9ybSBmcm9tICcuLi9wbGF0Zm9ybS9pbmRleC5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gJy4uL2NvcmUvQXhpb3NIZWFkZXJzLmpzJztcbmltcG9ydCBzcGVlZG9tZXRlciBmcm9tICcuLi9oZWxwZXJzL3NwZWVkb21ldGVyLmpzJztcblxuZnVuY3Rpb24gcHJvZ3Jlc3NFdmVudFJlZHVjZXIobGlzdGVuZXIsIGlzRG93bmxvYWRTdHJlYW0pIHtcbiAgbGV0IGJ5dGVzTm90aWZpZWQgPSAwO1xuICBjb25zdCBfc3BlZWRvbWV0ZXIgPSBzcGVlZG9tZXRlcig1MCwgMjUwKTtcblxuICByZXR1cm4gZSA9PiB7XG4gICAgY29uc3QgbG9hZGVkID0gZS5sb2FkZWQ7XG4gICAgY29uc3QgdG90YWwgPSBlLmxlbmd0aENvbXB1dGFibGUgPyBlLnRvdGFsIDogdW5kZWZpbmVkO1xuICAgIGNvbnN0IHByb2dyZXNzQnl0ZXMgPSBsb2FkZWQgLSBieXRlc05vdGlmaWVkO1xuICAgIGNvbnN0IHJhdGUgPSBfc3BlZWRvbWV0ZXIocHJvZ3Jlc3NCeXRlcyk7XG4gICAgY29uc3QgaW5SYW5nZSA9IGxvYWRlZCA8PSB0b3RhbDtcblxuICAgIGJ5dGVzTm90aWZpZWQgPSBsb2FkZWQ7XG5cbiAgICBjb25zdCBkYXRhID0ge1xuICAgICAgbG9hZGVkLFxuICAgICAgdG90YWwsXG4gICAgICBwcm9ncmVzczogdG90YWwgPyAobG9hZGVkIC8gdG90YWwpIDogdW5kZWZpbmVkLFxuICAgICAgYnl0ZXM6IHByb2dyZXNzQnl0ZXMsXG4gICAgICByYXRlOiByYXRlID8gcmF0ZSA6IHVuZGVmaW5lZCxcbiAgICAgIGVzdGltYXRlZDogcmF0ZSAmJiB0b3RhbCAmJiBpblJhbmdlID8gKHRvdGFsIC0gbG9hZGVkKSAvIHJhdGUgOiB1bmRlZmluZWQsXG4gICAgICBldmVudDogZVxuICAgIH07XG5cbiAgICBkYXRhW2lzRG93bmxvYWRTdHJlYW0gPyAnZG93bmxvYWQnIDogJ3VwbG9hZCddID0gdHJ1ZTtcblxuICAgIGxpc3RlbmVyKGRhdGEpO1xuICB9O1xufVxuXG5jb25zdCBpc1hIUkFkYXB0ZXJTdXBwb3J0ZWQgPSB0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnO1xuXG5leHBvcnQgZGVmYXVsdCBpc1hIUkFkYXB0ZXJTdXBwb3J0ZWQgJiYgZnVuY3Rpb24gKGNvbmZpZykge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gZGlzcGF0Y2hYaHJSZXF1ZXN0KHJlc29sdmUsIHJlamVjdCkge1xuICAgIGxldCByZXF1ZXN0RGF0YSA9IGNvbmZpZy5kYXRhO1xuICAgIGNvbnN0IHJlcXVlc3RIZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20oY29uZmlnLmhlYWRlcnMpLm5vcm1hbGl6ZSgpO1xuICAgIGNvbnN0IHJlc3BvbnNlVHlwZSA9IGNvbmZpZy5yZXNwb25zZVR5cGU7XG4gICAgbGV0IG9uQ2FuY2VsZWQ7XG4gICAgZnVuY3Rpb24gZG9uZSgpIHtcbiAgICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICAgICAgY29uZmlnLmNhbmNlbFRva2VuLnVuc3Vic2NyaWJlKG9uQ2FuY2VsZWQpO1xuICAgICAgfVxuXG4gICAgICBpZiAoY29uZmlnLnNpZ25hbCkge1xuICAgICAgICBjb25maWcuc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0Jywgb25DYW5jZWxlZCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHV0aWxzLmlzRm9ybURhdGEocmVxdWVzdERhdGEpICYmIChwbGF0Zm9ybS5pc1N0YW5kYXJkQnJvd3NlckVudiB8fCBwbGF0Zm9ybS5pc1N0YW5kYXJkQnJvd3NlcldlYldvcmtlckVudikpIHtcbiAgICAgIHJlcXVlc3RIZWFkZXJzLnNldENvbnRlbnRUeXBlKGZhbHNlKTsgLy8gTGV0IHRoZSBicm93c2VyIHNldCBpdFxuICAgIH1cblxuICAgIGxldCByZXF1ZXN0ID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG5cbiAgICAvLyBIVFRQIGJhc2ljIGF1dGhlbnRpY2F0aW9uXG4gICAgaWYgKGNvbmZpZy5hdXRoKSB7XG4gICAgICBjb25zdCB1c2VybmFtZSA9IGNvbmZpZy5hdXRoLnVzZXJuYW1lIHx8ICcnO1xuICAgICAgY29uc3QgcGFzc3dvcmQgPSBjb25maWcuYXV0aC5wYXNzd29yZCA/IHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChjb25maWcuYXV0aC5wYXNzd29yZCkpIDogJyc7XG4gICAgICByZXF1ZXN0SGVhZGVycy5zZXQoJ0F1dGhvcml6YXRpb24nLCAnQmFzaWMgJyArIGJ0b2EodXNlcm5hbWUgKyAnOicgKyBwYXNzd29yZCkpO1xuICAgIH1cblxuICAgIGNvbnN0IGZ1bGxQYXRoID0gYnVpbGRGdWxsUGF0aChjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG5cbiAgICByZXF1ZXN0Lm9wZW4oY29uZmlnLm1ldGhvZC50b1VwcGVyQ2FzZSgpLCBidWlsZFVSTChmdWxsUGF0aCwgY29uZmlnLnBhcmFtcywgY29uZmlnLnBhcmFtc1NlcmlhbGl6ZXIpLCB0cnVlKTtcblxuICAgIC8vIFNldCB0aGUgcmVxdWVzdCB0aW1lb3V0IGluIE1TXG4gICAgcmVxdWVzdC50aW1lb3V0ID0gY29uZmlnLnRpbWVvdXQ7XG5cbiAgICBmdW5jdGlvbiBvbmxvYWRlbmQoKSB7XG4gICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gUHJlcGFyZSB0aGUgcmVzcG9uc2VcbiAgICAgIGNvbnN0IHJlc3BvbnNlSGVhZGVycyA9IEF4aW9zSGVhZGVycy5mcm9tKFxuICAgICAgICAnZ2V0QWxsUmVzcG9uc2VIZWFkZXJzJyBpbiByZXF1ZXN0ICYmIHJlcXVlc3QuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKClcbiAgICAgICk7XG4gICAgICBjb25zdCByZXNwb25zZURhdGEgPSAhcmVzcG9uc2VUeXBlIHx8IHJlc3BvbnNlVHlwZSA9PT0gJ3RleHQnIHx8IHJlc3BvbnNlVHlwZSA9PT0gJ2pzb24nID9cbiAgICAgICAgcmVxdWVzdC5yZXNwb25zZVRleHQgOiByZXF1ZXN0LnJlc3BvbnNlO1xuICAgICAgY29uc3QgcmVzcG9uc2UgPSB7XG4gICAgICAgIGRhdGE6IHJlc3BvbnNlRGF0YSxcbiAgICAgICAgc3RhdHVzOiByZXF1ZXN0LnN0YXR1cyxcbiAgICAgICAgc3RhdHVzVGV4dDogcmVxdWVzdC5zdGF0dXNUZXh0LFxuICAgICAgICBoZWFkZXJzOiByZXNwb25zZUhlYWRlcnMsXG4gICAgICAgIGNvbmZpZyxcbiAgICAgICAgcmVxdWVzdFxuICAgICAgfTtcblxuICAgICAgc2V0dGxlKGZ1bmN0aW9uIF9yZXNvbHZlKHZhbHVlKSB7XG4gICAgICAgIHJlc29sdmUodmFsdWUpO1xuICAgICAgICBkb25lKCk7XG4gICAgICB9LCBmdW5jdGlvbiBfcmVqZWN0KGVycikge1xuICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgZG9uZSgpO1xuICAgICAgfSwgcmVzcG9uc2UpO1xuXG4gICAgICAvLyBDbGVhbiB1cCByZXF1ZXN0XG4gICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoJ29ubG9hZGVuZCcgaW4gcmVxdWVzdCkge1xuICAgICAgLy8gVXNlIG9ubG9hZGVuZCBpZiBhdmFpbGFibGVcbiAgICAgIHJlcXVlc3Qub25sb2FkZW5kID0gb25sb2FkZW5kO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBMaXN0ZW4gZm9yIHJlYWR5IHN0YXRlIHRvIGVtdWxhdGUgb25sb2FkZW5kXG4gICAgICByZXF1ZXN0Lm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uIGhhbmRsZUxvYWQoKSB7XG4gICAgICAgIGlmICghcmVxdWVzdCB8fCByZXF1ZXN0LnJlYWR5U3RhdGUgIT09IDQpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGUgcmVxdWVzdCBlcnJvcmVkIG91dCBhbmQgd2UgZGlkbid0IGdldCBhIHJlc3BvbnNlLCB0aGlzIHdpbGwgYmVcbiAgICAgICAgLy8gaGFuZGxlZCBieSBvbmVycm9yIGluc3RlYWRcbiAgICAgICAgLy8gV2l0aCBvbmUgZXhjZXB0aW9uOiByZXF1ZXN0IHRoYXQgdXNpbmcgZmlsZTogcHJvdG9jb2wsIG1vc3QgYnJvd3NlcnNcbiAgICAgICAgLy8gd2lsbCByZXR1cm4gc3RhdHVzIGFzIDAgZXZlbiB0aG91Z2ggaXQncyBhIHN1Y2Nlc3NmdWwgcmVxdWVzdFxuICAgICAgICBpZiAocmVxdWVzdC5zdGF0dXMgPT09IDAgJiYgIShyZXF1ZXN0LnJlc3BvbnNlVVJMICYmIHJlcXVlc3QucmVzcG9uc2VVUkwuaW5kZXhPZignZmlsZTonKSA9PT0gMCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gcmVhZHlzdGF0ZSBoYW5kbGVyIGlzIGNhbGxpbmcgYmVmb3JlIG9uZXJyb3Igb3Igb250aW1lb3V0IGhhbmRsZXJzLFxuICAgICAgICAvLyBzbyB3ZSBzaG91bGQgY2FsbCBvbmxvYWRlbmQgb24gdGhlIG5leHQgJ3RpY2snXG4gICAgICAgIHNldFRpbWVvdXQob25sb2FkZW5kKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIGJyb3dzZXIgcmVxdWVzdCBjYW5jZWxsYXRpb24gKGFzIG9wcG9zZWQgdG8gYSBtYW51YWwgY2FuY2VsbGF0aW9uKVxuICAgIHJlcXVlc3Qub25hYm9ydCA9IGZ1bmN0aW9uIGhhbmRsZUFib3J0KCkge1xuICAgICAgaWYgKCFyZXF1ZXN0KSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKCdSZXF1ZXN0IGFib3J0ZWQnLCBBeGlvc0Vycm9yLkVDT05OQUJPUlRFRCwgY29uZmlnLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgbG93IGxldmVsIG5ldHdvcmsgZXJyb3JzXG4gICAgcmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gaGFuZGxlRXJyb3IoKSB7XG4gICAgICAvLyBSZWFsIGVycm9ycyBhcmUgaGlkZGVuIGZyb20gdXMgYnkgdGhlIGJyb3dzZXJcbiAgICAgIC8vIG9uZXJyb3Igc2hvdWxkIG9ubHkgZmlyZSBpZiBpdCdzIGEgbmV0d29yayBlcnJvclxuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKCdOZXR3b3JrIEVycm9yJywgQXhpb3NFcnJvci5FUlJfTkVUV09SSywgY29uZmlnLCByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBIYW5kbGUgdGltZW91dFxuICAgIHJlcXVlc3Qub250aW1lb3V0ID0gZnVuY3Rpb24gaGFuZGxlVGltZW91dCgpIHtcbiAgICAgIGxldCB0aW1lb3V0RXJyb3JNZXNzYWdlID0gY29uZmlnLnRpbWVvdXQgPyAndGltZW91dCBvZiAnICsgY29uZmlnLnRpbWVvdXQgKyAnbXMgZXhjZWVkZWQnIDogJ3RpbWVvdXQgZXhjZWVkZWQnO1xuICAgICAgY29uc3QgdHJhbnNpdGlvbmFsID0gY29uZmlnLnRyYW5zaXRpb25hbCB8fCB0cmFuc2l0aW9uYWxEZWZhdWx0cztcbiAgICAgIGlmIChjb25maWcudGltZW91dEVycm9yTWVzc2FnZSkge1xuICAgICAgICB0aW1lb3V0RXJyb3JNZXNzYWdlID0gY29uZmlnLnRpbWVvdXRFcnJvck1lc3NhZ2U7XG4gICAgICB9XG4gICAgICByZWplY3QobmV3IEF4aW9zRXJyb3IoXG4gICAgICAgIHRpbWVvdXRFcnJvck1lc3NhZ2UsXG4gICAgICAgIHRyYW5zaXRpb25hbC5jbGFyaWZ5VGltZW91dEVycm9yID8gQXhpb3NFcnJvci5FVElNRURPVVQgOiBBeGlvc0Vycm9yLkVDT05OQUJPUlRFRCxcbiAgICAgICAgY29uZmlnLFxuICAgICAgICByZXF1ZXN0KSk7XG5cbiAgICAgIC8vIENsZWFuIHVwIHJlcXVlc3RcbiAgICAgIHJlcXVlc3QgPSBudWxsO1xuICAgIH07XG5cbiAgICAvLyBBZGQgeHNyZiBoZWFkZXJcbiAgICAvLyBUaGlzIGlzIG9ubHkgZG9uZSBpZiBydW5uaW5nIGluIGEgc3RhbmRhcmQgYnJvd3NlciBlbnZpcm9ubWVudC5cbiAgICAvLyBTcGVjaWZpY2FsbHkgbm90IGlmIHdlJ3JlIGluIGEgd2ViIHdvcmtlciwgb3IgcmVhY3QtbmF0aXZlLlxuICAgIGlmIChwbGF0Zm9ybS5pc1N0YW5kYXJkQnJvd3NlckVudikge1xuICAgICAgLy8gQWRkIHhzcmYgaGVhZGVyXG4gICAgICBjb25zdCB4c3JmVmFsdWUgPSAoY29uZmlnLndpdGhDcmVkZW50aWFscyB8fCBpc1VSTFNhbWVPcmlnaW4oZnVsbFBhdGgpKVxuICAgICAgICAmJiBjb25maWcueHNyZkNvb2tpZU5hbWUgJiYgY29va2llcy5yZWFkKGNvbmZpZy54c3JmQ29va2llTmFtZSk7XG5cbiAgICAgIGlmICh4c3JmVmFsdWUpIHtcbiAgICAgICAgcmVxdWVzdEhlYWRlcnMuc2V0KGNvbmZpZy54c3JmSGVhZGVyTmFtZSwgeHNyZlZhbHVlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSZW1vdmUgQ29udGVudC1UeXBlIGlmIGRhdGEgaXMgdW5kZWZpbmVkXG4gICAgcmVxdWVzdERhdGEgPT09IHVuZGVmaW5lZCAmJiByZXF1ZXN0SGVhZGVycy5zZXRDb250ZW50VHlwZShudWxsKTtcblxuICAgIC8vIEFkZCBoZWFkZXJzIHRvIHRoZSByZXF1ZXN0XG4gICAgaWYgKCdzZXRSZXF1ZXN0SGVhZGVyJyBpbiByZXF1ZXN0KSB7XG4gICAgICB1dGlscy5mb3JFYWNoKHJlcXVlc3RIZWFkZXJzLnRvSlNPTigpLCBmdW5jdGlvbiBzZXRSZXF1ZXN0SGVhZGVyKHZhbCwga2V5KSB7XG4gICAgICAgIHJlcXVlc3Quc2V0UmVxdWVzdEhlYWRlcihrZXksIHZhbCk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBBZGQgd2l0aENyZWRlbnRpYWxzIHRvIHJlcXVlc3QgaWYgbmVlZGVkXG4gICAgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChjb25maWcud2l0aENyZWRlbnRpYWxzKSkge1xuICAgICAgcmVxdWVzdC53aXRoQ3JlZGVudGlhbHMgPSAhIWNvbmZpZy53aXRoQ3JlZGVudGlhbHM7XG4gICAgfVxuXG4gICAgLy8gQWRkIHJlc3BvbnNlVHlwZSB0byByZXF1ZXN0IGlmIG5lZWRlZFxuICAgIGlmIChyZXNwb25zZVR5cGUgJiYgcmVzcG9uc2VUeXBlICE9PSAnanNvbicpIHtcbiAgICAgIHJlcXVlc3QucmVzcG9uc2VUeXBlID0gY29uZmlnLnJlc3BvbnNlVHlwZTtcbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgcHJvZ3Jlc3MgaWYgbmVlZGVkXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25Eb3dubG9hZFByb2dyZXNzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICByZXF1ZXN0LmFkZEV2ZW50TGlzdGVuZXIoJ3Byb2dyZXNzJywgcHJvZ3Jlc3NFdmVudFJlZHVjZXIoY29uZmlnLm9uRG93bmxvYWRQcm9ncmVzcywgdHJ1ZSkpO1xuICAgIH1cblxuICAgIC8vIE5vdCBhbGwgYnJvd3NlcnMgc3VwcG9ydCB1cGxvYWQgZXZlbnRzXG4gICAgaWYgKHR5cGVvZiBjb25maWcub25VcGxvYWRQcm9ncmVzcyA9PT0gJ2Z1bmN0aW9uJyAmJiByZXF1ZXN0LnVwbG9hZCkge1xuICAgICAgcmVxdWVzdC51cGxvYWQuYWRkRXZlbnRMaXN0ZW5lcigncHJvZ3Jlc3MnLCBwcm9ncmVzc0V2ZW50UmVkdWNlcihjb25maWcub25VcGxvYWRQcm9ncmVzcykpO1xuICAgIH1cblxuICAgIGlmIChjb25maWcuY2FuY2VsVG9rZW4gfHwgY29uZmlnLnNpZ25hbCkge1xuICAgICAgLy8gSGFuZGxlIGNhbmNlbGxhdGlvblxuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICAgIG9uQ2FuY2VsZWQgPSBjYW5jZWwgPT4ge1xuICAgICAgICBpZiAoIXJlcXVlc3QpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmVqZWN0KCFjYW5jZWwgfHwgY2FuY2VsLnR5cGUgPyBuZXcgQ2FuY2VsZWRFcnJvcihudWxsLCBjb25maWcsIHJlcXVlc3QpIDogY2FuY2VsKTtcbiAgICAgICAgcmVxdWVzdC5hYm9ydCgpO1xuICAgICAgICByZXF1ZXN0ID0gbnVsbDtcbiAgICAgIH07XG5cbiAgICAgIGNvbmZpZy5jYW5jZWxUb2tlbiAmJiBjb25maWcuY2FuY2VsVG9rZW4uc3Vic2NyaWJlKG9uQ2FuY2VsZWQpO1xuICAgICAgaWYgKGNvbmZpZy5zaWduYWwpIHtcbiAgICAgICAgY29uZmlnLnNpZ25hbC5hYm9ydGVkID8gb25DYW5jZWxlZCgpIDogY29uZmlnLnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIG9uQ2FuY2VsZWQpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHByb3RvY29sID0gcGFyc2VQcm90b2NvbChmdWxsUGF0aCk7XG5cbiAgICBpZiAocHJvdG9jb2wgJiYgcGxhdGZvcm0ucHJvdG9jb2xzLmluZGV4T2YocHJvdG9jb2wpID09PSAtMSkge1xuICAgICAgcmVqZWN0KG5ldyBBeGlvc0Vycm9yKCdVbnN1cHBvcnRlZCBwcm90b2NvbCAnICsgcHJvdG9jb2wgKyAnOicsIEF4aW9zRXJyb3IuRVJSX0JBRF9SRVFVRVNULCBjb25maWcpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cblxuICAgIC8vIFNlbmQgdGhlIHJlcXVlc3RcbiAgICByZXF1ZXN0LnNlbmQocmVxdWVzdERhdGEgfHwgbnVsbCk7XG4gIH0pO1xufVxuIiwiaW1wb3J0IHV0aWxzIGZyb20gJy4uL3V0aWxzLmpzJztcbmltcG9ydCBodHRwQWRhcHRlciBmcm9tICcuL2h0dHAuanMnO1xuaW1wb3J0IHhockFkYXB0ZXIgZnJvbSAnLi94aHIuanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSBcIi4uL2NvcmUvQXhpb3NFcnJvci5qc1wiO1xuXG5jb25zdCBrbm93bkFkYXB0ZXJzID0ge1xuICBodHRwOiBodHRwQWRhcHRlcixcbiAgeGhyOiB4aHJBZGFwdGVyXG59XG5cbnV0aWxzLmZvckVhY2goa25vd25BZGFwdGVycywgKGZuLCB2YWx1ZSkgPT4ge1xuICBpZihmbikge1xuICAgIHRyeSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZm4sICduYW1lJywge3ZhbHVlfSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWVtcHR5XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShmbiwgJ2FkYXB0ZXJOYW1lJywge3ZhbHVlfSk7XG4gIH1cbn0pO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIGdldEFkYXB0ZXI6IChhZGFwdGVycykgPT4ge1xuICAgIGFkYXB0ZXJzID0gdXRpbHMuaXNBcnJheShhZGFwdGVycykgPyBhZGFwdGVycyA6IFthZGFwdGVyc107XG5cbiAgICBjb25zdCB7bGVuZ3RofSA9IGFkYXB0ZXJzO1xuICAgIGxldCBuYW1lT3JBZGFwdGVyO1xuICAgIGxldCBhZGFwdGVyO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuICAgICAgbmFtZU9yQWRhcHRlciA9IGFkYXB0ZXJzW2ldO1xuICAgICAgaWYoKGFkYXB0ZXIgPSB1dGlscy5pc1N0cmluZyhuYW1lT3JBZGFwdGVyKSA/IGtub3duQWRhcHRlcnNbbmFtZU9yQWRhcHRlci50b0xvd2VyQ2FzZSgpXSA6IG5hbWVPckFkYXB0ZXIpKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghYWRhcHRlcikge1xuICAgICAgaWYgKGFkYXB0ZXIgPT09IGZhbHNlKSB7XG4gICAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKFxuICAgICAgICAgIGBBZGFwdGVyICR7bmFtZU9yQWRhcHRlcn0gaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgZW52aXJvbm1lbnRgLFxuICAgICAgICAgICdFUlJfTk9UX1NVUFBPUlQnXG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgdXRpbHMuaGFzT3duUHJvcChrbm93bkFkYXB0ZXJzLCBuYW1lT3JBZGFwdGVyKSA/XG4gICAgICAgICAgYEFkYXB0ZXIgJyR7bmFtZU9yQWRhcHRlcn0nIGlzIG5vdCBhdmFpbGFibGUgaW4gdGhlIGJ1aWxkYCA6XG4gICAgICAgICAgYFVua25vd24gYWRhcHRlciAnJHtuYW1lT3JBZGFwdGVyfSdgXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICghdXRpbHMuaXNGdW5jdGlvbihhZGFwdGVyKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignYWRhcHRlciBpcyBub3QgYSBmdW5jdGlvbicpO1xuICAgIH1cblxuICAgIHJldHVybiBhZGFwdGVyO1xuICB9LFxuICBhZGFwdGVyczoga25vd25BZGFwdGVyc1xufVxuIiwiLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHN0cmljdFxuZXhwb3J0IGRlZmF1bHQgbnVsbDtcbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi9BeGlvc0Vycm9yLmpzJztcblxuLyoqXG4gKiBSZXNvbHZlIG9yIHJlamVjdCBhIFByb21pc2UgYmFzZWQgb24gcmVzcG9uc2Ugc3RhdHVzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlc29sdmUgQSBmdW5jdGlvbiB0aGF0IHJlc29sdmVzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcmVqZWN0IEEgZnVuY3Rpb24gdGhhdCByZWplY3RzIHRoZSBwcm9taXNlLlxuICogQHBhcmFtIHtvYmplY3R9IHJlc3BvbnNlIFRoZSByZXNwb25zZS5cbiAqXG4gKiBAcmV0dXJucyB7b2JqZWN0fSBUaGUgcmVzcG9uc2UuXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHJlc3BvbnNlKSB7XG4gIGNvbnN0IHZhbGlkYXRlU3RhdHVzID0gcmVzcG9uc2UuY29uZmlnLnZhbGlkYXRlU3RhdHVzO1xuICBpZiAoIXJlc3BvbnNlLnN0YXR1cyB8fCAhdmFsaWRhdGVTdGF0dXMgfHwgdmFsaWRhdGVTdGF0dXMocmVzcG9uc2Uuc3RhdHVzKSkge1xuICAgIHJlc29sdmUocmVzcG9uc2UpO1xuICB9IGVsc2Uge1xuICAgIHJlamVjdChuZXcgQXhpb3NFcnJvcihcbiAgICAgICdSZXF1ZXN0IGZhaWxlZCB3aXRoIHN0YXR1cyBjb2RlICcgKyByZXNwb25zZS5zdGF0dXMsXG4gICAgICBbQXhpb3NFcnJvci5FUlJfQkFEX1JFUVVFU1QsIEF4aW9zRXJyb3IuRVJSX0JBRF9SRVNQT05TRV1bTWF0aC5mbG9vcihyZXNwb25zZS5zdGF0dXMgLyAxMDApIC0gNF0sXG4gICAgICByZXNwb25zZS5jb25maWcsXG4gICAgICByZXNwb25zZS5yZXF1ZXN0LFxuICAgICAgcmVzcG9uc2VcbiAgICApKTtcbiAgfVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwYXJzZVByb3RvY29sKHVybCkge1xuICBjb25zdCBtYXRjaCA9IC9eKFstK1xcd117MSwyNX0pKDo/XFwvXFwvfDopLy5leGVjKHVybCk7XG4gIHJldHVybiBtYXRjaCAmJiBtYXRjaFsxXSB8fCAnJztcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IHRyYW5zZm9ybURhdGEgZnJvbSAnLi90cmFuc2Zvcm1EYXRhLmpzJztcbmltcG9ydCBpc0NhbmNlbCBmcm9tICcuLi9jYW5jZWwvaXNDYW5jZWwuanMnO1xuaW1wb3J0IGRlZmF1bHRzIGZyb20gJy4uL2RlZmF1bHRzL2luZGV4LmpzJztcbmltcG9ydCBDYW5jZWxlZEVycm9yIGZyb20gJy4uL2NhbmNlbC9DYW5jZWxlZEVycm9yLmpzJztcbmltcG9ydCBBeGlvc0hlYWRlcnMgZnJvbSAnLi4vY29yZS9BeGlvc0hlYWRlcnMuanMnO1xuaW1wb3J0IGFkYXB0ZXJzIGZyb20gXCIuLi9hZGFwdGVycy9hZGFwdGVycy5qc1wiO1xuXG4vKipcbiAqIFRocm93cyBhIGBDYW5jZWxlZEVycm9yYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcgVGhlIGNvbmZpZyB0aGF0IGlzIHRvIGJlIHVzZWQgZm9yIHRoZSByZXF1ZXN0XG4gKlxuICogQHJldHVybnMge3ZvaWR9XG4gKi9cbmZ1bmN0aW9uIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKSB7XG4gIGlmIChjb25maWcuY2FuY2VsVG9rZW4pIHtcbiAgICBjb25maWcuY2FuY2VsVG9rZW4udGhyb3dJZlJlcXVlc3RlZCgpO1xuICB9XG5cbiAgaWYgKGNvbmZpZy5zaWduYWwgJiYgY29uZmlnLnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgdGhyb3cgbmV3IENhbmNlbGVkRXJyb3IobnVsbCwgY29uZmlnKTtcbiAgfVxufVxuXG4vKipcbiAqIERpc3BhdGNoIGEgcmVxdWVzdCB0byB0aGUgc2VydmVyIHVzaW5nIHRoZSBjb25maWd1cmVkIGFkYXB0ZXIuXG4gKlxuICogQHBhcmFtIHtvYmplY3R9IGNvbmZpZyBUaGUgY29uZmlnIHRoYXQgaXMgdG8gYmUgdXNlZCBmb3IgdGhlIHJlcXVlc3RcbiAqXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgdG8gYmUgZnVsZmlsbGVkXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRpc3BhdGNoUmVxdWVzdChjb25maWcpIHtcbiAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gIGNvbmZpZy5oZWFkZXJzID0gQXhpb3NIZWFkZXJzLmZyb20oY29uZmlnLmhlYWRlcnMpO1xuXG4gIC8vIFRyYW5zZm9ybSByZXF1ZXN0IGRhdGFcbiAgY29uZmlnLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgY29uZmlnLFxuICAgIGNvbmZpZy50cmFuc2Zvcm1SZXF1ZXN0XG4gICk7XG5cbiAgaWYgKFsncG9zdCcsICdwdXQnLCAncGF0Y2gnXS5pbmRleE9mKGNvbmZpZy5tZXRob2QpICE9PSAtMSkge1xuICAgIGNvbmZpZy5oZWFkZXJzLnNldENvbnRlbnRUeXBlKCdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnLCBmYWxzZSk7XG4gIH1cblxuICBjb25zdCBhZGFwdGVyID0gYWRhcHRlcnMuZ2V0QWRhcHRlcihjb25maWcuYWRhcHRlciB8fCBkZWZhdWx0cy5hZGFwdGVyKTtcblxuICByZXR1cm4gYWRhcHRlcihjb25maWcpLnRoZW4oZnVuY3Rpb24gb25BZGFwdGVyUmVzb2x1dGlvbihyZXNwb25zZSkge1xuICAgIHRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQoY29uZmlnKTtcblxuICAgIC8vIFRyYW5zZm9ybSByZXNwb25zZSBkYXRhXG4gICAgcmVzcG9uc2UuZGF0YSA9IHRyYW5zZm9ybURhdGEuY2FsbChcbiAgICAgIGNvbmZpZyxcbiAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZSxcbiAgICAgIHJlc3BvbnNlXG4gICAgKTtcblxuICAgIHJlc3BvbnNlLmhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuZnJvbShyZXNwb25zZS5oZWFkZXJzKTtcblxuICAgIHJldHVybiByZXNwb25zZTtcbiAgfSwgZnVuY3Rpb24gb25BZGFwdGVyUmVqZWN0aW9uKHJlYXNvbikge1xuICAgIGlmICghaXNDYW5jZWwocmVhc29uKSkge1xuICAgICAgdGhyb3dJZkNhbmNlbGxhdGlvblJlcXVlc3RlZChjb25maWcpO1xuXG4gICAgICAvLyBUcmFuc2Zvcm0gcmVzcG9uc2UgZGF0YVxuICAgICAgaWYgKHJlYXNvbiAmJiByZWFzb24ucmVzcG9uc2UpIHtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmRhdGEgPSB0cmFuc2Zvcm1EYXRhLmNhbGwoXG4gICAgICAgICAgY29uZmlnLFxuICAgICAgICAgIGNvbmZpZy50cmFuc2Zvcm1SZXNwb25zZSxcbiAgICAgICAgICByZWFzb24ucmVzcG9uc2VcbiAgICAgICAgKTtcbiAgICAgICAgcmVhc29uLnJlc3BvbnNlLmhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuZnJvbShyZWFzb24ucmVzcG9uc2UuaGVhZGVycyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVqZWN0KHJlYXNvbik7XG4gIH0pO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi4vdXRpbHMuanMnO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tIFwiLi9BeGlvc0hlYWRlcnMuanNcIjtcblxuY29uc3QgaGVhZGVyc1RvT2JqZWN0ID0gKHRoaW5nKSA9PiB0aGluZyBpbnN0YW5jZW9mIEF4aW9zSGVhZGVycyA/IHRoaW5nLnRvSlNPTigpIDogdGhpbmc7XG5cbi8qKlxuICogQ29uZmlnLXNwZWNpZmljIG1lcmdlLWZ1bmN0aW9uIHdoaWNoIGNyZWF0ZXMgYSBuZXcgY29uZmlnLW9iamVjdFxuICogYnkgbWVyZ2luZyB0d28gY29uZmlndXJhdGlvbiBvYmplY3RzIHRvZ2V0aGVyLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWcxXG4gKiBAcGFyYW0ge09iamVjdH0gY29uZmlnMlxuICpcbiAqIEByZXR1cm5zIHtPYmplY3R9IE5ldyBvYmplY3QgcmVzdWx0aW5nIGZyb20gbWVyZ2luZyBjb25maWcyIHRvIGNvbmZpZzFcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWVyZ2VDb25maWcoY29uZmlnMSwgY29uZmlnMikge1xuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgY29uZmlnMiA9IGNvbmZpZzIgfHwge307XG4gIGNvbnN0IGNvbmZpZyA9IHt9O1xuXG4gIGZ1bmN0aW9uIGdldE1lcmdlZFZhbHVlKHRhcmdldCwgc291cmNlLCBjYXNlbGVzcykge1xuICAgIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHRhcmdldCkgJiYgdXRpbHMuaXNQbGFpbk9iamVjdChzb3VyY2UpKSB7XG4gICAgICByZXR1cm4gdXRpbHMubWVyZ2UuY2FsbCh7Y2FzZWxlc3N9LCB0YXJnZXQsIHNvdXJjZSk7XG4gICAgfSBlbHNlIGlmICh1dGlscy5pc1BsYWluT2JqZWN0KHNvdXJjZSkpIHtcbiAgICAgIHJldHVybiB1dGlscy5tZXJnZSh7fSwgc291cmNlKTtcbiAgICB9IGVsc2UgaWYgKHV0aWxzLmlzQXJyYXkoc291cmNlKSkge1xuICAgICAgcmV0dXJuIHNvdXJjZS5zbGljZSgpO1xuICAgIH1cbiAgICByZXR1cm4gc291cmNlO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIG1lcmdlRGVlcFByb3BlcnRpZXMoYSwgYiwgY2FzZWxlc3MpIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGIpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUoYSwgYiwgY2FzZWxlc3MpO1xuICAgIH0gZWxzZSBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGEpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBhLCBjYXNlbGVzcyk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIHZhbHVlRnJvbUNvbmZpZzIoYSwgYikge1xuICAgIGlmICghdXRpbHMuaXNVbmRlZmluZWQoYikpIHtcbiAgICAgIHJldHVybiBnZXRNZXJnZWRWYWx1ZSh1bmRlZmluZWQsIGIpO1xuICAgIH1cbiAgfVxuXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb25zaXN0ZW50LXJldHVyblxuICBmdW5jdGlvbiBkZWZhdWx0VG9Db25maWcyKGEsIGIpIHtcbiAgICBpZiAoIXV0aWxzLmlzVW5kZWZpbmVkKGIpKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBiKTtcbiAgICB9IGVsc2UgaWYgKCF1dGlscy5pc1VuZGVmaW5lZChhKSkge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKHVuZGVmaW5lZCwgYSk7XG4gICAgfVxuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGNvbnNpc3RlbnQtcmV0dXJuXG4gIGZ1bmN0aW9uIG1lcmdlRGlyZWN0S2V5cyhhLCBiLCBwcm9wKSB7XG4gICAgaWYgKHByb3AgaW4gY29uZmlnMikge1xuICAgICAgcmV0dXJuIGdldE1lcmdlZFZhbHVlKGEsIGIpO1xuICAgIH0gZWxzZSBpZiAocHJvcCBpbiBjb25maWcxKSB7XG4gICAgICByZXR1cm4gZ2V0TWVyZ2VkVmFsdWUodW5kZWZpbmVkLCBhKTtcbiAgICB9XG4gIH1cblxuICBjb25zdCBtZXJnZU1hcCA9IHtcbiAgICB1cmw6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgbWV0aG9kOiB2YWx1ZUZyb21Db25maWcyLFxuICAgIGRhdGE6IHZhbHVlRnJvbUNvbmZpZzIsXG4gICAgYmFzZVVSTDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0cmFuc2Zvcm1SZXF1ZXN0OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHRyYW5zZm9ybVJlc3BvbnNlOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHBhcmFtc1NlcmlhbGl6ZXI6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdGltZW91dDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB0aW1lb3V0TWVzc2FnZTogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB3aXRoQ3JlZGVudGlhbHM6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgYWRhcHRlcjogZGVmYXVsdFRvQ29uZmlnMixcbiAgICByZXNwb25zZVR5cGU6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgeHNyZkNvb2tpZU5hbWU6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgeHNyZkhlYWRlck5hbWU6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgb25VcGxvYWRQcm9ncmVzczogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBvbkRvd25sb2FkUHJvZ3Jlc3M6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgZGVjb21wcmVzczogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBtYXhDb250ZW50TGVuZ3RoOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIG1heEJvZHlMZW5ndGg6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgYmVmb3JlUmVkaXJlY3Q6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgdHJhbnNwb3J0OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGh0dHBBZ2VudDogZGVmYXVsdFRvQ29uZmlnMixcbiAgICBodHRwc0FnZW50OiBkZWZhdWx0VG9Db25maWcyLFxuICAgIGNhbmNlbFRva2VuOiBkZWZhdWx0VG9Db25maWcyLFxuICAgIHNvY2tldFBhdGg6IGRlZmF1bHRUb0NvbmZpZzIsXG4gICAgcmVzcG9uc2VFbmNvZGluZzogZGVmYXVsdFRvQ29uZmlnMixcbiAgICB2YWxpZGF0ZVN0YXR1czogbWVyZ2VEaXJlY3RLZXlzLFxuICAgIGhlYWRlcnM6IChhLCBiKSA9PiBtZXJnZURlZXBQcm9wZXJ0aWVzKGhlYWRlcnNUb09iamVjdChhKSwgaGVhZGVyc1RvT2JqZWN0KGIpLCB0cnVlKVxuICB9O1xuXG4gIHV0aWxzLmZvckVhY2goT2JqZWN0LmtleXMoY29uZmlnMSkuY29uY2F0KE9iamVjdC5rZXlzKGNvbmZpZzIpKSwgZnVuY3Rpb24gY29tcHV0ZUNvbmZpZ1ZhbHVlKHByb3ApIHtcbiAgICBjb25zdCBtZXJnZSA9IG1lcmdlTWFwW3Byb3BdIHx8IG1lcmdlRGVlcFByb3BlcnRpZXM7XG4gICAgY29uc3QgY29uZmlnVmFsdWUgPSBtZXJnZShjb25maWcxW3Byb3BdLCBjb25maWcyW3Byb3BdLCBwcm9wKTtcbiAgICAodXRpbHMuaXNVbmRlZmluZWQoY29uZmlnVmFsdWUpICYmIG1lcmdlICE9PSBtZXJnZURpcmVjdEtleXMpIHx8IChjb25maWdbcHJvcF0gPSBjb25maWdWYWx1ZSk7XG4gIH0pO1xuXG4gIHJldHVybiBjb25maWc7XG59XG4iLCJleHBvcnQgY29uc3QgVkVSU0lPTiA9IFwiMS4zLjNcIjsiLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB7VkVSU0lPTn0gZnJvbSAnLi4vZW52L2RhdGEuanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi4vY29yZS9BeGlvc0Vycm9yLmpzJztcblxuY29uc3QgdmFsaWRhdG9ycyA9IHt9O1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuWydvYmplY3QnLCAnYm9vbGVhbicsICdudW1iZXInLCAnZnVuY3Rpb24nLCAnc3RyaW5nJywgJ3N5bWJvbCddLmZvckVhY2goKHR5cGUsIGkpID0+IHtcbiAgdmFsaWRhdG9yc1t0eXBlXSA9IGZ1bmN0aW9uIHZhbGlkYXRvcih0aGluZykge1xuICAgIHJldHVybiB0eXBlb2YgdGhpbmcgPT09IHR5cGUgfHwgJ2EnICsgKGkgPCAxID8gJ24gJyA6ICcgJykgKyB0eXBlO1xuICB9O1xufSk7XG5cbmNvbnN0IGRlcHJlY2F0ZWRXYXJuaW5ncyA9IHt9O1xuXG4vKipcbiAqIFRyYW5zaXRpb25hbCBvcHRpb24gdmFsaWRhdG9yXG4gKlxuICogQHBhcmFtIHtmdW5jdGlvbnxib29sZWFuP30gdmFsaWRhdG9yIC0gc2V0IHRvIGZhbHNlIGlmIHRoZSB0cmFuc2l0aW9uYWwgb3B0aW9uIGhhcyBiZWVuIHJlbW92ZWRcbiAqIEBwYXJhbSB7c3RyaW5nP30gdmVyc2lvbiAtIGRlcHJlY2F0ZWQgdmVyc2lvbiAvIHJlbW92ZWQgc2luY2UgdmVyc2lvblxuICogQHBhcmFtIHtzdHJpbmc/fSBtZXNzYWdlIC0gc29tZSBtZXNzYWdlIHdpdGggYWRkaXRpb25hbCBpbmZvXG4gKlxuICogQHJldHVybnMge2Z1bmN0aW9ufVxuICovXG52YWxpZGF0b3JzLnRyYW5zaXRpb25hbCA9IGZ1bmN0aW9uIHRyYW5zaXRpb25hbCh2YWxpZGF0b3IsIHZlcnNpb24sIG1lc3NhZ2UpIHtcbiAgZnVuY3Rpb24gZm9ybWF0TWVzc2FnZShvcHQsIGRlc2MpIHtcbiAgICByZXR1cm4gJ1tBeGlvcyB2JyArIFZFUlNJT04gKyAnXSBUcmFuc2l0aW9uYWwgb3B0aW9uIFxcJycgKyBvcHQgKyAnXFwnJyArIGRlc2MgKyAobWVzc2FnZSA/ICcuICcgKyBtZXNzYWdlIDogJycpO1xuICB9XG5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgcmV0dXJuICh2YWx1ZSwgb3B0LCBvcHRzKSA9PiB7XG4gICAgaWYgKHZhbGlkYXRvciA9PT0gZmFsc2UpIHtcbiAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKFxuICAgICAgICBmb3JtYXRNZXNzYWdlKG9wdCwgJyBoYXMgYmVlbiByZW1vdmVkJyArICh2ZXJzaW9uID8gJyBpbiAnICsgdmVyc2lvbiA6ICcnKSksXG4gICAgICAgIEF4aW9zRXJyb3IuRVJSX0RFUFJFQ0FURURcbiAgICAgICk7XG4gICAgfVxuXG4gICAgaWYgKHZlcnNpb24gJiYgIWRlcHJlY2F0ZWRXYXJuaW5nc1tvcHRdKSB7XG4gICAgICBkZXByZWNhdGVkV2FybmluZ3Nbb3B0XSA9IHRydWU7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICBmb3JtYXRNZXNzYWdlKFxuICAgICAgICAgIG9wdCxcbiAgICAgICAgICAnIGhhcyBiZWVuIGRlcHJlY2F0ZWQgc2luY2UgdicgKyB2ZXJzaW9uICsgJyBhbmQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZWFyIGZ1dHVyZSdcbiAgICAgICAgKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsaWRhdG9yID8gdmFsaWRhdG9yKHZhbHVlLCBvcHQsIG9wdHMpIDogdHJ1ZTtcbiAgfTtcbn07XG5cbi8qKlxuICogQXNzZXJ0IG9iamVjdCdzIHByb3BlcnRpZXMgdHlwZVxuICpcbiAqIEBwYXJhbSB7b2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0ge29iamVjdH0gc2NoZW1hXG4gKiBAcGFyYW0ge2Jvb2xlYW4/fSBhbGxvd1Vua25vd25cbiAqXG4gKiBAcmV0dXJucyB7b2JqZWN0fVxuICovXG5cbmZ1bmN0aW9uIGFzc2VydE9wdGlvbnMob3B0aW9ucywgc2NoZW1hLCBhbGxvd1Vua25vd24pIHtcbiAgaWYgKHR5cGVvZiBvcHRpb25zICE9PSAnb2JqZWN0Jykge1xuICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdvcHRpb25zIG11c3QgYmUgYW4gb2JqZWN0JywgQXhpb3NFcnJvci5FUlJfQkFEX09QVElPTl9WQUxVRSk7XG4gIH1cbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9wdGlvbnMpO1xuICBsZXQgaSA9IGtleXMubGVuZ3RoO1xuICB3aGlsZSAoaS0tID4gMCkge1xuICAgIGNvbnN0IG9wdCA9IGtleXNbaV07XG4gICAgY29uc3QgdmFsaWRhdG9yID0gc2NoZW1hW29wdF07XG4gICAgaWYgKHZhbGlkYXRvcikge1xuICAgICAgY29uc3QgdmFsdWUgPSBvcHRpb25zW29wdF07XG4gICAgICBjb25zdCByZXN1bHQgPSB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHZhbGlkYXRvcih2YWx1ZSwgb3B0LCBvcHRpb25zKTtcbiAgICAgIGlmIChyZXN1bHQgIT09IHRydWUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEF4aW9zRXJyb3IoJ29wdGlvbiAnICsgb3B0ICsgJyBtdXN0IGJlICcgKyByZXN1bHQsIEF4aW9zRXJyb3IuRVJSX0JBRF9PUFRJT05fVkFMVUUpO1xuICAgICAgfVxuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIGlmIChhbGxvd1Vua25vd24gIT09IHRydWUpIHtcbiAgICAgIHRocm93IG5ldyBBeGlvc0Vycm9yKCdVbmtub3duIG9wdGlvbiAnICsgb3B0LCBBeGlvc0Vycm9yLkVSUl9CQURfT1BUSU9OKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQge1xuICBhc3NlcnRPcHRpb25zLFxuICB2YWxpZGF0b3JzXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgdXRpbHMgZnJvbSAnLi8uLi91dGlscy5qcyc7XG5pbXBvcnQgYnVpbGRVUkwgZnJvbSAnLi4vaGVscGVycy9idWlsZFVSTC5qcyc7XG5pbXBvcnQgSW50ZXJjZXB0b3JNYW5hZ2VyIGZyb20gJy4vSW50ZXJjZXB0b3JNYW5hZ2VyLmpzJztcbmltcG9ydCBkaXNwYXRjaFJlcXVlc3QgZnJvbSAnLi9kaXNwYXRjaFJlcXVlc3QuanMnO1xuaW1wb3J0IG1lcmdlQ29uZmlnIGZyb20gJy4vbWVyZ2VDb25maWcuanMnO1xuaW1wb3J0IGJ1aWxkRnVsbFBhdGggZnJvbSAnLi9idWlsZEZ1bGxQYXRoLmpzJztcbmltcG9ydCB2YWxpZGF0b3IgZnJvbSAnLi4vaGVscGVycy92YWxpZGF0b3IuanMnO1xuaW1wb3J0IEF4aW9zSGVhZGVycyBmcm9tICcuL0F4aW9zSGVhZGVycy5qcyc7XG5cbmNvbnN0IHZhbGlkYXRvcnMgPSB2YWxpZGF0b3IudmFsaWRhdG9ycztcblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gaW5zdGFuY2VDb25maWcgVGhlIGRlZmF1bHQgY29uZmlnIGZvciB0aGUgaW5zdGFuY2VcbiAqXG4gKiBAcmV0dXJuIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuY2xhc3MgQXhpb3Mge1xuICBjb25zdHJ1Y3RvcihpbnN0YW5jZUNvbmZpZykge1xuICAgIHRoaXMuZGVmYXVsdHMgPSBpbnN0YW5jZUNvbmZpZztcbiAgICB0aGlzLmludGVyY2VwdG9ycyA9IHtcbiAgICAgIHJlcXVlc3Q6IG5ldyBJbnRlcmNlcHRvck1hbmFnZXIoKSxcbiAgICAgIHJlc3BvbnNlOiBuZXcgSW50ZXJjZXB0b3JNYW5hZ2VyKClcbiAgICB9O1xuICB9XG5cbiAgLyoqXG4gICAqIERpc3BhdGNoIGEgcmVxdWVzdFxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ3xPYmplY3R9IGNvbmZpZ09yVXJsIFRoZSBjb25maWcgc3BlY2lmaWMgZm9yIHRoaXMgcmVxdWVzdCAobWVyZ2VkIHdpdGggdGhpcy5kZWZhdWx0cylcbiAgICogQHBhcmFtIHs/T2JqZWN0fSBjb25maWdcbiAgICpcbiAgICogQHJldHVybnMge1Byb21pc2V9IFRoZSBQcm9taXNlIHRvIGJlIGZ1bGZpbGxlZFxuICAgKi9cbiAgcmVxdWVzdChjb25maWdPclVybCwgY29uZmlnKSB7XG4gICAgLyplc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246MCovXG4gICAgLy8gQWxsb3cgZm9yIGF4aW9zKCdleGFtcGxlL3VybCdbLCBjb25maWddKSBhIGxhIGZldGNoIEFQSVxuICAgIGlmICh0eXBlb2YgY29uZmlnT3JVcmwgPT09ICdzdHJpbmcnKSB7XG4gICAgICBjb25maWcgPSBjb25maWcgfHwge307XG4gICAgICBjb25maWcudXJsID0gY29uZmlnT3JVcmw7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbmZpZyA9IGNvbmZpZ09yVXJsIHx8IHt9O1xuICAgIH1cblxuICAgIGNvbmZpZyA9IG1lcmdlQ29uZmlnKHRoaXMuZGVmYXVsdHMsIGNvbmZpZyk7XG5cbiAgICBjb25zdCB7dHJhbnNpdGlvbmFsLCBwYXJhbXNTZXJpYWxpemVyLCBoZWFkZXJzfSA9IGNvbmZpZztcblxuICAgIGlmICh0cmFuc2l0aW9uYWwgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFsaWRhdG9yLmFzc2VydE9wdGlvbnModHJhbnNpdGlvbmFsLCB7XG4gICAgICAgIHNpbGVudEpTT05QYXJzaW5nOiB2YWxpZGF0b3JzLnRyYW5zaXRpb25hbCh2YWxpZGF0b3JzLmJvb2xlYW4pLFxuICAgICAgICBmb3JjZWRKU09OUGFyc2luZzogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuKSxcbiAgICAgICAgY2xhcmlmeVRpbWVvdXRFcnJvcjogdmFsaWRhdG9ycy50cmFuc2l0aW9uYWwodmFsaWRhdG9ycy5ib29sZWFuKVxuICAgICAgfSwgZmFsc2UpO1xuICAgIH1cblxuICAgIGlmIChwYXJhbXNTZXJpYWxpemVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhbGlkYXRvci5hc3NlcnRPcHRpb25zKHBhcmFtc1NlcmlhbGl6ZXIsIHtcbiAgICAgICAgZW5jb2RlOiB2YWxpZGF0b3JzLmZ1bmN0aW9uLFxuICAgICAgICBzZXJpYWxpemU6IHZhbGlkYXRvcnMuZnVuY3Rpb25cbiAgICAgIH0sIHRydWUpO1xuICAgIH1cblxuICAgIC8vIFNldCBjb25maWcubWV0aG9kXG4gICAgY29uZmlnLm1ldGhvZCA9IChjb25maWcubWV0aG9kIHx8IHRoaXMuZGVmYXVsdHMubWV0aG9kIHx8ICdnZXQnKS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgbGV0IGNvbnRleHRIZWFkZXJzO1xuXG4gICAgLy8gRmxhdHRlbiBoZWFkZXJzXG4gICAgY29udGV4dEhlYWRlcnMgPSBoZWFkZXJzICYmIHV0aWxzLm1lcmdlKFxuICAgICAgaGVhZGVycy5jb21tb24sXG4gICAgICBoZWFkZXJzW2NvbmZpZy5tZXRob2RdXG4gICAgKTtcblxuICAgIGNvbnRleHRIZWFkZXJzICYmIHV0aWxzLmZvckVhY2goXG4gICAgICBbJ2RlbGV0ZScsICdnZXQnLCAnaGVhZCcsICdwb3N0JywgJ3B1dCcsICdwYXRjaCcsICdjb21tb24nXSxcbiAgICAgIChtZXRob2QpID0+IHtcbiAgICAgICAgZGVsZXRlIGhlYWRlcnNbbWV0aG9kXTtcbiAgICAgIH1cbiAgICApO1xuXG4gICAgY29uZmlnLmhlYWRlcnMgPSBBeGlvc0hlYWRlcnMuY29uY2F0KGNvbnRleHRIZWFkZXJzLCBoZWFkZXJzKTtcblxuICAgIC8vIGZpbHRlciBvdXQgc2tpcHBlZCBpbnRlcmNlcHRvcnNcbiAgICBjb25zdCByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbiA9IFtdO1xuICAgIGxldCBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgPSB0cnVlO1xuICAgIHRoaXMuaW50ZXJjZXB0b3JzLnJlcXVlc3QuZm9yRWFjaChmdW5jdGlvbiB1bnNoaWZ0UmVxdWVzdEludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgICAgaWYgKHR5cGVvZiBpbnRlcmNlcHRvci5ydW5XaGVuID09PSAnZnVuY3Rpb24nICYmIGludGVyY2VwdG9yLnJ1bldoZW4oY29uZmlnKSA9PT0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgPSBzeW5jaHJvbm91c1JlcXVlc3RJbnRlcmNlcHRvcnMgJiYgaW50ZXJjZXB0b3Iuc3luY2hyb25vdXM7XG5cbiAgICAgIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluLnVuc2hpZnQoaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gICAgfSk7XG5cbiAgICBjb25zdCByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4gPSBbXTtcbiAgICB0aGlzLmludGVyY2VwdG9ycy5yZXNwb25zZS5mb3JFYWNoKGZ1bmN0aW9uIHB1c2hSZXNwb25zZUludGVyY2VwdG9ycyhpbnRlcmNlcHRvcikge1xuICAgICAgcmVzcG9uc2VJbnRlcmNlcHRvckNoYWluLnB1c2goaW50ZXJjZXB0b3IuZnVsZmlsbGVkLCBpbnRlcmNlcHRvci5yZWplY3RlZCk7XG4gICAgfSk7XG5cbiAgICBsZXQgcHJvbWlzZTtcbiAgICBsZXQgaSA9IDA7XG4gICAgbGV0IGxlbjtcblxuICAgIGlmICghc3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzKSB7XG4gICAgICBjb25zdCBjaGFpbiA9IFtkaXNwYXRjaFJlcXVlc3QuYmluZCh0aGlzKSwgdW5kZWZpbmVkXTtcbiAgICAgIGNoYWluLnVuc2hpZnQuYXBwbHkoY2hhaW4sIHJlcXVlc3RJbnRlcmNlcHRvckNoYWluKTtcbiAgICAgIGNoYWluLnB1c2guYXBwbHkoY2hhaW4sIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbik7XG4gICAgICBsZW4gPSBjaGFpbi5sZW5ndGg7XG5cbiAgICAgIHByb21pc2UgPSBQcm9taXNlLnJlc29sdmUoY29uZmlnKTtcblxuICAgICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgICAgcHJvbWlzZSA9IHByb21pc2UudGhlbihjaGFpbltpKytdLCBjaGFpbltpKytdKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfVxuXG4gICAgbGVuID0gcmVxdWVzdEludGVyY2VwdG9yQ2hhaW4ubGVuZ3RoO1xuXG4gICAgbGV0IG5ld0NvbmZpZyA9IGNvbmZpZztcblxuICAgIGkgPSAwO1xuXG4gICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgIGNvbnN0IG9uRnVsZmlsbGVkID0gcmVxdWVzdEludGVyY2VwdG9yQ2hhaW5baSsrXTtcbiAgICAgIGNvbnN0IG9uUmVqZWN0ZWQgPSByZXF1ZXN0SW50ZXJjZXB0b3JDaGFpbltpKytdO1xuICAgICAgdHJ5IHtcbiAgICAgICAgbmV3Q29uZmlnID0gb25GdWxmaWxsZWQobmV3Q29uZmlnKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIG9uUmVqZWN0ZWQuY2FsbCh0aGlzLCBlcnJvcik7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBwcm9taXNlID0gZGlzcGF0Y2hSZXF1ZXN0LmNhbGwodGhpcywgbmV3Q29uZmlnKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGVycm9yKTtcbiAgICB9XG5cbiAgICBpID0gMDtcbiAgICBsZW4gPSByZXNwb25zZUludGVyY2VwdG9yQ2hhaW4ubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGkgPCBsZW4pIHtcbiAgICAgIHByb21pc2UgPSBwcm9taXNlLnRoZW4ocmVzcG9uc2VJbnRlcmNlcHRvckNoYWluW2krK10sIHJlc3BvbnNlSW50ZXJjZXB0b3JDaGFpbltpKytdKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG4gIGdldFVyaShjb25maWcpIHtcbiAgICBjb25maWcgPSBtZXJnZUNvbmZpZyh0aGlzLmRlZmF1bHRzLCBjb25maWcpO1xuICAgIGNvbnN0IGZ1bGxQYXRoID0gYnVpbGRGdWxsUGF0aChjb25maWcuYmFzZVVSTCwgY29uZmlnLnVybCk7XG4gICAgcmV0dXJuIGJ1aWxkVVJMKGZ1bGxQYXRoLCBjb25maWcucGFyYW1zLCBjb25maWcucGFyYW1zU2VyaWFsaXplcik7XG4gIH1cbn1cblxuLy8gUHJvdmlkZSBhbGlhc2VzIGZvciBzdXBwb3J0ZWQgcmVxdWVzdCBtZXRob2RzXG51dGlscy5mb3JFYWNoKFsnZGVsZXRlJywgJ2dldCcsICdoZWFkJywgJ29wdGlvbnMnXSwgZnVuY3Rpb24gZm9yRWFjaE1ldGhvZE5vRGF0YShtZXRob2QpIHtcbiAgLyplc2xpbnQgZnVuYy1uYW1lczowKi9cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZF0gPSBmdW5jdGlvbih1cmwsIGNvbmZpZykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3QobWVyZ2VDb25maWcoY29uZmlnIHx8IHt9LCB7XG4gICAgICBtZXRob2QsXG4gICAgICB1cmwsXG4gICAgICBkYXRhOiAoY29uZmlnIHx8IHt9KS5kYXRhXG4gICAgfSkpO1xuICB9O1xufSk7XG5cbnV0aWxzLmZvckVhY2goWydwb3N0JywgJ3B1dCcsICdwYXRjaCddLCBmdW5jdGlvbiBmb3JFYWNoTWV0aG9kV2l0aERhdGEobWV0aG9kKSB7XG4gIC8qZXNsaW50IGZ1bmMtbmFtZXM6MCovXG5cbiAgZnVuY3Rpb24gZ2VuZXJhdGVIVFRQTWV0aG9kKGlzRm9ybSkge1xuICAgIHJldHVybiBmdW5jdGlvbiBodHRwTWV0aG9kKHVybCwgZGF0YSwgY29uZmlnKSB7XG4gICAgICByZXR1cm4gdGhpcy5yZXF1ZXN0KG1lcmdlQ29uZmlnKGNvbmZpZyB8fCB7fSwge1xuICAgICAgICBtZXRob2QsXG4gICAgICAgIGhlYWRlcnM6IGlzRm9ybSA/IHtcbiAgICAgICAgICAnQ29udGVudC1UeXBlJzogJ211bHRpcGFydC9mb3JtLWRhdGEnXG4gICAgICAgIH0gOiB7fSxcbiAgICAgICAgdXJsLFxuICAgICAgICBkYXRhXG4gICAgICB9KSk7XG4gICAgfTtcbiAgfVxuXG4gIEF4aW9zLnByb3RvdHlwZVttZXRob2RdID0gZ2VuZXJhdGVIVFRQTWV0aG9kKCk7XG5cbiAgQXhpb3MucHJvdG90eXBlW21ldGhvZCArICdGb3JtJ10gPSBnZW5lcmF0ZUhUVFBNZXRob2QodHJ1ZSk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgQXhpb3M7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBDYW5jZWxlZEVycm9yIGZyb20gJy4vQ2FuY2VsZWRFcnJvci5qcyc7XG5cbi8qKlxuICogQSBgQ2FuY2VsVG9rZW5gIGlzIGFuIG9iamVjdCB0aGF0IGNhbiBiZSB1c2VkIHRvIHJlcXVlc3QgY2FuY2VsbGF0aW9uIG9mIGFuIG9wZXJhdGlvbi5cbiAqXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBleGVjdXRvciBUaGUgZXhlY3V0b3IgZnVuY3Rpb24uXG4gKlxuICogQHJldHVybnMge0NhbmNlbFRva2VufVxuICovXG5jbGFzcyBDYW5jZWxUb2tlbiB7XG4gIGNvbnN0cnVjdG9yKGV4ZWN1dG9yKSB7XG4gICAgaWYgKHR5cGVvZiBleGVjdXRvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignZXhlY3V0b3IgbXVzdCBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIGxldCByZXNvbHZlUHJvbWlzZTtcblxuICAgIHRoaXMucHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIHByb21pc2VFeGVjdXRvcihyZXNvbHZlKSB7XG4gICAgICByZXNvbHZlUHJvbWlzZSA9IHJlc29sdmU7XG4gICAgfSk7XG5cbiAgICBjb25zdCB0b2tlbiA9IHRoaXM7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgIHRoaXMucHJvbWlzZS50aGVuKGNhbmNlbCA9PiB7XG4gICAgICBpZiAoIXRva2VuLl9saXN0ZW5lcnMpIHJldHVybjtcblxuICAgICAgbGV0IGkgPSB0b2tlbi5fbGlzdGVuZXJzLmxlbmd0aDtcblxuICAgICAgd2hpbGUgKGktLSA+IDApIHtcbiAgICAgICAgdG9rZW4uX2xpc3RlbmVyc1tpXShjYW5jZWwpO1xuICAgICAgfVxuICAgICAgdG9rZW4uX2xpc3RlbmVycyA9IG51bGw7XG4gICAgfSk7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xuICAgIHRoaXMucHJvbWlzZS50aGVuID0gb25mdWxmaWxsZWQgPT4ge1xuICAgICAgbGV0IF9yZXNvbHZlO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbiAgICAgIGNvbnN0IHByb21pc2UgPSBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgICAgdG9rZW4uc3Vic2NyaWJlKHJlc29sdmUpO1xuICAgICAgICBfcmVzb2x2ZSA9IHJlc29sdmU7XG4gICAgICB9KS50aGVuKG9uZnVsZmlsbGVkKTtcblxuICAgICAgcHJvbWlzZS5jYW5jZWwgPSBmdW5jdGlvbiByZWplY3QoKSB7XG4gICAgICAgIHRva2VuLnVuc3Vic2NyaWJlKF9yZXNvbHZlKTtcbiAgICAgIH07XG5cbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH07XG5cbiAgICBleGVjdXRvcihmdW5jdGlvbiBjYW5jZWwobWVzc2FnZSwgY29uZmlnLCByZXF1ZXN0KSB7XG4gICAgICBpZiAodG9rZW4ucmVhc29uKSB7XG4gICAgICAgIC8vIENhbmNlbGxhdGlvbiBoYXMgYWxyZWFkeSBiZWVuIHJlcXVlc3RlZFxuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRva2VuLnJlYXNvbiA9IG5ldyBDYW5jZWxlZEVycm9yKG1lc3NhZ2UsIGNvbmZpZywgcmVxdWVzdCk7XG4gICAgICByZXNvbHZlUHJvbWlzZSh0b2tlbi5yZWFzb24pO1xuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFRocm93cyBhIGBDYW5jZWxlZEVycm9yYCBpZiBjYW5jZWxsYXRpb24gaGFzIGJlZW4gcmVxdWVzdGVkLlxuICAgKi9cbiAgdGhyb3dJZlJlcXVlc3RlZCgpIHtcbiAgICBpZiAodGhpcy5yZWFzb24pIHtcbiAgICAgIHRocm93IHRoaXMucmVhc29uO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTdWJzY3JpYmUgdG8gdGhlIGNhbmNlbCBzaWduYWxcbiAgICovXG5cbiAgc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKHRoaXMucmVhc29uKSB7XG4gICAgICBsaXN0ZW5lcih0aGlzLnJlYXNvbik7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2xpc3RlbmVycykge1xuICAgICAgdGhpcy5fbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl9saXN0ZW5lcnMgPSBbbGlzdGVuZXJdO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBVbnN1YnNjcmliZSBmcm9tIHRoZSBjYW5jZWwgc2lnbmFsXG4gICAqL1xuXG4gIHVuc3Vic2NyaWJlKGxpc3RlbmVyKSB7XG4gICAgaWYgKCF0aGlzLl9saXN0ZW5lcnMpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgaW5kZXggPSB0aGlzLl9saXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgdGhpcy5fbGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgYSBuZXcgYENhbmNlbFRva2VuYCBhbmQgYSBmdW5jdGlvbiB0aGF0LCB3aGVuIGNhbGxlZCxcbiAgICogY2FuY2VscyB0aGUgYENhbmNlbFRva2VuYC5cbiAgICovXG4gIHN0YXRpYyBzb3VyY2UoKSB7XG4gICAgbGV0IGNhbmNlbDtcbiAgICBjb25zdCB0b2tlbiA9IG5ldyBDYW5jZWxUb2tlbihmdW5jdGlvbiBleGVjdXRvcihjKSB7XG4gICAgICBjYW5jZWwgPSBjO1xuICAgIH0pO1xuICAgIHJldHVybiB7XG4gICAgICB0b2tlbixcbiAgICAgIGNhbmNlbFxuICAgIH07XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2FuY2VsVG9rZW47XG4iLCJjb25zdCBIdHRwU3RhdHVzQ29kZSA9IHtcbiAgQ29udGludWU6IDEwMCxcbiAgU3dpdGNoaW5nUHJvdG9jb2xzOiAxMDEsXG4gIFByb2Nlc3Npbmc6IDEwMixcbiAgRWFybHlIaW50czogMTAzLFxuICBPazogMjAwLFxuICBDcmVhdGVkOiAyMDEsXG4gIEFjY2VwdGVkOiAyMDIsXG4gIE5vbkF1dGhvcml0YXRpdmVJbmZvcm1hdGlvbjogMjAzLFxuICBOb0NvbnRlbnQ6IDIwNCxcbiAgUmVzZXRDb250ZW50OiAyMDUsXG4gIFBhcnRpYWxDb250ZW50OiAyMDYsXG4gIE11bHRpU3RhdHVzOiAyMDcsXG4gIEFscmVhZHlSZXBvcnRlZDogMjA4LFxuICBJbVVzZWQ6IDIyNixcbiAgTXVsdGlwbGVDaG9pY2VzOiAzMDAsXG4gIE1vdmVkUGVybWFuZW50bHk6IDMwMSxcbiAgRm91bmQ6IDMwMixcbiAgU2VlT3RoZXI6IDMwMyxcbiAgTm90TW9kaWZpZWQ6IDMwNCxcbiAgVXNlUHJveHk6IDMwNSxcbiAgVW51c2VkOiAzMDYsXG4gIFRlbXBvcmFyeVJlZGlyZWN0OiAzMDcsXG4gIFBlcm1hbmVudFJlZGlyZWN0OiAzMDgsXG4gIEJhZFJlcXVlc3Q6IDQwMCxcbiAgVW5hdXRob3JpemVkOiA0MDEsXG4gIFBheW1lbnRSZXF1aXJlZDogNDAyLFxuICBGb3JiaWRkZW46IDQwMyxcbiAgTm90Rm91bmQ6IDQwNCxcbiAgTWV0aG9kTm90QWxsb3dlZDogNDA1LFxuICBOb3RBY2NlcHRhYmxlOiA0MDYsXG4gIFByb3h5QXV0aGVudGljYXRpb25SZXF1aXJlZDogNDA3LFxuICBSZXF1ZXN0VGltZW91dDogNDA4LFxuICBDb25mbGljdDogNDA5LFxuICBHb25lOiA0MTAsXG4gIExlbmd0aFJlcXVpcmVkOiA0MTEsXG4gIFByZWNvbmRpdGlvbkZhaWxlZDogNDEyLFxuICBQYXlsb2FkVG9vTGFyZ2U6IDQxMyxcbiAgVXJpVG9vTG9uZzogNDE0LFxuICBVbnN1cHBvcnRlZE1lZGlhVHlwZTogNDE1LFxuICBSYW5nZU5vdFNhdGlzZmlhYmxlOiA0MTYsXG4gIEV4cGVjdGF0aW9uRmFpbGVkOiA0MTcsXG4gIEltQVRlYXBvdDogNDE4LFxuICBNaXNkaXJlY3RlZFJlcXVlc3Q6IDQyMSxcbiAgVW5wcm9jZXNzYWJsZUVudGl0eTogNDIyLFxuICBMb2NrZWQ6IDQyMyxcbiAgRmFpbGVkRGVwZW5kZW5jeTogNDI0LFxuICBUb29FYXJseTogNDI1LFxuICBVcGdyYWRlUmVxdWlyZWQ6IDQyNixcbiAgUHJlY29uZGl0aW9uUmVxdWlyZWQ6IDQyOCxcbiAgVG9vTWFueVJlcXVlc3RzOiA0MjksXG4gIFJlcXVlc3RIZWFkZXJGaWVsZHNUb29MYXJnZTogNDMxLFxuICBVbmF2YWlsYWJsZUZvckxlZ2FsUmVhc29uczogNDUxLFxuICBJbnRlcm5hbFNlcnZlckVycm9yOiA1MDAsXG4gIE5vdEltcGxlbWVudGVkOiA1MDEsXG4gIEJhZEdhdGV3YXk6IDUwMixcbiAgU2VydmljZVVuYXZhaWxhYmxlOiA1MDMsXG4gIEdhdGV3YXlUaW1lb3V0OiA1MDQsXG4gIEh0dHBWZXJzaW9uTm90U3VwcG9ydGVkOiA1MDUsXG4gIFZhcmlhbnRBbHNvTmVnb3RpYXRlczogNTA2LFxuICBJbnN1ZmZpY2llbnRTdG9yYWdlOiA1MDcsXG4gIExvb3BEZXRlY3RlZDogNTA4LFxuICBOb3RFeHRlbmRlZDogNTEwLFxuICBOZXR3b3JrQXV0aGVudGljYXRpb25SZXF1aXJlZDogNTExLFxufTtcblxuT2JqZWN0LmVudHJpZXMoSHR0cFN0YXR1c0NvZGUpLmZvckVhY2goKFtrZXksIHZhbHVlXSkgPT4ge1xuICBIdHRwU3RhdHVzQ29kZVt2YWx1ZV0gPSBrZXk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgSHR0cFN0YXR1c0NvZGU7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuL3V0aWxzLmpzJztcbmltcG9ydCBiaW5kIGZyb20gJy4vaGVscGVycy9iaW5kLmpzJztcbmltcG9ydCBBeGlvcyBmcm9tICcuL2NvcmUvQXhpb3MuanMnO1xuaW1wb3J0IG1lcmdlQ29uZmlnIGZyb20gJy4vY29yZS9tZXJnZUNvbmZpZy5qcyc7XG5pbXBvcnQgZGVmYXVsdHMgZnJvbSAnLi9kZWZhdWx0cy9pbmRleC5qcyc7XG5pbXBvcnQgZm9ybURhdGFUb0pTT04gZnJvbSAnLi9oZWxwZXJzL2Zvcm1EYXRhVG9KU09OLmpzJztcbmltcG9ydCBDYW5jZWxlZEVycm9yIGZyb20gJy4vY2FuY2VsL0NhbmNlbGVkRXJyb3IuanMnO1xuaW1wb3J0IENhbmNlbFRva2VuIGZyb20gJy4vY2FuY2VsL0NhbmNlbFRva2VuLmpzJztcbmltcG9ydCBpc0NhbmNlbCBmcm9tICcuL2NhbmNlbC9pc0NhbmNlbC5qcyc7XG5pbXBvcnQge1ZFUlNJT059IGZyb20gJy4vZW52L2RhdGEuanMnO1xuaW1wb3J0IHRvRm9ybURhdGEgZnJvbSAnLi9oZWxwZXJzL3RvRm9ybURhdGEuanMnO1xuaW1wb3J0IEF4aW9zRXJyb3IgZnJvbSAnLi9jb3JlL0F4aW9zRXJyb3IuanMnO1xuaW1wb3J0IHNwcmVhZCBmcm9tICcuL2hlbHBlcnMvc3ByZWFkLmpzJztcbmltcG9ydCBpc0F4aW9zRXJyb3IgZnJvbSAnLi9oZWxwZXJzL2lzQXhpb3NFcnJvci5qcyc7XG5pbXBvcnQgQXhpb3NIZWFkZXJzIGZyb20gXCIuL2NvcmUvQXhpb3NIZWFkZXJzLmpzXCI7XG5pbXBvcnQgSHR0cFN0YXR1c0NvZGUgZnJvbSAnLi9oZWxwZXJzL0h0dHBTdGF0dXNDb2RlLmpzJztcblxuLyoqXG4gKiBDcmVhdGUgYW4gaW5zdGFuY2Ugb2YgQXhpb3NcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gZGVmYXVsdENvbmZpZyBUaGUgZGVmYXVsdCBjb25maWcgZm9yIHRoZSBpbnN0YW5jZVxuICpcbiAqIEByZXR1cm5zIHtBeGlvc30gQSBuZXcgaW5zdGFuY2Ugb2YgQXhpb3NcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoZGVmYXVsdENvbmZpZykge1xuICBjb25zdCBjb250ZXh0ID0gbmV3IEF4aW9zKGRlZmF1bHRDb25maWcpO1xuICBjb25zdCBpbnN0YW5jZSA9IGJpbmQoQXhpb3MucHJvdG90eXBlLnJlcXVlc3QsIGNvbnRleHQpO1xuXG4gIC8vIENvcHkgYXhpb3MucHJvdG90eXBlIHRvIGluc3RhbmNlXG4gIHV0aWxzLmV4dGVuZChpbnN0YW5jZSwgQXhpb3MucHJvdG90eXBlLCBjb250ZXh0LCB7YWxsT3duS2V5czogdHJ1ZX0pO1xuXG4gIC8vIENvcHkgY29udGV4dCB0byBpbnN0YW5jZVxuICB1dGlscy5leHRlbmQoaW5zdGFuY2UsIGNvbnRleHQsIG51bGwsIHthbGxPd25LZXlzOiB0cnVlfSk7XG5cbiAgLy8gRmFjdG9yeSBmb3IgY3JlYXRpbmcgbmV3IGluc3RhbmNlc1xuICBpbnN0YW5jZS5jcmVhdGUgPSBmdW5jdGlvbiBjcmVhdGUoaW5zdGFuY2VDb25maWcpIHtcbiAgICByZXR1cm4gY3JlYXRlSW5zdGFuY2UobWVyZ2VDb25maWcoZGVmYXVsdENvbmZpZywgaW5zdGFuY2VDb25maWcpKTtcbiAgfTtcblxuICByZXR1cm4gaW5zdGFuY2U7XG59XG5cbi8vIENyZWF0ZSB0aGUgZGVmYXVsdCBpbnN0YW5jZSB0byBiZSBleHBvcnRlZFxuY29uc3QgYXhpb3MgPSBjcmVhdGVJbnN0YW5jZShkZWZhdWx0cyk7XG5cbi8vIEV4cG9zZSBBeGlvcyBjbGFzcyB0byBhbGxvdyBjbGFzcyBpbmhlcml0YW5jZVxuYXhpb3MuQXhpb3MgPSBBeGlvcztcblxuLy8gRXhwb3NlIENhbmNlbCAmIENhbmNlbFRva2VuXG5heGlvcy5DYW5jZWxlZEVycm9yID0gQ2FuY2VsZWRFcnJvcjtcbmF4aW9zLkNhbmNlbFRva2VuID0gQ2FuY2VsVG9rZW47XG5heGlvcy5pc0NhbmNlbCA9IGlzQ2FuY2VsO1xuYXhpb3MuVkVSU0lPTiA9IFZFUlNJT047XG5heGlvcy50b0Zvcm1EYXRhID0gdG9Gb3JtRGF0YTtcblxuLy8gRXhwb3NlIEF4aW9zRXJyb3IgY2xhc3NcbmF4aW9zLkF4aW9zRXJyb3IgPSBBeGlvc0Vycm9yO1xuXG4vLyBhbGlhcyBmb3IgQ2FuY2VsZWRFcnJvciBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eVxuYXhpb3MuQ2FuY2VsID0gYXhpb3MuQ2FuY2VsZWRFcnJvcjtcblxuLy8gRXhwb3NlIGFsbC9zcHJlYWRcbmF4aW9zLmFsbCA9IGZ1bmN0aW9uIGFsbChwcm9taXNlcykge1xuICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xufTtcblxuYXhpb3Muc3ByZWFkID0gc3ByZWFkO1xuXG4vLyBFeHBvc2UgaXNBeGlvc0Vycm9yXG5heGlvcy5pc0F4aW9zRXJyb3IgPSBpc0F4aW9zRXJyb3I7XG5cbi8vIEV4cG9zZSBtZXJnZUNvbmZpZ1xuYXhpb3MubWVyZ2VDb25maWcgPSBtZXJnZUNvbmZpZztcblxuYXhpb3MuQXhpb3NIZWFkZXJzID0gQXhpb3NIZWFkZXJzO1xuXG5heGlvcy5mb3JtVG9KU09OID0gdGhpbmcgPT4gZm9ybURhdGFUb0pTT04odXRpbHMuaXNIVE1MRm9ybSh0aGluZykgPyBuZXcgRm9ybURhdGEodGhpbmcpIDogdGhpbmcpO1xuXG5heGlvcy5IdHRwU3RhdHVzQ29kZSA9IEh0dHBTdGF0dXNDb2RlO1xuXG5heGlvcy5kZWZhdWx0ID0gYXhpb3M7XG5cbi8vIHRoaXMgbW9kdWxlIHNob3VsZCBvbmx5IGhhdmUgYSBkZWZhdWx0IGV4cG9ydFxuZXhwb3J0IGRlZmF1bHQgYXhpb3NcbiIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBTeW50YWN0aWMgc3VnYXIgZm9yIGludm9raW5nIGEgZnVuY3Rpb24gYW5kIGV4cGFuZGluZyBhbiBhcnJheSBmb3IgYXJndW1lbnRzLlxuICpcbiAqIENvbW1vbiB1c2UgY2FzZSB3b3VsZCBiZSB0byB1c2UgYEZ1bmN0aW9uLnByb3RvdHlwZS5hcHBseWAuXG4gKlxuICogIGBgYGpzXG4gKiAgZnVuY3Rpb24gZih4LCB5LCB6KSB7fVxuICogIHZhciBhcmdzID0gWzEsIDIsIDNdO1xuICogIGYuYXBwbHkobnVsbCwgYXJncyk7XG4gKiAgYGBgXG4gKlxuICogV2l0aCBgc3ByZWFkYCB0aGlzIGV4YW1wbGUgY2FuIGJlIHJlLXdyaXR0ZW4uXG4gKlxuICogIGBgYGpzXG4gKiAgc3ByZWFkKGZ1bmN0aW9uKHgsIHksIHopIHt9KShbMSwgMiwgM10pO1xuICogIGBgYFxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufVxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzcHJlYWQoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIHdyYXAoYXJyKSB7XG4gICAgcmV0dXJuIGNhbGxiYWNrLmFwcGx5KG51bGwsIGFycik7XG4gIH07XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCB1dGlscyBmcm9tICcuLy4uL3V0aWxzLmpzJztcblxuLyoqXG4gKiBEZXRlcm1pbmVzIHdoZXRoZXIgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zXG4gKlxuICogQHBhcmFtIHsqfSBwYXlsb2FkIFRoZSB2YWx1ZSB0byB0ZXN0XG4gKlxuICogQHJldHVybnMge2Jvb2xlYW59IFRydWUgaWYgdGhlIHBheWxvYWQgaXMgYW4gZXJyb3IgdGhyb3duIGJ5IEF4aW9zLCBvdGhlcndpc2UgZmFsc2VcbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaXNBeGlvc0Vycm9yKHBheWxvYWQpIHtcbiAgcmV0dXJuIHV0aWxzLmlzT2JqZWN0KHBheWxvYWQpICYmIChwYXlsb2FkLmlzQXhpb3NFcnJvciA9PT0gdHJ1ZSk7XG59XG4iLCJpbXBvcnQgeyBBUElfRU5EUE9JTlRTIH0gZnJvbSBcIkBjb25maWdzL2FwaVwiO1xuaW1wb3J0IHsgUHJvZHVjdE1vZGVsIH0gZnJvbSBcIkBzdG9yZS9tb2RlbHNcIjtcbmltcG9ydCB7IFF1ZXJ5U2VhcmNoIH0gZnJvbSBcIkBzdG9yZS9Sb290U3RvcmUvUXVlcnlQYXJhbXNTdG9yZVwiO1xuaW1wb3J0IHsgTWV0YSB9IGZyb20gXCJAdXRpbHMvbWV0YVwiO1xuaW1wb3J0IHsgSUxvY2FsU3RvcmUgfSBmcm9tIFwiQHV0aWxzL3VzZUxvY2FsU3RvcmVcIjtcbmltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIjtcbmltcG9ydCB7XG4gIGFjdGlvbixcbiAgY29tcHV0ZWQsXG4gIG1ha2VPYnNlcnZhYmxlLFxuICBvYnNlcnZhYmxlLFxuICBydW5JbkFjdGlvbixcbn0gZnJvbSBcIm1vYnhcIjtcblxudHlwZSBQcml2YXRlRmllbGRzID1cbiAgfCBcIl9wcm9kdWN0RGV0YWlsXCJcbiAgfCBcIl9yZWxhdGVkUHJvZHVjdHNMaXN0XCJcbiAgfCBcIl9tZXRhXCJcbiAgfCBcIl9zZWxlY3RlZEltYWdlSW5kZXhcIjtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJvZHVjdERldGFpbFN0b3JlIGltcGxlbWVudHMgSUxvY2FsU3RvcmUge1xuICBwcml2YXRlIF9wcm9kdWN0RGV0YWlsOiBQcm9kdWN0TW9kZWwgfCBudWxsID0gbnVsbDtcbiAgcHJpdmF0ZSBfcmVsYXRlZFByb2R1Y3RzTGlzdDogUHJvZHVjdE1vZGVsW10gPSBbXTtcbiAgcHJpdmF0ZSBfbWV0YTogTWV0YSA9IE1ldGEuaW5pdGlhbDtcbiAgcHJpdmF0ZSBfc2VsZWN0ZWRJbWFnZUluZGV4ID0gMDtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBtYWtlT2JzZXJ2YWJsZTxQcm9kdWN0RGV0YWlsU3RvcmUsIFByaXZhdGVGaWVsZHM+KHRoaXMsIHtcbiAgICAgIF9yZWxhdGVkUHJvZHVjdHNMaXN0OiBvYnNlcnZhYmxlLFxuICAgICAgX3Byb2R1Y3REZXRhaWw6IG9ic2VydmFibGUsXG4gICAgICBfbWV0YTogb2JzZXJ2YWJsZSxcbiAgICAgIF9zZWxlY3RlZEltYWdlSW5kZXg6IG9ic2VydmFibGUsXG4gICAgICBwcm9kdWN0RGV0YWlsOiBjb21wdXRlZCxcbiAgICAgIHNlbGVjdGVkSW1hZ2VJbmRleDogY29tcHV0ZWQsXG4gICAgICByZWxhdGVkUHJvZHVjdHNMaXN0OiBjb21wdXRlZCxcbiAgICAgIG1ldGE6IGNvbXB1dGVkLFxuICAgICAgZ2V0UHJvZHVjdERldGFpbDogYWN0aW9uLFxuICAgICAgZ2V0UmVsYXRlZFByb2R1Y3RzTGlzdDogYWN0aW9uLFxuICAgICAgbmV4dFNsaWRlOiBhY3Rpb24sXG4gICAgICBwcmV2U2xpZGU6IGFjdGlvbixcbiAgICB9KTtcbiAgfVxuXG4gIGdldCBwcm9kdWN0RGV0YWlsKCkge1xuICAgIHJldHVybiB0aGlzLl9wcm9kdWN0RGV0YWlsO1xuICB9XG5cbiAgZ2V0IHJlbGF0ZWRQcm9kdWN0c0xpc3QoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3JlbGF0ZWRQcm9kdWN0c0xpc3Q7XG4gIH1cblxuICBnZXQgbWV0YSgpIHtcbiAgICByZXR1cm4gdGhpcy5fbWV0YTtcbiAgfVxuXG4gIGdldCBzZWxlY3RlZEltYWdlSW5kZXgoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3NlbGVjdGVkSW1hZ2VJbmRleDtcbiAgfVxuXG4gIG5leHRTbGlkZSgpIHtcbiAgICBpZiAodGhpcy5fcHJvZHVjdERldGFpbCkge1xuICAgICAgaWYgKHRoaXMuX3NlbGVjdGVkSW1hZ2VJbmRleCAhPT0gdGhpcy5fcHJvZHVjdERldGFpbC5pbWFnZXMubGVuZ3RoIC0gMSkge1xuICAgICAgICB0aGlzLl9zZWxlY3RlZEltYWdlSW5kZXggKz0gMTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwcmV2U2xpZGUoKSB7XG4gICAgaWYgKHRoaXMuX3NlbGVjdGVkSW1hZ2VJbmRleCA+IDApIHRoaXMuX3NlbGVjdGVkSW1hZ2VJbmRleCAtPSAxO1xuICB9XG5cbiAgYXN5bmMgZ2V0UHJvZHVjdERldGFpbChpZDogUXVlcnlTZWFyY2gpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYXhpb3Moe1xuICAgICAgICBtZXRob2Q6IFwiZ2V0XCIsXG4gICAgICAgIHVybDogYCR7QVBJX0VORFBPSU5UUy5QUk9EVUNUU30vJHtpZH1gLFxuICAgICAgfSk7XG4gICAgICBydW5JbkFjdGlvbigoKSA9PiB7XG4gICAgICAgIGlmIChyZXN1bHQuZGF0YSkge1xuICAgICAgICAgIHRoaXMuX3Byb2R1Y3REZXRhaWwgPSByZXN1bHQuZGF0YTtcbiAgICAgICAgICB0aGlzLmdldFJlbGF0ZWRQcm9kdWN0c0xpc3QodGhpcy5fcHJvZHVjdERldGFpbD8uY2F0ZWdvcnkuaWQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhpcy5fbWV0YSA9IE1ldGEuZXJyb3I7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZ2V0UmVsYXRlZFByb2R1Y3RzTGlzdChjYXRlZ29yeUlkOiBudW1iZXIgfCB1bmRlZmluZWQpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0cnkge1xuICAgICAgdGhpcy5fcmVsYXRlZFByb2R1Y3RzTGlzdCA9IFtdO1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYXhpb3Moe1xuICAgICAgICBtZXRob2Q6IFwiZ2V0XCIsXG4gICAgICAgIHVybDogYCR7QVBJX0VORFBPSU5UUy5QUk9EVUNUU30/Y2F0ZWdvcnlJZD0ke2NhdGVnb3J5SWR9YCxcbiAgICAgIH0pO1xuICAgICAgcnVuSW5BY3Rpb24oKCkgPT4ge1xuICAgICAgICBpZiAocmVzdWx0LmRhdGEpIHtcbiAgICAgICAgICBjb25zdCBmaWx0ZXJlZERhdGEgPSByZXN1bHQuZGF0YVxuICAgICAgICAgICAgLmZpbHRlcihcbiAgICAgICAgICAgICAgKHByb2R1Y3Q6IFByb2R1Y3RNb2RlbCkgPT4gcHJvZHVjdC5pZCAhPT0gdGhpcy5fcHJvZHVjdERldGFpbD8uaWRcbiAgICAgICAgICAgIClcbiAgICAgICAgICAgIC5zbGljZSgwLCAzKTtcbiAgICAgICAgICB0aGlzLl9yZWxhdGVkUHJvZHVjdHNMaXN0ID0gWy4uLmZpbHRlcmVkRGF0YV07XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aGlzLl9tZXRhID0gTWV0YS5lcnJvcjtcbiAgICAgIHRoaXMuX3JlbGF0ZWRQcm9kdWN0c0xpc3QgPSBbXTtcbiAgICB9XG4gIH1cblxuICBkZXN0cm95KCk6IHZvaWQge31cbn1cbiIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IGRlZmF1bHQge1wiY29udGVudFwiOlwic3JjLXBhZ2VzLVByb2R1Y3REZXRhaWwtUHJvZHVjdERldGFpbC1tb2R1bGVfX2NvbnRlbnRcIixcImltYWdlXCI6XCJzcmMtcGFnZXMtUHJvZHVjdERldGFpbC1Qcm9kdWN0RGV0YWlsLW1vZHVsZV9faW1hZ2VcIixcImRldGFpbFwiOlwic3JjLXBhZ2VzLVByb2R1Y3REZXRhaWwtUHJvZHVjdERldGFpbC1tb2R1bGVfX2RldGFpbFwiLFwidGl0bGVcIjpcInNyYy1wYWdlcy1Qcm9kdWN0RGV0YWlsLVByb2R1Y3REZXRhaWwtbW9kdWxlX190aXRsZVwiLFwiZGVzY3JpcHRpb25cIjpcInNyYy1wYWdlcy1Qcm9kdWN0RGV0YWlsLVByb2R1Y3REZXRhaWwtbW9kdWxlX19kZXNjcmlwdGlvblwiLFwicHJpY2VcIjpcInNyYy1wYWdlcy1Qcm9kdWN0RGV0YWlsLVByb2R1Y3REZXRhaWwtbW9kdWxlX19wcmljZVwiLFwiYWRkXCI6XCJzcmMtcGFnZXMtUHJvZHVjdERldGFpbC1Qcm9kdWN0RGV0YWlsLW1vZHVsZV9fYWRkXCIsXCJidXlcIjpcInNyYy1wYWdlcy1Qcm9kdWN0RGV0YWlsLVByb2R1Y3REZXRhaWwtbW9kdWxlX19idXlcIixcIm5hdmlnYXRpb25cIjpcInNyYy1wYWdlcy1Qcm9kdWN0RGV0YWlsLVByb2R1Y3REZXRhaWwtbW9kdWxlX19uYXZpZ2F0aW9uXCIsXCJhcnJvd1wiOlwic3JjLXBhZ2VzLVByb2R1Y3REZXRhaWwtUHJvZHVjdERldGFpbC1tb2R1bGVfX2Fycm93XCIsXCJyZWxhdGVkX3RpdGxlXCI6XCJzcmMtcGFnZXMtUHJvZHVjdERldGFpbC1Qcm9kdWN0RGV0YWlsLW1vZHVsZV9fcmVsYXRlZF90aXRsZVwiLFwicmVsYXRlZF9saXN0XCI6XCJzcmMtcGFnZXMtUHJvZHVjdERldGFpbC1Qcm9kdWN0RGV0YWlsLW1vZHVsZV9fcmVsYXRlZF9saXN0XCJ9OyIsImltcG9ydCBSZWFjdCwgeyB1c2VDYWxsYmFjaywgdXNlRWZmZWN0LCB1c2VTdGF0ZSB9IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgeyBCdXR0b24gfSBmcm9tIFwiQGNvbXBvbmVudHMvQnV0dG9uXCI7XG5pbXBvcnQgeyBDYXJkIH0gZnJvbSBcIkBjb21wb25lbnRzL0NhcmRcIjtcbmltcG9ydCB7IFByb2R1Y3RNb2RlbCB9IGZyb20gXCJAc3RvcmUvbW9kZWxzXCI7XG5pbXBvcnQgUHJvZHVjdERldGFpbFN0b3JlIGZyb20gXCJAc3RvcmUvUHJvZHVjdERldGFpbFN0b3JlXCI7XG5pbXBvcnQgcm9vdFN0b3JlIGZyb20gXCJAc3RvcmUvUm9vdFN0b3JlL2luc3RhbmNlXCI7XG5pbXBvcnQgeyBvYnNlcnZlciwgdXNlTG9jYWxTdG9yZSB9IGZyb20gXCJtb2J4LXJlYWN0LWxpdGVcIjtcbmltcG9ydCB7IHVzZU5hdmlnYXRlLCB1c2VQYXJhbXMgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuXG5pbXBvcnQgY2xzIGZyb20gXCIuL1Byb2R1Y3REZXRhaWwubW9kdWxlLnNjc3NcIjtcblxuY29uc3QgUHJvZHVjdERldGFpbCA9IG9ic2VydmVyKCgpID0+IHtcbiAgY29uc3QgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xuICBjb25zdCB7IGlkIH0gPSB1c2VQYXJhbXMoKTtcbiAgY29uc3QgcHJvZHVjdERldGFpbFN0b3JlID0gdXNlTG9jYWxTdG9yZSgoKSA9PiBuZXcgUHJvZHVjdERldGFpbFN0b3JlKCkpO1xuICByb290U3RvcmUucXVlcnkuc2V0U2VhcmNoKGBwcm9kdWN0SWQ9JHtpZH1gKTtcbiAgY29uc3QgcHJvZHVjdElkID0gcm9vdFN0b3JlLnF1ZXJ5LmdldFBhcmFtKFwicHJvZHVjdElkXCIpO1xuICBjb25zdCBbcXVhbnRpdHldID0gdXNlU3RhdGUoMSk7XG5cbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICBwcm9kdWN0RGV0YWlsU3RvcmUuZ2V0UHJvZHVjdERldGFpbChwcm9kdWN0SWQpO1xuICB9LCBbcHJvZHVjdERldGFpbFN0b3JlLCBwcm9kdWN0SWRdKTtcblxuICBjb25zdCBhZGRUb0NhcnQgPSAoKSA9PiB7XG4gICAgaWYgKHByb2R1Y3REZXRhaWxTdG9yZS5wcm9kdWN0RGV0YWlsKSB7XG4gICAgICByb290U3RvcmUuY2FydC5hZGRUb0NhcnQoe1xuICAgICAgICBwcm9kdWN0OiBwcm9kdWN0RGV0YWlsU3RvcmUucHJvZHVjdERldGFpbCxcbiAgICAgICAgcXVhbnRpdHk6IHF1YW50aXR5LFxuICAgICAgfSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e2Nscy5Qcm9kdWN0RGV0YWlsfT5cbiAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbHMuY29udGVudH0+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbHMubmF2aWdhdGlvbn0+XG4gICAgICAgICAgPEJ1dHRvblxuICAgICAgICAgICAgY2xhc3NOYW1lPXtjbHMuYXJyb3d9XG4gICAgICAgICAgICBvbkNsaWNrPXsoKSA9PiBwcm9kdWN0RGV0YWlsU3RvcmUucHJldlNsaWRlKCl9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge1wiPFwifVxuICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xzLmFycm93fVxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4gcHJvZHVjdERldGFpbFN0b3JlLm5leHRTbGlkZSgpfVxuICAgICAgICAgID5cbiAgICAgICAgICAgIHtcIj5cIn1cbiAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxpbWdcbiAgICAgICAgICBjbGFzc05hbWU9e2Nscy5pbWFnZX1cbiAgICAgICAgICBzcmM9e1xuICAgICAgICAgICAgcHJvZHVjdERldGFpbFN0b3JlLnByb2R1Y3REZXRhaWw/LmltYWdlc1tcbiAgICAgICAgICAgICAgcHJvZHVjdERldGFpbFN0b3JlLnNlbGVjdGVkSW1hZ2VJbmRleFxuICAgICAgICAgICAgXVxuICAgICAgICAgIH1cbiAgICAgICAgICBhbHQ9e3Byb2R1Y3REZXRhaWxTdG9yZS5wcm9kdWN0RGV0YWlsPy50aXRsZX1cbiAgICAgICAgLz5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2Nscy5kZXRhaWx9PlxuICAgICAgICAgIDxoMSBjbGFzc05hbWU9e2Nscy50aXRsZX0+XG4gICAgICAgICAgICB7cHJvZHVjdERldGFpbFN0b3JlLnByb2R1Y3REZXRhaWw/LnRpdGxlfVxuICAgICAgICAgIDwvaDE+XG4gICAgICAgICAgPHAgY2xhc3NOYW1lPXtjbHMuZGVzY3JpcHRpb259PlxuICAgICAgICAgICAge3Byb2R1Y3REZXRhaWxTdG9yZS5wcm9kdWN0RGV0YWlsPy5kZXNjcmlwdGlvbn1cbiAgICAgICAgICA8L3A+XG4gICAgICAgICAgPHAgY2xhc3NOYW1lPXtjbHMucHJpY2V9PlxuICAgICAgICAgICAgJHtwcm9kdWN0RGV0YWlsU3RvcmUucHJvZHVjdERldGFpbD8ucHJpY2V9XG4gICAgICAgICAgPC9wPlxuICAgICAgICAgIDxCdXR0b24gY2xhc3NOYW1lPXtjbHMuYnV5fT5CdXkgTm93PC9CdXR0b24+XG4gICAgICAgICAgPEJ1dHRvbiBjbGFzc05hbWU9e2Nscy5hZGR9IG9uQ2xpY2s9e2FkZFRvQ2FydH0+XG4gICAgICAgICAgICBBZGQgdG8gQ2FyZFxuICAgICAgICAgIDwvQnV0dG9uPlxuICAgICAgICA8L2Rpdj5cbiAgICAgIDwvZGl2PlxuICAgICAgPGgyIGNsYXNzTmFtZT17Y2xzLnJlbGF0ZWRfdGl0bGV9PlJlbGF0ZWQgSXRlbXM8L2gyPlxuICAgICAgPGRpdiBjbGFzc05hbWU9e2Nscy5yZWxhdGVkX2xpc3R9PlxuICAgICAgICB7cHJvZHVjdERldGFpbFN0b3JlLnJlbGF0ZWRQcm9kdWN0c0xpc3QubWFwKChwcm9kdWN0OiBQcm9kdWN0TW9kZWwpID0+IChcbiAgICAgICAgICA8Q2FyZFxuICAgICAgICAgICAga2V5PXtwcm9kdWN0LmlkfVxuICAgICAgICAgICAgaWQ9e3Byb2R1Y3QuaWR9XG4gICAgICAgICAgICBpbWFnZT17cHJvZHVjdC5pbWFnZXNbMF19XG4gICAgICAgICAgICBjYXRlZ29yeT17cHJvZHVjdC5jYXRlZ29yeS5uYW1lfVxuICAgICAgICAgICAgdGl0bGU9e3Byb2R1Y3QudGl0bGV9XG4gICAgICAgICAgICBjb250ZW50PXtwcm9kdWN0LnByaWNlfVxuICAgICAgICAgICAgb25DbGljaz17KCkgPT4gbmF2aWdhdGUoYC9wcm9kdWN0LyR7cHJvZHVjdC5pZH1gKX1cbiAgICAgICAgICAvPlxuICAgICAgICApKX1cbiAgICAgIDwvZGl2PlxuICAgIDwvZGl2PlxuICApO1xufSk7XG5leHBvcnQgZGVmYXVsdCBSZWFjdC5tZW1vKFByb2R1Y3REZXRhaWwpO1xuIixudWxsLG51bGwsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCIzNzQ1Yjk2ZTAyMTEyN2Q3NmE1ZTY4NTk2YmQyZTgyMi5zdmdcIjsiLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCBkZWZhdWx0IHtcIk11bHRpRHJvcGRvd25cIjpcInNyYy1jb21wb25lbnRzLURyb3Bkb3duLURyb3Bkb3duLW1vZHVsZV9fTXVsdGlEcm9wZG93blwiLFwiYnV0dG9uXCI6XCJzcmMtY29tcG9uZW50cy1Ecm9wZG93bi1Ecm9wZG93bi1tb2R1bGVfX2J1dHRvblwiLFwibGlzdFwiOlwic3JjLWNvbXBvbmVudHMtRHJvcGRvd24tRHJvcGRvd24tbW9kdWxlX19saXN0XCIsXCJsaXN0X29wZW5cIjpcInNyYy1jb21wb25lbnRzLURyb3Bkb3duLURyb3Bkb3duLW1vZHVsZV9fbGlzdF9vcGVuXCIsXCJpdGVtXCI6XCJzcmMtY29tcG9uZW50cy1Ecm9wZG93bi1Ecm9wZG93bi1tb2R1bGVfX2l0ZW1cIn07IiwiaW1wb3J0IHsgRkMsIHVzZVN0YXRlIH0gZnJvbSBcInJlYWN0XCI7XG5cbmltcG9ydCBGaWx0ZXJJY29uIGZyb20gXCJAaWNvbnMvZmlsdGVyLnN2Z1wiO1xuaW1wb3J0IGNuIGZyb20gXCJjbGFzc25hbWVzXCI7XG5cbmltcG9ydCBjbHMgZnJvbSBcIi4vRHJvcGRvd24ubW9kdWxlLnNjc3NcIjtcblxuZXhwb3J0IHR5cGUgT3B0aW9uID0ge1xuICBrZXk6IHN0cmluZztcbiAgdmFsdWU6IHN0cmluZztcbn07XG5leHBvcnQgdHlwZSBEcm9wZG93blByb3BzID0ge1xuICBvcHRpb25zOiBPcHRpb25bXTtcbiAgdmFsdWU6IE9wdGlvbjtcbiAgb25DaGFuZ2U6ICh2YWx1ZTogT3B0aW9uKSA9PiB2b2lkO1xuICBkaXNhYmxlZD86IGJvb2xlYW47XG59O1xuZXhwb3J0IGNvbnN0IERyb3Bkb3duOiBGQzxEcm9wZG93blByb3BzPiA9IChwcm9wcykgPT4ge1xuICBjb25zdCB7IG9wdGlvbnMsIHZhbHVlLCBvbkNoYW5nZSwgZGlzYWJsZWQgfSA9IHByb3BzO1xuICBjb25zdCBbaXNPcGVuLCBzZXRJc29wZW5dID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIGZ1bmN0aW9uIGlzU2VsZWN0ZWQoc2VsZWN0ZWRPcHRpb246IE9wdGlvbikge1xuICAgIHJldHVybiAhISh2YWx1ZS5rZXkgPT09IHNlbGVjdGVkT3B0aW9uLmtleSk7XG4gIH1cblxuICBmdW5jdGlvbiBvblNlbGVjdChzZWxlY3RlZE9wdGlvbjogT3B0aW9uKSB7XG4gICAgaWYgKCFpc1NlbGVjdGVkKHNlbGVjdGVkT3B0aW9uKSkge1xuICAgICAgb25DaGFuZ2Uoc2VsZWN0ZWRPcHRpb24pO1xuICAgIH0gZWxzZSBvbkNoYW5nZSh7IGtleTogXCJcIiwgdmFsdWU6IFwiXCIgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZW5kZXJEcm9wRG93bihvcHRpb25zOiBPcHRpb25bXSkge1xuICAgIHJldHVybiBvcHRpb25zLm1hcCgob3B0aW9uKSA9PiAoXG4gICAgICA8bGkga2V5PXtvcHRpb24ua2V5fT5cbiAgICAgICAgPGlucHV0XG4gICAgICAgICAgdHlwZT1cImNoZWNrYm94XCJcbiAgICAgICAgICBpZD17b3B0aW9uLmtleX1cbiAgICAgICAgICBjaGVja2VkPXtpc1NlbGVjdGVkKG9wdGlvbil9XG4gICAgICAgICAgb25DaGFuZ2U9eygpID0+IG9uU2VsZWN0KG9wdGlvbil9XG4gICAgICAgIC8+XG4gICAgICAgIDxsYWJlbCBjbGFzc05hbWU9e2Nscy5pdGVtfSBodG1sRm9yPXtvcHRpb24ua2V5fT5cbiAgICAgICAgICB7b3B0aW9uLnZhbHVlfVxuICAgICAgICA8L2xhYmVsPlxuICAgICAgPC9saT5cbiAgICApKTtcbiAgfVxuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9e2Nscy5NdWx0aURyb3Bkb3dufT5cbiAgICAgIDxidXR0b25cbiAgICAgICAgY2xhc3NOYW1lPXtjbHMuYnV0dG9ufVxuICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgIG9uQ2xpY2s9eygpID0+IHNldElzb3BlbigoaXNPcGVuKSA9PiAhaXNPcGVuKX1cbiAgICAgID5cbiAgICAgICAgeyF2YWx1ZS5rZXkgPyAoXG4gICAgICAgICAgPD5cbiAgICAgICAgICAgIDxpbWcgc3JjPXtGaWx0ZXJJY29ufSBhbHQ9XCJmaWx0ZXJcIiAvPlxuICAgICAgICAgICAgRmlsdGVyXG4gICAgICAgICAgPC8+XG4gICAgICAgICkgOiAoXG4gICAgICAgICAgdmFsdWUudmFsdWVcbiAgICAgICAgKX1cbiAgICAgIDwvYnV0dG9uPlxuICAgICAgeyFkaXNhYmxlZCAmJiAoXG4gICAgICAgIDx1bCBjbGFzc05hbWU9e2NuKGNscy5saXN0LCB7IFtjbHMubGlzdF9vcGVuXTogaXNPcGVuIH0pfT5cbiAgICAgICAgICB7cmVuZGVyRHJvcERvd24ob3B0aW9ucyl9XG4gICAgICAgIDwvdWw+XG4gICAgICApfVxuICAgIDwvZGl2PlxuICApO1xufTtcbiIsImltcG9ydCBSZWFjdCwgeyBGQywgbWVtbyB9IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgY24gZnJvbSBcImNsYXNzbmFtZXNcIjtcblxuaW1wb3J0IGNscyBmcm9tIFwiLi9JbnB1dC5tb2R1bGUuc2Nzc1wiO1xuXG5leHBvcnQgdHlwZSBJbnB1dFByb3BzID0gT21pdDxcbiAgUmVhY3QuSW5wdXRIVE1MQXR0cmlidXRlczxIVE1MSW5wdXRFbGVtZW50PixcbiAgXCJvbkNoYW5nZVwiXG4+ICYge1xuICB2YWx1ZTogc3RyaW5nO1xuICBvbkNoYW5nZTogKHZhbHVlOiBzdHJpbmcpID0+IHZvaWQ7XG59O1xuZXhwb3J0IGNvbnN0IElucHV0OiBGQzxJbnB1dFByb3BzPiA9IG1lbW8oXG4gICh7IGNsYXNzTmFtZSwgdmFsdWUsIG9uQ2hhbmdlLCBkaXNhYmxlZCwgLi4ub3RoZXJQcm9wcyB9KSA9PiB7XG4gICAgY29uc3QgaGFuZGxlQ2hhbmdlID0gKGU6IFJlYWN0LkNoYW5nZUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiB7XG4gICAgICBvbkNoYW5nZShlLnRhcmdldC52YWx1ZSk7XG4gICAgfTtcblxuICAgIHJldHVybiAoXG4gICAgICA8aW5wdXRcbiAgICAgICAgY2xhc3NOYW1lPXtjbihjbGFzc05hbWUsIGNscy5pbnB1dCl9XG4gICAgICAgIHR5cGU9XCJ0ZXh0XCJcbiAgICAgICAgdmFsdWU9e3ZhbHVlfVxuICAgICAgICBkaXNhYmxlZD17ZGlzYWJsZWR9XG4gICAgICAgIG9uQ2hhbmdlPXtkaXNhYmxlZCA/IHVuZGVmaW5lZCA6IGhhbmRsZUNoYW5nZX1cbiAgICAgICAgey4uLm90aGVyUHJvcHN9XG4gICAgICAvPlxuICAgICk7XG4gIH1cbik7XG4iLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCBkZWZhdWx0IHtcImlucHV0XCI6XCJzcmMtY29tcG9uZW50cy1JbnB1dC1JbnB1dC1tb2R1bGVfX2lucHV0XCJ9OyIsImV4cG9ydCBkZWZhdWx0IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCIyNjg1YWNmODczOWQ2MjUwNjYxMDI1NjAzZjNkZjdjOS5zdmdcIjsiLCJpbXBvcnQgeyBPcHRpb24gfSBmcm9tIFwiQGNvbXBvbmVudHMvRHJvcGRvd24vRHJvcGRvd25cIjtcbmltcG9ydCB7IEFQSV9FTkRQT0lOVFMgfSBmcm9tIFwiQGNvbmZpZ3MvYXBpXCI7XG5pbXBvcnQgeyBQcm9kdWN0Q2F0ZWdvcnlNb2RlbCwgUHJvZHVjdE1vZGVsIH0gZnJvbSBcIkBzdG9yZS9tb2RlbHNcIjtcbmltcG9ydCByb290U3RvcmUgZnJvbSBcIkBzdG9yZS9Sb290U3RvcmUvaW5zdGFuY2VcIjtcbmltcG9ydCB7IFF1ZXJ5U2VhcmNoIH0gZnJvbSBcIkBzdG9yZS9Sb290U3RvcmUvUXVlcnlQYXJhbXNTdG9yZVwiO1xuaW1wb3J0IHsgTWV0YSB9IGZyb20gXCJAdXRpbHMvbWV0YVwiO1xuaW1wb3J0IHsgSUxvY2FsU3RvcmUgfSBmcm9tIFwiQHV0aWxzL3VzZUxvY2FsU3RvcmVcIjtcbmltcG9ydCBheGlvcyBmcm9tIFwiYXhpb3NcIjtcbmltcG9ydCB7XG4gIGFjdGlvbixcbiAgY29tcHV0ZWQsXG4gIElSZWFjdGlvbkRpc3Bvc2VyLFxuICBtYWtlT2JzZXJ2YWJsZSxcbiAgb2JzZXJ2YWJsZSxcbiAgcmVhY3Rpb24sXG4gIHJ1bkluQWN0aW9uLFxufSBmcm9tIFwibW9ieFwiO1xuXG50eXBlIFByaXZhdGVGaWVsZHMgPVxuICB8IFwiX3RvdGFsUHJvZHVjdHNMaXN0XCJcbiAgfCBcIl9tZXRhXCJcbiAgfCBcIl9zZWFyY2hUaXRsZVwiXG4gIHwgXCJfcHJvZHVjdHNQYWdlXCJcbiAgfCBcIl9oYXNNb3JlRGF0YVwiXG4gIHwgXCJfdG90YWxQcm9kdWN0c0NvdW50XCJcbiAgfCBcIl9jYXRlZ29yaWVzTGlzdFwiXG4gIHwgXCJfZmlsdGVyVmFsdWVcIlxuICB8IFwiX2NhdGVnb3J5SWRcIlxuICB8IFwiX3NlYXJjaENhdGVnb3J5XCI7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFByb2R1Y3RzU3RvcmUgaW1wbGVtZW50cyBJTG9jYWxTdG9yZSB7XG4gIHByaXZhdGUgX3RvdGFsUHJvZHVjdHNMaXN0OiBQcm9kdWN0TW9kZWxbXSA9IFtdO1xuICBwcml2YXRlIF90b3RhbFByb2R1Y3RzQ291bnQgPSAwO1xuICBwcml2YXRlIF9tZXRhOiBNZXRhID0gTWV0YS5pbml0aWFsO1xuICBwcml2YXRlIF9zZWFyY2hUaXRsZTogUXVlcnlTZWFyY2ggPSBcIlwiO1xuICBwcml2YXRlIF9wcm9kdWN0c1BhZ2UgPSAwO1xuICBwcml2YXRlIF9oYXNNb3JlRGF0YSA9IHRydWU7XG4gIHByaXZhdGUgX2NhdGVnb3JpZXNMaXN0OiBPcHRpb25bXSA9IFtdO1xuICBwcml2YXRlIF9maWx0ZXJWYWx1ZTogT3B0aW9uID0geyBrZXk6IFwiXCIsIHZhbHVlOiBcIlwiIH07XG4gIHByaXZhdGUgX2NhdGVnb3J5SWQgPSBcIlwiO1xuICBwcml2YXRlIF9zZWFyY2hDYXRlZ29yeTogUXVlcnlTZWFyY2ggPSBcIlwiO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIG1ha2VPYnNlcnZhYmxlPFByb2R1Y3RzU3RvcmUsIFByaXZhdGVGaWVsZHM+KHRoaXMsIHtcbiAgICAgIF90b3RhbFByb2R1Y3RzTGlzdDogb2JzZXJ2YWJsZS5yZWYsXG4gICAgICBfdG90YWxQcm9kdWN0c0NvdW50OiBvYnNlcnZhYmxlLFxuICAgICAgX21ldGE6IG9ic2VydmFibGUsXG4gICAgICBfc2VhcmNoVGl0bGU6IG9ic2VydmFibGUsXG4gICAgICBfcHJvZHVjdHNQYWdlOiBvYnNlcnZhYmxlLFxuICAgICAgX2hhc01vcmVEYXRhOiBvYnNlcnZhYmxlLFxuICAgICAgX2NhdGVnb3JpZXNMaXN0OiBvYnNlcnZhYmxlLFxuICAgICAgX2ZpbHRlclZhbHVlOiBvYnNlcnZhYmxlLFxuICAgICAgX2NhdGVnb3J5SWQ6IG9ic2VydmFibGUsXG4gICAgICBfc2VhcmNoQ2F0ZWdvcnk6IG9ic2VydmFibGUsXG4gICAgICB0b3RhbFByb2R1Y3RzTGlzdDogY29tcHV0ZWQsXG4gICAgICB0b3RhbFByb2R1Y3RzQ291bnQ6IGNvbXB1dGVkLFxuICAgICAgbWV0YTogY29tcHV0ZWQsXG4gICAgICBzZWFyY2hUaXRsZTogY29tcHV0ZWQsXG4gICAgICBoYXNNb3JlRGF0YTogY29tcHV0ZWQsXG4gICAgICBwcm9kdWN0c1BhZ2U6IGNvbXB1dGVkLFxuICAgICAgY2F0ZWdvcmllc0xpc3Q6IGNvbXB1dGVkLFxuICAgICAgZmlsdGVyVmFsdWU6IGNvbXB1dGVkLFxuICAgICAgZ2V0UHJvZHVjdHNMaXN0OiBhY3Rpb24sXG4gICAgICBnZXRUb3RhbFByb2R1Y3RDb3VudDogYWN0aW9uLFxuICAgICAgY2xlYXJQcm9kdWN0TGlzdDogYWN0aW9uLFxuICAgICAgc2V0UHJvZHVjdHNQYWdlOiBhY3Rpb24sXG4gICAgICBzZXRIYXNNb3JlRGF0YTogYWN0aW9uLFxuICAgICAgc2V0U2VhcmNoVGl0bGU6IGFjdGlvbixcbiAgICAgIHNldE1ldGE6IGFjdGlvbixcbiAgICAgIGdldENhdGVnb3JpZXNMaXN0OiBhY3Rpb24sXG4gICAgICBjaGFuZ2VGaWx0ZXJPcHRpb25zOiBhY3Rpb24sXG4gICAgICBzZXRDYXRlZ29yeUlkOiBhY3Rpb24sXG4gICAgICBzZXRTZWFyY2hDYXRlZ29yeTogYWN0aW9uLFxuICAgIH0pO1xuICB9XG5cbiAgZ2V0IHRvdGFsUHJvZHVjdHNMaXN0KCk6IFByb2R1Y3RNb2RlbFtdIHtcbiAgICByZXR1cm4gdGhpcy5fdG90YWxQcm9kdWN0c0xpc3Q7XG4gIH1cblxuICBnZXQgdG90YWxQcm9kdWN0c0NvdW50KCkge1xuICAgIHJldHVybiB0aGlzLl90b3RhbFByb2R1Y3RzQ291bnQ7XG4gIH1cblxuICBnZXQgbWV0YSgpOiBNZXRhIHtcbiAgICByZXR1cm4gdGhpcy5fbWV0YTtcbiAgfVxuXG4gIGdldCBzZWFyY2hUaXRsZSgpOiBRdWVyeVNlYXJjaCB7XG4gICAgcmV0dXJuIHRoaXMuX3NlYXJjaFRpdGxlO1xuICB9XG5cbiAgZ2V0IGhhc01vcmVEYXRhKCkge1xuICAgIHJldHVybiB0aGlzLl9oYXNNb3JlRGF0YTtcbiAgfVxuXG4gIGdldCBwcm9kdWN0c1BhZ2UoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Byb2R1Y3RzUGFnZTtcbiAgfVxuXG4gIGdldCBjYXRlZ29yaWVzTGlzdCgpIHtcbiAgICByZXR1cm4gdGhpcy5fY2F0ZWdvcmllc0xpc3Q7XG4gIH1cblxuICBnZXQgZmlsdGVyVmFsdWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX2ZpbHRlclZhbHVlO1xuICB9XG5cbiAgc2V0U2VhcmNoVGl0bGUodmFsdWU6IFF1ZXJ5U2VhcmNoKSB7XG4gICAgdGhpcy5fc2VhcmNoVGl0bGUgPSB2YWx1ZTtcbiAgfVxuXG4gIHNldEhhc01vcmVEYXRhKHN0YXR1czogYm9vbGVhbikge1xuICAgIHRoaXMuX2hhc01vcmVEYXRhID0gc3RhdHVzO1xuICB9XG5cbiAgc2V0UHJvZHVjdHNQYWdlKHZhbHVlOiBudW1iZXIpIHtcbiAgICB0aGlzLl9wcm9kdWN0c1BhZ2UgPSB2YWx1ZTtcbiAgfVxuXG4gIHNldENhdGVnb3J5SWQodmFsdWU6IHN0cmluZykge1xuICAgIHRoaXMuX2NhdGVnb3J5SWQgPSB2YWx1ZTtcbiAgfVxuICBzZXRNZXRhKHZhbHVlOiBNZXRhKSB7XG4gICAgdGhpcy5fbWV0YSA9IHZhbHVlO1xuICB9XG5cbiAgYXN5bmMgZ2V0UHJvZHVjdHNMaXN0KCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBheGlvcyh7XG4gICAgICAgIG1ldGhvZDogXCJnZXRcIixcbiAgICAgICAgdXJsOiBgJHtBUElfRU5EUE9JTlRTLlBST0RVQ1RTfT90aXRsZT0ke3RoaXMuX3NlYXJjaFRpdGxlfSZjYXRlZ29yeUlkPSR7dGhpcy5fY2F0ZWdvcnlJZH0mb2Zmc2V0PSR7dGhpcy5fcHJvZHVjdHNQYWdlfSZsaW1pdD0xMGAsXG4gICAgICB9KTtcbiAgICAgIHJ1bkluQWN0aW9uKCgpID0+IHtcbiAgICAgICAgdGhpcy5fbWV0YSA9IE1ldGEuc3VjY2VzcztcbiAgICAgICAgdGhpcy5fdG90YWxQcm9kdWN0c0xpc3QgPSBbLi4udGhpcy5fdG90YWxQcm9kdWN0c0xpc3QsIC4uLnJlc3VsdC5kYXRhXTtcbiAgICAgICAgaWYgKHJlc3VsdC5kYXRhLmxlbmd0aCA8IDEwKSB7XG4gICAgICAgICAgdGhpcy5faGFzTW9yZURhdGEgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9wcm9kdWN0c1BhZ2UgPSB0aGlzLl9wcm9kdWN0c1BhZ2UgKyAxMDtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRoaXMuX21ldGEgPSBNZXRhLmVycm9yO1xuICAgICAgdGhpcy5fdG90YWxQcm9kdWN0c0xpc3QgPSBbXTtcbiAgICAgIHRoaXMuX2hhc01vcmVEYXRhID0gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgYXN5bmMgZ2V0VG90YWxQcm9kdWN0Q291bnQoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IGF4aW9zKHtcbiAgICAgICAgbWV0aG9kOiBcImdldFwiLFxuICAgICAgICB1cmw6IGAke0FQSV9FTkRQT0lOVFMuUFJPRFVDVFN9P3RpdGxlPSR7dGhpcy5fc2VhcmNoVGl0bGV9JmNhdGVnb3J5SWQ9JHt0aGlzLl9jYXRlZ29yeUlkfWAsXG4gICAgICB9KTtcbiAgICAgIHJ1bkluQWN0aW9uKCgpID0+IHtcbiAgICAgICAgdGhpcy5fdG90YWxQcm9kdWN0c0NvdW50ID0gcmVzdWx0LmRhdGEubGVuZ3RoO1xuICAgICAgfSk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRoaXMuX21ldGEgPSBNZXRhLmVycm9yO1xuICAgICAgdGhpcy5fdG90YWxQcm9kdWN0c0NvdW50ID0gMDtcbiAgICB9XG4gIH1cblxuICBjbGVhclByb2R1Y3RMaXN0KCkge1xuICAgIHRoaXMuX3RvdGFsUHJvZHVjdHNMaXN0ID0gW107XG4gIH1cblxuICBhc3luYyBnZXRDYXRlZ29yaWVzTGlzdCgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgYXhpb3Moe1xuICAgICAgICBtZXRob2Q6IFwiZ2V0XCIsXG4gICAgICAgIHVybDogYCR7QVBJX0VORFBPSU5UUy5DQVRFR09SSUVTfWAsXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IGNhdGVnb3JpZXMgPSByZXN1bHQuZGF0YS5tYXAoKGNhdGVnb3J5OiBQcm9kdWN0Q2F0ZWdvcnlNb2RlbCkgPT4gKHtcbiAgICAgICAga2V5OiBjYXRlZ29yeS5pZCxcbiAgICAgICAgdmFsdWU6IGNhdGVnb3J5Lm5hbWUsXG4gICAgICB9KSk7XG4gICAgICBydW5JbkFjdGlvbigoKSA9PiB7XG4gICAgICAgIHRoaXMuX2NhdGVnb3JpZXNMaXN0ID0gWy4uLmNhdGVnb3JpZXNdO1xuICAgICAgICBjb25zdCBmaWx0ZXJWYWx1ZSA9IHRoaXMuX2NhdGVnb3JpZXNMaXN0LmZpbmQoXG4gICAgICAgICAgKGNhdGVnb3J5KSA9PiBjYXRlZ29yeS52YWx1ZSA9PT0gdGhpcy5fc2VhcmNoQ2F0ZWdvcnlcbiAgICAgICAgKTtcbiAgICAgICAgaWYgKGZpbHRlclZhbHVlKSB7XG4gICAgICAgICAgdGhpcy5fZmlsdGVyVmFsdWUgPSBmaWx0ZXJWYWx1ZTtcbiAgICAgICAgICB0aGlzLl9jYXRlZ29yeUlkID0gZmlsdGVyVmFsdWUua2V5O1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZ2V0UHJvZHVjdHNMaXN0KCk7XG4gICAgICAgIHRoaXMuZ2V0VG90YWxQcm9kdWN0Q291bnQoKTtcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aGlzLl9tZXRhID0gTWV0YS5lcnJvcjtcbiAgICAgIHRoaXMuX2NhdGVnb3JpZXNMaXN0ID0gW107XG4gICAgfVxuICB9XG5cbiAgY2hhbmdlRmlsdGVyT3B0aW9ucyh2YWx1ZTogT3B0aW9uKSB7XG4gICAgdGhpcy5fZmlsdGVyVmFsdWUgPSB2YWx1ZTtcbiAgfVxuXG4gIHNldFNlYXJjaENhdGVnb3J5KHZhbHVlOiBzdHJpbmcpIHtcbiAgICB0aGlzLl9zZWFyY2hDYXRlZ29yeSA9IHZhbHVlO1xuICB9XG5cbiAgcHJpdmF0ZSByZWFkb25seSBfcXBSZWFjdGlvbjogSVJlYWN0aW9uRGlzcG9zZXIgPSByZWFjdGlvbihcbiAgICAoKSA9PiByb290U3RvcmUucXVlcnkuZ2V0UGFyYW0oXCJzZWFyY2hcIikgfHwgXCJcIixcbiAgICAoc2VhcmNoKSA9PiB7XG4gICAgICB0aGlzLl9zZWFyY2hUaXRsZSA9IHNlYXJjaDtcbiAgICB9XG4gICk7XG5cbiAgZGVzdHJveSgpOiB2b2lkIHtcbiAgICB0aGlzLl9xcFJlYWN0aW9uKCk7XG4gIH1cbn1cbiIsIi8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cclxuTGljZW5zZWQgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlXHJcbnRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlXHJcbkxpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcblxyXG5USElTIENPREUgSVMgUFJPVklERUQgT04gQU4gKkFTIElTKiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXHJcbktJTkQsIEVJVEhFUiBFWFBSRVNTIE9SIElNUExJRUQsIElOQ0xVRElORyBXSVRIT1VUIExJTUlUQVRJT04gQU5ZIElNUExJRURcclxuV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIFRJVExFLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSxcclxuTUVSQ0hBTlRBQkxJVFkgT1IgTk9OLUlORlJJTkdFTUVOVC5cclxuXHJcblNlZSB0aGUgQXBhY2hlIFZlcnNpb24gMi4wIExpY2Vuc2UgZm9yIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9uc1xyXG5hbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlICovXHJcblxyXG52YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoYi5oYXNPd25Qcm9wZXJ0eShwKSkgZFtwXSA9IGJbcF07IH07XHJcbiAgICByZXR1cm4gZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxufTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4dGVuZHMoZCwgYikge1xyXG4gICAgZXh0ZW5kU3RhdGljcyhkLCBiKTtcclxuICAgIGZ1bmN0aW9uIF9fKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gZDsgfVxyXG4gICAgZC5wcm90b3R5cGUgPSBiID09PSBudWxsID8gT2JqZWN0LmNyZWF0ZShiKSA6IChfXy5wcm90b3R5cGUgPSBiLnByb3RvdHlwZSwgbmV3IF9fKCkpO1xyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fYXNzaWduID0gZnVuY3Rpb24oKSB7XHJcbiAgICBfX2Fzc2lnbiA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gX19hc3NpZ24odCkge1xyXG4gICAgICAgIGZvciAodmFyIHMsIGkgPSAxLCBuID0gYXJndW1lbnRzLmxlbmd0aDsgaSA8IG47IGkrKykge1xyXG4gICAgICAgICAgICBzID0gYXJndW1lbnRzW2ldO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkpIHRbcF0gPSBzW3BdO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdDtcclxuICAgIH1cclxuICAgIHJldHVybiBfX2Fzc2lnbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19yZXN0KHMsIGUpIHtcclxuICAgIHZhciB0ID0ge307XHJcbiAgICBmb3IgKHZhciBwIGluIHMpIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocywgcCkgJiYgZS5pbmRleE9mKHApIDwgMClcclxuICAgICAgICB0W3BdID0gc1twXTtcclxuICAgIGlmIChzICE9IG51bGwgJiYgdHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09IFwiZnVuY3Rpb25cIilcclxuICAgICAgICBmb3IgKHZhciBpID0gMCwgcCA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocyk7IGkgPCBwLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChlLmluZGV4T2YocFtpXSkgPCAwICYmIE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzLCBwW2ldKSlcclxuICAgICAgICAgICAgICAgIHRbcFtpXV0gPSBzW3BbaV1dO1xyXG4gICAgICAgIH1cclxuICAgIHJldHVybiB0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYykge1xyXG4gICAgdmFyIGMgPSBhcmd1bWVudHMubGVuZ3RoLCByID0gYyA8IDMgPyB0YXJnZXQgOiBkZXNjID09PSBudWxsID8gZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IodGFyZ2V0LCBrZXkpIDogZGVzYywgZDtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5kZWNvcmF0ZSA9PT0gXCJmdW5jdGlvblwiKSByID0gUmVmbGVjdC5kZWNvcmF0ZShkZWNvcmF0b3JzLCB0YXJnZXQsIGtleSwgZGVzYyk7XHJcbiAgICBlbHNlIGZvciAodmFyIGkgPSBkZWNvcmF0b3JzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSBpZiAoZCA9IGRlY29yYXRvcnNbaV0pIHIgPSAoYyA8IDMgPyBkKHIpIDogYyA+IDMgPyBkKHRhcmdldCwga2V5LCByKSA6IGQodGFyZ2V0LCBrZXkpKSB8fCByO1xyXG4gICAgcmV0dXJuIGMgPiAzICYmIHIgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCByKSwgcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcGFyYW0ocGFyYW1JbmRleCwgZGVjb3JhdG9yKSB7XHJcbiAgICByZXR1cm4gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7IGRlY29yYXRvcih0YXJnZXQsIGtleSwgcGFyYW1JbmRleCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpIHtcclxuICAgIGlmICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJvYmplY3RcIiAmJiB0eXBlb2YgUmVmbGVjdC5tZXRhZGF0YSA9PT0gXCJmdW5jdGlvblwiKSByZXR1cm4gUmVmbGVjdC5tZXRhZGF0YShtZXRhZGF0YUtleSwgbWV0YWRhdGFWYWx1ZSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0ZXIodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBuZXcgUChmdW5jdGlvbiAocmVzb2x2ZSkgeyByZXNvbHZlKHJlc3VsdC52YWx1ZSk7IH0pLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19leHBvcnRTdGFyKG0sIGV4cG9ydHMpIHtcclxuICAgIGZvciAodmFyIHAgaW4gbSkgaWYgKCFleHBvcnRzLmhhc093blByb3BlcnR5KHApKSBleHBvcnRzW3BdID0gbVtwXTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fdmFsdWVzKG8pIHtcclxuICAgIHZhciBtID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9bU3ltYm9sLml0ZXJhdG9yXSwgaSA9IDA7XHJcbiAgICBpZiAobSkgcmV0dXJuIG0uY2FsbChvKTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAobyAmJiBpID49IG8ubGVuZ3RoKSBvID0gdm9pZCAwO1xyXG4gICAgICAgICAgICByZXR1cm4geyB2YWx1ZTogbyAmJiBvW2krK10sIGRvbmU6ICFvIH07XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVhZChvLCBuKSB7XHJcbiAgICB2YXIgbSA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvW1N5bWJvbC5pdGVyYXRvcl07XHJcbiAgICBpZiAoIW0pIHJldHVybiBvO1xyXG4gICAgdmFyIGkgPSBtLmNhbGwobyksIHIsIGFyID0gW10sIGU7XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHdoaWxlICgobiA9PT0gdm9pZCAwIHx8IG4tLSA+IDApICYmICEociA9IGkubmV4dCgpKS5kb25lKSBhci5wdXNoKHIudmFsdWUpO1xyXG4gICAgfVxyXG4gICAgY2F0Y2ggKGVycm9yKSB7IGUgPSB7IGVycm9yOiBlcnJvciB9OyB9XHJcbiAgICBmaW5hbGx5IHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBpZiAociAmJiAhci5kb25lICYmIChtID0gaVtcInJldHVyblwiXSkpIG0uY2FsbChpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZmluYWxseSB7IGlmIChlKSB0aHJvdyBlLmVycm9yOyB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYXI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZCgpIHtcclxuICAgIGZvciAodmFyIGFyID0gW10sIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKVxyXG4gICAgICAgIGFyID0gYXIuY29uY2F0KF9fcmVhZChhcmd1bWVudHNbaV0pKTtcclxuICAgIHJldHVybiBhcjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXlzKCkge1xyXG4gICAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XHJcbiAgICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXHJcbiAgICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXHJcbiAgICAgICAgICAgIHJba10gPSBhW2pdO1xyXG4gICAgcmV0dXJuIHI7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdCh2KSB7XHJcbiAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIF9fYXdhaXQgPyAodGhpcy52ID0gdiwgdGhpcykgOiBuZXcgX19hd2FpdCh2KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNHZW5lcmF0b3IodGhpc0FyZywgX2FyZ3VtZW50cywgZ2VuZXJhdG9yKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIGcgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSksIGksIHEgPSBbXTtcclxuICAgIHJldHVybiBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpZiAoZ1tuXSkgaVtuXSA9IGZ1bmN0aW9uICh2KSB7IHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAoYSwgYikgeyBxLnB1c2goW24sIHYsIGEsIGJdKSA+IDEgfHwgcmVzdW1lKG4sIHYpOyB9KTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gcmVzdW1lKG4sIHYpIHsgdHJ5IHsgc3RlcChnW25dKHYpKTsgfSBjYXRjaCAoZSkgeyBzZXR0bGUocVswXVszXSwgZSk7IH0gfVxyXG4gICAgZnVuY3Rpb24gc3RlcChyKSB7IHIudmFsdWUgaW5zdGFuY2VvZiBfX2F3YWl0ID8gUHJvbWlzZS5yZXNvbHZlKHIudmFsdWUudikudGhlbihmdWxmaWxsLCByZWplY3QpIDogc2V0dGxlKHFbMF1bMl0sIHIpOyB9XHJcbiAgICBmdW5jdGlvbiBmdWxmaWxsKHZhbHVlKSB7IHJlc3VtZShcIm5leHRcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiByZWplY3QodmFsdWUpIHsgcmVzdW1lKFwidGhyb3dcIiwgdmFsdWUpOyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUoZiwgdikgeyBpZiAoZih2KSwgcS5zaGlmdCgpLCBxLmxlbmd0aCkgcmVzdW1lKHFbMF1bMF0sIHFbMF1bMV0pOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2FzeW5jRGVsZWdhdG9yKG8pIHtcclxuICAgIHZhciBpLCBwO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiLCBmdW5jdGlvbiAoZSkgeyB0aHJvdyBlOyB9KSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobiwgZikgeyBpW25dID0gb1tuXSA/IGZ1bmN0aW9uICh2KSB7IHJldHVybiAocCA9ICFwKSA/IHsgdmFsdWU6IF9fYXdhaXQob1tuXSh2KSksIGRvbmU6IG4gPT09IFwicmV0dXJuXCIgfSA6IGYgPyBmKHYpIDogdjsgfSA6IGY7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNWYWx1ZXMobykge1xyXG4gICAgaWYgKCFTeW1ib2wuYXN5bmNJdGVyYXRvcikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN5bWJvbC5hc3luY0l0ZXJhdG9yIGlzIG5vdCBkZWZpbmVkLlwiKTtcclxuICAgIHZhciBtID0gb1tTeW1ib2wuYXN5bmNJdGVyYXRvcl0sIGk7XHJcbiAgICByZXR1cm4gbSA/IG0uY2FsbChvKSA6IChvID0gdHlwZW9mIF9fdmFsdWVzID09PSBcImZ1bmN0aW9uXCIgPyBfX3ZhbHVlcyhvKSA6IG9bU3ltYm9sLml0ZXJhdG9yXSgpLCBpID0ge30sIHZlcmIoXCJuZXh0XCIpLCB2ZXJiKFwidGhyb3dcIiksIHZlcmIoXCJyZXR1cm5cIiksIGlbU3ltYm9sLmFzeW5jSXRlcmF0b3JdID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfSwgaSk7XHJcbiAgICBmdW5jdGlvbiB2ZXJiKG4pIHsgaVtuXSA9IG9bbl0gJiYgZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHsgdiA9IG9bbl0odiksIHNldHRsZShyZXNvbHZlLCByZWplY3QsIHYuZG9uZSwgdi52YWx1ZSk7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiBzZXR0bGUocmVzb2x2ZSwgcmVqZWN0LCBkLCB2KSB7IFByb21pc2UucmVzb2x2ZSh2KS50aGVuKGZ1bmN0aW9uKHYpIHsgcmVzb2x2ZSh7IHZhbHVlOiB2LCBkb25lOiBkIH0pOyB9LCByZWplY3QpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ha2VUZW1wbGF0ZU9iamVjdChjb29rZWQsIHJhdykge1xyXG4gICAgaWYgKE9iamVjdC5kZWZpbmVQcm9wZXJ0eSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkoY29va2VkLCBcInJhd1wiLCB7IHZhbHVlOiByYXcgfSk7IH0gZWxzZSB7IGNvb2tlZC5yYXcgPSByYXc7IH1cclxuICAgIHJldHVybiBjb29rZWQ7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xyXG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcclxuICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChPYmplY3QuaGFzT3duUHJvcGVydHkuY2FsbChtb2QsIGspKSByZXN1bHRba10gPSBtb2Rba107XHJcbiAgICByZXN1bHQuZGVmYXVsdCA9IG1vZDtcclxuICAgIHJldHVybiByZXN1bHQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2ltcG9ydERlZmF1bHQobW9kKSB7XHJcbiAgICByZXR1cm4gKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgPyBtb2QgOiB7IGRlZmF1bHQ6IG1vZCB9O1xyXG59XHJcbiIsIi8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVmaW5lZCxuby1wYXJhbS1yZWFzc2lnbixuby1zaGFkb3cgKi9cblxuLyoqXG4gKiBUaHJvdHRsZSBleGVjdXRpb24gb2YgYSBmdW5jdGlvbi4gRXNwZWNpYWxseSB1c2VmdWwgZm9yIHJhdGUgbGltaXRpbmdcbiAqIGV4ZWN1dGlvbiBvZiBoYW5kbGVycyBvbiBldmVudHMgbGlrZSByZXNpemUgYW5kIHNjcm9sbC5cbiAqXG4gKiBAcGFyYW0gIHtOdW1iZXJ9ICAgIGRlbGF5ICAgICAgICAgIEEgemVyby1vci1ncmVhdGVyIGRlbGF5IGluIG1pbGxpc2Vjb25kcy4gRm9yIGV2ZW50IGNhbGxiYWNrcywgdmFsdWVzIGFyb3VuZCAxMDAgb3IgMjUwIChvciBldmVuIGhpZ2hlcikgYXJlIG1vc3QgdXNlZnVsLlxuICogQHBhcmFtICB7Qm9vbGVhbn0gICBbbm9UcmFpbGluZ10gICBPcHRpb25hbCwgZGVmYXVsdHMgdG8gZmFsc2UuIElmIG5vVHJhaWxpbmcgaXMgdHJ1ZSwgY2FsbGJhY2sgd2lsbCBvbmx5IGV4ZWN1dGUgZXZlcnkgYGRlbGF5YCBtaWxsaXNlY29uZHMgd2hpbGUgdGhlXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm90dGxlZC1mdW5jdGlvbiBpcyBiZWluZyBjYWxsZWQuIElmIG5vVHJhaWxpbmcgaXMgZmFsc2Ugb3IgdW5zcGVjaWZpZWQsIGNhbGxiYWNrIHdpbGwgYmUgZXhlY3V0ZWQgb25lIGZpbmFsIHRpbWVcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWZ0ZXIgdGhlIGxhc3QgdGhyb3R0bGVkLWZ1bmN0aW9uIGNhbGwuIChBZnRlciB0aGUgdGhyb3R0bGVkLWZ1bmN0aW9uIGhhcyBub3QgYmVlbiBjYWxsZWQgZm9yIGBkZWxheWAgbWlsbGlzZWNvbmRzLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgaW50ZXJuYWwgY291bnRlciBpcyByZXNldClcbiAqIEBwYXJhbSAge0Z1bmN0aW9ufSAgY2FsbGJhY2sgICAgICAgQSBmdW5jdGlvbiB0byBiZSBleGVjdXRlZCBhZnRlciBkZWxheSBtaWxsaXNlY29uZHMuIFRoZSBgdGhpc2AgY29udGV4dCBhbmQgYWxsIGFyZ3VtZW50cyBhcmUgcGFzc2VkIHRocm91Z2gsIGFzLWlzLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0byBgY2FsbGJhY2tgIHdoZW4gdGhlIHRocm90dGxlZC1mdW5jdGlvbiBpcyBleGVjdXRlZC5cbiAqIEBwYXJhbSAge0Jvb2xlYW59ICAgW2RlYm91bmNlTW9kZV0gSWYgYGRlYm91bmNlTW9kZWAgaXMgdHJ1ZSAoYXQgYmVnaW4pLCBzY2hlZHVsZSBgY2xlYXJgIHRvIGV4ZWN1dGUgYWZ0ZXIgYGRlbGF5YCBtcy4gSWYgYGRlYm91bmNlTW9kZWAgaXMgZmFsc2UgKGF0IGVuZCksXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNjaGVkdWxlIGBjYWxsYmFja2AgdG8gZXhlY3V0ZSBhZnRlciBgZGVsYXlgIG1zLlxuICpcbiAqIEByZXR1cm4ge0Z1bmN0aW9ufSAgQSBuZXcsIHRocm90dGxlZCwgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIHRocm90dGxlIChkZWxheSwgbm9UcmFpbGluZywgY2FsbGJhY2ssIGRlYm91bmNlTW9kZSkge1xuICAvKlxuICAgKiBBZnRlciB3cmFwcGVyIGhhcyBzdG9wcGVkIGJlaW5nIGNhbGxlZCwgdGhpcyB0aW1lb3V0IGVuc3VyZXMgdGhhdFxuICAgKiBgY2FsbGJhY2tgIGlzIGV4ZWN1dGVkIGF0IHRoZSBwcm9wZXIgdGltZXMgaW4gYHRocm90dGxlYCBhbmQgYGVuZGBcbiAgICogZGVib3VuY2UgbW9kZXMuXG4gICAqL1xuICB2YXIgdGltZW91dElEO1xuICB2YXIgY2FuY2VsbGVkID0gZmFsc2U7IC8vIEtlZXAgdHJhY2sgb2YgdGhlIGxhc3QgdGltZSBgY2FsbGJhY2tgIHdhcyBleGVjdXRlZC5cblxuICB2YXIgbGFzdEV4ZWMgPSAwOyAvLyBGdW5jdGlvbiB0byBjbGVhciBleGlzdGluZyB0aW1lb3V0XG5cbiAgZnVuY3Rpb24gY2xlYXJFeGlzdGluZ1RpbWVvdXQoKSB7XG4gICAgaWYgKHRpbWVvdXRJRCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVvdXRJRCk7XG4gICAgfVxuICB9IC8vIEZ1bmN0aW9uIHRvIGNhbmNlbCBuZXh0IGV4ZWNcblxuXG4gIGZ1bmN0aW9uIGNhbmNlbCgpIHtcbiAgICBjbGVhckV4aXN0aW5nVGltZW91dCgpO1xuICAgIGNhbmNlbGxlZCA9IHRydWU7XG4gIH0gLy8gYG5vVHJhaWxpbmdgIGRlZmF1bHRzIHRvIGZhbHN5LlxuXG5cbiAgaWYgKHR5cGVvZiBub1RyYWlsaW5nICE9PSAnYm9vbGVhbicpIHtcbiAgICBkZWJvdW5jZU1vZGUgPSBjYWxsYmFjaztcbiAgICBjYWxsYmFjayA9IG5vVHJhaWxpbmc7XG4gICAgbm9UcmFpbGluZyA9IHVuZGVmaW5lZDtcbiAgfVxuICAvKlxuICAgKiBUaGUgYHdyYXBwZXJgIGZ1bmN0aW9uIGVuY2Fwc3VsYXRlcyBhbGwgb2YgdGhlIHRocm90dGxpbmcgLyBkZWJvdW5jaW5nXG4gICAqIGZ1bmN0aW9uYWxpdHkgYW5kIHdoZW4gZXhlY3V0ZWQgd2lsbCBsaW1pdCB0aGUgcmF0ZSBhdCB3aGljaCBgY2FsbGJhY2tgXG4gICAqIGlzIGV4ZWN1dGVkLlxuICAgKi9cblxuXG4gIGZ1bmN0aW9uIHdyYXBwZXIoKSB7XG4gICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgIHZhciBlbGFwc2VkID0gRGF0ZS5ub3coKSAtIGxhc3RFeGVjO1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzO1xuXG4gICAgaWYgKGNhbmNlbGxlZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gRXhlY3V0ZSBgY2FsbGJhY2tgIGFuZCB1cGRhdGUgdGhlIGBsYXN0RXhlY2AgdGltZXN0YW1wLlxuXG5cbiAgICBmdW5jdGlvbiBleGVjKCkge1xuICAgICAgbGFzdEV4ZWMgPSBEYXRlLm5vdygpO1xuICAgICAgY2FsbGJhY2suYXBwbHkoc2VsZiwgYXJncyk7XG4gICAgfVxuICAgIC8qXG4gICAgICogSWYgYGRlYm91bmNlTW9kZWAgaXMgdHJ1ZSAoYXQgYmVnaW4pIHRoaXMgaXMgdXNlZCB0byBjbGVhciB0aGUgZmxhZ1xuICAgICAqIHRvIGFsbG93IGZ1dHVyZSBgY2FsbGJhY2tgIGV4ZWN1dGlvbnMuXG4gICAgICovXG5cblxuICAgIGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgdGltZW91dElEID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGlmIChkZWJvdW5jZU1vZGUgJiYgIXRpbWVvdXRJRCkge1xuICAgICAgLypcbiAgICAgICAqIFNpbmNlIGB3cmFwcGVyYCBpcyBiZWluZyBjYWxsZWQgZm9yIHRoZSBmaXJzdCB0aW1lIGFuZFxuICAgICAgICogYGRlYm91bmNlTW9kZWAgaXMgdHJ1ZSAoYXQgYmVnaW4pLCBleGVjdXRlIGBjYWxsYmFja2AuXG4gICAgICAgKi9cbiAgICAgIGV4ZWMoKTtcbiAgICB9XG5cbiAgICBjbGVhckV4aXN0aW5nVGltZW91dCgpO1xuXG4gICAgaWYgKGRlYm91bmNlTW9kZSA9PT0gdW5kZWZpbmVkICYmIGVsYXBzZWQgPiBkZWxheSkge1xuICAgICAgLypcbiAgICAgICAqIEluIHRocm90dGxlIG1vZGUsIGlmIGBkZWxheWAgdGltZSBoYXMgYmVlbiBleGNlZWRlZCwgZXhlY3V0ZVxuICAgICAgICogYGNhbGxiYWNrYC5cbiAgICAgICAqL1xuICAgICAgZXhlYygpO1xuICAgIH0gZWxzZSBpZiAobm9UcmFpbGluZyAhPT0gdHJ1ZSkge1xuICAgICAgLypcbiAgICAgICAqIEluIHRyYWlsaW5nIHRocm90dGxlIG1vZGUsIHNpbmNlIGBkZWxheWAgdGltZSBoYXMgbm90IGJlZW5cbiAgICAgICAqIGV4Y2VlZGVkLCBzY2hlZHVsZSBgY2FsbGJhY2tgIHRvIGV4ZWN1dGUgYGRlbGF5YCBtcyBhZnRlciBtb3N0XG4gICAgICAgKiByZWNlbnQgZXhlY3V0aW9uLlxuICAgICAgICpcbiAgICAgICAqIElmIGBkZWJvdW5jZU1vZGVgIGlzIHRydWUgKGF0IGJlZ2luKSwgc2NoZWR1bGUgYGNsZWFyYCB0byBleGVjdXRlXG4gICAgICAgKiBhZnRlciBgZGVsYXlgIG1zLlxuICAgICAgICpcbiAgICAgICAqIElmIGBkZWJvdW5jZU1vZGVgIGlzIGZhbHNlIChhdCBlbmQpLCBzY2hlZHVsZSBgY2FsbGJhY2tgIHRvXG4gICAgICAgKiBleGVjdXRlIGFmdGVyIGBkZWxheWAgbXMuXG4gICAgICAgKi9cbiAgICAgIHRpbWVvdXRJRCA9IHNldFRpbWVvdXQoZGVib3VuY2VNb2RlID8gY2xlYXIgOiBleGVjLCBkZWJvdW5jZU1vZGUgPT09IHVuZGVmaW5lZCA/IGRlbGF5IC0gZWxhcHNlZCA6IGRlbGF5KTtcbiAgICB9XG4gIH1cblxuICB3cmFwcGVyLmNhbmNlbCA9IGNhbmNlbDsgLy8gUmV0dXJuIHRoZSB3cmFwcGVyIGZ1bmN0aW9uLlxuXG4gIHJldHVybiB3cmFwcGVyO1xufVxuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlZmluZWQgKi9cbi8qKlxuICogRGVib3VuY2UgZXhlY3V0aW9uIG9mIGEgZnVuY3Rpb24uIERlYm91bmNpbmcsIHVubGlrZSB0aHJvdHRsaW5nLFxuICogZ3VhcmFudGVlcyB0aGF0IGEgZnVuY3Rpb24gaXMgb25seSBleGVjdXRlZCBhIHNpbmdsZSB0aW1lLCBlaXRoZXIgYXQgdGhlXG4gKiB2ZXJ5IGJlZ2lubmluZyBvZiBhIHNlcmllcyBvZiBjYWxscywgb3IgYXQgdGhlIHZlcnkgZW5kLlxuICpcbiAqIEBwYXJhbSAge051bWJlcn0gICBkZWxheSAgICAgICAgIEEgemVyby1vci1ncmVhdGVyIGRlbGF5IGluIG1pbGxpc2Vjb25kcy4gRm9yIGV2ZW50IGNhbGxiYWNrcywgdmFsdWVzIGFyb3VuZCAxMDAgb3IgMjUwIChvciBldmVuIGhpZ2hlcikgYXJlIG1vc3QgdXNlZnVsLlxuICogQHBhcmFtICB7Qm9vbGVhbn0gIFthdEJlZ2luXSAgICAgT3B0aW9uYWwsIGRlZmF1bHRzIHRvIGZhbHNlLiBJZiBhdEJlZ2luIGlzIGZhbHNlIG9yIHVuc3BlY2lmaWVkLCBjYWxsYmFjayB3aWxsIG9ubHkgYmUgZXhlY3V0ZWQgYGRlbGF5YCBtaWxsaXNlY29uZHNcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFmdGVyIHRoZSBsYXN0IGRlYm91bmNlZC1mdW5jdGlvbiBjYWxsLiBJZiBhdEJlZ2luIGlzIHRydWUsIGNhbGxiYWNrIHdpbGwgYmUgZXhlY3V0ZWQgb25seSBhdCB0aGUgZmlyc3QgZGVib3VuY2VkLWZ1bmN0aW9uIGNhbGwuXG4gKiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoQWZ0ZXIgdGhlIHRocm90dGxlZC1mdW5jdGlvbiBoYXMgbm90IGJlZW4gY2FsbGVkIGZvciBgZGVsYXlgIG1pbGxpc2Vjb25kcywgdGhlIGludGVybmFsIGNvdW50ZXIgaXMgcmVzZXQpLlxuICogQHBhcmFtICB7RnVuY3Rpb259IGNhbGxiYWNrICAgICAgQSBmdW5jdGlvbiB0byBiZSBleGVjdXRlZCBhZnRlciBkZWxheSBtaWxsaXNlY29uZHMuIFRoZSBgdGhpc2AgY29udGV4dCBhbmQgYWxsIGFyZ3VtZW50cyBhcmUgcGFzc2VkIHRocm91Z2gsIGFzLWlzLFxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG8gYGNhbGxiYWNrYCB3aGVuIHRoZSBkZWJvdW5jZWQtZnVuY3Rpb24gaXMgZXhlY3V0ZWQuXG4gKlxuICogQHJldHVybiB7RnVuY3Rpb259IEEgbmV3LCBkZWJvdW5jZWQgZnVuY3Rpb24uXG4gKi9cblxuZnVuY3Rpb24gZGVib3VuY2UgKGRlbGF5LCBhdEJlZ2luLCBjYWxsYmFjaykge1xuICByZXR1cm4gY2FsbGJhY2sgPT09IHVuZGVmaW5lZCA/IHRocm90dGxlKGRlbGF5LCBhdEJlZ2luLCBmYWxzZSkgOiB0aHJvdHRsZShkZWxheSwgY2FsbGJhY2ssIGF0QmVnaW4gIT09IGZhbHNlKTtcbn1cblxuZXhwb3J0IHsgdGhyb3R0bGUsIGRlYm91bmNlIH07XG4iLCJpbXBvcnQgUmVhY3QsIHsgdXNlQ2FsbGJhY2ssIHVzZUVmZmVjdCB9IGZyb20gXCJyZWFjdFwiO1xuXG5pbXBvcnQgeyBCdXR0b24gfSBmcm9tIFwiQGNvbXBvbmVudHMvQnV0dG9uXCI7XG5pbXBvcnQgeyBDYXJkIH0gZnJvbSBcIkBjb21wb25lbnRzL0NhcmRcIjtcbmltcG9ydCB7IERyb3Bkb3duLCBPcHRpb24gfSBmcm9tIFwiQGNvbXBvbmVudHMvRHJvcGRvd24vRHJvcGRvd25cIjtcbmltcG9ydCB7IElucHV0IH0gZnJvbSBcIkBjb21wb25lbnRzL0lucHV0XCI7XG5pbXBvcnQgeyBMb2FkZXIsIExvYWRlclNpemUgfSBmcm9tIFwiQGNvbXBvbmVudHMvTG9hZGVyXCI7XG5pbXBvcnQgU2VhcmNoSWNvbiBmcm9tIFwiQGljb25zL3NlYXJjaC1ub3JtYWwuc3ZnXCI7XG5pbXBvcnQgeyBQcm9kdWN0TW9kZWwgfSBmcm9tIFwiQHN0b3JlL21vZGVsc1wiO1xuaW1wb3J0IFByb2R1Y3RzU3RvcmUgZnJvbSBcIkBzdG9yZS9Qcm9kdWN0c1N0b3JlXCI7XG5pbXBvcnQgcm9vdFN0b3JlIGZyb20gXCJAc3RvcmUvUm9vdFN0b3JlL2luc3RhbmNlXCI7XG5pbXBvcnQgeyBNZXRhIH0gZnJvbSBcIkB1dGlscy9tZXRhXCI7XG5pbXBvcnQgeyB1c2VMb2NhbFN0b3JlIH0gZnJvbSBcIkB1dGlscy91c2VMb2NhbFN0b3JlXCI7XG5pbXBvcnQgeyBvYnNlcnZlciB9IGZyb20gXCJtb2J4LXJlYWN0LWxpdGVcIjtcbmltcG9ydCBJbmZpbml0ZVNjcm9sbCBmcm9tIFwicmVhY3QtaW5maW5pdGUtc2Nyb2xsLWNvbXBvbmVudFwiO1xuaW1wb3J0IHsgdXNlTmF2aWdhdGUsIHVzZVNlYXJjaFBhcmFtcyB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5cbmltcG9ydCBjbHMgZnJvbSBcIi4vUHJvZHVjdHMubW9kdWxlLnNjc3NcIjtcblxuY29uc3QgUHJvZHVjdHMgPSBvYnNlcnZlcigoKSA9PiB7XG4gIGNvbnN0IFtzZWFyY2hQYXJhbXMsIHNldFNlYXJjaFBhcmFtc10gPSB1c2VTZWFyY2hQYXJhbXMoKTtcbiAgY29uc3QgbmF2aWdhdGUgPSB1c2VOYXZpZ2F0ZSgpO1xuICBjb25zdCBwcm9kdWN0c1N0b3JlID0gdXNlTG9jYWxTdG9yZSgoKSA9PiBuZXcgUHJvZHVjdHNTdG9yZSgpKTtcblxuICB1c2VFZmZlY3QoKCkgPT4ge1xuICAgIHByb2R1Y3RzU3RvcmUuc2V0U2VhcmNoVGl0bGUoc2VhcmNoUGFyYW1zLmdldChcInNlYXJjaFwiKSB8fCBcIlwiKTtcbiAgICBwcm9kdWN0c1N0b3JlLnNldFNlYXJjaENhdGVnb3J5KHNlYXJjaFBhcmFtcy5nZXQoXCJjYXRlZ29yeVwiKSB8fCBcIlwiKTtcbiAgICBwcm9kdWN0c1N0b3JlLmdldENhdGVnb3JpZXNMaXN0KCk7XG4gIH0sIFtdKTtcblxuICBjb25zdCBzZWFyY2hIYW5kbGVyID0gdXNlQ2FsbGJhY2soXG4gICAgKHRpdGxlOiBzdHJpbmcpID0+IHtcbiAgICAgIHNldFNlYXJjaFBhcmFtcygoc2VhcmNoUGFyYW1zKSA9PiB7XG4gICAgICAgIHRpdGxlXG4gICAgICAgICAgPyBzZWFyY2hQYXJhbXMuc2V0KFwic2VhcmNoXCIsIHRpdGxlKVxuICAgICAgICAgIDogc2VhcmNoUGFyYW1zLmRlbGV0ZShcInNlYXJjaFwiKTtcbiAgICAgICAgcmV0dXJuIHNlYXJjaFBhcmFtcztcbiAgICAgIH0pO1xuICAgICAgcHJvZHVjdHNTdG9yZS5zZXRIYXNNb3JlRGF0YSh0cnVlKTtcbiAgICB9LFxuICAgIFtwcm9kdWN0c1N0b3JlLCBzZXRTZWFyY2hQYXJhbXNdXG4gICk7XG5cbiAgY29uc3QgaGFuZGxlR2V0UHJvZHVjdHNMaXN0ID0gdXNlQ2FsbGJhY2soKCkgPT4ge1xuICAgIHByb2R1Y3RzU3RvcmUuc2V0TWV0YShNZXRhLmxvYWRpbmcpO1xuICAgIHByb2R1Y3RzU3RvcmUuY2xlYXJQcm9kdWN0TGlzdCgpO1xuICAgIHByb2R1Y3RzU3RvcmUuc2V0UHJvZHVjdHNQYWdlKDApO1xuICAgIHByb2R1Y3RzU3RvcmUuZ2V0UHJvZHVjdHNMaXN0KCk7XG4gICAgcHJvZHVjdHNTdG9yZS5nZXRUb3RhbFByb2R1Y3RDb3VudCgpO1xuICB9LCBbcHJvZHVjdHNTdG9yZV0pO1xuXG4gIGNvbnN0IGdldE5leHRQcm9kdWN0UGFnZSA9IHVzZUNhbGxiYWNrKFxuICAgICgpID0+IHByb2R1Y3RzU3RvcmUuZ2V0UHJvZHVjdHNMaXN0KCksXG4gICAgW3Byb2R1Y3RzU3RvcmVdXG4gICk7XG5cbiAgY29uc3QgaGFuZGxlQ2hhbmdlRmlsdGVyID0gKG9wdGlvbjogT3B0aW9uKSA9PiB7XG4gICAgcHJvZHVjdHNTdG9yZS5jaGFuZ2VGaWx0ZXJPcHRpb25zKG9wdGlvbik7XG4gICAgcHJvZHVjdHNTdG9yZS5zZXRDYXRlZ29yeUlkKG9wdGlvbi5rZXkgfHwgXCJcIik7XG4gICAgcHJvZHVjdHNTdG9yZS5jbGVhclByb2R1Y3RMaXN0KCk7XG4gICAgcHJvZHVjdHNTdG9yZS5zZXRQcm9kdWN0c1BhZ2UoMCk7XG4gICAgcHJvZHVjdHNTdG9yZS5nZXRQcm9kdWN0c0xpc3QoKTtcbiAgICBwcm9kdWN0c1N0b3JlLmdldFRvdGFsUHJvZHVjdENvdW50KCk7XG4gICAgc2V0U2VhcmNoUGFyYW1zKChzZWFyY2hQYXJhbXMpID0+IHtcbiAgICAgIG9wdGlvbi52YWx1ZVxuICAgICAgICA/IHNlYXJjaFBhcmFtcy5zZXQoXCJjYXRlZ29yeVwiLCBvcHRpb24udmFsdWUpXG4gICAgICAgIDogc2VhcmNoUGFyYW1zLmRlbGV0ZShcImNhdGVnb3J5XCIpO1xuICAgICAgcmV0dXJuIHNlYXJjaFBhcmFtcztcbiAgICB9KTtcbiAgfTtcblxuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPXtjbHMuUHJvZHVjdHN9PlxuICAgICAgPGRpdiBjbGFzc05hbWU9e2Nscy5jb250YWluZXJ9PlxuICAgICAgICA8aDE+UHJvZHVjdHM8L2gxPlxuICAgICAgICA8cCBjbGFzc05hbWU9e2Nscy5zdWJ0aXRsZX0+XG4gICAgICAgICAgV2UgZGlzcGxheSBwcm9kdWN0cyBiYXNlZCBvbiB0aGUgbGF0ZXN0IHByb2R1Y3RzIHdlIGhhdmUsIGlmIHlvdSB3YW50XG4gICAgICAgICAgdG8gc2VlIG91ciBvbGQgcHJvZHVjdHMgcGxlYXNlIGVudGVyIHRoZSBuYW1lIG9mIHRoZSBpdGVtXG4gICAgICAgIDwvcD5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2Nscy5zZWFyY2hfY29udGFpbmVyfT5cbiAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17Y2xzLnNlYXJjaH0+XG4gICAgICAgICAgICA8aW1nIHNyYz17U2VhcmNoSWNvbn0gYWx0PVwic2VhcmNoXCIgLz5cbiAgICAgICAgICAgIDxJbnB1dFxuICAgICAgICAgICAgICB2YWx1ZT17c2VhcmNoUGFyYW1zLmdldChcInNlYXJjaFwiKSB8fCBcIlwifVxuICAgICAgICAgICAgICBvbkNoYW5nZT17c2VhcmNoSGFuZGxlcn1cbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI9XCJTZWFyY2ggcHJvcGVydHlcIlxuICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDxCdXR0b25cbiAgICAgICAgICAgICAgb25DbGljaz17aGFuZGxlR2V0UHJvZHVjdHNMaXN0fVxuICAgICAgICAgICAgICBsb2FkaW5nPXtwcm9kdWN0c1N0b3JlLm1ldGEgPT09IFwibG9hZGluZ1wifVxuICAgICAgICAgICAgICBkaXNhYmxlZD17IXByb2R1Y3RzU3RvcmUuaGFzTW9yZURhdGF9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgIEZpbmQgTm93XG4gICAgICAgICAgICA8L0J1dHRvbj5cbiAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICA8RHJvcGRvd25cbiAgICAgICAgICAgIG9wdGlvbnM9e3Byb2R1Y3RzU3RvcmUuY2F0ZWdvcmllc0xpc3R9XG4gICAgICAgICAgICB2YWx1ZT17cHJvZHVjdHNTdG9yZS5maWx0ZXJWYWx1ZX1cbiAgICAgICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVDaGFuZ2VGaWx0ZXJ9XG4gICAgICAgICAgLz5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbHMucHJvZHVjdHNfaW5mb30+XG4gICAgICAgICAgPGgyPlRvdGFsIFByb2R1Y3Q8L2gyPlxuICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtjbHMuY291bnR9Pntwcm9kdWN0c1N0b3JlLnRvdGFsUHJvZHVjdHNDb3VudH08L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxJbmZpbml0ZVNjcm9sbFxuICAgICAgICBjbGFzc05hbWU9e2Nscy5pbmZpbml0ZV9zY3JvbGx9XG4gICAgICAgIGRhdGFMZW5ndGg9e3Byb2R1Y3RzU3RvcmUudG90YWxQcm9kdWN0c0xpc3QubGVuZ3RofVxuICAgICAgICBuZXh0PXtnZXROZXh0UHJvZHVjdFBhZ2V9XG4gICAgICAgIGhhc01vcmU9e3Byb2R1Y3RzU3RvcmUuaGFzTW9yZURhdGF9XG4gICAgICAgIGxvYWRlcj17PExvYWRlciBzaXplPXtMb2FkZXJTaXplLmx9IC8+fVxuICAgICAgICBlbmRNZXNzYWdlPXtcbiAgICAgICAgICBwcm9kdWN0c1N0b3JlLm1ldGEgPT09IFwiZXJyb3JcIiA/IChcbiAgICAgICAgICAgIDxoMj5OZXR3b3JrIGVycm9yLCBwbGVhc2UgdHJ5IGFnYWluIGxhdGVyPC9oMj5cbiAgICAgICAgICApIDogKFxuICAgICAgICAgICAgPGgyPllvdSBoYXZlIHNlZW4gaXQgYWxsPC9oMj5cbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgID5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e2Nscy5wcm9kdWN0c19saXN0fT5cbiAgICAgICAgICB7cHJvZHVjdHNTdG9yZS50b3RhbFByb2R1Y3RzTGlzdC5tYXAoKHByb2R1Y3Q6IFByb2R1Y3RNb2RlbCkgPT4gKFxuICAgICAgICAgICAgPENhcmRcbiAgICAgICAgICAgICAga2V5PXtwcm9kdWN0LmlkfVxuICAgICAgICAgICAgICBpZD17cHJvZHVjdC5pZH1cbiAgICAgICAgICAgICAgaW1hZ2U9e3Byb2R1Y3QuaW1hZ2VzWzBdfVxuICAgICAgICAgICAgICBjYXRlZ29yeT17cHJvZHVjdC5jYXRlZ29yeS5uYW1lfVxuICAgICAgICAgICAgICB0aXRsZT17cHJvZHVjdC50aXRsZX1cbiAgICAgICAgICAgICAgY29udGVudD17cHJvZHVjdC5wcmljZX1cbiAgICAgICAgICAgICAgb25DbGljaz17KCkgPT4ge1xuICAgICAgICAgICAgICAgIHJvb3RTdG9yZS5xdWVyeS5zZXRTZWFyY2goYHByb2R1Y3RJZD0ke3Byb2R1Y3QuaWR9YCk7XG4gICAgICAgICAgICAgICAgbmF2aWdhdGUoYC9wcm9kdWN0LyR7cHJvZHVjdC5pZH1gKTtcbiAgICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgICAgKSl9XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9JbmZpbml0ZVNjcm9sbD5cbiAgICA8L2Rpdj5cbiAgKTtcbn0pO1xuZXhwb3J0IGRlZmF1bHQgUmVhY3QubWVtbyhQcm9kdWN0cyk7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUxvY2FsU3RvcmUge1xuICBkZXN0cm95KCk6IHZvaWQ7XG59XG5cbmV4cG9ydCBjb25zdCB1c2VMb2NhbFN0b3JlID0gPFQgZXh0ZW5kcyBJTG9jYWxTdG9yZT4oY3JlYXRvcjogKCkgPT4gVCk6IFQgPT4ge1xuICBjb25zdCBjb250YWluZXIgPSBSZWFjdC51c2VSZWY8bnVsbCB8IFQ+KG51bGwpO1xuICBpZiAoY29udGFpbmVyLmN1cnJlbnQgPT09IG51bGwpIHtcbiAgICBjb250YWluZXIuY3VycmVudCA9IGNyZWF0b3IoKTtcbiAgfVxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHJldHVybiAoKSA9PiBjb250YWluZXIuY3VycmVudD8uZGVzdHJveSgpO1xuICB9LCBbXSk7XG4gIHJldHVybiBjb250YWluZXIuY3VycmVudDtcbn07XG4iLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbmV4cG9ydCBkZWZhdWx0IHtcIlByb2R1Y3RzXCI6XCJzcmMtcGFnZXMtUHJvZHVjdHMtUHJvZHVjdHMtbW9kdWxlX19Qcm9kdWN0c1wiLFwiY29udGFpbmVyXCI6XCJzcmMtcGFnZXMtUHJvZHVjdHMtUHJvZHVjdHMtbW9kdWxlX19jb250YWluZXJcIixcInN1YnRpdGxlXCI6XCJzcmMtcGFnZXMtUHJvZHVjdHMtUHJvZHVjdHMtbW9kdWxlX19zdWJ0aXRsZVwiLFwic2VhcmNoX2NvbnRhaW5lclwiOlwic3JjLXBhZ2VzLVByb2R1Y3RzLVByb2R1Y3RzLW1vZHVsZV9fc2VhcmNoX2NvbnRhaW5lclwiLFwic2VhcmNoXCI6XCJzcmMtcGFnZXMtUHJvZHVjdHMtUHJvZHVjdHMtbW9kdWxlX19zZWFyY2hcIixcInByb2R1Y3RzX2luZm9cIjpcInNyYy1wYWdlcy1Qcm9kdWN0cy1Qcm9kdWN0cy1tb2R1bGVfX3Byb2R1Y3RzX2luZm9cIixcImNvdW50XCI6XCJzcmMtcGFnZXMtUHJvZHVjdHMtUHJvZHVjdHMtbW9kdWxlX19jb3VudFwiLFwicHJvZHVjdHNfbGlzdFwiOlwic3JjLXBhZ2VzLVByb2R1Y3RzLVByb2R1Y3RzLW1vZHVsZV9fcHJvZHVjdHNfbGlzdFwiLFwiZmlsdGVyX2J1dHRvblwiOlwic3JjLXBhZ2VzLVByb2R1Y3RzLVByb2R1Y3RzLW1vZHVsZV9fZmlsdGVyX2J1dHRvblwiLFwiaW5maW5pdGVfc2Nyb2xsXCI6XCJzcmMtcGFnZXMtUHJvZHVjdHMtUHJvZHVjdHMtbW9kdWxlX19pbmZpbml0ZV9zY3JvbGxcIn07IiwiaW1wb3J0IHsgTmF2YmFyIH0gZnJvbSBcIkBjb21wb25lbnRzL05hdmJhclwiO1xuaW1wb3J0IHsgUk9VVEVTIH0gZnJvbSBcIkBjb25maWdzL3JvdXRlc1wiO1xuaW1wb3J0IHsgUHJvZHVjdERldGFpbCB9IGZyb20gXCJAcGFnZXMvUHJvZHVjdERldGFpbFwiO1xuaW1wb3J0IFByb2R1Y3RzIGZyb20gXCJAcGFnZXMvUHJvZHVjdHNcIjtcbmltcG9ydCB7XG4gIHVzZUNhcnRTdG9yZUluaXQsXG4gIHVzZVF1ZXJ5UGFyYW1zU3RvcmVJbml0LFxufSBmcm9tIFwiQHN0b3JlL1Jvb3RTdG9yZS9ob29rc1wiO1xuaW1wb3J0IHsgTmF2aWdhdGUsIFJvdXRlLCBSb3V0ZXMgfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuXG5pbXBvcnQgXCIuL0FwcC5zY3NzXCI7XG5cbmNvbnN0IEFwcCA9ICgpID0+IHtcbiAgdXNlUXVlcnlQYXJhbXNTdG9yZUluaXQoKTtcbiAgdXNlQ2FydFN0b3JlSW5pdCgpO1xuICByZXR1cm4gKFxuICAgIDxkaXYgY2xhc3NOYW1lPVwiYXBwXCI+XG4gICAgICA8TmF2YmFyIC8+XG4gICAgICA8Um91dGVzPlxuICAgICAgICA8Um91dGUgcGF0aD17Uk9VVEVTLk1BSU59IGVsZW1lbnQ9ezxQcm9kdWN0cyAvPn0gLz5cbiAgICAgICAgPFJvdXRlIHBhdGg9e1JPVVRFUy5QUk9EVUNUfSBlbGVtZW50PXs8UHJvZHVjdERldGFpbCAvPn0gLz5cbiAgICAgICAgPFJvdXRlIHBhdGg9XCIqXCIgZWxlbWVudD17PE5hdmlnYXRlIHRvPXtST1VURVMuTUFJTn0gcmVwbGFjZSAvPn0gLz5cbiAgICAgIDwvUm91dGVzPlxuICAgIDwvZGl2PlxuICApO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgQXBwO1xuIiwiaW1wb3J0ICogYXMgUm91dGVyIGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5cbmltcG9ydCByb290U3RvcmUgZnJvbSBcIi4uL2luc3RhbmNlXCI7XG5cbmV4cG9ydCBjb25zdCB1c2VRdWVyeVBhcmFtc1N0b3JlSW5pdCA9ICgpOiB2b2lkID0+IHtcbiAgY29uc3QgeyBzZWFyY2ggfSA9IFJvdXRlci51c2VMb2NhdGlvbigpO1xuICByb290U3RvcmUucXVlcnkuc2V0U2VhcmNoKHNlYXJjaCk7XG59O1xuIiwiaW1wb3J0IHJvb3RTdG9yZSBmcm9tIFwiLi4vaW5zdGFuY2VcIjtcblxuZXhwb3J0IGNvbnN0IHVzZUNhcnRTdG9yZUluaXQgPSAoKTogdm9pZCA9PiB7XG4gIGNvbnN0IGNhcnRGaWVsZCA9IGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwiY2FydFwiKTtcbiAgY29uc3QgY2FydEl0ZW1zID0gY2FydEZpZWxkID8gSlNPTi5wYXJzZShjYXJ0RmllbGQpIDogW107XG4gIHJvb3RTdG9yZS5jYXJ0LnNldENhcnRJdGVtcyhjYXJ0SXRlbXMpO1xufTtcbiIsImV4cG9ydCBjb25zdCBST1VURVMgPSB7XG4gIE1BSU46IFwiL1wiLFxuICBQUk9EVUNUOiBcIi9wcm9kdWN0LzppZFwiLFxufTtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuaW1wb3J0IFJlYWN0RE9NIGZyb20gXCJyZWFjdC1kb20vY2xpZW50XCI7XG5cbmltcG9ydCBcInJlZ2VuZXJhdG9yLXJ1bnRpbWVcIjtcbmltcG9ydCBcIi4vc3R5bGVzL2luZGV4LnNjc3NcIjtcblxuaW1wb3J0IHsgSGFzaFJvdXRlciB9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5cbmltcG9ydCBBcHAgZnJvbSBcIi4vQXBwXCI7XG5cbmNvbnN0IHJvb3QgPSBSZWFjdERPTS5jcmVhdGVSb290KFxuICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChcInJvb3RcIikgYXMgSFRNTEVsZW1lbnRcbik7XG5yb290LnJlbmRlcihcbiAgPEhhc2hSb3V0ZXI+XG4gICAgPEFwcCAvPlxuICA8L0hhc2hSb3V0ZXI+XG4pO1xuaWYgKG1vZHVsZS5ob3QpIHtcbiAgbW9kdWxlLmhvdC5hY2NlcHQoKTtcbn1cbiJdLCJuYW1lcyI6WyJsZWFmUHJvdG90eXBlcyIsImdldFByb3RvIiwiR2V0SW50cmluc2ljIiwicmVxdWlyZSIsImNhbGxCaW5kIiwiJGluZGV4T2YiLCJtb2R1bGUiLCJleHBvcnRzIiwibmFtZSIsImFsbG93TWlzc2luZyIsImludHJpbnNpYyIsImJpbmQiLCIkYXBwbHkiLCIkY2FsbCIsIiRyZWZsZWN0QXBwbHkiLCJjYWxsIiwiJGdPUEQiLCIkZGVmaW5lUHJvcGVydHkiLCIkbWF4IiwidmFsdWUiLCJlIiwib3JpZ2luYWxGdW5jdGlvbiIsImZ1bmMiLCJhcmd1bWVudHMiLCJjb25maWd1cmFibGUiLCJsZW5ndGgiLCJhcHBseUJpbmQiLCJhcHBseSIsImhhc093biIsImhhc093blByb3BlcnR5IiwiY2xhc3NOYW1lcyIsImNsYXNzZXMiLCJpIiwiYXJnIiwiYXJnVHlwZSIsIl90eXBlb2YiLCJwdXNoIiwiQXJyYXkiLCJpc0FycmF5IiwiaW5uZXIiLCJ0b1N0cmluZyIsIk9iamVjdCIsInByb3RvdHlwZSIsImluY2x1ZGVzIiwia2V5Iiwiam9pbiIsImRlZmF1bHQiLCJkZWZpbmUiLCJ3aW5kb3ciLCJFUlJPUl9NRVNTQUdFIiwic2xpY2UiLCJ0b1N0ciIsImZ1bmNUeXBlIiwidGhhdCIsInRhcmdldCIsInRoaXMiLCJUeXBlRXJyb3IiLCJib3VuZCIsImFyZ3MiLCJib3VuZExlbmd0aCIsIk1hdGgiLCJtYXgiLCJib3VuZEFyZ3MiLCJGdW5jdGlvbiIsInJlc3VsdCIsImNvbmNhdCIsIkVtcHR5IiwiaW1wbGVtZW50YXRpb24iLCJvYmoiLCJTeW1ib2wiLCJpdGVyYXRvciIsImNvbnN0cnVjdG9yIiwidW5kZWZpbmVkIiwiJFN5bnRheEVycm9yIiwiU3ludGF4RXJyb3IiLCIkRnVuY3Rpb24iLCIkVHlwZUVycm9yIiwiZ2V0RXZhbGxlZENvbnN0cnVjdG9yIiwiZXhwcmVzc2lvblN5bnRheCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInRocm93VHlwZUVycm9yIiwiVGhyb3dUeXBlRXJyb3IiLCJjYWxsZWVUaHJvd3MiLCJnZXQiLCJnT1BEdGhyb3dzIiwiaGFzU3ltYm9scyIsImdldFByb3RvdHlwZU9mIiwieCIsIl9fcHJvdG9fXyIsIm5lZWRzRXZhbCIsIlR5cGVkQXJyYXkiLCJVaW50OEFycmF5IiwiSU5UUklOU0lDUyIsIkFnZ3JlZ2F0ZUVycm9yIiwiQXJyYXlCdWZmZXIiLCJBdG9taWNzIiwiQmlnSW50IiwiQmlnSW50NjRBcnJheSIsIkJpZ1VpbnQ2NEFycmF5IiwiQm9vbGVhbiIsIkRhdGFWaWV3IiwiRGF0ZSIsImRlY29kZVVSSSIsImRlY29kZVVSSUNvbXBvbmVudCIsImVuY29kZVVSSSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkVycm9yIiwiZXZhbCIsIkV2YWxFcnJvciIsIkZsb2F0MzJBcnJheSIsIkZsb2F0NjRBcnJheSIsIkZpbmFsaXphdGlvblJlZ2lzdHJ5IiwiSW50OEFycmF5IiwiSW50MTZBcnJheSIsIkludDMyQXJyYXkiLCJpc0Zpbml0ZSIsImlzTmFOIiwiSlNPTiIsIk1hcCIsIk51bWJlciIsInBhcnNlRmxvYXQiLCJwYXJzZUludCIsIlByb21pc2UiLCJQcm94eSIsIlJhbmdlRXJyb3IiLCJSZWZlcmVuY2VFcnJvciIsIlJlZmxlY3QiLCJSZWdFeHAiLCJTZXQiLCJTaGFyZWRBcnJheUJ1ZmZlciIsIlN0cmluZyIsIlVpbnQ4Q2xhbXBlZEFycmF5IiwiVWludDE2QXJyYXkiLCJVaW50MzJBcnJheSIsIlVSSUVycm9yIiwiV2Vha01hcCIsIldlYWtSZWYiLCJXZWFrU2V0IiwiZXJyb3IiLCJlcnJvclByb3RvIiwiZG9FdmFsIiwiZm4iLCJnZW4iLCJMRUdBQ1lfQUxJQVNFUyIsIiRjb25jYXQiLCIkc3BsaWNlQXBwbHkiLCJzcGxpY2UiLCIkcmVwbGFjZSIsInJlcGxhY2UiLCIkc3RyU2xpY2UiLCIkZXhlYyIsImV4ZWMiLCJyZVByb3BOYW1lIiwicmVFc2NhcGVDaGFyIiwic3RyaW5nVG9QYXRoIiwic3RyaW5nIiwiZmlyc3QiLCJsYXN0IiwibWF0Y2giLCJudW1iZXIiLCJxdW90ZSIsInN1YlN0cmluZyIsImdldEJhc2VJbnRyaW5zaWMiLCJhbGlhcyIsImludHJpbnNpY05hbWUiLCJwYXJ0cyIsImludHJpbnNpY0Jhc2VOYW1lIiwiaW50cmluc2ljUmVhbE5hbWUiLCJza2lwRnVydGhlckNhY2hpbmciLCJpc093biIsInBhcnQiLCJkZXNjIiwib3JpZ1N5bWJvbCIsImhhc1N5bWJvbFNoYW0iLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzeW0iLCJzeW1PYmoiLCJrZXlzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInN5bXMiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsImRlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiaGFzTWFwIiwibWFwU2l6ZURlc2NyaXB0b3IiLCJtYXBTaXplIiwibWFwRm9yRWFjaCIsImZvckVhY2giLCJoYXNTZXQiLCJzZXRTaXplRGVzY3JpcHRvciIsInNldFNpemUiLCJzZXRGb3JFYWNoIiwid2Vha01hcEhhcyIsImhhcyIsIndlYWtTZXRIYXMiLCJ3ZWFrUmVmRGVyZWYiLCJkZXJlZiIsImJvb2xlYW5WYWx1ZU9mIiwidmFsdWVPZiIsIm9iamVjdFRvU3RyaW5nIiwiZnVuY3Rpb25Ub1N0cmluZyIsIiRtYXRjaCIsIiRzbGljZSIsIiR0b1VwcGVyQ2FzZSIsInRvVXBwZXJDYXNlIiwiJHRvTG93ZXJDYXNlIiwidG9Mb3dlckNhc2UiLCIkdGVzdCIsInRlc3QiLCIkam9pbiIsIiRhcnJTbGljZSIsIiRmbG9vciIsImZsb29yIiwiYmlnSW50VmFsdWVPZiIsImdPUFMiLCJzeW1Ub1N0cmluZyIsImhhc1NoYW1tZWRTeW1ib2xzIiwidG9TdHJpbmdUYWciLCJpc0VudW1lcmFibGUiLCJnUE8iLCJPIiwiYWRkTnVtZXJpY1NlcGFyYXRvciIsIm51bSIsInN0ciIsIkluZmluaXR5Iiwic2VwUmVnZXgiLCJpbnQiLCJpbnRTdHIiLCJkZWMiLCJ1dGlsSW5zcGVjdCIsImluc3BlY3RDdXN0b20iLCJjdXN0b20iLCJpbnNwZWN0U3ltYm9sIiwiaXNTeW1ib2wiLCJ3cmFwUXVvdGVzIiwicyIsImRlZmF1bHRTdHlsZSIsIm9wdHMiLCJxdW90ZUNoYXIiLCJxdW90ZVN0eWxlIiwiaXNSZWdFeHAiLCJpbnNwZWN0XyIsIm9wdGlvbnMiLCJkZXB0aCIsInNlZW4iLCJtYXhTdHJpbmdMZW5ndGgiLCJjdXN0b21JbnNwZWN0IiwiaW5kZW50IiwibnVtZXJpY1NlcGFyYXRvciIsImluc3BlY3RTdHJpbmciLCJiaWdJbnRTdHIiLCJtYXhEZXB0aCIsImJhc2VJbmRlbnQiLCJiYXNlIiwicHJldiIsImdldEluZGVudCIsImluZGV4T2YiLCJpbnNwZWN0IiwiZnJvbSIsIm5vSW5kZW50IiwibmV3T3B0cyIsImYiLCJtIiwibmFtZU9mIiwiYXJyT2JqS2V5cyIsInN5bVN0cmluZyIsIm1hcmtCb3hlZCIsIkhUTUxFbGVtZW50Iiwibm9kZU5hbWUiLCJnZXRBdHRyaWJ1dGUiLCJhdHRycyIsImF0dHJpYnV0ZXMiLCJjaGlsZE5vZGVzIiwieHMiLCJzaW5nbGVMaW5lVmFsdWVzIiwiaW5kZW50ZWRKb2luIiwiaXNFcnJvciIsImNhdXNlIiwiaXNNYXAiLCJtYXBQYXJ0cyIsImNvbGxlY3Rpb25PZiIsImlzU2V0Iiwic2V0UGFydHMiLCJpc1dlYWtNYXAiLCJ3ZWFrQ29sbGVjdGlvbk9mIiwiaXNXZWFrU2V0IiwiaXNXZWFrUmVmIiwiaXNOdW1iZXIiLCJpc0JpZ0ludCIsImlzQm9vbGVhbiIsImlzU3RyaW5nIiwiaXNEYXRlIiwieXMiLCJpc1BsYWluT2JqZWN0IiwicHJvdG9UYWciLCJzdHJpbmdUYWciLCJ0YWciLCJsIiwicmVtYWluaW5nIiwidHJhaWxlciIsImxvd2J5dGUiLCJjIiwibiIsImNoYXJDb2RlQXQiLCJ0eXBlIiwic2l6ZSIsImVudHJpZXMiLCJsaW5lSm9pbmVyIiwiaXNBcnIiLCJzeW1NYXAiLCJrIiwiaiIsInBlcmNlbnRUd2VudGllcyIsIkZvcm1hdCIsImZvcm1hdHRlcnMiLCJSRkMxNzM4IiwiUkZDMzk4NiIsInN0cmluZ2lmeSIsInBhcnNlIiwiZm9ybWF0cyIsInV0aWxzIiwiZGVmYXVsdHMiLCJhbGxvd0RvdHMiLCJhbGxvd1Byb3RvdHlwZXMiLCJhbGxvd1NwYXJzZSIsImFycmF5TGltaXQiLCJjaGFyc2V0IiwiY2hhcnNldFNlbnRpbmVsIiwiY29tbWEiLCJkZWNvZGVyIiwiZGVjb2RlIiwiZGVsaW1pdGVyIiwiaWdub3JlUXVlcnlQcmVmaXgiLCJpbnRlcnByZXROdW1lcmljRW50aXRpZXMiLCJwYXJhbWV0ZXJMaW1pdCIsInBhcnNlQXJyYXlzIiwicGxhaW5PYmplY3RzIiwic3RyaWN0TnVsbEhhbmRsaW5nIiwiJDAiLCJudW1iZXJTdHIiLCJmcm9tQ2hhckNvZGUiLCJwYXJzZUFycmF5VmFsdWUiLCJ2YWwiLCJzcGxpdCIsInBhcnNlS2V5cyIsImdpdmVuS2V5IiwidmFsdWVzUGFyc2VkIiwiY2hpbGQiLCJzZWdtZW50IiwicGFyZW50IiwiaW5kZXgiLCJjaGFpbiIsImxlYWYiLCJyb290IiwiY3JlYXRlIiwiY2xlYW5Sb290IiwiY2hhckF0IiwicGFyc2VPYmplY3QiLCJub3JtYWxpemVQYXJzZU9wdGlvbnMiLCJ0ZW1wT2JqIiwiY2xlYW5TdHIiLCJsaW1pdCIsInNraXBJbmRleCIsImJyYWNrZXRFcXVhbHNQb3MiLCJwb3MiLCJtYXliZU1hcCIsImVuY29kZWRWYWwiLCJjb21iaW5lIiwicGFyc2VWYWx1ZXMiLCJuZXdPYmoiLCJtZXJnZSIsImNvbXBhY3QiLCJnZXRTaWRlQ2hhbm5lbCIsImFycmF5UHJlZml4R2VuZXJhdG9ycyIsImJyYWNrZXRzIiwicHJlZml4IiwiaW5kaWNlcyIsInJlcGVhdCIsInB1c2hUb0FycmF5IiwiYXJyIiwidmFsdWVPckFycmF5IiwidG9JU08iLCJ0b0lTT1N0cmluZyIsImRlZmF1bHRGb3JtYXQiLCJhZGRRdWVyeVByZWZpeCIsImVuY29kZSIsImVuY29kZXIiLCJlbmNvZGVWYWx1ZXNPbmx5IiwiZm9ybWF0IiwiZm9ybWF0dGVyIiwic2VyaWFsaXplRGF0ZSIsImRhdGUiLCJza2lwTnVsbHMiLCJzZW50aW5lbCIsIm9iamVjdCIsImdlbmVyYXRlQXJyYXlQcmVmaXgiLCJjb21tYVJvdW5kVHJpcCIsImZpbHRlciIsInNvcnQiLCJzaWRlQ2hhbm5lbCIsInYiLCJ0bXBTYyIsInN0ZXAiLCJmaW5kRmxhZyIsImlzQnVmZmVyIiwia2V5VmFsdWUiLCJ2YWx1ZXNBcnJheSIsInZhbHVlc0pvaW5lZCIsIm9iaktleXMiLCJ2YWx1ZXMiLCJhZGp1c3RlZFByZWZpeCIsImtleVByZWZpeCIsInNldCIsInZhbHVlU2lkZUNoYW5uZWwiLCJub3JtYWxpemVTdHJpbmdpZnlPcHRpb25zIiwiYXJyYXlGb3JtYXQiLCJqb2luZWQiLCJoZXhUYWJsZSIsImFycmF5IiwiYXJyYXlUb09iamVjdCIsInNvdXJjZSIsImFzc2lnbiIsInJlZHVjZSIsImFjYyIsImEiLCJiIiwicXVldWUiLCJvIiwicHJvcCIsInJlZnMiLCJpdGVtIiwicG9wIiwiY29tcGFjdGVkIiwiY29tcGFjdFF1ZXVlIiwic3RyV2l0aG91dFBsdXMiLCJ1bmVzY2FwZSIsImRlZmF1bHRFbmNvZGVyIiwia2luZCIsImVzY2FwZSIsIm91dCIsIm1hcHBlZCIsIm1lcmdlVGFyZ2V0IiwidGFyZ2V0SXRlbSIsImFhIiwiY2EiLCJwIiwiZGEiLCJlYSIsImZhIiwiaGEiLCJhZGQiLCJpYSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImphIiwia2EiLCJsYSIsIm1hIiwiZCIsImciLCJhY2NlcHRzQm9vbGVhbnMiLCJhdHRyaWJ1dGVOYW1lIiwiYXR0cmlidXRlTmFtZXNwYWNlIiwibXVzdFVzZVByb3BlcnR5IiwicHJvcGVydHlOYW1lIiwic2FuaXRpemVVUkwiLCJyZW1vdmVFbXB0eVN0cmluZyIsInoiLCJyYSIsInNhIiwidGEiLCJwYSIsInFhIiwib2EiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGVOUyIsInhsaW5rSHJlZiIsInVhIiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJ2YSIsImZvciIsIndhIiwieWEiLCJ6YSIsIkFhIiwiQmEiLCJDYSIsIkRhIiwiRWEiLCJGYSIsIkdhIiwiSGEiLCJJYSIsIkphIiwiS2EiLCJMYSIsIkEiLCJNYSIsInN0YWNrIiwidHJpbSIsIk5hIiwiT2EiLCJwcmVwYXJlU3RhY2tUcmFjZSIsImRlZmluZVByb3BlcnR5IiwiY29uc3RydWN0IiwiaCIsImRpc3BsYXlOYW1lIiwiUGEiLCJyZW5kZXIiLCJRYSIsIiQkdHlwZW9mIiwiX2NvbnRleHQiLCJfcGF5bG9hZCIsIl9pbml0IiwiUmEiLCJTYSIsIlRhIiwiVmEiLCJfdmFsdWVUcmFja2VyIiwiZ2V0VmFsdWUiLCJzZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsIlVhIiwiV2EiLCJjaGVja2VkIiwiWGEiLCJhY3RpdmVFbGVtZW50IiwiYm9keSIsIllhIiwiZGVmYXVsdENoZWNrZWQiLCJkZWZhdWx0VmFsdWUiLCJfd3JhcHBlclN0YXRlIiwiaW5pdGlhbENoZWNrZWQiLCJaYSIsImluaXRpYWxWYWx1ZSIsImNvbnRyb2xsZWQiLCJhYiIsImJiIiwiY2IiLCJkYiIsIm93bmVyRG9jdW1lbnQiLCJlYiIsImZiIiwic2VsZWN0ZWQiLCJkZWZhdWx0U2VsZWN0ZWQiLCJkaXNhYmxlZCIsImdiIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJjaGlsZHJlbiIsImhiIiwiaWIiLCJqYiIsInRleHRDb250ZW50Iiwia2IiLCJsYiIsIm1iIiwibmIiLCJuYW1lc3BhY2VVUkkiLCJpbm5lckhUTUwiLCJmaXJzdENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJhcHBlbmRDaGlsZCIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJvYiIsImxhc3RDaGlsZCIsIm5vZGVUeXBlIiwibm9kZVZhbHVlIiwicGIiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImFzcGVjdFJhdGlvIiwiYm9yZGVySW1hZ2VPdXRzZXQiLCJib3JkZXJJbWFnZVNsaWNlIiwiYm9yZGVySW1hZ2VXaWR0aCIsImJveEZsZXgiLCJib3hGbGV4R3JvdXAiLCJib3hPcmRpbmFsR3JvdXAiLCJjb2x1bW5Db3VudCIsImNvbHVtbnMiLCJmbGV4IiwiZmxleEdyb3ciLCJmbGV4UG9zaXRpdmUiLCJmbGV4U2hyaW5rIiwiZmxleE5lZ2F0aXZlIiwiZmxleE9yZGVyIiwiZ3JpZEFyZWEiLCJncmlkUm93IiwiZ3JpZFJvd0VuZCIsImdyaWRSb3dTcGFuIiwiZ3JpZFJvd1N0YXJ0IiwiZ3JpZENvbHVtbiIsImdyaWRDb2x1bW5FbmQiLCJncmlkQ29sdW1uU3BhbiIsImdyaWRDb2x1bW5TdGFydCIsImZvbnRXZWlnaHQiLCJsaW5lQ2xhbXAiLCJsaW5lSGVpZ2h0Iiwib3BhY2l0eSIsIm9yZGVyIiwib3JwaGFucyIsInRhYlNpemUiLCJ3aWRvd3MiLCJ6SW5kZXgiLCJ6b29tIiwiZmlsbE9wYWNpdHkiLCJmbG9vZE9wYWNpdHkiLCJzdG9wT3BhY2l0eSIsInN0cm9rZURhc2hhcnJheSIsInN0cm9rZURhc2hvZmZzZXQiLCJzdHJva2VNaXRlcmxpbWl0Iiwic3Ryb2tlT3BhY2l0eSIsInN0cm9rZVdpZHRoIiwicWIiLCJyYiIsInNiIiwic3R5bGUiLCJzZXRQcm9wZXJ0eSIsInN1YnN0cmluZyIsInRiIiwibWVudWl0ZW0iLCJhcmVhIiwiYnIiLCJjb2wiLCJlbWJlZCIsImhyIiwiaW1nIiwiaW5wdXQiLCJrZXlnZW4iLCJsaW5rIiwibWV0YSIsInBhcmFtIiwidHJhY2siLCJ3YnIiLCJ1YiIsInZiIiwiaXMiLCJ3YiIsInhiIiwic3JjRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50IiwicGFyZW50Tm9kZSIsInliIiwiemIiLCJBYiIsIkJiIiwiQ2IiLCJzdGF0ZU5vZGUiLCJEYiIsIkViIiwiRmIiLCJHYiIsIkhiIiwiSWIiLCJKYiIsIktiIiwiTGIiLCJNYiIsImFkZEV2ZW50TGlzdGVuZXIiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiTmIiLCJvbkVycm9yIiwiT2IiLCJQYiIsIlFiIiwiUmIiLCJTYiIsIlRiIiwiVmIiLCJhbHRlcm5hdGUiLCJyZXR1cm4iLCJmbGFncyIsIldiIiwibWVtb2l6ZWRTdGF0ZSIsImRlaHlkcmF0ZWQiLCJYYiIsIlpiIiwic2libGluZyIsImN1cnJlbnQiLCJZYiIsIiRiIiwiYWMiLCJ1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrIiwiYmMiLCJ1bnN0YWJsZV9jYW5jZWxDYWxsYmFjayIsImNjIiwidW5zdGFibGVfc2hvdWxkWWllbGQiLCJkYyIsInVuc3RhYmxlX3JlcXVlc3RQYWludCIsIkIiLCJ1bnN0YWJsZV9ub3ciLCJlYyIsInVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsIiwiZmMiLCJ1bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSIsImdjIiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJoYyIsInVuc3RhYmxlX05vcm1hbFByaW9yaXR5IiwiaWMiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsImpjIiwidW5zdGFibGVfSWRsZVByaW9yaXR5Iiwia2MiLCJsYyIsIm9jIiwiY2x6MzIiLCJwYyIsInFjIiwibG9nIiwiTE4yIiwicmMiLCJzYyIsInRjIiwidWMiLCJwZW5kaW5nTGFuZXMiLCJzdXNwZW5kZWRMYW5lcyIsInBpbmdlZExhbmVzIiwiZW50YW5nbGVkTGFuZXMiLCJlbnRhbmdsZW1lbnRzIiwidmMiLCJ4YyIsInljIiwiemMiLCJBYyIsImV2ZW50VGltZXMiLCJDYyIsIkMiLCJEYyIsIkVjIiwiRmMiLCJHYyIsIkhjIiwiSWMiLCJKYyIsIktjIiwiTGMiLCJNYyIsIk5jIiwiT2MiLCJQYyIsIlFjIiwiUmMiLCJTYyIsImRlbGV0ZSIsInBvaW50ZXJJZCIsIlRjIiwibmF0aXZlRXZlbnQiLCJibG9ja2VkT24iLCJkb21FdmVudE5hbWUiLCJldmVudFN5c3RlbUZsYWdzIiwidGFyZ2V0Q29udGFpbmVycyIsIlZjIiwiV2MiLCJwcmlvcml0eSIsImlzRGVoeWRyYXRlZCIsImNvbnRhaW5lckluZm8iLCJYYyIsIlljIiwiZGlzcGF0Y2hFdmVudCIsInNoaWZ0IiwiWmMiLCIkYyIsImFkIiwiYmQiLCJjZCIsIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnIiwiZGQiLCJlZCIsInRyYW5zaXRpb24iLCJmZCIsImdkIiwiaGQiLCJpZCIsIlVjIiwic3RvcFByb3BhZ2F0aW9uIiwiamQiLCJrZCIsImxkIiwibWQiLCJuZCIsIm9kIiwia2V5Q29kZSIsImNoYXJDb2RlIiwicGQiLCJxZCIsInJkIiwiX3JlYWN0TmFtZSIsIl90YXJnZXRJbnN0IiwiY3VycmVudFRhcmdldCIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZXR1cm5WYWx1ZSIsImlzUHJvcGFnYXRpb25TdG9wcGVkIiwicHJldmVudERlZmF1bHQiLCJjYW5jZWxCdWJibGUiLCJwZXJzaXN0IiwiaXNQZXJzaXN0ZW50Iiwid2QiLCJ4ZCIsInlkIiwic2QiLCJldmVudFBoYXNlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ0aW1lU3RhbXAiLCJub3ciLCJpc1RydXN0ZWQiLCJ0ZCIsInVkIiwidmlldyIsImRldGFpbCIsInZkIiwiQWQiLCJzY3JlZW5YIiwic2NyZWVuWSIsImNsaWVudFgiLCJjbGllbnRZIiwicGFnZVgiLCJwYWdlWSIsImN0cmxLZXkiLCJzaGlmdEtleSIsImFsdEtleSIsIm1ldGFLZXkiLCJnZXRNb2RpZmllclN0YXRlIiwiemQiLCJidXR0b24iLCJidXR0b25zIiwicmVsYXRlZFRhcmdldCIsImZyb21FbGVtZW50IiwidG9FbGVtZW50IiwibW92ZW1lbnRYIiwibW92ZW1lbnRZIiwiQmQiLCJEZCIsImRhdGFUcmFuc2ZlciIsIkZkIiwiSGQiLCJhbmltYXRpb25OYW1lIiwiZWxhcHNlZFRpbWUiLCJwc2V1ZG9FbGVtZW50IiwiSWQiLCJjbGlwYm9hcmREYXRhIiwiSmQiLCJMZCIsImRhdGEiLCJNZCIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJOZCIsIk9kIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsIlBkIiwiUWQiLCJjb2RlIiwibG9jYXRpb24iLCJsb2NhbGUiLCJ3aGljaCIsIlJkIiwiVGQiLCJ3aWR0aCIsImhlaWdodCIsInByZXNzdXJlIiwidGFuZ2VudGlhbFByZXNzdXJlIiwidGlsdFgiLCJ0aWx0WSIsInR3aXN0IiwicG9pbnRlclR5cGUiLCJpc1ByaW1hcnkiLCJWZCIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJYZCIsIllkIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJaZCIsIiRkIiwiYWUiLCJiZSIsImRvY3VtZW50TW9kZSIsImNlIiwiZGUiLCJlZSIsImZlIiwiZ2UiLCJoZSIsImllIiwibGUiLCJjb2xvciIsImRhdGV0aW1lIiwiZW1haWwiLCJtb250aCIsInBhc3N3b3JkIiwicmFuZ2UiLCJzZWFyY2giLCJ0ZWwiLCJ0ZXh0IiwidGltZSIsInVybCIsIndlZWsiLCJtZSIsIm5lIiwib2UiLCJldmVudCIsImxpc3RlbmVycyIsInBlIiwicWUiLCJyZSIsInNlIiwidGUiLCJ1ZSIsInZlIiwid2UiLCJ4ZSIsInllIiwiemUiLCJvbmlucHV0IiwiQWUiLCJkZXRhY2hFdmVudCIsIkJlIiwiQ2UiLCJhdHRhY2hFdmVudCIsIkRlIiwiRWUiLCJGZSIsIkhlIiwiSWUiLCJKZSIsIktlIiwibm9kZSIsIm9mZnNldCIsIm5leHRTaWJsaW5nIiwiTGUiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiTWUiLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnRXaW5kb3ciLCJocmVmIiwiTmUiLCJjb250ZW50RWRpdGFibGUiLCJPZSIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJkb2N1bWVudEVsZW1lbnQiLCJzdGFydCIsImVuZCIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwibWluIiwiZGVmYXVsdFZpZXciLCJnZXRTZWxlY3Rpb24iLCJleHRlbmQiLCJyYW5nZUNvdW50IiwiYW5jaG9yTm9kZSIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0IiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwiZWxlbWVudCIsImxlZnQiLCJzY3JvbGxMZWZ0IiwidG9wIiwic2Nyb2xsVG9wIiwiZm9jdXMiLCJQZSIsIlFlIiwiUmUiLCJTZSIsIlRlIiwiVWUiLCJWZSIsIldlIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiWGUiLCJZZSIsIlplIiwiYW5pbWF0aW9uIiwiJGUiLCJhZiIsImJmIiwiY2YiLCJkZiIsImVmIiwiZmYiLCJnZiIsImhmIiwibGYiLCJtZiIsIm5mIiwiVWIiLCJpbnN0YW5jZSIsImxpc3RlbmVyIiwiRCIsIm9mIiwicGYiLCJxZiIsInJmIiwicmFuZG9tIiwic2YiLCJjYXB0dXJlIiwicGFzc2l2ZSIsInQiLCJKIiwidSIsInciLCJGIiwidGYiLCJ1ZiIsInBhcmVudFdpbmRvdyIsInZmIiwid2YiLCJuYSIsInhhIiwiJGEiLCJiYSIsImplIiwiY2hhciIsImtlIiwidW5zaGlmdCIsInhmIiwieWYiLCJ6ZiIsIkFmIiwiQmYiLCJDZiIsIkRmIiwiRWYiLCJfX2h0bWwiLCJGZiIsInNldFRpbWVvdXQiLCJHZiIsImNsZWFyVGltZW91dCIsIkhmIiwiSmYiLCJxdWV1ZU1pY3JvdGFzayIsInJlc29sdmUiLCJ0aGVuIiwiY2F0Y2giLCJJZiIsIktmIiwiTGYiLCJNZiIsInByZXZpb3VzU2libGluZyIsIk5mIiwiT2YiLCJQZiIsIlFmIiwiUmYiLCJTZiIsIlRmIiwiVWYiLCJFIiwiRyIsIlZmIiwiSCIsIldmIiwiWGYiLCJZZiIsImNvbnRleHRUeXBlcyIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dCIsIlpmIiwiY2hpbGRDb250ZXh0VHlwZXMiLCIkZiIsImFnIiwiYmciLCJnZXRDaGlsZENvbnRleHQiLCJjZyIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0IiwiZGciLCJlZyIsImZnIiwiZ2ciLCJoZyIsImpnIiwia2ciLCJsZyIsIm1nIiwibmciLCJvZyIsInBnIiwicWciLCJyZyIsInNnIiwidGciLCJ1ZyIsInZnIiwid2ciLCJ4ZyIsInlnIiwiSSIsInpnIiwiQWciLCJCZyIsImVsZW1lbnRUeXBlIiwiZGVsZXRpb25zIiwiQ2ciLCJwZW5kaW5nUHJvcHMiLCJvdmVyZmxvdyIsInRyZWVDb250ZXh0IiwicmV0cnlMYW5lIiwiRGciLCJtb2RlIiwiRWciLCJGZyIsIkdnIiwibWVtb2l6ZWRQcm9wcyIsIkhnIiwiSWciLCJKZyIsIktnIiwiTGciLCJkZWZhdWx0UHJvcHMiLCJNZyIsIk5nIiwiT2ciLCJQZyIsIlFnIiwiUmciLCJfY3VycmVudFZhbHVlIiwiU2ciLCJjaGlsZExhbmVzIiwiVGciLCJkZXBlbmRlbmNpZXMiLCJmaXJzdENvbnRleHQiLCJsYW5lcyIsIlVnIiwiVmciLCJjb250ZXh0IiwibWVtb2l6ZWRWYWx1ZSIsIm5leHQiLCJXZyIsIlhnIiwiWWciLCJpbnRlcmxlYXZlZCIsIlpnIiwiJGciLCJhaCIsInVwZGF0ZVF1ZXVlIiwiYmFzZVN0YXRlIiwiZmlyc3RCYXNlVXBkYXRlIiwibGFzdEJhc2VVcGRhdGUiLCJzaGFyZWQiLCJwZW5kaW5nIiwiZWZmZWN0cyIsImJoIiwiY2giLCJldmVudFRpbWUiLCJsYW5lIiwicGF5bG9hZCIsImNhbGxiYWNrIiwiZGgiLCJLIiwiZWgiLCJmaCIsImdoIiwicSIsInIiLCJ5IiwiaGgiLCJpaCIsImpoIiwiQ29tcG9uZW50Iiwia2giLCJuaCIsImlzTW91bnRlZCIsIl9yZWFjdEludGVybmFscyIsImVucXVldWVTZXRTdGF0ZSIsIkwiLCJsaCIsIm1oIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVGb3JjZVVwZGF0ZSIsIm9oIiwic2hvdWxkQ29tcG9uZW50VXBkYXRlIiwiaXNQdXJlUmVhY3RDb21wb25lbnQiLCJwaCIsImNvbnRleHRUeXBlIiwic3RhdGUiLCJ1cGRhdGVyIiwicWgiLCJjb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJyaCIsInByb3BzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJzaCIsInJlZiIsIl9vd25lciIsIl9zdHJpbmdSZWYiLCJ0aCIsInVoIiwidmgiLCJ3aCIsInhoIiwieWgiLCJ6aCIsIkFoIiwiZG9uZSIsIkJoIiwiQ2giLCJEaCIsIkVoIiwiRmgiLCJHaCIsIkhoIiwiSWgiLCJ0YWdOYW1lIiwiSmgiLCJLaCIsIkxoIiwiTSIsIk1oIiwicmV2ZWFsT3JkZXIiLCJOaCIsIk9oIiwiX3dvcmtJblByb2dyZXNzVmVyc2lvblByaW1hcnkiLCJQaCIsIlJlYWN0Q3VycmVudERpc3BhdGNoZXIiLCJRaCIsIlJoIiwiTiIsIlAiLCJTaCIsIlRoIiwiVWgiLCJWaCIsIlEiLCJXaCIsIlhoIiwiWWgiLCJaaCIsIiRoIiwiYWkiLCJiaSIsImNpIiwiYmFzZVF1ZXVlIiwiZGkiLCJlaSIsImZpIiwibGFzdFJlbmRlcmVkUmVkdWNlciIsImFjdGlvbiIsImhhc0VhZ2VyU3RhdGUiLCJlYWdlclN0YXRlIiwibGFzdFJlbmRlcmVkU3RhdGUiLCJkaXNwYXRjaCIsImdpIiwiaGkiLCJpaSIsImppIiwia2kiLCJnZXRTbmFwc2hvdCIsImxpIiwibWkiLCJSIiwibmkiLCJsYXN0RWZmZWN0Iiwic3RvcmVzIiwib2kiLCJwaSIsInFpIiwicmkiLCJkZXN0cm95IiwiZGVwcyIsInNpIiwidGkiLCJ1aSIsInZpIiwid2kiLCJ4aSIsInlpIiwiemkiLCJBaSIsIkJpIiwiQ2kiLCJEaSIsIkVpIiwiRmkiLCJHaSIsIkhpIiwiSWkiLCJKaSIsInJlYWRDb250ZXh0IiwidXNlQ2FsbGJhY2siLCJ1c2VDb250ZXh0IiwidXNlRWZmZWN0IiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsInVzZUluc2VydGlvbkVmZmVjdCIsInVzZUxheW91dEVmZmVjdCIsInVzZU1lbW8iLCJ1c2VSZWR1Y2VyIiwidXNlUmVmIiwidXNlU3RhdGUiLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlRGVmZXJyZWRWYWx1ZSIsInVzZVRyYW5zaXRpb24iLCJ1c2VNdXRhYmxlU291cmNlIiwidXNlU3luY0V4dGVybmFsU3RvcmUiLCJ1c2VJZCIsInVuc3RhYmxlX2lzTmV3UmVjb25jaWxlciIsImlkZW50aWZpZXJQcmVmaXgiLCJLaSIsIm1lc3NhZ2UiLCJkaWdlc3QiLCJMaSIsIk1pIiwiY29uc29sZSIsIk5pIiwiT2kiLCJQaSIsIlFpIiwiUmkiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJjb21wb25lbnREaWRDYXRjaCIsIlNpIiwiY29tcG9uZW50U3RhY2siLCJUaSIsInBpbmdDYWNoZSIsIlVpIiwiVmkiLCJXaSIsIlhpIiwiUmVhY3RDdXJyZW50T3duZXIiLCJZaSIsIlppIiwiJGkiLCJhaiIsImJqIiwiY29tcGFyZSIsImNqIiwiZGoiLCJlaiIsImJhc2VMYW5lcyIsImNhY2hlUG9vbCIsInRyYW5zaXRpb25zIiwiZmoiLCJnaiIsImhqIiwiaWoiLCJqaiIsIlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudERpZFVwZGF0ZSIsImtqIiwibGoiLCJwZW5kaW5nQ29udGV4dCIsIm1qIiwiQWoiLCJCaiIsIkNqIiwiRGoiLCJuaiIsIm9qIiwicGoiLCJmYWxsYmFjayIsInFqIiwicmoiLCJ0aiIsImRhdGFzZXQiLCJkZ3N0IiwidWoiLCJ2aiIsIl9yZWFjdFJldHJ5Iiwic2oiLCJzdWJ0cmVlRmxhZ3MiLCJ3aiIsInhqIiwiaXNCYWNrd2FyZHMiLCJyZW5kZXJpbmciLCJyZW5kZXJpbmdTdGFydFRpbWUiLCJ0YWlsIiwidGFpbE1vZGUiLCJ5aiIsIkVqIiwiUyIsIkZqIiwiR2oiLCJ3YXNNdWx0aXBsZSIsIm11bHRpcGxlIiwic3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIiwib25DbGljayIsIm9uY2xpY2siLCJjcmVhdGVFbGVtZW50TlMiLCJhdXRvRm9jdXMiLCJjcmVhdGVUZXh0Tm9kZSIsIlQiLCJIaiIsIklqIiwiSmoiLCJLaiIsIlUiLCJMaiIsIlYiLCJNaiIsIlciLCJOaiIsIk9qIiwiUWoiLCJSaiIsIlNqIiwiVGoiLCJVaiIsIlZqIiwiV2oiLCJpbnNlcnRCZWZvcmUiLCJfcmVhY3RSb290Q29udGFpbmVyIiwiWGoiLCJYIiwiWWoiLCJaaiIsImFrIiwib25Db21taXRGaWJlclVubW91bnQiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImJrIiwiY2siLCJkayIsImVrIiwiZmsiLCJpc0hpZGRlbiIsImdrIiwiaGsiLCJkaXNwbGF5IiwiaWsiLCJqayIsImtrIiwibGsiLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsInNyYyIsIldrIiwibWsiLCJjZWlsIiwibmsiLCJvayIsInBrIiwiWSIsIloiLCJxayIsInJrIiwic2siLCJ0ayIsInVrIiwidmsiLCJ3ayIsInhrIiwieWsiLCJ6ayIsIkFrIiwiQmsiLCJDayIsIkRrIiwiRWsiLCJjYWxsYmFja05vZGUiLCJleHBpcmF0aW9uVGltZXMiLCJleHBpcmVkTGFuZXMiLCJ3YyIsImNhbGxiYWNrUHJpb3JpdHkiLCJpZyIsIkZrIiwiR2siLCJIayIsIklrIiwiSmsiLCJLayIsIkxrIiwiTWsiLCJOayIsIk9rIiwiUGsiLCJmaW5pc2hlZFdvcmsiLCJmaW5pc2hlZExhbmVzIiwiUWsiLCJ0aW1lb3V0SGFuZGxlIiwiUmsiLCJTayIsIlRrIiwiVWsiLCJWayIsIm11dGFibGVSZWFkTGFuZXMiLCJCYyIsIlBqIiwib25Db21taXRGaWJlclJvb3QiLCJtYyIsIm9uUmVjb3ZlcmFibGVFcnJvciIsIlhrIiwib25Qb3N0Q29tbWl0RmliZXJSb290IiwiWWsiLCJaayIsImFsIiwiaXNSZWFjdENvbXBvbmVudCIsInBlbmRpbmdDaGlsZHJlbiIsImJsIiwibXV0YWJsZVNvdXJjZUVhZ2VySHlkcmF0aW9uRGF0YSIsImNsIiwiY2FjaGUiLCJwZW5kaW5nU3VzcGVuc2VCb3VuZGFyaWVzIiwiZWwiLCJmbCIsImdsIiwiaGwiLCJpbCIsImpsIiwiemoiLCIkayIsImxsIiwicmVwb3J0RXJyb3IiLCJtbCIsIl9pbnRlcm5hbFJvb3QiLCJubCIsIm9sIiwicGwiLCJxbCIsInNsIiwicmwiLCJ1bm1vdW50IiwidW5zdGFibGVfc2NoZWR1bGVIeWRyYXRpb24iLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9ybSIsInRsIiwidXNpbmdDbGllbnRFbnRyeVBvaW50IiwiRXZlbnRzIiwidWwiLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsImJ1bmRsZVR5cGUiLCJ2ZXJzaW9uIiwicmVuZGVyZXJQYWNrYWdlTmFtZSIsInZsIiwicmVuZGVyZXJDb25maWciLCJvdmVycmlkZUhvb2tTdGF0ZSIsIm92ZXJyaWRlSG9va1N0YXRlRGVsZXRlUGF0aCIsIm92ZXJyaWRlSG9va1N0YXRlUmVuYW1lUGF0aCIsIm92ZXJyaWRlUHJvcHMiLCJvdmVycmlkZVByb3BzRGVsZXRlUGF0aCIsIm92ZXJyaWRlUHJvcHNSZW5hbWVQYXRoIiwic2V0RXJyb3JIYW5kbGVyIiwic2V0U3VzcGVuc2VIYW5kbGVyIiwic2NoZWR1bGVVcGRhdGUiLCJjdXJyZW50RGlzcGF0Y2hlclJlZiIsImZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyIiwiZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoIiwic2NoZWR1bGVSZWZyZXNoIiwic2NoZWR1bGVSb290Iiwic2V0UmVmcmVzaEhhbmRsZXIiLCJnZXRDdXJyZW50RmliZXIiLCJyZWNvbmNpbGVyVmVyc2lvbiIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsIndsIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJjcmVhdGVQb3J0YWwiLCJkbCIsImNyZWF0ZVJvb3QiLCJ1bnN0YWJsZV9zdHJpY3RNb2RlIiwiZmluZERPTU5vZGUiLCJmbHVzaFN5bmMiLCJoeWRyYXRlIiwiaHlkcmF0ZVJvb3QiLCJoeWRyYXRlZFNvdXJjZXMiLCJfZ2V0VmVyc2lvbiIsIl9zb3VyY2UiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsImNoZWNrRENFIiwiZXJyIiwiX19zZWxmIiwiX19zb3VyY2UiLCJGcmFnbWVudCIsImpzeCIsImpzeHMiLCJzZXRTdGF0ZSIsImZvcmNlVXBkYXRlIiwiX3N0YXR1cyIsIl9yZXN1bHQiLCJDaGlsZHJlbiIsIm1hcCIsImNvdW50IiwidG9BcnJheSIsIm9ubHkiLCJQcm9maWxlciIsIlB1cmVDb21wb25lbnQiLCJTdHJpY3RNb2RlIiwiU3VzcGVuc2UiLCJjbG9uZUVsZW1lbnQiLCJjcmVhdGVDb250ZXh0IiwiX2N1cnJlbnRWYWx1ZTIiLCJfdGhyZWFkQ291bnQiLCJQcm92aWRlciIsIkNvbnN1bWVyIiwiX2RlZmF1bHRWYWx1ZSIsIl9nbG9iYWxOYW1lIiwiY3JlYXRlRmFjdG9yeSIsImNyZWF0ZVJlZiIsImZvcndhcmRSZWYiLCJpc1ZhbGlkRWxlbWVudCIsImxhenkiLCJtZW1vIiwic3RhcnRUcmFuc2l0aW9uIiwidW5zdGFibGVfYWN0IiwicnVudGltZSIsIk9wIiwiJFN5bWJvbCIsIml0ZXJhdG9yU3ltYm9sIiwiYXN5bmNJdGVyYXRvclN5bWJvbCIsImFzeW5jSXRlcmF0b3IiLCJ0b1N0cmluZ1RhZ1N5bWJvbCIsIndyaXRhYmxlIiwid3JhcCIsImlubmVyRm4iLCJvdXRlckZuIiwic2VsZiIsInRyeUxvY3NMaXN0IiwicHJvdG9HZW5lcmF0b3IiLCJHZW5lcmF0b3IiLCJnZW5lcmF0b3IiLCJDb250ZXh0IiwibWFrZUludm9rZU1ldGhvZCIsInRyeUNhdGNoIiwiR2VuU3RhdGVTdXNwZW5kZWRTdGFydCIsIkdlblN0YXRlU3VzcGVuZGVkWWllbGQiLCJHZW5TdGF0ZUV4ZWN1dGluZyIsIkdlblN0YXRlQ29tcGxldGVkIiwiQ29udGludWVTZW50aW5lbCIsIkdlbmVyYXRvckZ1bmN0aW9uIiwiR2VuZXJhdG9yRnVuY3Rpb25Qcm90b3R5cGUiLCJJdGVyYXRvclByb3RvdHlwZSIsIk5hdGl2ZUl0ZXJhdG9yUHJvdG90eXBlIiwiR3AiLCJkZWZpbmVJdGVyYXRvck1ldGhvZHMiLCJtZXRob2QiLCJfaW52b2tlIiwiQXN5bmNJdGVyYXRvciIsIlByb21pc2VJbXBsIiwiaW52b2tlIiwicmVqZWN0IiwicmVjb3JkIiwiX19hd2FpdCIsInVud3JhcHBlZCIsInByZXZpb3VzUHJvbWlzZSIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwiZG9uZVJlc3VsdCIsImRlbGVnYXRlIiwiZGVsZWdhdGVSZXN1bHQiLCJtYXliZUludm9rZURlbGVnYXRlIiwic2VudCIsIl9zZW50IiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJhYnJ1cHQiLCJtZXRob2ROYW1lIiwiaW5mbyIsInJlc3VsdE5hbWUiLCJuZXh0TG9jIiwicHVzaFRyeUVudHJ5IiwibG9jcyIsImVudHJ5IiwidHJ5TG9jIiwiY2F0Y2hMb2MiLCJmaW5hbGx5TG9jIiwiYWZ0ZXJMb2MiLCJ0cnlFbnRyaWVzIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJyZXNldCIsIml0ZXJhYmxlIiwiaXRlcmF0b3JNZXRob2QiLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiZ2VuRnVuIiwiY3RvciIsIm1hcmsiLCJzZXRQcm90b3R5cGVPZiIsImF3cmFwIiwiYXN5bmMiLCJpdGVyIiwicmV2ZXJzZSIsInNraXBUZW1wUmVzZXQiLCJzdG9wIiwicm9vdFJlY29yZCIsInJ2YWwiLCJleGNlcHRpb24iLCJoYW5kbGUiLCJsb2MiLCJjYXVnaHQiLCJoYXNDYXRjaCIsImhhc0ZpbmFsbHkiLCJmaW5hbGx5RW50cnkiLCJjb21wbGV0ZSIsImZpbmlzaCIsInRocm93biIsImRlbGVnYXRlWWllbGQiLCJyZWdlbmVyYXRvclJ1bnRpbWUiLCJhY2NpZGVudGFsU3RyaWN0TW9kZSIsImdsb2JhbFRoaXMiLCJzb3J0SW5kZXgiLCJwZXJmb3JtYW5jZSIsInNldEltbWVkaWF0ZSIsInN0YXJ0VGltZSIsImV4cGlyYXRpb25UaW1lIiwicHJpb3JpdHlMZXZlbCIsIm5hdmlnYXRvciIsInNjaGVkdWxpbmciLCJpc0lucHV0UGVuZGluZyIsIk1lc3NhZ2VDaGFubmVsIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwidW5zdGFibGVfUHJvZmlsaW5nIiwidW5zdGFibGVfY29udGludWVFeGVjdXRpb24iLCJ1bnN0YWJsZV9mb3JjZUZyYW1lUmF0ZSIsInVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlIiwidW5zdGFibGVfbmV4dCIsInVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uIiwidW5zdGFibGVfcnVuV2l0aFByaW9yaXR5IiwiZGVsYXkiLCJ1bnN0YWJsZV93cmFwQ2FsbGJhY2siLCJjYWxsQm91bmQiLCIkV2Vha01hcCIsIiRNYXAiLCIkd2Vha01hcEdldCIsIiR3ZWFrTWFwU2V0IiwiJHdlYWtNYXBIYXMiLCIkbWFwR2V0IiwiJG1hcFNldCIsIiRtYXBIYXMiLCJsaXN0R2V0Tm9kZSIsImxpc3QiLCJjdXJyIiwiJHdtIiwiJG0iLCIkbyIsImNoYW5uZWwiLCJhc3NlcnQiLCJvYmplY3RzIiwibGlzdEdldCIsImxpc3RIYXMiLCJsaXN0U2V0IiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwibG9hZGVkIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImFtZE8iLCJnZXR0ZXIiLCJfX2VzTW9kdWxlIiwibnMiLCJkZWYiLCJkZWZpbml0aW9uIiwibm1kIiwicGF0aHMiLCJzY3JpcHRVcmwiLCJpbXBvcnRTY3JpcHRzIiwiY3VycmVudFNjcmlwdCIsInNjcmlwdHMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsIkFjdGlvbiIsIlJlc3VsdFR5cGUiLCJQb3BTdGF0ZUV2ZW50VHlwZSIsImludmFyaWFudCIsImdldEhpc3RvcnlTdGF0ZSIsInVzciIsImlkeCIsImNyZWF0ZUxvY2F0aW9uIiwidG8iLCJfZXh0ZW5kcyIsInBhdGhuYW1lIiwiaGFzaCIsInBhcnNlUGF0aCIsInN1YnN0ciIsImNyZWF0ZVBhdGgiLCJfcmVmIiwiX3JlZiRwYXRobmFtZSIsIl9yZWYkc2VhcmNoIiwiX3JlZiRoYXNoIiwicGF0aCIsInBhcnNlZFBhdGgiLCJoYXNoSW5kZXgiLCJzZWFyY2hJbmRleCIsIm1hdGNoUm91dGVzIiwicm91dGVzIiwibG9jYXRpb25BcmciLCJiYXNlbmFtZSIsInN0cmlwQmFzZW5hbWUiLCJicmFuY2hlcyIsImZsYXR0ZW5Sb3V0ZXMiLCJzY29yZSIsInNpYmxpbmdzIiwiZXZlcnkiLCJjb21wYXJlSW5kZXhlcyIsInJvdXRlc01ldGEiLCJjaGlsZHJlbkluZGV4IiwicmFua1JvdXRlQnJhbmNoZXMiLCJtYXRjaGVzIiwibWF0Y2hSb3V0ZUJyYW5jaCIsInNhZmVseURlY29kZVVSSSIsInBhcmVudHNNZXRhIiwicGFyZW50UGF0aCIsImZsYXR0ZW5Sb3V0ZSIsInJvdXRlIiwicmVsYXRpdmVQYXRoIiwiY2FzZVNlbnNpdGl2ZSIsInN0YXJ0c1dpdGgiLCJqb2luUGF0aHMiLCJjb21wdXRlU2NvcmUiLCJfcm91dGUkcGF0aCIsIl9zdGVwIiwiX2l0ZXJhdG9yIiwiX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIiLCJleHBsb2RlT3B0aW9uYWxTZWdtZW50cyIsImV4cGxvZGVkIiwic2VnbWVudHMiLCJfc2VnbWVudHMiLCJyZXN0IiwiaXNPcHRpb25hbCIsImVuZHNXaXRoIiwicmVxdWlyZWQiLCJyZXN0RXhwbG9kZWQiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJzdWJwYXRoIiwicGFyYW1SZSIsImR5bmFtaWNTZWdtZW50VmFsdWUiLCJpbmRleFJvdXRlVmFsdWUiLCJlbXB0eVNlZ21lbnRWYWx1ZSIsInN0YXRpY1NlZ21lbnRWYWx1ZSIsInNwbGF0UGVuYWx0eSIsImlzU3BsYXQiLCJpbml0aWFsU2NvcmUiLCJzb21lIiwiYnJhbmNoIiwibWF0Y2hlZFBhcmFtcyIsIm1hdGNoZWRQYXRobmFtZSIsInJlbWFpbmluZ1BhdGhuYW1lIiwibWF0Y2hQYXRoIiwicGFyYW1zIiwicGF0aG5hbWVCYXNlIiwibm9ybWFsaXplUGF0aG5hbWUiLCJwYXR0ZXJuIiwiX2NvbXBpbGVQYXRoIiwid2FybmluZyIsInBhcmFtTmFtZXMiLCJyZWdleHBTb3VyY2UiLCJfIiwicGFyYW1OYW1lIiwiY29tcGlsZVBhdGgiLCJfY29tcGlsZVBhdGgyIiwibWF0Y2hlciIsImNhcHR1cmVHcm91cHMiLCJzcGxhdFZhbHVlIiwic2FmZWx5RGVjb2RlVVJJQ29tcG9uZW50Iiwic3RhcnRJbmRleCIsIm5leHRDaGFyIiwiY29uZCIsIndhcm4iLCJnZXRJbnZhbGlkUGF0aEVycm9yIiwiZmllbGQiLCJkZXN0IiwiZ2V0UGF0aENvbnRyaWJ1dGluZ01hdGNoZXMiLCJyZXNvbHZlVG8iLCJ0b0FyZyIsInJvdXRlUGF0aG5hbWVzIiwibG9jYXRpb25QYXRobmFtZSIsImlzUGF0aFJlbGF0aXZlIiwiaXNFbXB0eVBhdGgiLCJ0b1BhdGhuYW1lIiwicm91dGVQYXRobmFtZUluZGV4IiwidG9TZWdtZW50cyIsImZyb21QYXRobmFtZSIsIl9yZWYzIiwiX3JlZjMkc2VhcmNoIiwiX3JlZjMkaGFzaCIsInJlc29sdmVQYXRobmFtZSIsIm5vcm1hbGl6ZVNlYXJjaCIsIm5vcm1hbGl6ZUhhc2giLCJyZXNvbHZlUGF0aCIsImhhc0V4cGxpY2l0VHJhaWxpbmdTbGFzaCIsImhhc0N1cnJlbnRUcmFpbGluZ1NsYXNoIiwidmFsaWRNdXRhdGlvbk1ldGhvZHNBcnIiLCJ2YWxpZFJlcXVlc3RNZXRob2RzQXJyIiwiUmVhY3QiLCJEYXRhUm91dGVyQ29udGV4dCIsIkRhdGFSb3V0ZXJTdGF0ZUNvbnRleHQiLCJOYXZpZ2F0aW9uQ29udGV4dCIsIkxvY2F0aW9uQ29udGV4dCIsIlJvdXRlQ29udGV4dCIsIm91dGxldCIsIlJvdXRlRXJyb3JDb250ZXh0IiwidXNlSW5Sb3V0ZXJDb250ZXh0IiwidXNlTG9jYXRpb24iLCJ1c2VOYXZpZ2F0ZSIsIl9SZWFjdCR1c2VDb250ZXh0MiIsInJvdXRlUGF0aG5hbWVzSnNvbiIsIlVOU0FGRV9nZXRQYXRoQ29udHJpYnV0aW5nTWF0Y2hlcyIsImFjdGl2ZVJlZiIsInJlbGF0aXZlIiwiZ28iLCJ1c2VSZXNvbHZlZFBhdGgiLCJfdGVtcDIiLCJEZWZhdWx0RXJyb3JFbGVtZW50IiwiX3N0YXRlJGVycm9ycyIsInRoaXNSb3V0ZSIsImhvb2tOYW1lIiwidXNlRGF0YVJvdXRlclN0YXRlIiwiRGF0YVJvdXRlclN0YXRlSG9vayIsIlVzZVJvdXRlRXJyb3IiLCJyb3V0ZUlkIiwidXNlUm91dGVDb250ZXh0IiwiZXJyb3JzIiwidXNlUm91dGVFcnJvciIsInN0YXR1cyIsInN0YXR1c1RleHQiLCJpbnRlcm5hbCIsImlzUm91dGVFcnJvclJlc3BvbnNlIiwicHJlU3R5bGVzIiwicGFkZGluZyIsImJhY2tncm91bmRDb2xvciIsImZvbnRTdHlsZSIsIkRhdGFSb3V0ZXJIb29rIiwiQXdhaXRSZW5kZXJTdGF0dXMiLCJSZW5kZXJFcnJvckJvdW5kYXJ5IiwiX1JlYWN0JENvbXBvbmVudCIsIl9pbmhlcml0cyIsIl9zdXBlciIsIl90aGlzIiwiX2NsYXNzQ2FsbENoZWNrIiwiZXJyb3JJbmZvIiwicm91dGVDb250ZXh0IiwiY29tcG9uZW50IiwiUmVuZGVyZWRSb3V0ZSIsImRhdGFSb3V0ZXJDb250ZXh0Iiwic3RhdGljIiwic3RhdGljQ29udGV4dCIsImVycm9yRWxlbWVudCIsIl9kZWVwZXN0UmVuZGVyZWRCb3VuZGFyeUlkIiwiTmF2aWdhdGUiLCJkYXRhUm91dGVyU3RhdGUiLCJuYXZpZ2F0ZSIsIm5hdmlnYXRpb24iLCJSb3V0ZSIsIl9wcm9wcyIsIlJvdXRlciIsIl9yZWY0IiwiX3JlZjQkYmFzZW5hbWUiLCJiYXNlbmFtZVByb3AiLCJfcmVmNCRjaGlsZHJlbiIsImxvY2F0aW9uUHJvcCIsIl9yZWY0JG5hdmlnYXRpb25UeXBlIiwibmF2aWdhdGlvblR5cGUiLCJfcmVmNCRzdGF0aWMiLCJzdGF0aWNQcm9wIiwibmF2aWdhdGlvbkNvbnRleHQiLCJfbG9jYXRpb25Qcm9wIiwiX2xvY2F0aW9uUHJvcCRwYXRobmFtIiwiX2xvY2F0aW9uUHJvcCRzZWFyY2giLCJfbG9jYXRpb25Qcm9wJGhhc2giLCJfbG9jYXRpb25Qcm9wJHN0YXRlIiwiX2xvY2F0aW9uUHJvcCRrZXkiLCJ0cmFpbGluZ1BhdGhuYW1lIiwiUm91dGVzIiwiX3JlZjUiLCJkYXRhUm91dGVyU3RhdGVDb250ZXh0IiwicGFyZW50TWF0Y2hlcyIsInJvdXRlTWF0Y2giLCJwYXJlbnRQYXJhbXMiLCJwYXJlbnRQYXRobmFtZUJhc2UiLCJsb2NhdGlvbkZyb21Db250ZXh0IiwiX3BhcnNlZExvY2F0aW9uQXJnJHBhIiwicGFyc2VkTG9jYXRpb25BcmciLCJyZW5kZXJlZE1hdGNoZXMiLCJlcnJvckluZGV4IiwiZmluZEluZGV4IiwicmVkdWNlUmlnaHQiLCJnZXRDaGlsZHJlbiIsIl9yZW5kZXJNYXRjaGVzIiwiZW5jb2RlTG9jYXRpb24iLCJ1c2VSb3V0ZXMiLCJyb3V0ZXIiLCJjcmVhdGVSb3V0ZXNGcm9tQ2hpbGRyZW4iLCJ0cmVlUGF0aCIsImxvYWRlciIsImhhc0Vycm9yQm91bmRhcnkiLCJzaG91bGRSZXZhbGlkYXRlIiwiY3JlYXRlU2VhcmNoUGFyYW1zIiwiaW5pdCIsIlVSTFNlYXJjaFBhcmFtcyIsIkhhc2hSb3V0ZXIiLCJfcmVmMiIsImhpc3RvcnlSZWYiLCJ2NUNvbXBhdCIsImdldExvY2F0aW9uIiwiY3JlYXRlSHJlZiIsInZhbGlkYXRlTG9jYXRpb24iLCJfb3B0aW9uczIiLCJfb3B0aW9uczIkd2luZG93IiwiX29wdGlvbnMyJHY1Q29tcGF0IiwiZ2xvYmFsSGlzdG9yeSIsImhpc3RvcnkiLCJQb3AiLCJnZXRJbmRleCIsImhhbmRsZVBvcCIsIm5leHRJbmRleCIsImRlbHRhIiwiY3JlYXRlVVJMIiwib3JpZ2luIiwiVVJMIiwicmVwbGFjZVN0YXRlIiwibGlzdGVuIiwiUHVzaCIsImhpc3RvcnlTdGF0ZSIsInB1c2hTdGF0ZSIsIlJlcGxhY2UiLCJnZXRVcmxCYXNlZEhpc3RvcnkiLCJfcGFyc2VQYXRoIiwiX3BhcnNlUGF0aCRwYXRobmFtZSIsIl9wYXJzZVBhdGgkc2VhcmNoIiwiX3BhcnNlUGF0aCRoYXNoIiwicXVlcnlTZWxlY3RvciIsIndhcm5pbmckMSIsIl9SZWFjdCR1c2VTdGF0ZTQiLCJpc0Jyb3dzZXIiLCJMaW5rIiwiYWJzb2x1dGVIcmVmIiwicmVsb2FkRG9jdW1lbnQiLCJwcmV2ZW50U2Nyb2xsUmVzZXQiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsIl9leGNsdWRlZCIsImlzRXh0ZXJuYWwiLCJjdXJyZW50VXJsIiwidGFyZ2V0VXJsIiwicHJvdG9jb2wiLCJfdGVtcCIsIl9SZWFjdCR1c2VDb250ZXh0IiwiX3VzZVJlc29sdmVkUGF0aCIsImpvaW5lZFBhdGhuYW1lIiwidXNlSHJlZiIsImludGVybmFsT25DbGljayIsIl9yZWY5IiwicmVwbGFjZVByb3AiLCJpc01vZGlmaWVkRXZlbnQiLCJzaG91bGRQcm9jZXNzTGlua0NsaWNrIiwidXNlTGlua0NsaWNrSGFuZGxlciIsInVzZVNlYXJjaFBhcmFtcyIsImRlZmF1bHRJbml0IiwiZGVmYXVsdFNlYXJjaFBhcmFtc1JlZiIsImhhc1NldFNlYXJjaFBhcmFtc1JlZiIsInNlYXJjaFBhcmFtcyIsImxvY2F0aW9uU2VhcmNoIiwiZGVmYXVsdFNlYXJjaFBhcmFtcyIsIl9sb29wIiwiZ2V0QWxsIiwiYXBwZW5kIiwic2V0U2VhcmNoUGFyYW1zIiwibmV4dEluaXQiLCJuYXZpZ2F0ZU9wdGlvbnMiLCJuZXdTZWFyY2hQYXJhbXMiLCJMb2FkZXJTaXplIiwiTG9hZGVyIiwiX2xvYWRlckltYWdlIiwiX3JlZiRsb2FkaW5nIiwibG9hZGluZyIsIl9yZWYkc2l6ZSIsImNsYXNzTmFtZSIsImxvYWRlckltYWdlIiwiX2RlZmluZVByb3BlcnR5IiwiTG9hZGVyUyIsIkxvYWRlck0iLCJMb2FkZXJMIiwiX2pzeCIsIl9GcmFnbWVudCIsImNuIiwiYWx0IiwiQnV0dG9uIiwib3RoZXJQcm9wcyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsIl9vYmplY3RTcHJlYWQiLCJfanN4cyIsIkNBUlRfTE9DQUxTVE9SQUdFX0tFWSIsImRpZSIsIl9sZW4iLCJfa2V5IiwibW9ja0dsb2JhbCIsImdldEdsb2JhbCIsImdsb2JhbCIsImdldERlc2NyaXB0b3IiLCJvYmplY3RQcm90b3R5cGUiLCJFTVBUWV9BUlJBWSIsImZyZWV6ZSIsIkVNUFRZX09CSkVDVCIsImhhc1Byb3h5IiwicGxhaW5PYmplY3RTdHJpbmciLCJhc3NlcnRQcm94aWVzIiwib25jZSIsImludm9rZWQiLCJub29wIiwiaXNGdW5jdGlvbiIsImlzU3RyaW5naXNoIiwiaXNPYmplY3QiLCJwcm90byIsInByb3RvQ29uc3RydWN0b3IiLCJpc0dlbmVyYXRvciIsImFkZEhpZGRlblByb3AiLCJwcm9wTmFtZSIsImFkZEhpZGRlbkZpbmFsUHJvcCIsImNyZWF0ZUluc3RhbmNlb2ZQcmVkaWNhdGUiLCJ0aGVDbGFzcyIsImlzRVM2TWFwIiwidGhpbmciLCJpc0VTNlNldCIsImhhc0dldE93blByb3BlcnR5U3ltYm9scyIsIm93bktleXMiLCJ0b1ByaW1pdGl2ZSIsImhhc1Byb3AiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwicmVzIiwic3RvcmVkQW5ub3RhdGlvbnNTeW1ib2wiLCJjcmVhdGVEZWNvcmF0b3JBbm5vdGF0aW9uIiwiYW5ub3RhdGlvbiIsInByb3BlcnR5Iiwic3RvcmVBbm5vdGF0aW9uIiwiYW5ub3RhdGlvblR5cGVfIiwiT1ZFUlJJREUiLCJpc092ZXJyaWRlIiwiJG1vYngiLCJBdG9tIiwibmFtZV8iLCJpc1BlbmRpbmdVbm9ic2VydmF0aW9uXyIsImlzQmVpbmdPYnNlcnZlZF8iLCJvYnNlcnZlcnNfIiwiZGlmZlZhbHVlXyIsImxhc3RBY2Nlc3NlZEJ5XyIsImxvd2VzdE9ic2VydmVyU3RhdGVfIiwiSURlcml2YXRpb25TdGF0ZV8iLCJOT1RfVFJBQ0tJTkdfIiwib25CT0wiLCJvbkJVT0wiLCJfcHJvdG8iLCJvbkJPIiwib25CVU8iLCJyZXBvcnRPYnNlcnZlZCIsInJlcG9ydENoYW5nZWQiLCJzdGFydEJhdGNoIiwicHJvcGFnYXRlQ2hhbmdlZCIsImVuZEJhdGNoIiwiaXNBdG9tIiwiY3JlYXRlQXRvbSIsIm9uQmVjb21lT2JzZXJ2ZWRIYW5kbGVyIiwib25CZWNvbWVVbm9ic2VydmVkSGFuZGxlciIsImF0b20iLCJpbnRlcmNlcHRIb29rIiwiT05fQkVDT01FX09CU0VSVkVEIiwiYXJnMyIsIm9uQmVjb21lVW5vYnNlcnZlZCIsImNvbXBhcmVyIiwiaWRlbnRpdHkiLCJzdHJ1Y3R1cmFsIiwiZGVlcEVxdWFsIiwic2hhbGxvdyIsImRlZXBFbmhhbmNlciIsImlzT2JzZXJ2YWJsZSIsIm9ic2VydmFibGUiLCJpc0FjdGlvbiIsImlzRmxvdyIsImZsb3ciLCJhdXRvQWN0aW9uIiwicmVmZXJlbmNlRW5oYW5jZXIiLCJuZXdWYWx1ZSIsImNyZWF0ZUFjdGlvbkFubm90YXRpb24iLCJvcHRpb25zXyIsIm1ha2VfIiwibWFrZV8kMSIsImV4dGVuZF8iLCJleHRlbmRfJDEiLCJhZG0iLCJfdGhpcyRvcHRpb25zXyIsInRhcmdldF8iLCJhY3Rpb25EZXNjcmlwdG9yIiwiY3JlYXRlQWN0aW9uRGVzY3JpcHRvciIsInByb3h5VHJhcCIsImRlZmluZVByb3BlcnR5XyIsInNhZmVEZXNjcmlwdG9ycyIsImdsb2JhbFN0YXRlIiwiX2FkbSRwcm94eV8iLCJfYW5ub3RhdGlvbiRvcHRpb25zXyIsInByb3h5XyIsImNyZWF0ZUFjdGlvbiIsIl9hbm5vdGF0aW9uJG9wdGlvbnNfJCIsIl9hbm5vdGF0aW9uJG9wdGlvbnNfMiIsIl9hbm5vdGF0aW9uJG9wdGlvbnNfJDIiLCJfYW5ub3RhdGlvbiRvcHRpb25zXzMiLCJfYW5ub3RhdGlvbiRvcHRpb25zXzQiLCJfYWRtJHByb3h5XzIiLCJpc1BsYWluT2JqZWN0XyIsImNyZWF0ZUZsb3dBbm5vdGF0aW9uIiwibWFrZV8kMiIsImV4dGVuZF8kMiIsImZsb3dEZXNjcmlwdG9yIiwiY3JlYXRlRmxvd0Rlc2NyaXB0b3IiLCJfdGhpcyRvcHRpb25zXzIiLCJpc01vYlhGbG93IiwiY3JlYXRlQ29tcHV0ZWRBbm5vdGF0aW9uIiwibWFrZV8kMyIsImV4dGVuZF8kMyIsImRlZmluZUNvbXB1dGVkUHJvcGVydHlfIiwiY3JlYXRlT2JzZXJ2YWJsZUFubm90YXRpb24iLCJtYWtlXyQ0IiwiZXh0ZW5kXyQ0IiwiZGVmaW5lT2JzZXJ2YWJsZVByb3BlcnR5XyIsIl90aGlzJG9wdGlvbnNfJGVuaGFuYyIsImVuaGFuY2VyIiwiQVVUTyIsImF1dG9Bbm5vdGF0aW9uIiwiY3JlYXRlQXV0b0Fubm90YXRpb24iLCJtYWtlXyQ1IiwiZXh0ZW5kXyQ1IiwiY29tcHV0ZWQiLCJhdXRvQmluZCIsIm9ic2VydmFibGVBbm5vdGF0aW9uIiwiX3RoaXMkb3B0aW9uc18zIiwiZGVlcCIsIl90aGlzJG9wdGlvbnNfNCIsIl90aGlzJG9wdGlvbnNfNSIsIl90aGlzJG9wdGlvbnNfNiIsImRlZmF1bHRDcmVhdGVPYnNlcnZhYmxlT3B0aW9ucyIsImRlZmF1bHREZWNvcmF0b3IiLCJwcm94eSIsImFzQ3JlYXRlT2JzZXJ2YWJsZU9wdGlvbnMiLCJvYnNlcnZhYmxlUmVmQW5ub3RhdGlvbiIsIm9ic2VydmFibGVTaGFsbG93QW5ub3RhdGlvbiIsImlzT2JzZXJ2YWJsZU9iamVjdCIsImlzT2JzZXJ2YWJsZUFycmF5IiwiaXNPYnNlcnZhYmxlTWFwIiwiaXNPYnNlcnZhYmxlU2V0IiwicHJvY2VzcyIsIm9ic2VydmFibGVTdHJ1Y3RBbm5vdGF0aW9uIiwib2xkVmFsdWUiLCJvYnNlcnZhYmxlRGVjb3JhdG9yQW5ub3RhdGlvbiIsImdldEVuaGFuY2VyRnJvbU9wdGlvbnMiLCJjcmVhdGVPYnNlcnZhYmxlIiwiYXJnMiIsImJveCIsIk9ic2VydmFibGVWYWx1ZSIsImVxdWFscyIsImluaXRpYWxWYWx1ZXMiLCJ1c2VQcm94aWVzIiwiY3JlYXRlTGVnYWN5QXJyYXkiLCJjcmVhdGVPYnNlcnZhYmxlQXJyYXkiLCJPYnNlcnZhYmxlTWFwIiwiT2JzZXJ2YWJsZVNldCIsImRlY29yYXRvcnMiLCJwcm9wZXJ0aWVzIiwiYW5ub3RhdGlvbnMiLCJkZXNjcmlwdG9ycyIsImFzT2JzZXJ2YWJsZU9iamVjdCIsImV4dGVuZE9ic2VydmFibGUiLCJfdGFyZ2V0JCRtb2J4JHByb3h5XyIsIl90YXJnZXQkJG1vYngiLCJvYmplY3RQcm94eVRyYXBzIiwiYXNEeW5hbWljT2JzZXJ2YWJsZU9iamVjdCIsInN0cnVjdCIsIkNPTVBVVEVEIiwiY29tcHV0ZWRBbm5vdGF0aW9uIiwiY29tcHV0ZWRTdHJ1Y3RBbm5vdGF0aW9uIiwiYXJnMSIsIkNvbXB1dGVkVmFsdWUiLCJjdXJyZW50QWN0aW9uSWQiLCJuZXh0QWN0aW9uSWQiLCJpc0Z1bmN0aW9uTmFtZUNvbmZpZ3VyYWJsZSIsIl9nZXREZXNjcmlwdG9yJGNvbmZpZyIsIl9nZXREZXNjcmlwdG9yIiwidG1wTmFtZURlc2NyaXB0b3IiLCJhY3Rpb25OYW1lIiwiZXhlY3V0ZUFjdGlvbiIsImlzTW9ieEFjdGlvbiIsImNhblJ1bkFzRGVyaXZhdGlvbiIsInNjb3BlIiwicnVuSW5mbyIsInByZXZEZXJpdmF0aW9uXyIsInRyYWNraW5nRGVyaXZhdGlvbiIsInJ1bkFzQWN0aW9uIiwicHJldkFsbG93U3RhdGVDaGFuZ2VzXyIsImFsbG93U3RhdGVDaGFuZ2VzIiwidW50cmFja2VkU3RhcnQiLCJhbGxvd1N0YXRlQ2hhbmdlc1N0YXJ0IiwicnVuQXNBY3Rpb25fIiwicHJldkFsbG93U3RhdGVSZWFkc18iLCJhbGxvd1N0YXRlUmVhZHNTdGFydCIsIm5vdGlmeVNweV8iLCJzdGFydFRpbWVfIiwiYWN0aW9uSWRfIiwicGFyZW50QWN0aW9uSWRfIiwiX3N0YXJ0QWN0aW9uIiwiZXJyb3JfIiwic3VwcHJlc3NSZWFjdGlvbkVycm9ycyIsImFsbG93U3RhdGVDaGFuZ2VzRW5kIiwiYWxsb3dTdGF0ZVJlYWRzRW5kIiwidW50cmFja2VkRW5kIiwiX2VuZEFjdGlvbiIsIl9TeW1ib2wkdG9QcmltaXRpdmUiLCJfQXRvbSIsIm5vdGlmeVNweSIsImhhc1VucmVwb3J0ZWRDaGFuZ2VfIiwiaW50ZXJjZXB0b3JzXyIsImNoYW5nZUxpc3RlbmVyc18iLCJ2YWx1ZV8iLCJkZWhhbmNlciIsIl9pbmhlcml0c0xvb3NlIiwiZGVoYW5jZVZhbHVlIiwicHJlcGFyZU5ld1ZhbHVlXyIsIlVOQ0hBTkdFRCIsInNldE5ld1ZhbHVlXyIsImhhc0ludGVyY2VwdG9ycyIsImNoYW5nZSIsImludGVyY2VwdENoYW5nZSIsIlVQREFURSIsImhhc0xpc3RlbmVycyIsIm5vdGlmeUxpc3RlbmVycyIsImludGVyY2VwdF8iLCJoYW5kbGVyIiwicmVnaXN0ZXJJbnRlcmNlcHRvciIsIm9ic2VydmVfIiwiZmlyZUltbWVkaWF0ZWx5Iiwib2JzZXJ2YWJsZUtpbmQiLCJkZWJ1Z09iamVjdE5hbWUiLCJyZWdpc3Rlckxpc3RlbmVyIiwicmF3IiwidG9KU09OIiwiX1N5bWJvbCR0b1ByaW1pdGl2ZSQxIiwiVHJhY2VNb2RlIiwiZGVwZW5kZW5jaWVzU3RhdGVfIiwib2JzZXJ2aW5nXyIsIm5ld09ic2VydmluZ18iLCJydW5JZF8iLCJVUF9UT19EQVRFXyIsInVuYm91bmREZXBzQ291bnRfIiwiQ2F1Z2h0RXhjZXB0aW9uIiwidHJpZ2dlcmVkQnlfIiwiaXNDb21wdXRpbmdfIiwiaXNSdW5uaW5nU2V0dGVyXyIsImRlcml2YXRpb24iLCJzZXR0ZXJfIiwiaXNUcmFjaW5nXyIsIk5PTkUiLCJzY29wZV8iLCJlcXVhbHNfIiwicmVxdWlyZXNSZWFjdGlvbl8iLCJrZWVwQWxpdmVfIiwiY29tcGFyZVN0cnVjdHVyYWwiLCJyZXF1aXJlc1JlYWN0aW9uIiwia2VlcEFsaXZlIiwib25CZWNvbWVTdGFsZV8iLCJQT1NTSUJMWV9TVEFMRV8iLCJpbkJhdGNoIiwic2hvdWxkQ29tcHV0ZSIsInByZXZUcmFja2luZ0NvbnRleHQiLCJ0cmFja2luZ0NvbnRleHQiLCJ0cmFja0FuZENvbXB1dGUiLCJTVEFMRV8iLCJ3YXJuQWJvdXRVbnRyYWNrZWRSZWFkXyIsImNvbXB1dGVWYWx1ZV8iLCJpc0NhdWdodEV4Y2VwdGlvbiIsIndhc1N1c3BlbmRlZCIsImNoYW5nZWQiLCJ0cmFja0Rlcml2ZWRGdW5jdGlvbiIsImRpc2FibGVFcnJvckJvdW5kYXJpZXMiLCJzdXNwZW5kXyIsImNsZWFyT2JzZXJ2aW5nIiwiZmlyc3RUaW1lIiwicHJldlZhbHVlIiwicmVhY3Rpb24iLCJfb3B0cyRuYW1lIiwiX29wdHMiLCJzY2hlZHVsZXIiLCJjcmVhdGVTY2hlZHVsZXJGcm9tT3B0aW9ucyIsImlzU2NoZWR1bGVkIiwiUmVhY3Rpb24iLCJpc0Rpc3Bvc2VkXyIsInJlYWN0aW9uUnVubmVyIiwicmVxdWlyZXNPYnNlcnZhYmxlIiwic2NoZWR1bGVfIiwiZ2V0RGlzcG9zZXJfIiwiYXV0b3J1biIsInByZXZVIiwiaXNDb21wdXRlZFZhbHVlIiwicHJldkFsbG93U3RhdGVSZWFkcyIsInByZXZVbnRyYWNrZWQiLCJvYnMiLCJjaGFuZ2VEZXBlbmRlbmNpZXNTdGF0ZVRvMCIsInJ1bklkIiwicHJldlRyYWNraW5nIiwicHJldk9ic2VydmluZyIsIm9ic2VydmluZyIsImxvd2VzdE5ld09ic2VydmluZ0Rlcml2YXRpb25TdGF0ZSIsImkwIiwiZGVwIiwiX2RlcCIsInJlbW92ZU9ic2VydmVyIiwiX2RlcDIiLCJiaW5kRGVwZW5kZW5jaWVzIiwidW50cmFja2VkIiwiYWxsb3dTdGF0ZVJlYWRzIiwiTW9iWEdsb2JhbHMiLCJtb2J4R3VpZCIsInBlbmRpbmdVbm9ic2VydmF0aW9ucyIsInBlbmRpbmdSZWFjdGlvbnMiLCJpc1J1bm5pbmdSZWFjdGlvbnMiLCJlbmZvcmNlQWN0aW9ucyIsInNweUxpc3RlbmVycyIsImdsb2JhbFJlYWN0aW9uRXJyb3JIYW5kbGVycyIsImNvbXB1dGVkUmVxdWlyZXNSZWFjdGlvbiIsInJlYWN0aW9uUmVxdWlyZXNPYnNlcnZhYmxlIiwib2JzZXJ2YWJsZVJlcXVpcmVzUmVhY3Rpb24iLCJ2ZXJpZnlQcm94aWVzIiwiY2FuTWVyZ2VHbG9iYWxTdGF0ZSIsImlzb2xhdGVDYWxsZWQiLCJfX21vYnhJbnN0YW5jZUNvdW50IiwiX19tb2J4R2xvYmFscyIsInF1ZXVlRm9yVW5vYnNlcnZhdGlvbiIsInJ1blJlYWN0aW9ucyIsIm9uSW52YWxpZGF0ZV8iLCJlcnJvckhhbmRsZXJfIiwicmVxdWlyZXNPYnNlcnZhYmxlXyIsImlzU2NoZWR1bGVkXyIsImlzVHJhY2tQZW5kaW5nXyIsImlzUnVubmluZ18iLCJydW5SZWFjdGlvbl8iLCJyZXBvcnRFeGNlcHRpb25JbkRlcml2YXRpb25fIiwicHJldlJlYWN0aW9uIiwiZGlzcG9zZSIsInRyYWNlIiwiZW50ZXJCcmVha1BvaW50IiwiZ2V0QXRvbSIsImdldEF0b21Gcm9tQXJncyIsIkJSRUFLIiwiTE9HIiwiTUFYX1JFQUNUSU9OX0lURVJBVElPTlMiLCJyZWFjdGlvblNjaGVkdWxlciIsInJ1blJlYWN0aW9uc0hlbHBlciIsImFsbFJlYWN0aW9ucyIsIml0ZXJhdGlvbnMiLCJyZW1haW5pbmdSZWFjdGlvbnMiLCJpc1JlYWN0aW9uIiwiQUNUSU9OIiwiQVVUT0FDVElPTiIsIkRFRkFVTFRfQUNUSU9OX05BTUUiLCJhY3Rpb25Bbm5vdGF0aW9uIiwiYWN0aW9uQm91bmRBbm5vdGF0aW9uIiwiYXV0b0FjdGlvbkFubm90YXRpb24iLCJhdXRvQWN0aW9uQm91bmRBbm5vdGF0aW9uIiwiY3JlYXRlQWN0aW9uRmFjdG9yeSIsInJ1bkluQWN0aW9uIiwicnVuIiwiT05fQkVDT01FX1VOT0JTRVJWRUQiLCJob29rIiwibGlzdGVuZXJzS2V5IiwiaG9va0xpc3RlbmVycyIsIk5FVkVSIiwiQUxXQVlTIiwiT0JTRVJWRUQiLCJjb25maWd1cmUiLCJpc29sYXRlR2xvYmFsU3RhdGUiLCJiYXNlU2NoZWR1bGVyIiwibm9kZVRvRGVwZW5kZW5jeVRyZWUiLCJnZW5lcmF0b3JJZCIsIkZsb3dDYW5jZWxsYXRpb25FcnJvciIsImZsb3dBbm5vdGF0aW9uIiwiZmxvd0JvdW5kQW5ub3RhdGlvbiIsInJlamVjdG9yIiwicGVuZGluZ1Byb21pc2UiLCJwcm9taXNlIiwic3RlcElkIiwib25GdWxmaWxsZWQiLCJyZXQiLCJvblJlamVjdGVkIiwiY2FuY2VsIiwiY2FuY2VsUHJvbWlzZSIsIl9yZXMiLCJ5aWVsZGVkUHJvbWlzZSIsInZhbHVlc18iLCJfaXNPYnNlcnZhYmxlIiwidHJhbnNhY3Rpb24iLCJ0aGlzQXJnIiwiZ2V0QWRtIiwiaGFzXyIsImdldF8iLCJfZ2V0QWRtJHNldF8iLCJzZXRfIiwiZGVsZXRlUHJvcGVydHkiLCJfZ2V0QWRtJGRlbGV0ZV8iLCJkZWxldGVfIiwiX2dldEFkbSRkZWZpbmVQcm9wZXJ0Iiwib3duS2V5c18iLCJwcmV2ZW50RXh0ZW5zaW9ucyIsImludGVyY2VwdGFibGUiLCJpbnRlcmNlcHRvcnMiLCJsaXN0ZW5hYmxlIiwibWFrZU9ic2VydmFibGUiLCJjb2xsZWN0U3RvcmVkQW5ub3RhdGlvbnMiLCJTUExJQ0UiLCJhcnJheVRyYXBzIiwiZ2V0QXJyYXlMZW5ndGhfIiwiYXJyYXlFeHRlbnNpb25zIiwic2V0QXJyYXlMZW5ndGhfIiwiT2JzZXJ2YWJsZUFycmF5QWRtaW5pc3RyYXRpb24iLCJvd25lZF8iLCJsZWdhY3lNb2RlXyIsImF0b21fIiwiZW5oYW5jZXJfIiwibGFzdEtub3duTGVuZ3RoXyIsIm5ld1YiLCJvbGRWIiwiZGVoYW5jZVZhbHVlXyIsImRlaGFuY2VWYWx1ZXNfIiwiYWRkZWQiLCJhZGRlZENvdW50IiwicmVtb3ZlZCIsInJlbW92ZWRDb3VudCIsIm5ld0xlbmd0aCIsImN1cnJlbnRMZW5ndGgiLCJuZXdJdGVtcyIsInNwbGljZVdpdGhBcnJheV8iLCJ1cGRhdGVBcnJheUxlbmd0aF8iLCJvbGRMZW5ndGgiLCJyZXNlcnZlQXJyYXlCdWZmZXIiLCJkZWxldGVDb3VudCIsImxlbmd0aERlbHRhIiwic3BsaWNlSXRlbXNJbnRvVmFsdWVzXyIsIm5vdGlmeUFycmF5U3BsaWNlXyIsIl90aGlzJHZhbHVlc18iLCJvbGRJdGVtcyIsIl9pIiwibm90aWZ5QXJyYXlDaGlsZFVwZGF0ZV8iLCJub3RpZnkiLCJvd25lZCIsImNsZWFyIiwic3BsaWNlV2l0aEFycmF5IiwiX2xlbjIiLCJpdGVtcyIsIl9rZXkyIiwiX2xlbjMiLCJfa2V5MyIsImNvcHkiLCJyZW1vdmUiLCJhZGRBcnJheUV4dGVuc2lvbiIsImZ1bmNOYW1lIiwiZnVuY0ZhY3RvcnkiLCJzaW1wbGVGdW5jIiwiZGVoYW5jZWRWYWx1ZXMiLCJtYXBMaWtlRnVuYyIsIl90aGlzMiIsInJlZHVjZUxpa2VGdW5jIiwiYWNjdW11bGF0b3IiLCJjdXJyZW50VmFsdWUiLCJfdGhpczMiLCJpc09ic2VydmFibGVBcnJheUFkbWluaXN0cmF0aW9uIiwiT2JzZXJ2YWJsZU1hcE1hcmtlciIsIkFERCIsIkRFTEVURSIsIl9TeW1ib2wkaXRlcmF0b3IiLCJfU3ltYm9sJHRvU3RyaW5nVGFnIiwiaW5pdGlhbERhdGEiLCJkYXRhXyIsImhhc01hcF8iLCJrZXlzQXRvbV8iLCJuZXdFbnRyeSIsImhhc0tleSIsInVwZGF0ZVZhbHVlXyIsImFkZFZhbHVlXyIsIl9jaGFuZ2UiLCJfdGhpczMkaGFzTWFwXyRnZXQiLCJfdGhpczQiLCJfdGhpczQkaGFzTWFwXyRnZXQiLCJtYWtlSXRlcmFibGUiLCJfa2V5cyRuZXh0IiwiX2tleXMkbmV4dDIiLCJfY3JlYXRlRm9yT2ZJdGVyYXRvckhlbHBlckxvb3NlIiwiX3N0ZXAkdmFsdWUiLCJvdGhlciIsInN5bWJvbHMiLCJnZXRQbGFpbk9iamVjdEtleXMiLCJfdGhpczUiLCJfc3RlcDIiLCJfaXRlcmF0b3IyIiwiX3RoaXM2IiwiX3N0ZXAzIiwicmVwbGFjZW1lbnRNYXAiLCJkYXRhU3RydWN0dXJlIiwiY29udmVydFRvTWFwIiwib3JkZXJlZERhdGEiLCJrZXlzUmVwb3J0Q2hhbmdlZENhbGxlZCIsIl9pdGVyYXRvcjMiLCJfdGhpczciLCJfc3RlcDQiLCJfaXRlcmF0b3I0IiwiX3N0ZXA0JHZhbHVlIiwiX3ZhbHVlIiwia2V5RXhpc3RlZCIsIl92YWx1ZTIiLCJpdGVyMSIsIml0ZXIyIiwibmV4dDEiLCJuZXh0MiIsIl9jcmVhdGVDbGFzcyIsIk9ic2VydmFibGVTZXRNYXJrZXIiLCJfU3ltYm9sJGl0ZXJhdG9yJDEiLCJfU3ltYm9sJHRvU3RyaW5nVGFnJDEiLCJjYWxsYmFja0ZuIiwiX2NoYW5nZTIiLCJvYnNlcnZhYmxlVmFsdWVzIiwiZGVzY3JpcHRvckNhY2hlIiwiUkVNT1ZFIiwiT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uIiwiZGVmYXVsdEFubm90YXRpb25fIiwiYXBwbGllZEFubm90YXRpb25zXyIsInBlbmRpbmdLZXlzXyIsImdldE9ic2VydmFibGVQcm9wVmFsdWVfIiwic2V0T2JzZXJ2YWJsZVByb3BWYWx1ZV8iLCJfdGhpcyR0YXJnZXRfJHN0b3JlZEEiLCJvdXRjb21lIiwicmVjb3JkQW5ub3RhdGlvbkFwcGxpZWQiLCJkZWxldGVPdXRjb21lIiwibm90aWZ5UHJvcGVydHlBZGRpdGlvbl8iLCJjYWNoZWREZXNjcmlwdG9yIiwiZ2V0Q2FjaGVkT2JzZXJ2YWJsZVByb3BEZXNjcmlwdG9yIiwiX3RoaXMkcGVuZGluZ0tleXNfIiwiX3RoaXMkcGVuZGluZ0tleXNfJGdlIiwiX3RoaXMkcGVuZGluZ0tleXNfMiIsIl90aGlzJHBlbmRpbmdLZXlzXzIkZyIsImtleXNfIiwiX29wdGlvbnMkbmFtZSIsIl9vcHRpb25zJGRlZmF1bHREZWNvciIsImdldEFubm90YXRpb25Gcm9tT3B0aW9ucyIsImlzT2JzZXJ2YWJsZU9iamVjdEFkbWluaXN0cmF0aW9uIiwiX2FkbSR0YXJnZXRfJHN0b3JlZEFuIiwiRU5UUllfMCIsImNyZWF0ZUFycmF5RW50cnlEZXNjcmlwdG9yIiwiT0JTRVJWQUJMRV9BUlJBWV9CVUZGRVJfU0laRSIsIlN0dWJBcnJheSIsIkxlZ2FjeU9ic2VydmFibGVBcnJheSIsIl9TdHViQXJyYXkiLCJfYXNzZXJ0VGhpc0luaXRpYWxpemVkIiwiYXJyYXlzIiwiY3JlYXRlQXJyYXlCdWZmZXJJdGVtIiwiZ2V0RGVidWdOYW1lIiwiX29ic2VydmFibGUiLCJnZXRBZG1pbmlzdHJhdGlvbiIsIm5hbWVkIiwiZXEiLCJhU3RhY2siLCJiU3RhY2siLCJ1bndyYXAiLCJhcmVBcnJheXMiLCJhQ3RvciIsImJDdG9yIiwiZ2V0U2VsZiIsIl9fTU9CWF9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiaW5qZWN0TW9ieCIsInNweSIsImV4dHJhcyIsIkNhcnRTdG9yZSIsIl9jYXJ0SXRlbXMiLCJjYXJ0SXRlbXMiLCJhZGRUb0NhcnQiLCJyZW1vdmVGcm9tQ2FydCIsInJlc2V0Q2FydCIsInNldENhcnRJdGVtcyIsImZpbmQiLCJjYXJ0SXRlbSIsInByb2R1Y3QiLCJxdWFudGl0eSIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJRdWVyeVBhcmFtc1N0b3JlIiwiX3BhcmFtcyIsInNldFNlYXJjaCIsIl9zZWFyY2giLCJxcyIsIlJvb3RTdG9yZSIsImRlZmF1bHROb29wQmF0Y2giLCJwcmludERlYnVnVmFsdWUiLCJGaW5hbGl6YXRpb25SZWdpc3RyeUxvY2FsIiwiY3JlYXRlVHJhY2tpbmdEYXRhIiwibW91bnRlZCIsImNoYW5nZWRCZWZvcmVNb3VudCIsImNsZWFuQXQiLCJDTEVBTlVQX0xFQUtFRF9SRUFDVElPTlNfQUZURVJfTUlMTElTIiwiQ0xFQU5VUF9USU1FUl9MT09QX01JTExJUyIsIl9hIiwiRmluYWxpemF0aW9uUmVnaXN0cnlNYXliZVVuZGVmaW5lZCIsImNsZWFudXBUb2tlblRvUmVhY3Rpb25UcmFja2luZ01hcCIsImdsb2JhbENsZWFudXBUb2tlbnNDb3VudGVyIiwicmVnaXN0cnkiLCJ0b2tlbiIsInRyYWNrZWRSZWFjdGlvbiIsImFkZFJlYWN0aW9uVG9UcmFjayIsInJlYWN0aW9uVHJhY2tpbmdSZWYiLCJvYmplY3RSZXRhaW5lZEJ5UmVhY3QiLCJyZWdpc3RlciIsImZpbmFsaXphdGlvblJlZ2lzdHJ5Q2xlYW51cFRva2VuIiwicmVjb3JkUmVhY3Rpb25Bc0NvbW1pdHRlZCIsInJlYWN0aW9uUmVmIiwidW5yZWdpc3RlciIsImZvcmNlQ2xlYW51cFRpbWVyVG9SdW5Ob3dGb3JUZXN0cyIsInJlc2V0Q2xlYW51cFNjaGVkdWxlRm9yVGVzdHMiLCJjcmVhdGVSZWFjdGlvbkNsZWFudXBUcmFja2luZ1VzaW5nRmluYWxpemF0aW9uUmVnaXN0ZXIiLCJyZWFjdGlvbkNsZWFudXBIYW5kbGUiLCJ1bmNvbW1pdHRlZFJlYWN0aW9uUmVmcyIsImVuc3VyZUNsZWFudXBUaW1lclJ1bm5pbmciLCJjbGVhblVuY29tbWl0dGVkUmVhY3Rpb25zIiwidHJhY2tpbmciLCJ1bmNvbW1pdHRlZFJlYWN0aW9uUmVmc18xIiwiX192YWx1ZXMiLCJ1bmNvbW1pdHRlZFJlYWN0aW9uUmVmc18xXzEiLCJjcmVhdGVUaW1lckJhc2VkUmVhY3Rpb25DbGVhbnVwVHJhY2tpbmciLCJnbG9iYWxJc1VzaW5nU3RhdGljUmVuZGVyaW5nIiwiaXNVc2luZ1N0YXRpY1JlbmRlcmluZyIsIm9ic2VydmVyQ29tcG9uZW50TmFtZUZvciIsImJhc2VDb21wb25lbnROYW1lIiwiT2JqZWN0VG9CZVJldGFpbmVkQnlSZWFjdCIsIm9iamVjdFRvQmVSZXRhaW5lZEJ5UmVhY3RGYWN0b3J5IiwiaGFzU3ltYm9sIiwiUmVhY3RGb3J3YXJkUmVmU3ltYm9sIiwiUmVhY3RNZW1vU3ltYm9sIiwib2JzZXJ2ZXIiLCJiYXNlQ29tcG9uZW50IiwidXNlRm9yd2FyZFJlZiIsIm9ic2VydmVyQ29tcG9uZW50IiwiX19yZWFkIiwibmV3UmVhY3Rpb24iLCJ0cmFja2luZ0RhdGFfMSIsInVzZU9ic2VydmVyIiwiaG9pc3RCbGFja0xpc3QiLCJvYnNlcnZlckJhdGNoaW5nIiwiYmF0Y2giLCJDYXJ0IiwiX3Jvb3RTdG9yZSRjYXJ0JGNhcnRJIiwicm9vdFN0b3JlIiwic3VidG90YWxQcmljZSIsInRvdGFsIiwicHJpY2UiLCJ0b0ZpeGVkIiwiY2xzIiwiaW1hZ2VzIiwidGl0bGUiLCJkZXNjcmlwdGlvbiIsIlRyYXNoSWNvbiIsIkFOSU1BVElPTl9ERUxBWSIsIk1vZGFsIiwiaXNPcGVuIiwib25DbG9zZSIsIl91c2VTdGF0ZTIiLCJpc0Nsb3NpbmciLCJzZXRJc0Nsb3NpbmciLCJ0aW1lUmVmIiwib25DbG9zZUhhbmRsZXIiLCJvbktleWRvd24iLCJOYXZiYXIiLCJvcGVuIiwic2V0T3BlbiIsIkxvZ29JY29uIiwiQmFnSWNvbiIsIlVzZXJJY29uIiwiQ2FyZCIsImltYWdlIiwiY2F0ZWdvcnkiLCJzdWJ0aXRsZSIsImNvbnRlbnQiLCJBUElfRU5EUE9JTlRTIiwia2luZE9mIiwia2luZE9mVGVzdCIsInR5cGVPZlRlc3QiLCJpc1VuZGVmaW5lZCIsImlzQXJyYXlCdWZmZXIiLCJpc0ZpbGUiLCJpc0Jsb2IiLCJpc0ZpbGVMaXN0IiwiaXNVUkxTZWFyY2hQYXJhbXMiLCJfcmVmJGFsbE93bktleXMiLCJhbGxPd25LZXlzIiwibGVuIiwiZmluZEtleSIsIl9nbG9iYWwiLCJpc0NvbnRleHREZWZpbmVkIiwiaXNUeXBlZEFycmF5IiwiaXNIVE1MRm9ybSIsInJlZHVjZURlc2NyaXB0b3JzIiwicmVkdWNlciIsInJlZHVjZWREZXNjcmlwdG9ycyIsImRlZmluZVByb3BlcnRpZXMiLCJBTFBIQSIsIkRJR0lUIiwiQUxQSEFCRVQiLCJBTFBIQV9ESUdJVCIsImlzRm9ybURhdGEiLCJGb3JtRGF0YSIsImlzQXJyYXlCdWZmZXJWaWV3IiwiaXNWaWV3IiwiYnVmZmVyIiwiaXNTdHJlYW0iLCJwaXBlIiwiY2FzZWxlc3MiLCJhc3NpZ25WYWx1ZSIsInRhcmdldEtleSIsInN0cmlwQk9NIiwiaW5oZXJpdHMiLCJzdXBlckNvbnN0cnVjdG9yIiwidG9GbGF0T2JqZWN0Iiwic291cmNlT2JqIiwiZGVzdE9iaiIsInByb3BGaWx0ZXIiLCJtZXJnZWQiLCJzZWFyY2hTdHJpbmciLCJwb3NpdGlvbiIsImxhc3RJbmRleCIsImZvckVhY2hFbnRyeSIsInBhaXIiLCJtYXRjaEFsbCIsInJlZ0V4cCIsImhhc093blByb3AiLCJmcmVlemVNZXRob2RzIiwidG9PYmplY3RTZXQiLCJhcnJheU9yU3RyaW5nIiwidG9DYW1lbENhc2UiLCJwMSIsInAyIiwidG9GaW5pdGVOdW1iZXIiLCJnZW5lcmF0ZVN0cmluZyIsImFscGhhYmV0IiwiaXNTcGVjQ29tcGxpYW50Rm9ybSIsInRvSlNPTk9iamVjdCIsInZpc2l0IiwicmVkdWNlZFZhbHVlIiwiQXhpb3NFcnJvciIsImNvbmZpZyIsInJlcXVlc3QiLCJyZXNwb25zZSIsImNhcHR1cmVTdGFja1RyYWNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwiY29sdW1uTnVtYmVyIiwiY3VzdG9tUHJvcHMiLCJheGlvc0Vycm9yIiwiaXNWaXNpdGFibGUiLCJyZW1vdmVCcmFja2V0cyIsInJlbmRlcktleSIsImRvdHMiLCJwcmVkaWNhdGVzIiwiZm9ybURhdGEiLCJtZXRhVG9rZW5zIiwiaW5kZXhlcyIsIm9wdGlvbiIsInZpc2l0b3IiLCJkZWZhdWx0VmlzaXRvciIsInVzZUJsb2IiLCJCbG9iIiwiY29udmVydFZhbHVlIiwiQnVmZmVyIiwiaXNGbGF0QXJyYXkiLCJleHBvc2VkSGVscGVycyIsImJ1aWxkIiwiY2hhck1hcCIsIkF4aW9zVVJMU2VhcmNoUGFyYW1zIiwiX3BhaXJzIiwidG9Gb3JtRGF0YSIsIl9lbmNvZGUiLCJidWlsZFVSTCIsInNlcmlhbGl6ZWRQYXJhbXMiLCJzZXJpYWxpemVGbiIsInNlcmlhbGl6ZSIsImhhc2htYXJrSW5kZXgiLCJfZGVmaW5lUHJvcGVydGllcyIsImhpbnQiLCJwcmltIiwiX3RvUHJpbWl0aXZlIiwiSW50ZXJjZXB0b3JNYW5hZ2VyIiwiQ29uc3RydWN0b3IiLCJoYW5kbGVycyIsInByb3RvUHJvcHMiLCJmdWxmaWxsZWQiLCJyZWplY3RlZCIsInN5bmNocm9ub3VzIiwicnVuV2hlbiIsInNpbGVudEpTT05QYXJzaW5nIiwiZm9yY2VkSlNPTlBhcnNpbmciLCJjbGFyaWZ5VGltZW91dEVycm9yIiwiaXNTdGFuZGFyZEJyb3dzZXJFbnYiLCJpc1N0YW5kYXJkQnJvd3NlcldlYldvcmtlckVudiIsIldvcmtlckdsb2JhbFNjb3BlIiwicHJvdG9jb2xzIiwiYnVpbGRQYXRoIiwiaXNOdW1lcmljS2V5IiwiaXNMYXN0IiwicGFyc2VQcm9wUGF0aCIsIkRFRkFVTFRfQ09OVEVOVF9UWVBFIiwidHJhbnNpdGlvbmFsIiwidHJhbnNpdGlvbmFsRGVmYXVsdHMiLCJhZGFwdGVyIiwidHJhbnNmb3JtUmVxdWVzdCIsImhlYWRlcnMiLCJjb250ZW50VHlwZSIsImdldENvbnRlbnRUeXBlIiwiaGFzSlNPTkNvbnRlbnRUeXBlIiwiaXNPYmplY3RQYXlsb2FkIiwiZm9ybURhdGFUb0pTT04iLCJzZXRDb250ZW50VHlwZSIsInBsYXRmb3JtIiwiaGVscGVycyIsInRvVVJMRW5jb2RlZEZvcm0iLCJmb3JtU2VyaWFsaXplciIsIl9Gb3JtRGF0YSIsImVudiIsInJhd1ZhbHVlIiwicGFyc2VyIiwic3RyaW5naWZ5U2FmZWx5IiwidHJhbnNmb3JtUmVzcG9uc2UiLCJKU09OUmVxdWVzdGVkIiwicmVzcG9uc2VUeXBlIiwic3RyaWN0SlNPTlBhcnNpbmciLCJ0aW1lb3V0IiwieHNyZkNvb2tpZU5hbWUiLCJ4c3JmSGVhZGVyTmFtZSIsIm1heENvbnRlbnRMZW5ndGgiLCJtYXhCb2R5TGVuZ3RoIiwidmFsaWRhdGVTdGF0dXMiLCJjb21tb24iLCJpZ25vcmVEdXBsaWNhdGVPZiIsIl9hcnJheUxpa2VUb0FycmF5IiwiYXJyMiIsIiRpbnRlcm5hbHMiLCJub3JtYWxpemVIZWFkZXIiLCJoZWFkZXIiLCJub3JtYWxpemVWYWx1ZSIsIm1hdGNoSGVhZGVyVmFsdWUiLCJpc0hlYWRlck5hbWVGaWx0ZXIiLCJBeGlvc0hlYWRlcnMiLCJzdGF0aWNQcm9wcyIsInZhbHVlT3JSZXdyaXRlIiwicmV3cml0ZSIsInNldEhlYWRlciIsIl9oZWFkZXIiLCJfcmV3cml0ZSIsImxIZWFkZXIiLCJyYXdIZWFkZXJzIiwicGFyc2VkIiwic2V0SGVhZGVycyIsImxpbmUiLCJ0b2tlbnMiLCJ0b2tlbnNSRSIsInBhcnNlVG9rZW5zIiwiZGVsZXRlZCIsImRlbGV0ZUhlYWRlciIsIm5vcm1hbGl6ZWQiLCJmb3JtYXRIZWFkZXIiLCJfdGhpcyRjb25zdHJ1Y3RvciIsInRhcmdldHMiLCJhc1N0cmluZ3MiLCJfYXJyYXlXaXRoSG9sZXMiLCJfcyIsIl9lIiwiX3giLCJfciIsIl9hcnIiLCJfbiIsIl9kIiwiX2l0ZXJhYmxlVG9BcnJheUxpbWl0IiwibWluTGVuIiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiX25vbkl0ZXJhYmxlUmVzdCIsImFjY2Vzc29ycyIsImRlZmluZUFjY2Vzc29yIiwiYWNjZXNzb3JOYW1lIiwiYnVpbGRBY2Nlc3NvcnMiLCJhY2Nlc3NvciIsInRyYW5zZm9ybURhdGEiLCJmbnMiLCJub3JtYWxpemUiLCJpc0NhbmNlbCIsIl9fQ0FOQ0VMX18iLCJDYW5jZWxlZEVycm9yIiwid3JpdGUiLCJleHBpcmVzIiwiZG9tYWluIiwic2VjdXJlIiwiY29va2llIiwidG9HTVRTdHJpbmciLCJyZWFkIiwiYnVpbGRGdWxsUGF0aCIsImJhc2VVUkwiLCJyZXF1ZXN0ZWRVUkwiLCJyZWxhdGl2ZVVSTCIsImNvbWJpbmVVUkxzIiwib3JpZ2luVVJMIiwibXNpZSIsInVzZXJBZ2VudCIsInVybFBhcnNpbmdOb2RlIiwicmVzb2x2ZVVSTCIsImhvc3QiLCJob3N0bmFtZSIsInBvcnQiLCJyZXF1ZXN0VVJMIiwic2FtcGxlc0NvdW50IiwiZmlyc3RTYW1wbGVUUyIsImJ5dGVzIiwidGltZXN0YW1wcyIsImhlYWQiLCJjaHVua0xlbmd0aCIsInN0YXJ0ZWRBdCIsImJ5dGVzQ291bnQiLCJwYXNzZWQiLCJyb3VuZCIsInByb2dyZXNzRXZlbnRSZWR1Y2VyIiwiaXNEb3dubG9hZFN0cmVhbSIsImJ5dGVzTm90aWZpZWQiLCJfc3BlZWRvbWV0ZXIiLCJzcGVlZG9tZXRlciIsImxlbmd0aENvbXB1dGFibGUiLCJwcm9ncmVzc0J5dGVzIiwicmF0ZSIsInByb2dyZXNzIiwiZXN0aW1hdGVkIiwia25vd25BZGFwdGVycyIsImh0dHAiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsIm9uQ2FuY2VsZWQiLCJyZXF1ZXN0RGF0YSIsInJlcXVlc3RIZWFkZXJzIiwiY2FuY2VsVG9rZW4iLCJ1bnN1YnNjcmliZSIsInNpZ25hbCIsImF1dGgiLCJ1c2VybmFtZSIsImJ0b2EiLCJmdWxsUGF0aCIsIm9ubG9hZGVuZCIsInJlc3BvbnNlSGVhZGVycyIsImdldEFsbFJlc3BvbnNlSGVhZGVycyIsInNldHRsZSIsInJlc3BvbnNlVGV4dCIsInBhcmFtc1NlcmlhbGl6ZXIiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwicmVzcG9uc2VVUkwiLCJvbmFib3J0Iiwib25lcnJvciIsIm9udGltZW91dCIsInRpbWVvdXRFcnJvck1lc3NhZ2UiLCJ4c3JmVmFsdWUiLCJ3aXRoQ3JlZGVudGlhbHMiLCJpc1VSTFNhbWVPcmlnaW4iLCJjb29raWVzIiwic2V0UmVxdWVzdEhlYWRlciIsIm9uRG93bmxvYWRQcm9ncmVzcyIsIm9uVXBsb2FkUHJvZ3Jlc3MiLCJ1cGxvYWQiLCJhYm9ydCIsInN1YnNjcmliZSIsImFib3J0ZWQiLCJzZW5kIiwiZ2V0QWRhcHRlciIsImFkYXB0ZXJzIiwibmFtZU9yQWRhcHRlciIsInRocm93SWZDYW5jZWxsYXRpb25SZXF1ZXN0ZWQiLCJ0aHJvd0lmUmVxdWVzdGVkIiwiZGlzcGF0Y2hSZXF1ZXN0IiwicmVhc29uIiwiaGVhZGVyc1RvT2JqZWN0IiwibWVyZ2VDb25maWciLCJjb25maWcxIiwiY29uZmlnMiIsImdldE1lcmdlZFZhbHVlIiwibWVyZ2VEZWVwUHJvcGVydGllcyIsInZhbHVlRnJvbUNvbmZpZzIiLCJkZWZhdWx0VG9Db25maWcyIiwibWVyZ2VEaXJlY3RLZXlzIiwibWVyZ2VNYXAiLCJ0aW1lb3V0TWVzc2FnZSIsImRlY29tcHJlc3MiLCJiZWZvcmVSZWRpcmVjdCIsInRyYW5zcG9ydCIsImh0dHBBZ2VudCIsImh0dHBzQWdlbnQiLCJzb2NrZXRQYXRoIiwicmVzcG9uc2VFbmNvZGluZyIsImNvbmZpZ1ZhbHVlIiwiVkVSU0lPTiIsInZhbGlkYXRvcnMiLCJkZXByZWNhdGVkV2FybmluZ3MiLCJ2YWxpZGF0b3IiLCJmb3JtYXRNZXNzYWdlIiwib3B0IiwiYXNzZXJ0T3B0aW9ucyIsInNjaGVtYSIsImFsbG93VW5rbm93biIsIkF4aW9zIiwiaW5zdGFuY2VDb25maWciLCJjb25maWdPclVybCIsImNvbnRleHRIZWFkZXJzIiwiX2NvbmZpZyIsImJvb2xlYW4iLCJmdW5jdGlvbiIsInJlcXVlc3RJbnRlcmNlcHRvckNoYWluIiwic3luY2hyb25vdXNSZXF1ZXN0SW50ZXJjZXB0b3JzIiwiaW50ZXJjZXB0b3IiLCJyZXNwb25zZUludGVyY2VwdG9yQ2hhaW4iLCJuZXdDb25maWciLCJnZW5lcmF0ZUhUVFBNZXRob2QiLCJpc0Zvcm0iLCJDYW5jZWxUb2tlbiIsImV4ZWN1dG9yIiwicmVzb2x2ZVByb21pc2UiLCJfbGlzdGVuZXJzIiwib25mdWxmaWxsZWQiLCJfcmVzb2x2ZSIsIkh0dHBTdGF0dXNDb2RlIiwiQ29udGludWUiLCJTd2l0Y2hpbmdQcm90b2NvbHMiLCJQcm9jZXNzaW5nIiwiRWFybHlIaW50cyIsIkNyZWF0ZWQiLCJBY2NlcHRlZCIsIk5vbkF1dGhvcml0YXRpdmVJbmZvcm1hdGlvbiIsIk5vQ29udGVudCIsIlJlc2V0Q29udGVudCIsIlBhcnRpYWxDb250ZW50IiwiTXVsdGlTdGF0dXMiLCJBbHJlYWR5UmVwb3J0ZWQiLCJJbVVzZWQiLCJNdWx0aXBsZUNob2ljZXMiLCJNb3ZlZFBlcm1hbmVudGx5IiwiRm91bmQiLCJTZWVPdGhlciIsIk5vdE1vZGlmaWVkIiwiVXNlUHJveHkiLCJVbnVzZWQiLCJUZW1wb3JhcnlSZWRpcmVjdCIsIlBlcm1hbmVudFJlZGlyZWN0IiwiQmFkUmVxdWVzdCIsIlVuYXV0aG9yaXplZCIsIlBheW1lbnRSZXF1aXJlZCIsIkZvcmJpZGRlbiIsIk5vdEZvdW5kIiwiTWV0aG9kTm90QWxsb3dlZCIsIk5vdEFjY2VwdGFibGUiLCJQcm94eUF1dGhlbnRpY2F0aW9uUmVxdWlyZWQiLCJSZXF1ZXN0VGltZW91dCIsIkNvbmZsaWN0IiwiR29uZSIsIkxlbmd0aFJlcXVpcmVkIiwiUHJlY29uZGl0aW9uRmFpbGVkIiwiUGF5bG9hZFRvb0xhcmdlIiwiVXJpVG9vTG9uZyIsIlVuc3VwcG9ydGVkTWVkaWFUeXBlIiwiUmFuZ2VOb3RTYXRpc2ZpYWJsZSIsIkV4cGVjdGF0aW9uRmFpbGVkIiwiSW1BVGVhcG90IiwiTWlzZGlyZWN0ZWRSZXF1ZXN0IiwiVW5wcm9jZXNzYWJsZUVudGl0eSIsIkxvY2tlZCIsIkZhaWxlZERlcGVuZGVuY3kiLCJUb29FYXJseSIsIlVwZ3JhZGVSZXF1aXJlZCIsIlByZWNvbmRpdGlvblJlcXVpcmVkIiwiVG9vTWFueVJlcXVlc3RzIiwiUmVxdWVzdEhlYWRlckZpZWxkc1Rvb0xhcmdlIiwiVW5hdmFpbGFibGVGb3JMZWdhbFJlYXNvbnMiLCJJbnRlcm5hbFNlcnZlckVycm9yIiwiTm90SW1wbGVtZW50ZWQiLCJCYWRHYXRld2F5IiwiU2VydmljZVVuYXZhaWxhYmxlIiwiR2F0ZXdheVRpbWVvdXQiLCJIdHRwVmVyc2lvbk5vdFN1cHBvcnRlZCIsIlZhcmlhbnRBbHNvTmVnb3RpYXRlcyIsIkluc3VmZmljaWVudFN0b3JhZ2UiLCJMb29wRGV0ZWN0ZWQiLCJOb3RFeHRlbmRlZCIsIk5ldHdvcmtBdXRoZW50aWNhdGlvblJlcXVpcmVkIiwiYXhpb3MiLCJjcmVhdGVJbnN0YW5jZSIsImRlZmF1bHRDb25maWciLCJDYW5jZWwiLCJhbGwiLCJwcm9taXNlcyIsInNwcmVhZCIsImlzQXhpb3NFcnJvciIsImZvcm1Ub0pTT04iLCJfcmVnZW5lcmF0b3JSdW50aW1lIiwiYXN5bmNHZW5lcmF0b3JTdGVwIiwiX25leHQiLCJfdGhyb3ciLCJfYXN5bmNUb0dlbmVyYXRvciIsIl90b1Byb3BlcnR5S2V5IiwiUHJvZHVjdERldGFpbFN0b3JlIiwiaW5pdGlhbCIsIl9yZWxhdGVkUHJvZHVjdHNMaXN0IiwiX3Byb2R1Y3REZXRhaWwiLCJfbWV0YSIsIl9zZWxlY3RlZEltYWdlSW5kZXgiLCJwcm9kdWN0RGV0YWlsIiwic2VsZWN0ZWRJbWFnZUluZGV4IiwicmVsYXRlZFByb2R1Y3RzTGlzdCIsImdldFByb2R1Y3REZXRhaWwiLCJnZXRSZWxhdGVkUHJvZHVjdHNMaXN0IiwibmV4dFNsaWRlIiwicHJldlNsaWRlIiwiX2dldFJlbGF0ZWRQcm9kdWN0c0xpc3QiLCJfZ2V0UHJvZHVjdERldGFpbCIsIl9jYWxsZWUiLCJfdGhpcyRfcHJvZHVjdERldGFpbCIsInQwIiwiX2NhbGxlZTIiLCJjYXRlZ29yeUlkIiwiX2NvbnRleHQyIiwiZmlsdGVyZWREYXRhIiwiX3RoaXMyJF9wcm9kdWN0RGV0YWlsIiwiX3gyIiwiUHJvZHVjdERldGFpbCIsIl9wcm9kdWN0RGV0YWlsU3RvcmUkcCIsIl9wcm9kdWN0RGV0YWlsU3RvcmUkcDIiLCJfcHJvZHVjdERldGFpbFN0b3JlJHAzIiwiX3Byb2R1Y3REZXRhaWxTdG9yZSRwNCIsIl9wcm9kdWN0RGV0YWlsU3RvcmUkcDUiLCJpbml0aWFsaXplciIsInByb2R1Y3REZXRhaWxTdG9yZSIsInVzZUFzT2JzZXJ2YWJsZVNvdXJjZSIsInByb2R1Y3RJZCIsIkRyb3Bkb3duIiwib25DaGFuZ2UiLCJzZXRJc29wZW4iLCJpc1NlbGVjdGVkIiwic2VsZWN0ZWRPcHRpb24iLCJGaWx0ZXJJY29uIiwiaHRtbEZvciIsInJlbmRlckRyb3BEb3duIiwiSW5wdXQiLCJfYXJyYXlXaXRob3V0SG9sZXMiLCJfaXRlcmFibGVUb0FycmF5IiwiX25vbkl0ZXJhYmxlU3ByZWFkIiwiUHJvZHVjdHNTdG9yZSIsImV4cHJlc3Npb24iLCJlZmZlY3QiLCJlcnJvckhhbmRsZXIiLCJiYXNlRm4iLCJfb3B0cyRuYW1lMiIsImVmZmVjdEFjdGlvbiIsInJ1blN5bmMiLCJuZXh0VmFsdWUiLCJfc2VhcmNoVGl0bGUiLCJfdG90YWxQcm9kdWN0c0xpc3QiLCJfdG90YWxQcm9kdWN0c0NvdW50IiwiX3Byb2R1Y3RzUGFnZSIsIl9oYXNNb3JlRGF0YSIsIl9jYXRlZ29yaWVzTGlzdCIsIl9maWx0ZXJWYWx1ZSIsIl9jYXRlZ29yeUlkIiwiX3NlYXJjaENhdGVnb3J5IiwidG90YWxQcm9kdWN0c0xpc3QiLCJ0b3RhbFByb2R1Y3RzQ291bnQiLCJzZWFyY2hUaXRsZSIsImhhc01vcmVEYXRhIiwicHJvZHVjdHNQYWdlIiwiY2F0ZWdvcmllc0xpc3QiLCJmaWx0ZXJWYWx1ZSIsImdldFByb2R1Y3RzTGlzdCIsImdldFRvdGFsUHJvZHVjdENvdW50IiwiY2xlYXJQcm9kdWN0TGlzdCIsInNldFByb2R1Y3RzUGFnZSIsInNldEhhc01vcmVEYXRhIiwic2V0U2VhcmNoVGl0bGUiLCJzZXRNZXRhIiwiZ2V0Q2F0ZWdvcmllc0xpc3QiLCJjaGFuZ2VGaWx0ZXJPcHRpb25zIiwic2V0Q2F0ZWdvcnlJZCIsInNldFNlYXJjaENhdGVnb3J5IiwiX2dldENhdGVnb3JpZXNMaXN0IiwiX2dldFRvdGFsUHJvZHVjdENvdW50IiwiX2dldFByb2R1Y3RzTGlzdCIsInN1Y2Nlc3MiLCJfY2FsbGVlMyIsImNhdGVnb3JpZXMiLCJfY29udGV4dDMiLCJfcXBSZWFjdGlvbiIsImV4dGVuZFN0YXRpY3MiLCJfX2Fzc2lnbiIsIm5vVHJhaWxpbmciLCJkZWJvdW5jZU1vZGUiLCJ0aW1lb3V0SUQiLCJjYW5jZWxsZWQiLCJsYXN0RXhlYyIsImNsZWFyRXhpc3RpbmdUaW1lb3V0Iiwid3JhcHBlciIsImVsYXBzZWQiLCJfXyIsIlByb2R1Y3RzIiwiY3JlYXRvciIsImNvbnRhaW5lciIsIl91c2VTZWFyY2hQYXJhbXMyIiwicHJvZHVjdHNTdG9yZSIsIl9jb250YWluZXIkY3VycmVudCIsInNlYXJjaEhhbmRsZXIiLCJoYW5kbGVHZXRQcm9kdWN0c0xpc3QiLCJnZXROZXh0UHJvZHVjdFBhZ2UiLCJTZWFyY2hJY29uIiwicGxhY2Vob2xkZXIiLCJJbmZpbml0ZVNjcm9sbCIsImRhdGFMZW5ndGgiLCJoYXNNb3JlIiwiZW5kTWVzc2FnZSIsImNhcnRGaWVsZCIsImdldEl0ZW0iLCJSZWFjdERPTSIsImdldEVsZW1lbnRCeUlkIiwiQXBwIl0sInNvdXJjZVJvb3QiOiIifQ==